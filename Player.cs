using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Box2D.XNA;
using Lidgren.Network;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using SFD.Code;
using SFD.Core;
using SFD.Effects;
using SFD.GameKeyboard;
using SFD.Input;
using SFD.ManageLists;
using SFD.Materials;
using SFD.Objects;
using SFD.PathGrid;
using SFD.Projectiles;
using SFD.Sounds;
using SFD.States;
using SFD.Tiles;
using SFD.Weapons;
using SFDGameScriptInterface;

namespace SFD
{
	// Token: 0x0200033F RID: 831
	public class Player
	{
		// Token: 0x06003919 RID: 14617 RVA: 0x000E0D50 File Offset: 0x000DEF50
		private bool UpdateAIRocketRiding(float totalMs, Player.BotAITargetData targetData)
		{
			if (this.RocketRideProjectileWorldID == 0)
			{
				return false;
			}
			if (this.m_botBehaviorSet.RocketRideProficiency <= 0f || !targetData.HasTarget || targetData.FinalTarget == null)
			{
				return true;
			}
			Projectile rocketRideProjectile = this.RocketRideProjectile;
			if (rocketRideProjectile == null)
			{
				return false;
			}
			this.m_botAIRocketRideFlightTime += totalMs;
			if (!targetData.IsPlayer && !(targetData.CurrentTarget is ObjectStreetsweeper))
			{
				return true;
			}
			if (this.m_botAIRocketRideFlightTime > 10000f - (1f - this.m_botBehaviorSet.RocketRideProficiency) * 7000f)
			{
				return true;
			}
			if (this.m_botAIRocketRideLastTurn == 3)
			{
				this.m_botAIRocketRideSameTurnTime += totalMs;
				if (this.m_botAIRocketRideSameTurnTime <= 120f + (1f - this.m_botBehaviorSet.RocketRideProficiency) * 240f)
				{
					return true;
				}
				this.m_botAIRocketRideLastTurn = 0;
				this.m_botAIRocketRideSameTurnTime = 0f;
			}
			byte b = 0;
			float num = Microsoft.Xna.Framework.Vector2.Dot(targetData.Direction, rocketRideProjectile.Direction);
			if (num <= -0.5f && Microsoft.Xna.Framework.Vector2.Dot(targetData.Direction, -Microsoft.Xna.Framework.Vector2.UnitY) <= 0.8f)
			{
				if (this.m_botAIRocketRideFlightTime > 100f + (1f - this.m_botBehaviorSet.RocketRideProficiency) * 400f)
				{
					if (rocketRideProjectile.Direction.X > 0f)
					{
						this.KeyActionLeft(Player.PressKeyType.Hold);
						b = 2;
					}
					else
					{
						this.KeyActionRight(Player.PressKeyType.Hold);
						b = 1;
					}
				}
			}
			else if (num < 0.95f - (1f - this.m_botBehaviorSet.RocketRideProficiency) * 0.12f)
			{
				float relativeOrientationToPlaneForPoint = SFDMath.GetRelativeOrientationToPlaneForPoint(rocketRideProjectile.Position, rocketRideProjectile.Direction, targetData.FinalTarget.GetWorldPosition());
				if (relativeOrientationToPlaneForPoint < 0f)
				{
					this.KeyActionLeft(Player.PressKeyType.Hold);
					b = 2;
				}
				else
				{
					this.KeyActionRight(Player.PressKeyType.Hold);
					b = 1;
				}
			}
			if (b != 0)
			{
				if (this.m_botAIRocketRideLastTurn != b)
				{
					this.m_botAIRocketRideLastTurn = b;
					this.m_botAIRocketRideSameTurnTime = 0f;
				}
				this.m_botAIRocketRideSameTurnTime += totalMs;
			}
			else if (this.m_botAIRocketRideSameTurnTime > 0f)
			{
				this.m_botAIRocketRideSameTurnTime -= totalMs;
			}
			if (this.m_botAIRocketRideSameTurnTime > 800f + (1f - this.m_botBehaviorSet.RocketRideProficiency) * 600f)
			{
				num = Microsoft.Xna.Framework.Vector2.Dot(rocketRideProjectile.Direction, Microsoft.Xna.Framework.Vector2.UnitY);
				if (num > 0.2f)
				{
					this.m_botAIRocketRideLastTurn = 3;
					this.m_botAIRocketRideSameTurnTime = 0f;
				}
			}
			return true;
		}

		// Token: 0x0600391A RID: 14618 RVA: 0x000E0FBC File Offset: 0x000DF1BC
		internal List<Player> BotAIGetRealUserTeammates()
		{
			if (this.CurrentTeam == Team.Independent)
			{
				return null;
			}
			List<Player> list = null;
			for (int i = 0; i < this.GameWorld.Players.Count; i++)
			{
				Player player = this.GameWorld.Players[i];
				if (player != this && !player.IsDisposed && player.IsUserControlled && player.InSameTeam(player))
				{
					if (list == null)
					{
						list = new List<Player>();
					}
					list.Add(player);
				}
			}
			return list;
		}

		// Token: 0x0600391B RID: 14619 RVA: 0x000E1030 File Offset: 0x000DF230
		private bool UpdateAICheckWeaponStatus(float totalMs, Player.BotAITargetData targetData)
		{
			if (!this.IsHoldingChainsaw || this.CurrentMeleeWeapon == null || !this.CurrentMeleeWeapon.Durability.IsEmpty)
			{
				if (this.CurrentPowerupItem is WpnStrengthBoost && this.m_botBehaviorSet.PowerupUsage && ((targetData.HasTarget && targetData.DistanceLength < 60f) || this.Health.Fullness < 0.2f) && this.CurrentAction == PlayerAction.Idle && (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee || this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE || this.Health.Fullness < 0.2f) && !this.Sprinting && !this.StrengthBoostActive && !this.StrengthBoostPreparing && this.GetExistTime() > 500f)
				{
					this.KeyAction(12, Player.PressKeyType.Tap);
				}
				if (targetData.IsFarAway && this.GameWorld.ElapsedTotalGameTime - this.m_botAIMeleeSheathToMeleeTimestamp > 1500f && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE && this.CurrentMeleeMakeshiftWeapon == null && !this.Disabled && this.StandingOnGround && this.CurrentAction == PlayerAction.Idle)
				{
					if (this.m_botBehaviorSet.RangedWeaponUsage && (targetData.DistanceLength > 100f || !targetData.HasTarget) && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE)
					{
						RWeapon rweapon = null;
						if (this.CurrentRifleWeapon != null && this.CurrentRifleWeapon.HasAmmoOrCanBeReloaded(this))
						{
							rweapon = this.CurrentRifleWeapon;
						}
						if (this.CurrentHandgunWeapon != null && this.CurrentHandgunWeapon.HasAmmoOrCanBeReloaded(this) && (rweapon == null || this.CurrentHandgunWeapon.Properties.AI_DamageOutput > rweapon.Properties.AI_DamageOutput))
						{
							rweapon = this.CurrentHandgunWeapon;
						}
						if (rweapon != null && this.BotAINav.CurrentIsSafeGround() && this.BotAINav.NextIsSafeGround())
						{
							if (rweapon.Properties.Category == WeaponCategory.Primary)
							{
								this.KeyAction(10, Player.PressKeyType.Tap);
							}
							else
							{
								this.KeyAction(9, Player.PressKeyType.Tap);
							}
							return true;
						}
					}
					if (this.m_botBehaviorSet.MeleeWeaponUsage && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE && this.CurrentMeleeWeapon != null && !this.CurrentMeleeWeapon.Durability.IsEmpty && this.BotAINav.CurrentIsSafeGround() && this.BotAINav.NextIsSafeGround())
					{
						this.KeyAction(8, Player.PressKeyType.Tap);
					}
				}
				return true;
			}
			float num = (float)((NetTime.Now - this.m_pressTimeKeyInput_K_DROP) * 1000.0);
			int num2 = (int)num / 1000;
			if (num2 % 2 == 1)
			{
				return false;
			}
			this.KeyAction(17, Player.PressKeyType.Hold);
			return false;
		}

		// Token: 0x0600391C RID: 14620 RVA: 0x000E12B8 File Offset: 0x000DF4B8
		internal void DrawDebugBotNavPath(DebugDraw b2_debugDraw, bool showExtraInfo)
		{
			GameWorld.PlayerAIPackagePathFinding playerAIPackage = this.GetPlayerAIPackage<GameWorld.PlayerAIPackagePathFinding>();
			Microsoft.Xna.Framework.Vector2 value = new Microsoft.Xna.Framework.Vector2(0.04f, 0.04f);
			if (playerAIPackage.Result != null)
			{
				SimpleLinkedList<ListPathPointNode> result = playerAIPackage.Result;
				if (result != null)
				{
					for (SimpleLinkedList<ListPathPointNode> simpleLinkedList = result; simpleLinkedList != null; simpleLinkedList = simpleLinkedList.Next)
					{
						ListPathPointNode item = simpleLinkedList.Item;
						if (item != null && item.ConnectionToNext != null && item.ConnectionToNext.Connected)
						{
							b2_debugDraw.DrawSegment(item.ConnectionToNext.PathNodeA.Box2DPosition + value, item.ConnectionToNext.PathNodeB.Box2DPosition + value, Microsoft.Xna.Framework.Color.Magenta);
						}
					}
				}
			}
			if (playerAIPackage.HasActivator && playerAIPackage.ActivatorResult != null)
			{
				Microsoft.Xna.Framework.Vector2 value2 = new Microsoft.Xna.Framework.Vector2(0.06f, 0.06f);
				SimpleLinkedList<ListPathPointNode> activatorResult = playerAIPackage.ActivatorResult;
				if (activatorResult != null)
				{
					for (SimpleLinkedList<ListPathPointNode> simpleLinkedList2 = activatorResult; simpleLinkedList2 != null; simpleLinkedList2 = simpleLinkedList2.Next)
					{
						ListPathPointNode item2 = simpleLinkedList2.Item;
						if (item2 != null && item2.ConnectionToNext != null && item2.ConnectionToNext.Connected)
						{
							b2_debugDraw.DrawSegment(item2.ConnectionToNext.PathNodeA.Box2DPosition + value2, item2.ConnectionToNext.PathNodeB.Box2DPosition + value2, Microsoft.Xna.Framework.Color.Yellow);
						}
					}
				}
			}
			if (this.BotAINav.NodeA != null && !this.BotAINav.NodeA.IsOwnerDisposed)
			{
				b2_debugDraw.DrawCircle(this.BotAINav.NodeA.Box2DPosition, 0.099999994f, Microsoft.Xna.Framework.Color.White);
			}
			if (this.BotAINav.NodeB != null && !this.BotAINav.NodeB.IsOwnerDisposed)
			{
				b2_debugDraw.DrawCircle(this.BotAINav.NodeB.Box2DPosition, 0.099999994f, Microsoft.Xna.Framework.Color.White);
			}
			if (this.BotAINav.NodeC != null && !this.BotAINav.NodeC.IsOwnerDisposed)
			{
				b2_debugDraw.DrawCircle(this.BotAINav.NodeC.Box2DPosition, 0.099999994f, Microsoft.Xna.Framework.Color.White);
			}
			if (this.BotAINav.CurrentConnectionNodesSetup)
			{
				b2_debugDraw.DrawSegment(this.BotAINav.NodeA.Box2DPosition - value, this.BotAINav.NodeB.Box2DPosition - value, Microsoft.Xna.Framework.Color.White);
			}
			if (this.BotAINav.NextConnectionNodesValid)
			{
				b2_debugDraw.DrawSegment(this.BotAINav.NodeB.Box2DPosition - value, this.BotAINav.NodeC.Box2DPosition - value, Microsoft.Xna.Framework.Color.White);
			}
			if (showExtraInfo)
			{
				Microsoft.Xna.Framework.Vector2 vector = Camera.ConvertBox2DToScreen(this.PreBox2DPosition);
				b2_debugDraw.DrawString((int)vector.X, (int)vector.Y, this.m_botAINavigationCodePath.ToString());
			}
		}

		// Token: 0x0600391D RID: 14621 RVA: 0x000E157C File Offset: 0x000DF77C
		internal void DrawDebugBotCommandQueue(DebugDraw b2_debugDraw)
		{
			Microsoft.Xna.Framework.Vector2 vector = Camera.ConvertBox2DToScreen(this.PreBox2DPosition + new Microsoft.Xna.Framework.Vector2(-5f, 36f) * 0.04f);
			if (this.m_currentCommandAction != null && !this.m_currentCommandAction.IsDisposed)
			{
				b2_debugDraw.DrawString((int)vector.X, (int)vector.Y, "> " + this.m_currentCommandAction.Command.ToString());
			}
			if (this.m_commandActionQueue.Count > 0)
			{
				int num = 1;
				foreach (Player.PlayerActionCommandItem playerActionCommandItem in this.m_commandActionQueue.ToArray())
				{
					b2_debugDraw.DrawString((int)vector.X, (int)vector.Y - num * 20, "  " + playerActionCommandItem.Command.ToString());
					num++;
				}
			}
		}

		// Token: 0x0600391E RID: 14622 RVA: 0x000E166C File Offset: 0x000DF86C
		internal void DrawDebugBotLOS(DebugDraw b2_debugDraw)
		{
			GameWorld.PlayerAIPackageLOSCheck playerAIPackage = this.GetPlayerAIPackage<GameWorld.PlayerAIPackageLOSCheck>();
			if (this.GameWorld.ElapsedTotalRealTime - 1000f < playerAIPackage.LastProcessTimestamp)
			{
				if (this.CurrentRifleWeapon != null)
				{
					this.DrawDebugBotLOSCheck(b2_debugDraw, playerAIPackage.PrimaryLOSCheck, true, 30);
					if (playerAIPackage.CanUpdateHipFire && this.CurrentRifleWeapon.Properties.AI_GravityArcingEffect == 0f)
					{
						this.DrawDebugBotLOSCheck(b2_debugDraw, playerAIPackage.PrimaryLOSCheckHipFire, false, 30);
					}
				}
				if (this.CurrentHandgunWeapon != null)
				{
					if (!playerAIPackage.PrimarySecondaryIsSameLOSGravityArcing)
					{
						this.DrawDebugBotLOSCheck(b2_debugDraw, playerAIPackage.SecondaryLOSCheck, true, -30);
					}
					if (playerAIPackage.CanUpdateHipFire && !playerAIPackage.PrimarySecondaryIsSameHipFireOffset && this.CurrentHandgunWeapon.Properties.AI_GravityArcingEffect == 0f)
					{
						this.DrawDebugBotLOSCheck(b2_debugDraw, playerAIPackage.SecondaryLOSCheckHipFire, false, -30);
					}
				}
			}
		}

		// Token: 0x0600391F RID: 14623 RVA: 0x000E173C File Offset: 0x000DF93C
		internal void DrawDebugBotAggroRange(DebugDraw b2_debugDraw)
		{
			if (this.BotBehaviorSet.EliminateEnemies && this.BotBehaviorSet.AggroRange > 0f)
			{
				Microsoft.Xna.Framework.Vector2 preBox2DPosition = this.PreBox2DPosition;
				float num = Converter.WorldToBox2D(this.BotBehaviorSet.AggroRange);
				b2_debugDraw.DrawSegment(preBox2DPosition, preBox2DPosition + Microsoft.Xna.Framework.Vector2.UnitY * num, BotDebugOptions.BotAggroRange.DebugColor);
				b2_debugDraw.DrawCircle(preBox2DPosition, num, BotDebugOptions.BotAggroRange.DebugColor);
			}
		}

		// Token: 0x06003920 RID: 14624 RVA: 0x000E17B4 File Offset: 0x000DF9B4
		internal void DrawDebugBotSearchItemRange(DebugDraw b2_debugDraw)
		{
			if (this.BotBehaviorSet.SearchForItems && this.BotBehaviorSet.SearchItemRange > 0f)
			{
				Microsoft.Xna.Framework.Vector2 preBox2DPosition = this.PreBox2DPosition;
				float num = Converter.WorldToBox2D(this.BotBehaviorSet.SearchItemRange);
				b2_debugDraw.DrawSegment(preBox2DPosition, preBox2DPosition + Microsoft.Xna.Framework.Vector2.UnitX * num, BotDebugOptions.BotItemSearchRange.DebugColor);
				b2_debugDraw.DrawCircle(preBox2DPosition, num, BotDebugOptions.BotItemSearchRange.DebugColor);
			}
		}

		// Token: 0x06003921 RID: 14625 RVA: 0x000E182C File Offset: 0x000DFA2C
		internal void DrawDebugBotGuardRange(DebugDraw b2_debugDraw)
		{
			if (this.HasGuardTarget && this.BotBehaviorSet.GuardRange > 0f)
			{
				ObjectData sourceGuardTarget = this.GetSourceGuardTarget();
				if (sourceGuardTarget != null)
				{
					Microsoft.Xna.Framework.Vector2 box2DCenterPosition = sourceGuardTarget.GetBox2DCenterPosition();
					b2_debugDraw.DrawSegment(box2DCenterPosition, this.PreBox2DPosition, BotDebugOptions.BotGuardRange.DebugColor);
					float radius = Converter.WorldToBox2D(this.BotBehaviorSet.GuardRange);
					b2_debugDraw.DrawCircle(box2DCenterPosition, radius, BotDebugOptions.BotGuardRange.DebugColor);
				}
			}
		}

		// Token: 0x06003922 RID: 14626 RVA: 0x000E18A0 File Offset: 0x000DFAA0
		internal void DrawDebugBotChaseRange(DebugDraw b2_debugDraw)
		{
			if (this.HasGuardTarget && this.BotBehaviorSet.GuardRange > 0f)
			{
				ObjectData sourceGuardTarget = this.GetSourceGuardTarget();
				if (sourceGuardTarget != null)
				{
					Microsoft.Xna.Framework.Vector2 box2DCenterPosition = sourceGuardTarget.GetBox2DCenterPosition();
					b2_debugDraw.DrawSegment(box2DCenterPosition, this.PreBox2DPosition, BotDebugOptions.BotChaseRange.DebugColor);
					float radius = Converter.WorldToBox2D(this.BotBehaviorSet.ChaseRange);
					b2_debugDraw.DrawCircle(box2DCenterPosition, radius, BotDebugOptions.BotChaseRange.DebugColor);
				}
			}
		}

		// Token: 0x06003923 RID: 14627 RVA: 0x000E1914 File Offset: 0x000DFB14
		internal void DrawDebugBotGuardPosition(DebugDraw b2_debugDraw)
		{
			if (this.HasGuardTarget && this.BotBehaviorSet.GuardRange > 0f)
			{
				GameWorld.PlayerAIPackageGuardPosition playerAIPackage = this.GetPlayerAIPackage<GameWorld.PlayerAIPackageGuardPosition>();
				if (playerAIPackage != null && playerAIPackage.GuardTarget != null && playerAIPackage.GuardPosition != null && !playerAIPackage.GuardPosition.IsDisposed)
				{
					Microsoft.Xna.Framework.Vector2 box2DCenterPosition = playerAIPackage.GuardPosition.GetBox2DCenterPosition();
					b2_debugDraw.DrawSegment(box2DCenterPosition, this.PreBox2DPosition, BotDebugOptions.BotGuardPosition.DebugColor);
					b2_debugDraw.DrawCircle(box2DCenterPosition, 0.08f, BotDebugOptions.BotGuardPosition.DebugColor);
					if (playerAIPackage.IsOld)
					{
						b2_debugDraw.DrawSegment(box2DCenterPosition - Microsoft.Xna.Framework.Vector2.UnitX * 0.08f, box2DCenterPosition + Microsoft.Xna.Framework.Vector2.UnitX * 0.08f, Microsoft.Xna.Framework.Color.Red);
					}
				}
			}
		}

		// Token: 0x06003924 RID: 14628 RVA: 0x000E19E8 File Offset: 0x000DFBE8
		internal void DrawDebugBotTeamLineUp(DebugDraw b2_debugDraw)
		{
			if (this.BotBehaviorSet.TeamLineUp)
			{
				if (this.TeamLineUp.LeftTeammate != null)
				{
					Microsoft.Xna.Framework.Vector2 value = Microsoft.Xna.Framework.Vector2.UnitY * 0.04f * 4f;
					Microsoft.Xna.Framework.Vector2 preBox2DPosition = this.TeamLineUp.LeftTeammate.PreBox2DPosition;
					b2_debugDraw.DrawSegment(preBox2DPosition + value, this.PreBox2DPosition + value, BotDebugOptions.BotTeamLineUp.DebugColor);
					if (this.TeamLineUp.LeftTeammateType == Player.TeamLineUpEntry.LineUpType.TeamLineUp)
					{
						Microsoft.Xna.Framework.Vector2 vector = Camera.ConvertBox2DToScreen(this.PreBox2DPosition - value);
						b2_debugDraw.DrawString((int)vector.X, (int)vector.Y, string.Format("{0:0}", this.TeamLineUp.WaitTimeRemaining));
					}
					else
					{
						Microsoft.Xna.Framework.Vector2 vector2 = Camera.ConvertBox2DToScreen(this.PreBox2DPosition - value);
						b2_debugDraw.DrawString((int)vector2.X, (int)vector2.Y, "X");
					}
				}
				if (this.TeamLineUp.RightTeammate != null)
				{
					Microsoft.Xna.Framework.Vector2 value2 = Microsoft.Xna.Framework.Vector2.UnitY * 0.04f * 6f;
					Microsoft.Xna.Framework.Vector2 preBox2DPosition2 = this.TeamLineUp.RightTeammate.PreBox2DPosition;
					b2_debugDraw.DrawSegment(preBox2DPosition2 + value2, this.PreBox2DPosition + value2, BotDebugOptions.BotTeamLineUp.DebugColor);
					if (this.TeamLineUp.RightTeammateType == Player.TeamLineUpEntry.LineUpType.TeamLineUp)
					{
						Microsoft.Xna.Framework.Vector2 vector3 = Camera.ConvertBox2DToScreen(this.PreBox2DPosition - value2);
						b2_debugDraw.DrawString((int)vector3.X, (int)vector3.Y, string.Format("{0:0}", this.TeamLineUp.WaitTimeRemaining));
						return;
					}
					Microsoft.Xna.Framework.Vector2 vector4 = Camera.ConvertBox2DToScreen(this.PreBox2DPosition - value2);
					b2_debugDraw.DrawString((int)vector4.X, (int)vector4.Y, "X");
				}
			}
		}

		// Token: 0x06003925 RID: 14629 RVA: 0x000E1BC8 File Offset: 0x000DFDC8
		internal void DrawDebugBotPathFinding(DebugDraw b2_debugDraw)
		{
			GameWorld.PlayerAIPackageTargetObject playerAIPackage = this.GetPlayerAIPackage<GameWorld.PlayerAIPackageTargetDebugPathFiniding>();
			ObjectData resultTarget = playerAIPackage.ResultTarget;
			if (resultTarget != null && !resultTarget.IsDisposed)
			{
				int num;
				if (resultTarget is ObjectPathDebugTarget)
				{
					num = ((ObjectPathDebugTarget)resultTarget).CurrentDebugIndex + 1;
				}
				else
				{
					num = resultTarget.ObjectID;
				}
				Microsoft.Xna.Framework.Vector2 vector = Camera.ConvertBox2DToScreen(this.PreBox2DPosition - Microsoft.Xna.Framework.Vector2.UnitX * 0.04f * 6f);
				b2_debugDraw.DrawString((int)vector.X, (int)vector.Y, string.Format("*{0}", num));
			}
		}

		// Token: 0x06003926 RID: 14630 RVA: 0x000E1C60 File Offset: 0x000DFE60
		internal void DrawDebugBotLOSCheck(DebugDraw b2_debugDraw, GameWorld.PlayerAIPackageLOSCheck.WeaponLOSCheck wpnLOSCheck, bool drawAccuracy, int colorAdjust)
		{
			if (wpnLOSCheck.Path.Count > 1)
			{
				Microsoft.Xna.Framework.Color debugColor = wpnLOSCheck.Statuses[0].GetDebugColor(wpnLOSCheck.IsHipFire);
				debugColor = new Microsoft.Xna.Framework.Color((int)debugColor.R + colorAdjust, (int)debugColor.G + colorAdjust, (int)debugColor.B + colorAdjust, (int)debugColor.A);
				Microsoft.Xna.Framework.Vector2 vector = wpnLOSCheck.Path[0];
				foreach (Microsoft.Xna.Framework.Vector2 vector2 in wpnLOSCheck.Path)
				{
					if (vector != vector2)
					{
						b2_debugDraw.DrawSegment(vector, vector2, debugColor);
					}
					vector = vector2;
				}
				b2_debugDraw.DrawCircle(wpnLOSCheck.DEBUG_PathTargetEndPosition, 0.1f, debugColor);
				b2_debugDraw.DrawCircle(wpnLOSCheck.DEBUG_PathTargetPosition, 0.05f, debugColor);
			}
			else
			{
				for (int i = 0; i < wpnLOSCheck.StatusCount; i++)
				{
					Microsoft.Xna.Framework.Color debugColor2 = wpnLOSCheck.Statuses[i].GetDebugColor(wpnLOSCheck.IsHipFire);
					debugColor2 = new Microsoft.Xna.Framework.Color((int)debugColor2.R + colorAdjust, (int)debugColor2.G + colorAdjust, (int)debugColor2.B + colorAdjust, (int)debugColor2.A);
					b2_debugDraw.DrawSegment(wpnLOSCheck.LOSOrigin, wpnLOSCheck.LOSTargetPoints[i], debugColor2);
				}
			}
			if (drawAccuracy)
			{
				Microsoft.Xna.Framework.Vector2 targetAim = wpnLOSCheck.TargetAim;
				b2_debugDraw.DrawSegment(wpnLOSCheck.LOSOrigin, wpnLOSCheck.LOSOrigin + targetAim * 1.2f, Microsoft.Xna.Framework.Color.White);
				SFDMath.RotatePosition(ref targetAim, this.m_botAIShooting.CurrentAccuracyDeflection, out targetAim);
				b2_debugDraw.DrawSegment(wpnLOSCheck.LOSOrigin, wpnLOSCheck.LOSOrigin + targetAim * 1f, Microsoft.Xna.Framework.Color.Gray);
			}
		}

		// Token: 0x06003927 RID: 14631 RVA: 0x000E1E2C File Offset: 0x000E002C
		internal void DrawDebugQueuedKeys(DebugDraw b2_debugDraw)
		{
			string queuedActionsInfo = this.TimeSequence.GetQueuedActionsInfo();
			if (!string.IsNullOrEmpty(queuedActionsInfo))
			{
				Microsoft.Xna.Framework.Vector2 vector = Camera.ConvertWorldToScreen(this.Position);
				b2_debugDraw.DrawString((int)vector.X, (int)vector.Y + 10, queuedActionsInfo);
			}
		}

		// Token: 0x06003928 RID: 14632 RVA: 0x000E1E74 File Offset: 0x000E0074
		internal bool BotAICanUseRangedAndHasAmmo()
		{
			if (this.BotBehaviorSet.RangedWeaponUsage)
			{
				if (this.CurrentHandgunWeapon != null && (!this.CurrentHandgunWeapon.IsEmpty || this.CurrentHandgunWeapon.CanBeReloaded(this)))
				{
					return true;
				}
				if (this.CurrentRifleWeapon != null && (!this.CurrentRifleWeapon.IsEmpty || this.CurrentRifleWeapon.CanBeReloaded(this)))
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06003929 RID: 14633 RVA: 0x000E1EDC File Offset: 0x000E00DC
		private void UpdateAIAttackRanged(float totalMs, Player.BotAITargetData targetData, Player.BotAITargetData destinationTargetData)
		{
			this.m_botAIShooting.ForcedCoverTime -= totalMs;
			if (this.m_botBehaviorSet.RangedWeaponUsage)
			{
				this.m_botAIShooting.ForceRangedTime -= totalMs;
				this.m_botAIShooting.ForcedShootTime -= totalMs;
				if (this.m_botBehaviorSet.RangedWeaponPrecisionInterpolateTime > 0f)
				{
					if (this.CurrentAction != PlayerAction.ManualAim)
					{
						if (this.CurrentAction != PlayerAction.HipFire)
						{
							if (this.m_botAIShooting.PrecisionInterpolateTime <= 0f)
							{
								goto IL_10B;
							}
							this.m_botAIShooting.PrecisionInterpolateTime -= totalMs;
							if (this.m_botAIShooting.PrecisionInterpolateTime < 0f)
							{
								this.m_botAIShooting.PrecisionInterpolateTime = 0f;
								goto IL_10B;
							}
							goto IL_10B;
						}
					}
					this.m_botAIShooting.PrecisionInterpolateTime += totalMs;
					if (this.m_botAIShooting.PrecisionInterpolateTime > this.m_botBehaviorSet.RangedWeaponPrecisionInterpolateTime + 1000f)
					{
						this.m_botAIShooting.PrecisionInterpolateTime = this.m_botBehaviorSet.RangedWeaponPrecisionInterpolateTime + 1000f;
					}
				}
				IL_10B:
				if (targetData.HasTarget)
				{
					if (targetData.CurrentTarget != null)
					{
						if (!targetData.CurrentTarget.IsAITargetableObject && this.BotAIForcedTarget != targetData.CurrentTarget)
						{
							return;
						}
						if (targetData.CurrentTarget.AITargetData.TargetMode == ObjectAITargetMode.MeleeOnly)
						{
							return;
						}
					}
					if (targetData.IsPlayer && targetData.Player.RocketRideProjectileWorldID != 0)
					{
						Projectile rocketRideProjectile = targetData.Player.RocketRideProjectile;
						if (rocketRideProjectile != null)
						{
							float num = Microsoft.Xna.Framework.Vector2.Dot(targetData.Direction, rocketRideProjectile.Direction);
							if (num > -0.2f)
							{
								return;
							}
						}
					}
					if (this.CurrentHandgunWeapon == null && this.CurrentRifleWeapon == null)
					{
						return;
					}
					if ((!this.BotAIActionPhaseIsPrioritized(BotActionPhaseEnum.ManualAim) && !this.BotAIActionPhaseIsPrioritized(BotActionPhaseEnum.HipFire)) || !this.StandingOnGround || this.Disabled || this.MeleeHit)
					{
						this.m_botAIShooting.ForceRangedTime = 0f;
						return;
					}
					RWeapon rweapon = this.GetCurrentRangedWeaponInUse();
					bool flag;
					if (!(flag = (this.m_botAINav.TotalNodeSteps > 5 || rweapon != null || targetData.DistanceLength > 36f)) && targetData.CurrentTarget != null && (targetData.CurrentTarget.IsAITargetableObject || this.BotAIForcedTarget == targetData.CurrentTarget) && targetData.CurrentTarget.AITargetData.TargetMode == ObjectAITargetMode.RangeOnly)
					{
						flag = true;
					}
					if (!flag)
					{
						return;
					}
					if (this.CurrentAction == PlayerAction.DrawWeapon)
					{
						this.BotAIActionPhaseSetActive(BotActionPhaseEnum.DrawWeapon);
					}
					float delayTime = (targetData.DistanceLength > 300f) ? 400f : 200f;
					GameWorld.PlayerAIPackageLOSCheck playerAIPackage = this.GetPlayerAIPackage<GameWorld.PlayerAIPackageLOSCheck>();
					if (playerAIPackage.SetTarget(targetData.CurrentTarget))
					{
						delayTime = 1f;
					}
					playerAIPackage.UpdateTargetPoints(totalMs, false, false);
					playerAIPackage.Requeue(delayTime);
					int priorityLOSIndex = playerAIPackage.PrimaryLOSCheck.GetPriorityLOSIndex();
					int priorityLOSIndex2 = playerAIPackage.SecondaryLOSCheck.GetPriorityLOSIndex();
					SFD.Weapons.WeaponItemType weaponItemType = this.CurrentWeaponDrawn;
					float num2 = 0f;
					GameWorld.PlayerAIPackageLOSCheck.WeaponLOSCheck weaponLOSCheck = null;
					int index = 0;
					if (this.m_botBehaviorSet.RangedWeaponMode == BotBehaviorRangedWeaponMode.Both || this.m_botBehaviorSet.RangedWeaponMode == BotBehaviorRangedWeaponMode.ManualAim)
					{
						float num3 = this.BotAIWeaponScore(this.CurrentRifleWeapon, targetData, playerAIPackage.PrimaryLOSCheck.Statuses[priorityLOSIndex]);
						float num4 = this.BotAIWeaponScore(this.CurrentHandgunWeapon, targetData, playerAIPackage.SecondaryLOSCheck.Statuses[priorityLOSIndex2]);
						if (this.m_gameWorld.ElapsedTotalGameTime - this.m_currentWeaponDrawnTimestamp <= 3000f)
						{
							if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Handgun)
							{
								num3 = 0f;
							}
							else if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle)
							{
								num4 = 0f;
							}
						}
						if (num3 > 0f && num3 >= num4)
						{
							weaponLOSCheck = playerAIPackage.PrimaryLOSCheck;
							index = priorityLOSIndex;
							num2 = num3;
							if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Rifle)
							{
								weaponItemType = SFD.Weapons.WeaponItemType.Rifle;
								rweapon = this.CurrentRifleWeapon;
							}
						}
						else if (num4 > 0f && num4 >= num3)
						{
							weaponLOSCheck = playerAIPackage.SecondaryLOSCheck;
							index = priorityLOSIndex2;
							num2 = num4;
							if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Handgun)
							{
								weaponItemType = SFD.Weapons.WeaponItemType.Handgun;
								rweapon = this.CurrentHandgunWeapon;
							}
						}
					}
					if (this.m_botBehaviorSet.RangedWeaponMode == BotBehaviorRangedWeaponMode.Both || this.m_botBehaviorSet.RangedWeaponMode == BotBehaviorRangedWeaponMode.HipFire)
					{
						if (this.m_botBehaviorSet.RangedWeaponMode == BotBehaviorRangedWeaponMode.Both && num2 > 0f && targetData.DistanceLength < 80f)
						{
							this.m_botAIShooting.FromManualAimToHipFireDelayTime = 0f;
						}
						else if (!playerAIPackage.PrimaryLOSCheckHipFire.Statuses[0].EndTargetReached && !playerAIPackage.SecondaryLOSCheckHipFire.Statuses[0].EndTargetReached)
						{
							this.m_botAIShooting.FromManualAimToHipFireDelayTime = 0f;
						}
						else if (destinationTargetData.CurrentTarget == null || this.BotAICheckCanUseHipFireTowardsDestination(targetData, destinationTargetData))
						{
							if (num2 > 0f && this.CurrentAction == PlayerAction.ManualAim && this.m_botAIShooting.FromManualAimToHipFireDelayTime < 300f)
							{
								this.m_botAIShooting.FromManualAimToHipFireDelayTime += totalMs;
							}
							else
							{
								float num5 = playerAIPackage.PrimaryLOSCheckHipFire.Statuses[0].EndTargetReached ? this.BotAIWeaponScore(this.CurrentRifleWeapon, targetData, playerAIPackage.PrimaryLOSCheckHipFire.Statuses[0]) : 0f;
								float num6 = playerAIPackage.SecondaryLOSCheckHipFire.Statuses[0].EndTargetReached ? this.BotAIWeaponScore(this.CurrentHandgunWeapon, targetData, playerAIPackage.SecondaryLOSCheckHipFire.Statuses[0]) : 0f;
								if (this.m_gameWorld.ElapsedTotalGameTime - this.m_currentWeaponDrawnTimestamp <= 3000f)
								{
									if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Handgun)
									{
										num5 = 0f;
									}
									else if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle)
									{
										num6 = 0f;
									}
								}
								if (num5 > 0f && num5 + 1f >= num2)
								{
									weaponLOSCheck = playerAIPackage.PrimaryLOSCheckHipFire;
									index = 0;
									if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Rifle)
									{
										weaponItemType = SFD.Weapons.WeaponItemType.Rifle;
										rweapon = this.CurrentRifleWeapon;
									}
								}
								else if (num6 > 0f && num6 + 1f >= num2)
								{
									weaponLOSCheck = playerAIPackage.SecondaryLOSCheckHipFire;
									index = 0;
									if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Handgun)
									{
										weaponItemType = SFD.Weapons.WeaponItemType.Handgun;
										rweapon = this.CurrentHandgunWeapon;
									}
								}
							}
						}
					}
					if (this.m_botAIShooting.FriendlyLOS)
					{
						weaponLOSCheck = null;
						this.m_botAIShooting.FriendlyLOS = false;
						this.m_botAIShooting.FriendlyLOSAccumulatedTime = 0f;
					}
					if (rweapon == null)
					{
						return;
					}
					if (rweapon.NeedsReloading)
					{
						if (rweapon.CanBeReloaded(this))
						{
							this.KeyAction(14, Player.PressKeyType.Tap);
						}
						else
						{
							this.KeyAction(13, Player.PressKeyType.Tap);
						}
					}
					if (weaponLOSCheck == null)
					{
						if (this.m_botAIShooting.CurrentShootState != Player.BotAIShootingValues.CurrentShootStateType.Burst || this.CurrentAction != PlayerAction.ManualAim || this.FireSequence.WeaponBurstRoundsToFireLeft <= 0)
						{
							return;
						}
						if (rweapon.Properties.Category == WeaponCategory.Primary)
						{
							weaponLOSCheck = playerAIPackage.PrimaryLOSCheck;
						}
						else
						{
							weaponLOSCheck = playerAIPackage.SecondaryLOSCheck;
						}
					}
					bool flag2 = this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle || this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Handgun;
					if (this.CurrentWeaponDrawn != weaponItemType)
					{
						this.KeyAction((weaponItemType == SFD.Weapons.WeaponItemType.Handgun) ? 9 : 10, Player.PressKeyType.Tap);
						this.BotAIActionPhaseSetActive(BotActionPhaseEnum.DrawWeapon);
					}
					float interpolateValue = (this.m_botBehaviorSet.RangedWeaponPrecisionInterpolateTime > 0f) ? this.m_botBehaviorSet.GetRangedWeaponPrecisionInterpolateValue(this.m_botAIShooting.PrecisionInterpolateTime) : 0f;
					bool flag3 = false;
					if (this.CurrentAction != PlayerAction.ManualAim && this.CurrentAction != PlayerAction.HipFire)
					{
						flag3 = (this.GameWorld.ElapsedTotalGameTime - this.m_botAIShooting.LastShootingStateTimeStamp >= 100f);
					}
					else
					{
						this.m_botAIShooting.LastShootingStateTimeStamp = this.GameWorld.ElapsedTotalGameTime;
					}
					if (this.CurrentAction != PlayerAction.DrawWeapon && !this.Reloading && this.FireSequence.WeaponReloadCooldown <= 0f && !flag3)
					{
						this.m_botAIShooting.CanCheckForCoverIndexB = this.m_botAIShooting.CanCheckForCoverIndexA;
					}
					else
					{
						this.m_botAIShooting.InitialAimingInSight = false;
						this.m_botAIShooting.FirstShootDelayTime = 0f;
						this.m_botAIShooting.ForcedShootTime = 0f;
						this.m_botAIShooting.ForceRangedTime = 1000f;
						this.m_botAIShooting.AimShootDelayTime = 0f;
						this.m_botAIShooting.AimShootBurstDelayTime = 0f;
						if (this.m_botAIShooting.CurrentShootState != Player.BotAIShootingValues.CurrentShootStateType.InitialAimShootDelay || flag3)
						{
							this.m_botAIShooting.CurrentShootState = Player.BotAIShootingValues.CurrentShootStateType.InitialAimShootDelay;
							this.m_botAIShooting.AimShootDelayTimeTargetManualAim = this.m_botBehaviorSet.GetRangedWeaponAimShootDelay(interpolateValue);
							this.m_botAIShooting.AimShootDelayTimeTargetHipFire = this.m_botBehaviorSet.GetRangedWeaponHipFireAimShootDelay();
						}
						if (this.m_botAIShooting.CanCheckForCoverIndexB == this.m_botAIShooting.CanCheckForCoverIndexA && !this.TakingCover && this.GameWorld.ElapsedTotalGameTime - this.m_botAIShooting.LastCheckForCoverTime > 750f)
						{
							this.m_botAIShooting.CanCheckForCoverIndexA++;
						}
					}
					if (this.m_botAIShooting.CheckForCoverIndex != this.m_botAIShooting.CanCheckForCoverIndexA && (this.CurrentAction == PlayerAction.DrawWeapon || this.CurrentAction == PlayerAction.ManualAim || this.CurrentAction == PlayerAction.HipFire || this.Reloading) && Player.m_botAICheckCoverTimeCheck != this.GameWorld.ElapsedTotalRealTime)
					{
						Player.m_botAICheckCoverTimeCheck = this.GameWorld.ElapsedTotalRealTime;
						this.m_botAIShooting.CheckForCoverIndex = this.m_botAIShooting.CanCheckForCoverIndexA;
						this.m_botAIShooting.LastCheckForCoverTime = this.GameWorld.ElapsedTotalGameTime;
						if (this.m_botBehaviorSet.SeekCoverWhileShooting > 0f && Constants.RANDOM.NextFloat() <= this.m_botBehaviorSet.SeekCoverWhileShooting && this.m_botAINav.CurrentIsSafeGround() && this.BotAILookForCover(targetData))
						{
							return;
						}
					}
					if (this.m_botAIShooting.ForcedCoverTime > 0f && this.TakingCover)
					{
						return;
					}
					if (!flag2)
					{
						return;
					}
					if (weaponLOSCheck.IsHipFire && this.m_botBehaviorSet.RangedWeaponMode != BotBehaviorRangedWeaponMode.ManualAim && (!this.TakingCover || this.m_botBehaviorSet.SeekCoverWhileShooting <= 0f))
					{
						this.BotAIActionPhaseSetActive(BotActionPhaseEnum.HipFire);
						this.m_botAIShooting.CurrentAimMode = Player.BotAIShootingValues.AimMode.HipFire;
						if (this.CurrentAction == PlayerAction.Idle)
						{
							this.CurrentAction = PlayerAction.HipFire;
						}
						if (this.CurrentAction == PlayerAction.HipFire)
						{
							this.FireSequence.CanShootInHipFire = true;
							this.FireSequence.HipFireEndTimer = 0f;
						}
					}
					else if (!this.BotAIActionPhaseIsActive(BotActionPhaseEnum.GoToCover))
					{
						this.BotAIActionPhaseSetActive(BotActionPhaseEnum.ManualAim);
						this.KeyAction(26, Player.PressKeyType.Hold);
						this.m_botAIShooting.CurrentAimMode = Player.BotAIShootingValues.AimMode.ManualAim;
					}
					Microsoft.Xna.Framework.Vector2 targetAim = weaponLOSCheck.TargetAim;
					float rangedWeaponAccuracy = this.m_botBehaviorSet.GetRangedWeaponAccuracy(interpolateValue);
					if (rangedWeaponAccuracy < 1f)
					{
						SFDMath.RotatePosition(ref targetAim, this.m_botAIShooting.CurrentAccuracyDeflection, out targetAim);
						this.m_botAIShooting.NextAccuracyDeflectionTime -= totalMs;
						if (this.m_botAIShooting.NextAccuracyDeflectionTime <= 0f)
						{
							float num7 = 1f - rangedWeaponAccuracy;
							this.m_botAIShooting.CurrentAccuracyDeflection = 0.5235988f * num7;
							this.m_botAIShooting.CurrentAccuracyDeflection = Constants.RANDOM.NextFloat(-this.m_botAIShooting.CurrentAccuracyDeflection, this.m_botAIShooting.CurrentAccuracyDeflection);
							this.m_botAIShooting.NextAccuracyDeflectionTime = Constants.RANDOM.NextFloat(200f + num7 * 300f, 200f + num7 * 800f);
						}
					}
					Microsoft.Xna.Framework.Vector2 vector = this.AimVector();
					float num8 = Microsoft.Xna.Framework.Vector2.Dot(vector, targetAim);
					if ((targetAim.X < 0f && this.LastDirectionX == 1) || (targetAim.X > 0f && this.LastDirectionX == -1))
					{
						if (num8 > 0.7f)
						{
							if (this.AimAngle < 0f && this.AimAngle > -1.5697963f)
							{
								this.KeyActionUp();
								return;
							}
							if (this.AimAngle > 0f && this.AimAngle < 1.5697963f)
							{
								this.KeyActionDown();
								return;
							}
							if (this.AimAngle > 0f)
							{
								this.KeyActionDown();
							}
							else
							{
								this.KeyActionUp();
							}
							if (targetAim.X > 0f)
							{
								this.KeyActionRight(Player.PressKeyType.Hold);
								return;
							}
							this.KeyActionLeft(Player.PressKeyType.Hold);
							return;
						}
						else
						{
							if (targetAim.X > 0f)
							{
								this.KeyActionRight(Player.PressKeyType.Hold);
								return;
							}
							this.KeyActionLeft(Player.PressKeyType.Hold);
							return;
						}
					}
					else
					{
						if (this.m_botAIShooting.CurrentAimMode == Player.BotAIShootingValues.AimMode.ManualAim)
						{
							float num9 = Microsoft.Xna.Framework.Vector2.Dot(vector, targetAim);
							if ((double)num9 > 0.8)
							{
								this.KeyAction(21, Player.PressKeyType.Hold);
								Microsoft.Xna.Framework.Vector2 value = targetAim * targetData.DistanceLength;
								Microsoft.Xna.Framework.Vector2 value2 = vector * targetData.DistanceLength;
								Microsoft.Xna.Framework.Vector2 x = value - value2;
								float num10 = x.CalcSafeLength();
								float num11 = 6f + this.m_botAIPrevAimDiffFictiveDistExtra;
								if (targetData.DistanceLength < 20f)
								{
									num11 = 1f;
								}
								if (num10 <= num11 && num10 >= this.m_botAIPrevAimDiff)
								{
									this.m_botAIPrevAimDiffFictiveDistExtra = 2f;
								}
								else
								{
									if (vector.Y > targetAim.Y)
									{
										if (this.m_botAIAimChangeLastDirection != 0)
										{
											if (this.m_botAIAimChangeLastDirection != -1)
											{
												this.m_botAIPrevAimDiffFictiveDistExtra = 4f;
												this.m_botAIAimChangeDelay -= totalMs;
												if (this.m_botAIAimChangeDelay <= 0f)
												{
													this.m_botAIAimChangeLastDirection = -1;
													goto IL_D7D;
												}
												goto IL_D7D;
											}
										}
										this.KeyActionDown();
										this.m_botAIAimChangeLastDirection = -1;
										this.m_botAIAimChangeDelay = 100f;
									}
									else if (vector.Y < targetAim.Y)
									{
										if (this.m_botAIAimChangeLastDirection != 0)
										{
											if (this.m_botAIAimChangeLastDirection != 1)
											{
												this.m_botAIPrevAimDiffFictiveDistExtra = 4f;
												this.m_botAIAimChangeDelay -= totalMs;
												if (this.m_botAIAimChangeDelay <= 0f)
												{
													this.m_botAIAimChangeLastDirection = 1;
													goto IL_D7D;
												}
												goto IL_D7D;
											}
										}
										this.KeyActionUp();
										this.m_botAIAimChangeLastDirection = 1;
										this.m_botAIAimChangeDelay = 100f;
									}
									IL_D7D:
									this.m_botAIPrevAimDiff = num10;
									this.m_botAIPrevAimDiffFictiveDistExtra = 0f;
								}
							}
							else if (vector.Y > targetAim.Y)
							{
								this.KeyActionDown();
								this.m_botAIAimChangeLastDirection = -1;
							}
							else if (vector.Y < targetAim.Y)
							{
								this.KeyActionUp();
								this.m_botAIAimChangeLastDirection = 1;
							}
						}
						if (rweapon.NeedsReloading)
						{
							return;
						}
						this.m_botAIShooting.AimShootBurstDelayTime -= totalMs;
						if (this.m_botAIShooting.AimShootBurstDelayTime > 0f)
						{
							return;
						}
						if (this.m_botAIShooting.CurrentShootState == Player.BotAIShootingValues.CurrentShootStateType.InitialAimShootDelay)
						{
							this.m_botAIShooting.AimShootDelayTime += totalMs;
							if (this.m_botAIShooting.AimShootDelayTime < ((this.m_botAIShooting.CurrentAimMode == Player.BotAIShootingValues.AimMode.HipFire) ? this.m_botAIShooting.AimShootDelayTimeTargetHipFire : this.m_botAIShooting.AimShootDelayTimeTargetManualAim))
							{
								return;
							}
						}
						bool flag4;
						if (flag4 = (num8 > 0.98f || (targetData.DistanceLength < 12f && num8 > 0.92f) || (num8 > 0.6f && targetData.DistanceLength < 2f)))
						{
							this.m_botAIShooting.FirstShootDelayTime += totalMs;
						}
						bool flag5 = (flag4 && this.m_botAIShooting.FirstShootDelayTime >= 60f) || this.m_botAIShooting.CurrentAimMode == Player.BotAIShootingValues.AimMode.HipFire;
						if (this.m_botAIShooting.CurrentShootState == Player.BotAIShootingValues.CurrentShootStateType.InitialAimShootDelay)
						{
							if (flag5)
							{
								this.m_botAIShooting.CurrentShootState = Player.BotAIShootingValues.CurrentShootStateType.Burst;
								this.m_botAIShooting.ForcedShootTime = this.m_botBehaviorSet.GetRangedWeaponBurstTime(interpolateValue);
							}
						}
						else if (this.m_botAIShooting.CurrentShootState == Player.BotAIShootingValues.CurrentShootStateType.Burst)
						{
							if (this.m_botAIShooting.ForcedShootTime <= 0f)
							{
								this.m_botAIShooting.ForcedShootTime = this.m_botBehaviorSet.GetRangedWeaponBurstTime(interpolateValue);
								if (this.m_botAIShooting.ForcedShootTime > 0f)
								{
									this.m_botAIShooting.AimShootBurstDelayTime = this.m_botBehaviorSet.GetRangedWeaponBurstPause(interpolateValue);
									this.m_botAIShooting.CurrentShootState = Player.BotAIShootingValues.CurrentShootStateType.BurstPause;
								}
							}
						}
						else if (this.m_botAIShooting.CurrentShootState == Player.BotAIShootingValues.CurrentShootStateType.BurstPause)
						{
							this.m_botAIShooting.CurrentShootState = Player.BotAIShootingValues.CurrentShootStateType.Burst;
							this.m_botAIShooting.ForcedShootTime = this.m_botBehaviorSet.GetRangedWeaponBurstTime(interpolateValue);
						}
						if (!flag5 && (!this.m_botAIShooting.InitialAimingInSight || this.m_botAIShooting.ForcedShootTime <= 0f))
						{
							return;
						}
						if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle && (this.CurrentRifleWeapon is WpnBazooka || this.CurrentRifleWeapon is WpnGrenadeLauncher) && this.CurrentActionTime < 440f && targetData.DistanceLength > 50f)
						{
							return;
						}
						this.m_botAIShooting.InitialAimingInSight = true;
						bool flag6 = (float)(rweapon.Properties.CooldownBeforePostAction + rweapon.Properties.CooldownAfterPostAction) >= 200f && (float)rweapon.Properties.ExtraAutomaticCooldown > 0f;
						if (!this.FireSequence.WeaponOnCooldown)
						{
							if (!this.m_botBehaviorSet.RangedWeaponLOSIgnoreTeammates && this.BotAICheckLOSForFriendlies(rweapon, weaponLOSCheck.TargetAim, weaponLOSCheck.LOSTargetPoints[0], weaponLOSCheck.Statuses[index]))
							{
								this.m_botAIShooting.FriendlyLOSLastResultBeforeAttack = true;
							}
							else
							{
								this.m_botAIShooting.FriendlyLOSLastResultBeforeAttack = false;
								if (this.m_botAIShooting.FriendlyLOSAccumulatedTime > 0f)
								{
									this.m_botAIShooting.FriendlyLOSAccumulatedTime = Math.Max(0f, this.m_botAIShooting.FriendlyLOSAccumulatedTime - totalMs);
								}
							}
						}
						if (!this.m_botAIShooting.FriendlyLOSLastResultBeforeAttack)
						{
							this.KeyAction(4, flag6 ? Player.PressKeyType.Tap : Player.PressKeyType.Hold);
							return;
						}
						this.m_botAIShooting.FriendlyLOSAccumulatedTime += totalMs;
						if (this.m_botAIShooting.FriendlyLOSAccumulatedTime > 4000f)
						{
							this.m_botAIShooting.FriendlyLOSAccumulatedTime = 4000f;
						}
						this.m_botAIShooting.FriendlyLOS = (this.m_botAIShooting.FriendlyLOSAccumulatedTime > 3000f);
						return;
					}
				}
				return;
			}
		}

		// Token: 0x0600392A RID: 14634 RVA: 0x000E3060 File Offset: 0x000E1260
		private bool BotAILookForCover(Player.BotAITargetData targetData)
		{
			Microsoft.Xna.Framework.Vector2 value = (this.m_botAINav.GetNodeDistance(0).X > 0f) ? Microsoft.Xna.Framework.Vector2.UnitX : (-Microsoft.Xna.Framework.Vector2.UnitX);
			float num = Math.Min(targetData.DistanceLength * 0.4f, 76f);
			if (num > 8f && Math.Abs(Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.UnitY, targetData.Direction)) < 0.7f)
			{
				Box2D.XNA.RayCastInput rayCastInput = default(Box2D.XNA.RayCastInput);
				rayCastInput.p1 = this.PreBox2DPosition;
				rayCastInput.p2 = this.PreBox2DPosition + value * Converter.WorldToBox2D(num);
				rayCastInput.maxFraction = 1f;
				ObjectData coverObject = null;
				float closestFraction = 99f;
				this.GameWorld.GetActiveWorld.RayCast(delegate(Fixture fixture, Microsoft.Xna.Framework.Vector2 point, Microsoft.Xna.Framework.Vector2 normal, float fraction)
				{
					if (fixture == null || fixture.GetUserData() == null || fixture.IsSensor())
					{
						return -1f;
					}
					ObjectData objectData = ObjectData.Read(fixture);
					if (objectData.IsPlayer && objectData.ObjectID != this.ObjectID)
					{
						Player player = (Player)objectData.InternalData;
						if (!player.InSameTeam(this))
						{
							coverObject = null;
							closestFraction = -1f;
							return 0f;
						}
						return 1f;
					}
					else
					{
						if (!fixture.IsCloud() && (this.CheckCollisionFixture(fixture, out objectData, 0f, true) || (objectData != null && objectData.BotAIForceRegisterCoverCollision)))
						{
							if (closestFraction > fraction)
							{
								coverObject = objectData;
								closestFraction = fraction;
							}
							return fraction;
						}
						return 1f;
					}
				}, rayCastInput.p1, rayCastInput.p2);
				if (coverObject != null && !coverObject.BotAIIgnoreObjectAsCover && Constants.RANDOM.NextFloat() >= (closestFraction - 0.5f) * 0.4f && coverObject.GetLinearVelocity().CalcSafeLength() < 0.2f)
				{
					Microsoft.Xna.Framework.Vector2 vector = rayCastInput.GetHitPosition(closestFraction);
					vector -= value * 0.16f;
					rayCastInput.p1 = vector;
					rayCastInput.p2 = vector - Microsoft.Xna.Framework.Vector2.UnitY * 0.04f * 12f;
					rayCastInput.maxFraction = 1f;
					ObjectData groundObject = null;
					closestFraction = 99f;
					this.GameWorld.GetActiveWorld.RayCast(delegate(Fixture fixture, Microsoft.Xna.Framework.Vector2 point, Microsoft.Xna.Framework.Vector2 normal, float fraction)
					{
						if (fixture == null || fixture.GetUserData() == null || fixture.IsSensor())
						{
							return -1f;
						}
						ObjectData objectData = ObjectData.Read(fixture);
						if (objectData.IsPlayer)
						{
							return 1f;
						}
						if (!fixture.IsCloud() && this.CheckCollisionFixture(fixture, out objectData, 0f, true))
						{
							if (closestFraction > fraction)
							{
								groundObject = objectData;
								closestFraction = fraction;
							}
							return fraction;
						}
						return 1f;
					}, rayCastInput.p1, rayCastInput.p2);
					if (groundObject != null)
					{
						Microsoft.Xna.Framework.Vector2 vector2 = rayCastInput.GetHitPosition(closestFraction);
						vector2 = Converter.Box2DToWorld(vector2);
						bool flag = false;
						if (this.CheckCanTakeCover(vector2, this.LastDirectionX, out coverObject, out flag))
						{
							this.m_botAISeekCoverObject = coverObject;
							this.m_botAISeekCoverObjectInitialBox2DPos = coverObject.GetBox2DPosition();
							this.m_botAISeekCoverObjectInitialRot = coverObject.GetAngle();
							this.m_botAISeekCoverPlayerTargetWorldPos = vector2;
							this.m_botAISeekCoverTotalTime = 0f;
							this.GetPlayerAIPackage<GameWorld.PlayerAIPackageSearchTargetObject>().Requeue(1f);
							this.BotAIActionPhaseSetActive(BotActionPhaseEnum.GoToCover);
							return true;
						}
					}
				}
			}
			return false;
		}

		// Token: 0x0600392B RID: 14635 RVA: 0x000E3314 File Offset: 0x000E1514
		private int BotAIUpdateGoToCover(float totalMs)
		{
			if (this.m_botAISeekCoverObject == null)
			{
				return 0;
			}
			int result = 0;
			if (this.m_botAISeekCoverObject.IsDisposed)
			{
				this.m_botAISeekCoverObject = null;
				return 0;
			}
			this.m_botAISeekCoverTotalTime += totalMs;
			Microsoft.Xna.Framework.Vector2 x = this.m_botAISeekCoverObjectInitialBox2DPos - this.m_botAISeekCoverObject.GetBox2DPosition();
			float value = this.m_botAISeekCoverObjectInitialRot - this.m_botAISeekCoverObject.GetAngle();
			if (x.CalcSafeLength() <= 0.16f && Math.Abs(value) <= 0.7853982f && (this.Contacts.CenterMostWalkContact == null || this.Contacts.CenterMostWalkContact.Fixture == null || this.Contacts.CenterMostWalkContact.Fixture.GetBody() != this.m_botAISeekCoverObject.Body) && this.m_botAISeekCoverTotalTime <= 4500f)
			{
				x = this.m_botAISeekCoverPlayerTargetWorldPos - this.Position;
				if ((this.m_botAISeekCoverObjectInitialBox2DPos - this.PreBox2DPosition).X < 0f)
				{
					if (this.Contacts.LeftCollisionContactsCount > 0)
					{
						this.KeyActionLeft(Player.PressKeyType.Tap);
						if (this.m_botAISeekCoverTotalTime > 350f)
						{
							this.m_botAISeekCoverTotalTime = 350f;
						}
						result = -1;
					}
				}
				else if (this.Contacts.RightCollisionContactsCount > 0)
				{
					this.KeyActionRight(Player.PressKeyType.Tap);
					if (this.m_botAISeekCoverTotalTime > 350f)
					{
						this.m_botAISeekCoverTotalTime = 350f;
					}
					result = 1;
				}
				if (this.Disabled || this.TakingCover)
				{
					this.m_botAISeekCoverObject = null;
					this.m_botAIShooting.ForcedCoverTime = Constants.RANDOM.NextFloat(150f, 300f);
				}
				this.m_botAIShooting.LastCheckForCoverTime = this.GameWorld.ElapsedTotalGameTime;
				this.BotAIActionPhaseSetActive(BotActionPhaseEnum.GoToCover);
				return result;
			}
			this.m_botAISeekCoverObject = null;
			return 0;
		}

		// Token: 0x0600392C RID: 14636 RVA: 0x000E34E4 File Offset: 0x000E16E4
		private bool BotAICheckCanUseHipFireTowardsDestination(Player.BotAITargetData targetData, Player.BotAITargetData destinationTargetData)
		{
			return targetData.CurrentTarget == destinationTargetData.CurrentTarget || (Math.Sign(targetData.Direction.X) == Math.Sign(destinationTargetData.Direction.X) && (this.BotAINav.NodeB == null || Math.Sign((this.BotAINav.NodeB.Box2DPosition - this.PreBox2DPosition).X) == Math.Sign(targetData.Direction.X)));
		}

		// Token: 0x0600392D RID: 14637 RVA: 0x000E3574 File Offset: 0x000E1774
		private bool BotAICheckLOSForFriendlies(RWeapon rangedWeapon, Microsoft.Xna.Framework.Vector2 targetAimDirection, Microsoft.Xna.Framework.Vector2 endTargetPosition, GameWorld.PlayerAIPackageLOSCheck.LOSStatus losStatus)
		{
			if (this.CurrentTeam == Team.Independent)
			{
				return false;
			}
			if (losStatus.TeammatesCount > 0)
			{
				return true;
			}
			bool flag = false;
			bool flag2 = false;
			RayCastOutput rayCastOutput = default(RayCastOutput);
			Box2D.XNA.RayCastInput rayCastInput = default(Box2D.XNA.RayCastInput);
			Box2D.XNA.RayCastInput rayCastInput2 = default(Box2D.XNA.RayCastInput);
			for (int i = 0; i < this.GameWorld.Players.Count; i++)
			{
				Player player = this.GameWorld.Players[i];
				if (!player.IsDisposed && player != this && this.InSameTeam(player) && (!player.IsBot || rangedWeapon.Properties.AI_ImpactAoERadius > 0f || rangedWeapon.Properties.AI_HasOneShotPotential))
				{
					float num = 0f;
					if (!flag)
					{
						float scaleFactor = (rangedWeapon.Properties.AI_GravityArcingEffect > 0f) ? 80f : 2000f;
						if (rangedWeapon.Properties.AI_ImpactAoERadius > 0f)
						{
							float num2 = (player.PreBox2DPosition - endTargetPosition).CalcSafeLength();
							if (num2 < rangedWeapon.Properties.AI_ImpactAoERadius)
							{
								return true;
							}
						}
						Microsoft.Xna.Framework.Vector2 value = this.AimVector();
						rayCastInput.p1 = ((this.CurrentAction == PlayerAction.ManualAim) ? this.GetLOSWeaponOrigin(SFD.Weapons.WeaponItemType.NONE, out num) : this.GetLOSWeaponOriginHipFire(SFD.Weapons.WeaponItemType.NONE, out num));
						rayCastInput.p1 += value * num;
						rayCastInput.p2 = rayCastInput.p1 + targetAimDirection * 0.04f * scaleFactor;
						rayCastInput.maxFraction = 1f;
						flag = true;
					}
					AABB aabb;
					player.GetAABBWhole(out aabb);
					aabb.Grow(0.08f);
					if (aabb.RayCast(out rayCastOutput, ref rayCastInput, true))
					{
						float num3 = rayCastInput.GetHitDistance(rayCastOutput.fraction) + num - 0.16f;
						if (!losStatus.EndTargetReached || num3 < losStatus.EndTargetDistance)
						{
							return true;
						}
						if (rangedWeapon.Properties.WeaponID == 17 && num3 - losStatus.EndTargetDistance < 2.3999999f)
						{
							return true;
						}
						float num4 = Microsoft.Xna.Framework.Vector2.Dot(rayCastOutput.normal, targetAimDirection);
						if (num4 < -0.6f)
						{
							return false;
						}
					}
					if (!flag2)
					{
						float num5 = Math.Min(0.12f, rangedWeapon.Properties.AccuracyDeflection);
						if (rangedWeapon.Properties.WeaponID == 17)
						{
							num5 = 0.08f;
						}
						num5 *= 0.5f;
						Microsoft.Xna.Framework.Vector2 p = rayCastInput.p1;
						rayCastInput.p2 -= p;
						rayCastInput.p1 -= p;
						rayCastInput2 = rayCastInput;
						SFDMath.RotatePosition(ref rayCastInput.p2, num5, out rayCastInput.p2);
						SFDMath.RotatePosition(ref rayCastInput2.p2, -num5, out rayCastInput2.p2);
						rayCastInput.p2 += p;
						rayCastInput.p1 += p;
						rayCastInput2.p2 += p;
						rayCastInput2.p1 += p;
						flag2 = true;
					}
					if (aabb.RayCast(out rayCastOutput, ref rayCastInput, false) || aabb.RayCast(out rayCastOutput, ref rayCastInput2, false))
					{
						float num6 = rayCastInput.GetHitDistance(rayCastOutput.fraction) + num - 0.16f;
						if (!losStatus.EndTargetReached || num6 < losStatus.EndTargetDistance)
						{
							return true;
						}
						if (rangedWeapon.Properties.WeaponID == 17 && num6 - losStatus.EndTargetDistance < 2.3999999f)
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		// Token: 0x0600392E RID: 14638 RVA: 0x000E3910 File Offset: 0x000E1B10
		internal Microsoft.Xna.Framework.Vector2 GetLOSWeaponOrigin(SFD.Weapons.WeaponItemType wpnType, out float tunnelingDistance)
		{
			RWeapon rweapon = (wpnType == SFD.Weapons.WeaponItemType.NONE) ? this.GetCurrentRangedWeaponInUse() : ((wpnType == SFD.Weapons.WeaponItemType.Rifle) ? this.CurrentRifleWeapon : ((wpnType == SFD.Weapons.WeaponItemType.Handgun) ? this.CurrentHandgunWeapon : null));
			Microsoft.Xna.Framework.Vector2 vector = ((rweapon != null) ? (rweapon.Properties.CursorAimOffset * new Microsoft.Xna.Framework.Vector2((float)this.LastDirectionX, 1f)) : new Microsoft.Xna.Framework.Vector2(0f, 2.5f)) + Microsoft.Xna.Framework.Vector2.UnitY;
			vector += this.AIM_ARM_OFFSET;
			vector.Y -= 4f;
			tunnelingDistance = Converter.WorldToBox2D(((rweapon != null) ? rweapon.Properties.MuzzlePosition.X : 0f) + vector.X);
			return this.ObjectData.GetBox2DPosition() + Converter.WorldToBox2D(vector);
		}

		// Token: 0x0600392F RID: 14639 RVA: 0x000E39E4 File Offset: 0x000E1BE4
		internal Microsoft.Xna.Framework.Vector2 GetLOSWeaponOriginHipFire(SFD.Weapons.WeaponItemType wpnType, out float tunnelingDistance)
		{
			RWeapon rweapon = (wpnType == SFD.Weapons.WeaponItemType.NONE) ? this.GetCurrentRangedWeaponInUse() : ((wpnType == SFD.Weapons.WeaponItemType.Rifle) ? this.CurrentRifleWeapon : ((wpnType == SFD.Weapons.WeaponItemType.Handgun) ? this.CurrentHandgunWeapon : null));
			Microsoft.Xna.Framework.Vector2 vector = (rweapon != null) ? rweapon.Visuals.HipFireWeaponOffset : Microsoft.Xna.Framework.Vector2.Zero;
			vector += this.AIM_HIPFIRE_BASE_OFFSET;
			vector.Y -= 4f;
			tunnelingDistance = Converter.WorldToBox2D(((rweapon != null) ? rweapon.Properties.MuzzlePosition.X : 0f) + vector.X);
			return this.ObjectData.GetBox2DPosition() + Converter.WorldToBox2D(vector);
		}

		// Token: 0x06003930 RID: 14640 RVA: 0x000E3A8C File Offset: 0x000E1C8C
		internal FixedArray2<Microsoft.Xna.Framework.Vector2> GetLOSTargetPoints()
		{
			FixedArray2<Microsoft.Xna.Framework.Vector2> result = default(FixedArray2<Microsoft.Xna.Framework.Vector2>);
			result[0] = this.ObjectData.GetBox2DPosition();
			AABB aabb;
			this.GetAABBWhole(out aabb);
			result[1] = this.ObjectData.GetBox2DPosition() + new Microsoft.Xna.Framework.Vector2(0f, aabb.Height - 0.24f);
			return result;
		}

		// Token: 0x06003931 RID: 14641 RVA: 0x000E3AEC File Offset: 0x000E1CEC
		private float BotAIWeaponScore(RWeapon rwpn, Player.BotAITargetData targetData, GameWorld.PlayerAIPackageLOSCheck.LOSStatus losStatus)
		{
			if (rwpn == null)
			{
				return 0f;
			}
			if (losStatus != null)
			{
				if (losStatus.TeammatesCount > 0 && !this.m_botBehaviorSet.RangedWeaponLOSIgnoreTeammates && this.CurrentAction != PlayerAction.ManualAim && this.CurrentAction != PlayerAction.HipFire)
				{
					return 0f;
				}
				if (losStatus.UndestructableObject)
				{
					return 0f;
				}
				if (rwpn.Properties.AI_ImpactAoERadius > 0f && losStatus.ClosestObjectDistance > -1f && losStatus.ClosestObjectDistance <= rwpn.Properties.AI_ImpactAoERadius)
				{
					return 0f;
				}
			}
			if (rwpn.Properties.AI_MaxRange > 0f && rwpn.Properties.AI_MaxRange < targetData.DistanceLength)
			{
				return 0f;
			}
			if (rwpn.IsEmpty && !rwpn.CanBeReloaded(this))
			{
				return 0f;
			}
			float num = 1f;
			if (this.GetCurrentRangedWeaponInUse() == rwpn)
			{
				num += 3f;
				if (this.m_gameWorld.ElapsedTotalGameTime - this.m_currentWeaponDrawnTimestamp < 3000f)
				{
					num = 10f;
				}
			}
			if (rwpn.Properties.AI_EffectiveRange > 0f && targetData.DistanceLength * 1.2f > rwpn.Properties.AI_EffectiveRange)
			{
				if (rwpn.Properties.AI_EffectiveRange > 0f && rwpn.Properties.AI_EffectiveRange < targetData.DistanceLength)
				{
					num *= 0.5f;
				}
			}
			else
			{
				num += 2f;
			}
			switch (rwpn.Properties.AI_DamageOutput)
			{
			case DamageOutputType.Low:
				num *= 0.5f;
				break;
			case DamageOutputType.Standard:
				num *= 1f;
				break;
			case DamageOutputType.High:
				num *= 2f;
				break;
			}
			if (targetData.IsPlayer && targetData.Player.Health.CurrentValue < 15f && rwpn.AI_CheckCanSprayAndPray() && rwpn.PotentialDamageOutput() > targetData.Player.Health.CurrentValue)
			{
				num += 10f;
			}
			else
			{
				short weaponID = rwpn.Properties.WeaponID;
				if (weaponID <= 6)
				{
					if (weaponID != 1)
					{
						if (weaponID == 6)
						{
							num += 10f;
						}
					}
					else
					{
						num += 8f;
					}
				}
				else if (weaponID != 9)
				{
					if (weaponID != 17)
					{
						if (weaponID == 29)
						{
							num += 10f;
						}
					}
					else
					{
						num += 10f;
					}
				}
				else
				{
					num += 10f;
				}
			}
			if (losStatus != null)
			{
				if (losStatus.TotalObjectHealth > 0f)
				{
					float num2 = rwpn.PotentialDamageOutput();
					if (losStatus.TotalObjectHealth >= num2)
					{
						num *= 0f;
					}
				}
				if (losStatus.TotalObjectStrength > 0f && losStatus.TotalObjectStrength < rwpn.StrengthPerProjectile())
				{
					num += 10f;
				}
				else if (losStatus.MaxObjectStrength > 0f && losStatus.MaxObjectStrength < rwpn.StrengthPerProjectile() && losStatus.ObjectCheckCount < rwpn.GetTotalRoundsLeft(this))
				{
					num += 7f;
				}
				if (rwpn.Properties.AI_ImpactAoERadius > 0f && losStatus.MaxObjectHealth < 100f && losStatus.ObjectCheckCount < rwpn.GetTotalRoundsLeft(this))
				{
					num += 5f;
				}
			}
			return num;
		}

		// Token: 0x06003932 RID: 14642 RVA: 0x000E3DF0 File Offset: 0x000E1FF0
		private void InitBotActionPhases()
		{
			this.m_botAIActionPhases = new Dictionary<BotActionPhaseEnum, BotActionPhase>
			{
				{
					BotActionPhaseEnum.DodgeProjectile,
					new BotActionPhase(BotActionPhaseEnum.DodgeProjectile, false)
				},
				{
					BotActionPhaseEnum.ExtinguishFire,
					new BotActionPhase(BotActionPhaseEnum.ExtinguishFire, true)
				},
				{
					BotActionPhaseEnum.CatchProjectileItem,
					new BotActionPhase(BotActionPhaseEnum.CatchProjectileItem, true)
				},
				{
					BotActionPhaseEnum.MeleeBlock,
					new BotActionPhase(BotActionPhaseEnum.MeleeBlock, false)
				},
				{
					BotActionPhaseEnum.GoToCover,
					new BotActionPhase(BotActionPhaseEnum.GoToCover, true)
				},
				{
					BotActionPhaseEnum.ManualAim,
					new BotActionPhase(BotActionPhaseEnum.ManualAim, false)
				},
				{
					BotActionPhaseEnum.HipFire,
					new BotActionPhase(BotActionPhaseEnum.HipFire, true)
				},
				{
					BotActionPhaseEnum.DrawWeapon,
					new BotActionPhase(BotActionPhaseEnum.DrawWeapon, true)
				},
				{
					BotActionPhaseEnum.Melee,
					new BotActionPhase(BotActionPhaseEnum.Melee, true)
				},
				{
					BotActionPhaseEnum.Move,
					new BotActionPhase(BotActionPhaseEnum.Move, true)
				}
			};
		}

		// Token: 0x06003933 RID: 14643 RVA: 0x0002F152 File Offset: 0x0002D352
		private bool BotAIActionPhaseIsActive(BotActionPhaseEnum value)
		{
			return (this.m_botAICurrentActiveActionPhase & value) != BotActionPhaseEnum.None;
		}

		// Token: 0x06003934 RID: 14644 RVA: 0x0002F162 File Offset: 0x0002D362
		private bool BotAIActionPhaseIsPrioritized(BotActionPhaseEnum value)
		{
			return this.m_botAICurrentActiveActionPhase == BotActionPhaseEnum.None || value <= this.m_botAICurrentActiveActionPhase;
		}

		// Token: 0x06003935 RID: 14645 RVA: 0x0002F17A File Offset: 0x0002D37A
		private void BotAIActionPhaseSetActive(BotActionPhaseEnum value)
		{
			this.m_botAIActionPhases[value].Active = true;
		}

		// Token: 0x06003936 RID: 14646 RVA: 0x000E3EB4 File Offset: 0x000E20B4
		private void BotAIUpdatePhases()
		{
			BotActionPhaseEnum botActionPhaseEnum = BotActionPhaseEnum.None;
			BotActionPhaseEnum botAICurrentActiveActionPhase = BotActionPhaseEnum.None;
			bool botAICurrentActiveActionPhaseCanMove = true;
			int num = 9999;
			foreach (KeyValuePair<BotActionPhaseEnum, BotActionPhase> keyValuePair in this.m_botAIActionPhases)
			{
				BotActionPhase value = keyValuePair.Value;
				if (value.Active)
				{
					if (value.ClearNextUpdate)
					{
						value.Active = false;
					}
					else
					{
						if (value.Action < (BotActionPhaseEnum)num)
						{
							num = (int)value.Action;
							botAICurrentActiveActionPhaseCanMove = value.CanMove;
							botAICurrentActiveActionPhase = value.Action;
						}
						botActionPhaseEnum |= value.Action;
						value.ClearNextUpdate = true;
					}
				}
			}
			this.m_botAIActionPhaseValues = botActionPhaseEnum;
			this.m_botAICurrentActiveActionPhase = botAICurrentActiveActionPhase;
			this.m_botAICurrentActiveActionPhaseCanMove = botAICurrentActiveActionPhaseCanMove;
		}

		// Token: 0x06003937 RID: 14647 RVA: 0x000E3F80 File Offset: 0x000E2180
		private bool UpdateAIAvoidProjectiles(float totalMs)
		{
			if (this.m_botBehaviorSet.DefensiveAvoidProjectilesLevel > 0f)
			{
				int num = 0;
				bool result;
				try
				{
					if (!this.BotAIActionPhaseIsPrioritized(BotActionPhaseEnum.DodgeProjectile))
					{
						result = false;
					}
					else if (!this.Rolling && !this.InAir)
					{
						num = 1;
						if (this.m_botAIDodgeProjectileFrames > 0)
						{
							if (this.m_botAIDodgeProjectileAction == 2)
							{
								this.KeyActionJump();
							}
							else
							{
								if (this.m_botAIDodgeProjectileAction == 1)
								{
									this.KeyActionRight(Player.PressKeyType.Hold);
								}
								else
								{
									this.KeyActionLeft(Player.PressKeyType.Hold);
								}
								this.KeyActionRollDive();
								this.BotAIActionPhaseSetActive(BotActionPhaseEnum.DodgeProjectile);
							}
							this.m_botAIDodgeProjectileFrames -= 1;
							result = true;
						}
						else
						{
							num = 2;
							if ((!this.TimeSequence.StuntOnCooldown || !this.InAir) && (!this.FireSequence.WeaponBurstMode || this.FireSequence.WeaponBurstRoundsToFireLeft <= 0))
							{
								if (this.GameWorld.Projectiles.Count == 0)
								{
									this.m_botAIDodgeProjectileHandledProjectiles.Clear();
									this.m_botAIDodgeProjectileCheckedDodge.Clear();
								}
								else
								{
									num = 3;
									Microsoft.Xna.Framework.Vector2 preWorld2DPosition = this.PreWorld2DPosition;
									foreach (Projectile projectile in this.GameWorld.Projectiles)
									{
										num = 4;
										if (projectile != null && !projectile.IsDisposed && !this.m_botAIDodgeProjectileHandledProjectiles.Contains(projectile.InstanceID))
										{
											if (!this.m_botAIDodgeProjectileCheckedDodge.Contains(projectile.InstanceID))
											{
												num = 5;
												this.m_botAIDodgeProjectileCheckedDodge.Add(projectile.InstanceID);
												if (this.m_botAIDodgeProjectileLastRandomProjectileID != (int)projectile.Properties.ProjectileID | this.GameWorld.ElapsedTotalGameTime - this.m_botAIDodgeProjectileLastRandomTimestamp > 200f)
												{
													this.m_botAIDodgeProjectileLastRandomValue = Constants.RANDOM.NextFloat();
													this.m_botAIDodgeProjectileLastRandomTimestamp = this.GameWorld.ElapsedTotalGameTime;
													this.m_botAIDodgeProjectileLastRandomProjectileID = (int)projectile.Properties.ProjectileID;
												}
												if (this.m_botAIDodgeProjectileLastRandomValue > this.m_botBehaviorSet.DefensiveAvoidProjectilesLevel)
												{
													this.m_botAIDodgeProjectileHandledProjectiles.Add(projectile.InstanceID);
													continue;
												}
											}
											num = 6;
											bool flag = projectile.Properties.ProjectileID == 17 | projectile.Properties.ProjectileID == 27 | projectile.Properties.ProjectileID == 29;
											if (projectile.PlayerOwnerID != this.ObjectID)
											{
												Microsoft.Xna.Framework.Vector2 vector = preWorld2DPosition - projectile.Position;
												Microsoft.Xna.Framework.Vector2 vector2 = Microsoft.Xna.Framework.Vector2.Normalize(vector);
												if (vector2.IsValid())
												{
													float num2 = Microsoft.Xna.Framework.Vector2.Dot(vector2, projectile.Direction);
													if (!flag & (num2 < 0.8f || this.CheckProjectileMissed(projectile)))
													{
														this.m_botAIDodgeProjectileHandledProjectiles.Add(projectile.InstanceID);
													}
													else if (vector.CalcSafeLength() < 150f)
													{
														num = 7;
														Box2D.XNA.RayCastInput rayCastInput = default(Box2D.XNA.RayCastInput);
														rayCastInput.p1 = Converter.WorldToBox2D(projectile.Position);
														rayCastInput.p2 = Converter.WorldToBox2D(projectile.Position + projectile.Direction * vector.CalcSafeLength());
														rayCastInput.maxFraction = 1f;
														AABB aabb;
														this.GetAABBWhole(out aabb);
														RayCastOutput rayCastOutput;
														if (aabb.Contains(ref rayCastInput.p2) || aabb.RayCast(out rayCastOutput, ref rayCastInput))
														{
															num = 8;
															if (projectile.LastDirectionX != this.LastDirectionX && this.TakingCover && this.m_botBehaviorSet.SeekCoverWhileShooting > 0f && (this.m_coverObject == null || this.m_coverObject.IsDisposed || projectile.StrengthLeft < this.m_coverObject.Health.CurrentValue || !this.m_coverObject.Destructable) && this.m_coverObject != null && !this.m_coverObject.IsDisposed && projectile.PlayerOwner != null && this.m_coverObject != projectile.PlayerOwner.CoverObject)
															{
																this.m_botAIDodgeProjectileAction = ((this.LastDirectionX == 1) ? 1 : 0);
																this.m_botAIShooting.ForcedCoverTime = Constants.RANDOM.NextFloat(250f, 750f);
															}
															else if (this.TimeSequence.StuntOnCooldown || flag)
															{
																this.m_botAIDodgeProjectileAction = 2;
															}
															else
															{
																num = 9;
																this.m_botAIDodgeProjectileAction = 2;
																PathNode pathNode = null;
																if (this.BotAINav.NodeA != null)
																{
																	if (this.BotAINav.NodeB != null && this.BotAINav.CurrentConnectionIsOfType(new PathNodeConnectionType[]
																	{
																		PathNodeConnectionType.Default,
																		PathNodeConnectionType.Portal
																	}))
																	{
																		this.m_botAIDodgeProjectileAction = (((this.BotAINav.NodeB.Box2DPosition - this.BotAINav.NodeA.Box2DPosition).X > 0f) ? 1 : 0);
																	}
																	else
																	{
																		pathNode = this.BotAINav.NodeA;
																	}
																}
																else
																{
																	pathNode = this.GameWorld.PathGrid.FindClosestPathNodeBelow(this.PreBox2DPosition, true, 1.1999999f, 0.96f, 0.64f);
																}
																if (pathNode != null)
																{
																	num = 10;
																	foreach (PathNodeConnection pathNodeConnection in pathNode.Connections)
																	{
																		if ((pathNodeConnection.Enabled & !pathNodeConnection.BlockedByZone) && (pathNodeConnection.ConnectionType == PathNodeConnectionType.Default | pathNodeConnection.ConnectionType == PathNodeConnectionType.Portal))
																		{
																			PathNode otherPathNode = pathNodeConnection.GetOtherPathNode(pathNode);
																			if (otherPathNode != null)
																			{
																				this.m_botAIDodgeProjectileAction = (((otherPathNode.Box2DPosition - pathNode.Box2DPosition).X > 0f) ? 1 : 0);
																				break;
																			}
																		}
																	}
																}
															}
															this.m_botAIDodgeProjectileFrames = 4;
															this.m_botAIDodgeProjectileBeforeActionPhase = this.m_botAICurrentActiveActionPhase;
															return true;
														}
													}
												}
											}
										}
									}
								}
								return false;
							}
							result = false;
						}
					}
					else
					{
						this.m_botAIDodgeProjectileFrames = 0;
						if (this.m_botAIDodgeProjectileBeforeActionPhase != BotActionPhaseEnum.None)
						{
							this.BotAIActionPhaseSetActive(this.m_botAIDodgeProjectileBeforeActionPhase);
							this.m_botAIDodgeProjectileBeforeActionPhase = BotActionPhaseEnum.None;
						}
						result = false;
					}
				}
				catch (Exception innerException)
				{
					throw new Exception("UpdateAIAvoidProjectiles() Error at " + num, innerException);
				}
				return result;
			}
			return false;
		}

		// Token: 0x17000941 RID: 2369
		// (get) Token: 0x06003938 RID: 14648 RVA: 0x0002F18E File Offset: 0x0002D38E
		// (set) Token: 0x06003939 RID: 14649 RVA: 0x0002F196 File Offset: 0x0002D396
		public ObjectData SourceGuardTarget { get; private set; }

		// Token: 0x17000942 RID: 2370
		// (get) Token: 0x0600393A RID: 14650 RVA: 0x0002F19F File Offset: 0x0002D39F
		public bool HasGuardTarget
		{
			get
			{
				return this.SourceGuardTarget != null;
			}
		}

		// Token: 0x0600393B RID: 14651 RVA: 0x0002F1AD File Offset: 0x0002D3AD
		internal ObjectData GetSourceGuardTarget()
		{
			if (this.SourceGuardTarget != null && !this.SourceGuardTarget.IsDisposed)
			{
				return this.SourceGuardTarget;
			}
			return null;
		}

		// Token: 0x0600393C RID: 14652 RVA: 0x0002F1CC File Offset: 0x0002D3CC
		public ObjectData GetActiveGuardTarget()
		{
			if (this.SourceGuardTarget != null && !this.SourceGuardTarget.IsDisposed && this.BotBehaviorSet.GuardRange > 0f)
			{
				return this.SourceGuardTarget;
			}
			return null;
		}

		// Token: 0x0600393D RID: 14653 RVA: 0x000E45DC File Offset: 0x000E27DC
		public void SetGuardTarget(ObjectData od)
		{
			if (od == null || od.IsDisposed)
			{
				this.SourceGuardTarget = null;
				return;
			}
			if (!(od is IObjectTranslucencePointer))
			{
				this.SourceGuardTarget = od;
				return;
			}
			od = ((IObjectTranslucencePointer)od).GetTranslucenceObject();
			if (od != null && !od.IsDisposed)
			{
				this.SourceGuardTarget = od;
				return;
			}
			this.SourceGuardTarget = null;
		}

		// Token: 0x0600393E RID: 14654 RVA: 0x000E4634 File Offset: 0x000E2834
		private bool UpdateAIBurning(float totalMs)
		{
			if (this.m_botBehaviorSet.DefensiveRollFireLevel > 0f)
			{
				if (!this.BotAIActionPhaseIsPrioritized(BotActionPhaseEnum.ExtinguishFire))
				{
					return false;
				}
				bool flag = false;
				if (this.Burning)
				{
					float num = 1f / this.m_modifiers.FireDamageTakenModifier;
					this.m_botAIBurnTime += totalMs;
					float num2 = 100f + (1f - this.m_botBehaviorSet.DefensiveRollFireLevel) * this.m_botAIBurnTimeRandomMaxDelay;
					if (this.m_botAIBurnTime > num2 || (this.Health.CurrentValue * num < 5f && this.m_botAIBurnTime > 100f))
					{
						flag = true;
					}
				}
				else if (this.m_botAIBurnTime > 0f)
				{
					this.m_botAIBurnTime = Math.Max(this.m_botAIBurnTime - totalMs, 0f);
				}
				if (this.m_botAIBurnTimeRandomRollIndex != this.Statisticts.m_TotalRolls)
				{
					this.m_botAIBurnTimeRandomRollIndex = this.Statisticts.m_TotalRolls;
					this.m_botAIBurnTimeRandomMaxDelay = Constants.RANDOM.NextFloat(2500f, 3500f);
					this.m_botAIRandomRollDirection = Constants.RANDOM.Next(-1, 2);
				}
				if (flag && (!this.Climbing & !this.Diving))
				{
					if (!this.IsHoldingPlayerInGrab)
					{
						this.BotAIActionPhaseSetActive(BotActionPhaseEnum.ExtinguishFire);
						if (this.CanRoll())
						{
							this.KeyAction(21, Player.PressKeyType.Hold);
							if ((this.m_botAIRandomRollDirection == 0 && this.LastDirectionX == 1) || this.m_botAIRandomRollDirection == 1)
							{
								this.KeyActionRight(Player.PressKeyType.Hold);
							}
							else
							{
								this.KeyActionLeft(Player.PressKeyType.Hold);
							}
							this.KeyActionRollDive();
						}
						return true;
					}
					this.KeyAction(5, Player.PressKeyType.Tap);
				}
			}
			return false;
		}

		// Token: 0x17000943 RID: 2371
		// (get) Token: 0x0600393F RID: 14655 RVA: 0x0002F1FD File Offset: 0x0002D3FD
		private Player.BotAITeamLineUpData TeamLineUp
		{
			get
			{
				return this.m_botAITeamLineUpData;
			}
		}

		// Token: 0x06003940 RID: 14656 RVA: 0x0002F205 File Offset: 0x0002D405
		private void InitTeamLineUp()
		{
			this.m_botAITeamCurrentLineUps = new Dictionary<Player, Player.TeamLineUpEntry>();
			this.m_botAITeamLineUpData = new Player.BotAITeamLineUpData();
		}

		// Token: 0x06003941 RID: 14657 RVA: 0x000E47C4 File Offset: 0x000E29C4
		private void DisposeTeamLineUp()
		{
			if (this.m_botAITeamCurrentLineUps != null)
			{
				foreach (KeyValuePair<Player, Player.TeamLineUpEntry> keyValuePair in this.m_botAITeamCurrentLineUps)
				{
					keyValuePair.Value.FlagAsFree();
				}
				this.m_botAITeamCurrentLineUps.Clear();
				this.m_botAITeamCurrentLineUps = null;
			}
			this.m_botAITeamLineUpData = null;
		}

		// Token: 0x06003942 RID: 14658 RVA: 0x000E4840 File Offset: 0x000E2A40
		private void BotAICheckTeamLineUp(float totalMs)
		{
			if (!this.IsDead)
			{
				Player.TeamLineUpEntry.LineUpType type = this.TeamMustLineUpToPass() ? Player.TeamLineUpEntry.LineUpType.TeamLineUp : Player.TeamLineUpEntry.LineUpType.OverlapResolve;
				float teamLineUpDistance = Player.TeamLineUpEntry.GetTeamLineUpDistance(type);
				for (int i = 0; i < this.GameWorld.Players.Count; i++)
				{
					Player player = this.GameWorld.Players[i];
					if (!player.IsDisposed && player != this && player.IsBot && player.InSameTeam(this))
					{
						Player.TeamLineUpEntry teamLineUpEntry = null;
						if (player.m_botAITeamCurrentLineUps.TryGetValue(this, out teamLineUpEntry))
						{
							if (player.BotBehaviorSet.TeamLineUp)
							{
								teamLineUpEntry.Type = type;
								if (this.CurrentAction == PlayerAction.ManualAim && this.m_botAIShooting.CurrentShootState == Player.BotAIShootingValues.CurrentShootStateType.InitialAimShootDelay && player.GetCurrentRangedWeaponInUse() != null)
								{
									teamLineUpEntry.Timestamp = this.GameWorld.ElapsedTotalGameTime;
								}
							}
							else
							{
								teamLineUpEntry.Type = Player.TeamLineUpEntry.LineUpType.OverlapResolve;
							}
						}
						else
						{
							Microsoft.Xna.Framework.Vector2 vector = player.Position - this.Position;
							if (Math.Abs(vector.X) <= teamLineUpDistance && Math.Abs(vector.Y) <= 14f)
							{
								teamLineUpEntry = Player.TeamLineUpEntry.GetFreeEntry(this, this.GameWorld.ElapsedTotalGameTime, type);
								player.m_botAITeamCurrentLineUps.Add(this, teamLineUpEntry);
							}
						}
					}
				}
			}
		}

		// Token: 0x06003943 RID: 14659 RVA: 0x000E4988 File Offset: 0x000E2B88
		private void BotAIUpdateTeamLineUps(float ms, Player.BotAITargetData targetData)
		{
			this.TeamLineUp.Reset();
			if (this.m_botAITeamCurrentLineUps.Count == 0)
			{
				return;
			}
			List<Player> list = null;
			float num = -99f;
			float num2 = 99f;
			foreach (KeyValuePair<Player, Player.TeamLineUpEntry> keyValuePair in this.m_botAITeamCurrentLineUps)
			{
				Player key = keyValuePair.Key;
				Player.TeamLineUpEntry value = keyValuePair.Value;
				if (!key.IsDisposed && !key.IsDead)
				{
					Microsoft.Xna.Framework.Vector2 vector = key.Position - this.Position;
					if (Math.Abs(vector.X) <= 16f && Math.Abs(vector.Y) <= 16f)
					{
						if (value.Type == Player.TeamLineUpEntry.LineUpType.TeamLineUp)
						{
							float num3 = Math.Abs(targetData.Difference.X);
							if (num3 > 60f)
							{
								num3 = 0f;
							}
							else if (num3 < 24f)
							{
								num3 = 1000f;
							}
							else
							{
								num3 = 1000f - (num3 - 24f) / 36f * 750f;
							}
							if (this.GetCurrentRangedWeaponInUse() != null)
							{
								num3 = 1000f;
							}
							this.TeamLineUp.WaitTime = num3;
							this.TeamLineUp.WaitTimeRemaining = num3 - (this.GameWorld.ElapsedTotalGameTime - value.Timestamp);
							if (this.GameWorld.ElapsedTotalGameTime - value.Timestamp <= num3)
							{
								if (vector.X < 0f)
								{
									if (num < vector.X)
									{
										num = vector.X;
										this.TeamLineUp.LeftTeammate = key;
										this.TeamLineUp.LeftTeammateType = Player.TeamLineUpEntry.LineUpType.TeamLineUp;
									}
								}
								else if (num2 > vector.X)
								{
									num2 = vector.X;
									this.TeamLineUp.RightTeammate = key;
									this.TeamLineUp.RightTeammateType = Player.TeamLineUpEntry.LineUpType.TeamLineUp;
								}
							}
						}
						else if (Math.Abs(vector.X) <= 4f)
						{
							if (vector.X < 0f)
							{
								if (num < vector.X)
								{
									num = vector.X;
									this.TeamLineUp.LeftTeammate = key;
								}
							}
							else if (num2 > vector.X)
							{
								num2 = vector.X;
								this.TeamLineUp.RightTeammate = key;
							}
						}
					}
					else
					{
						if (list == null)
						{
							list = new List<Player>();
						}
						list.Add(key);
						value.FlagAsFree();
					}
				}
				else
				{
					if (list == null)
					{
						list = new List<Player>();
					}
					list.Add(key);
					value.FlagAsFree();
				}
			}
			if (list != null)
			{
				foreach (Player key2 in list)
				{
					this.m_botAITeamCurrentLineUps.Remove(key2);
				}
			}
		}

		// Token: 0x06003944 RID: 14660 RVA: 0x000E4C90 File Offset: 0x000E2E90
		private void BotAINavCheckTeamLineUpMoveCancel(float ms, Player.BotAITargetData targetData)
		{
			if ((this.TeamLineUp.LeftTeammate != null && this.LastDirectionX == -1) || (this.TeamLineUp.RightTeammate != null && this.LastDirectionX == 1))
			{
				if (this.StandingOnGround && this.CurrentAction == PlayerAction.Idle)
				{
					int num = this.KeyActionCurrentlyPressedTappedDirection();
					if (this.LastDirectionX == num)
					{
						if (this.LastDirectionX == 1 && this.TeamLineUp.RightTeammateType == Player.TeamLineUpEntry.LineUpType.OverlapResolve && this.TeamLineUp.RightTeammate.Movement != PlayerMovement.Right)
						{
							return;
						}
						if (this.LastDirectionX == -1 && this.TeamLineUp.LeftTeammateType == Player.TeamLineUpEntry.LineUpType.OverlapResolve && this.TeamLineUp.LeftTeammate.Movement != PlayerMovement.Left)
						{
							return;
						}
						this.m_botAITotalQueueTime = Math.Min(this.m_botAITotalQueueTime + ms, 1500f);
						if ((this.TeamLineUp.LeftTeammateType == Player.TeamLineUpEntry.LineUpType.OverlapResolve && this.TeamLineUp.RightTeammateType == Player.TeamLineUpEntry.LineUpType.OverlapResolve) || this.m_botAITotalQueueTime < 1000f)
						{
							this.KeyActionDirection(0, Player.PressKeyType.Release);
							return;
						}
					}
				}
			}
			else if (targetData.DistanceLength > 60f && this.m_botAITotalQueueTime > 0f)
			{
				this.m_botAITotalQueueTime = Math.Max(this.m_botAITotalQueueTime - ms, 0f);
			}
		}

		// Token: 0x06003945 RID: 14661 RVA: 0x000067E2 File Offset: 0x000049E2
		private bool CheckIsPlayerLiningUp()
		{
			return false;
		}

		// Token: 0x06003946 RID: 14662 RVA: 0x0002F21D File Offset: 0x0002D41D
		internal bool TeamMustLineUpToPass()
		{
			return (this.Movement == PlayerMovement.Idle && !this.BotAITargetDestination.IsFarAway && this.BotAITargetDestination.TargetIsHostile) || this.CurrentAction == PlayerAction.ManualAim || this.CurrentAction == PlayerAction.HipFire;
		}

		// Token: 0x17000944 RID: 2372
		// (get) Token: 0x06003947 RID: 14663 RVA: 0x0002F255 File Offset: 0x0002D455
		private bool BotAIEnragedSprint
		{
			get
			{
				return this.m_botAIMeleeEnrageAccumulation > 1000f && (this.Sprinting | this.Energy.IsFull | this.Energy.CurrentValue >= 100f);
			}
		}

		// Token: 0x17000945 RID: 2373
		// (get) Token: 0x06003948 RID: 14664 RVA: 0x0002F28E File Offset: 0x0002D48E
		// (set) Token: 0x06003949 RID: 14665 RVA: 0x0002F296 File Offset: 0x0002D496
		private Player.BotAIMeleeStatus m_botAIMeleeStatus { get; set; }

		// Token: 0x0600394A RID: 14666 RVA: 0x000E4DCC File Offset: 0x000E2FCC
		private void AIClimbCheck(float totalMs, Player.BotAITargetData targetData)
		{
			if ((this.Climbing & targetData.IsPlayer) && (targetData.Difference.Y > 0f & targetData.Difference.Y < 28f))
			{
				Player player = targetData.Player;
				if (player.Climbing && player.ClimbingDirection <= 0)
				{
					if (this.AIMeleeSheatheCheckToMelee(false))
					{
						this.KeyAction(4, Player.PressKeyType.Tap);
						return;
					}
				}
				else if (player.StandingOnGround && this.m_botBehaviorSet.OffensiveClimbingLevel > 0f)
				{
					if (this.m_botAIMeleeClimbRandomJumpIndex != this.Statisticts.m_TotalJumps)
					{
						this.m_botAIMeleeClimbRandomJumpIndex = this.Statisticts.m_TotalJumps;
						if (this.m_botBehaviorSet.OffensiveClimbingLevel > Constants.RANDOM.NextFloat())
						{
							this.m_botAIMeleeClimbRandomPauseTime = Constants.RANDOM.NextFloat(100f, 450f);
							this.m_botAIMeleeClimbRandomJump |= Constants.RANDOM.NextBool();
						}
						if (this.m_botBehaviorSet.OffensiveClimbingLevel > Constants.RANDOM.NextFloat())
						{
							this.m_botAIMeleeClimbRandomJump |= Constants.RANDOM.NextBool();
						}
						if (this.m_botAIMeleeClimbRandomJump)
						{
							this.m_botAIMeleeRandomInitialDelayPerformed = true;
							this.m_botAIMeleeDelay = 0f;
						}
					}
					if (this.m_botAIMeleeClimbRandomPauseTime > 0f)
					{
						this.m_botAIMeleeClimbRandomPauseTime -= totalMs;
						this.KeyAction(0, Player.PressKeyType.Release);
						return;
					}
					if (this.m_botAIMeleeClimbRandomJump)
					{
						this.m_botAIMeleeClimbRandomJump = false;
						if (this.AIMeleeSheatheCheckToMelee(false))
						{
							this.KeyAction(4, Player.PressKeyType.Tap);
						}
					}
				}
			}
		}

		// Token: 0x0600394B RID: 14667 RVA: 0x000E4F60 File Offset: 0x000E3160
		private ObjectData BotAIFacingObject(out bool isGlass, bool includeStatic)
		{
			ObjectData objectData = null;
			isGlass = false;
			if (this.LastDirectionX == -1 && this.Contacts.LeftCollisionContactsCount > 0)
			{
				int num = (this.BotAINav.NodeA != null) ? this.BotAINav.NodeA.FollowObjectID : 0;
				int num2 = (this.BotAINav.NodeB != null) ? this.BotAINav.NodeB.FollowObjectID : 0;
				for (int i = 0; i < this.Contacts.LeftCollisionContactsCount; i++)
				{
					ObjectData objectData2 = ObjectData.Read(this.Contacts.LeftCollisionContacts[i].Fixture);
					if (objectData2 != null && !objectData2.IsDisposed && objectData2.ObjectID != num && objectData2.ObjectID != num2)
					{
						objectData = objectData2;
						if (objectData2.IsDynamic || (objectData2.IsStatic && objectData2.Destructable))
						{
							break;
						}
						if (!includeStatic)
						{
							objectData = null;
						}
					}
				}
			}
			else if (this.LastDirectionX == 1 && this.Contacts.RightCollisionContactsCount > 0)
			{
				int num3 = (this.BotAINav.NodeA != null) ? this.BotAINav.NodeA.FollowObjectID : 0;
				int num4 = (this.BotAINav.NodeB != null) ? this.BotAINav.NodeB.FollowObjectID : 0;
				for (int j = 0; j < this.Contacts.RightCollisionContactsCount; j++)
				{
					ObjectData objectData3 = ObjectData.Read(this.Contacts.RightCollisionContacts[j].Fixture);
					if (objectData3 != null && !objectData3.IsDisposed && objectData3.ObjectID != num3 && objectData3.ObjectID != num4)
					{
						objectData = objectData3;
						if (objectData3.IsDynamic || (objectData3.IsStatic && objectData3.Destructable))
						{
							break;
						}
						if (!includeStatic)
						{
							objectData = null;
						}
					}
				}
			}
			isGlass = (objectData != null && objectData is ObjectGlass);
			return objectData;
		}

		// Token: 0x0600394C RID: 14668 RVA: 0x000E513C File Offset: 0x000E333C
		private void BotAICheckMoveObstacles(float totalMs)
		{
			bool flag = false;
			ObjectData objectData = this.BotAIFacingObject(out flag, this.m_botAINavMoveAroundObstacles);
			if (objectData == null)
			{
				objectData = this.CoverObject;
			}
			if ((this.CurrentAction == PlayerAction.ManualAim || this.CurrentAction == PlayerAction.HipFire || this.m_botAIShooting.ForcedCoverTime > -200f) && this.m_coverObject == objectData)
			{
				objectData = null;
			}
			if (objectData != null)
			{
				Player.BotAIObstacleInfo botAIObstacleInfo = null;
				bool flag2 = false;
				if (flag)
				{
					this.KeyAction(19, Player.PressKeyType.Release);
					flag2 = true;
				}
				else
				{
					if (!this.m_botAIObstacleInfo.TryGetValue(objectData.ObjectID, out botAIObstacleInfo))
					{
						botAIObstacleInfo = new Player.BotAIObstacleInfo();
						botAIObstacleInfo.CooldownTime = 0f;
						botAIObstacleInfo.ObstructionTime = 0f;
						botAIObstacleInfo.ActionType = 0;
						botAIObstacleInfo.ActionTime = 200f;
						this.m_botAIObstacleInfo.Add(objectData.ObjectID, botAIObstacleInfo);
					}
					botAIObstacleInfo.ObstructionTime += totalMs;
					botAIObstacleInfo.CooldownTime = 800f;
					if (botAIObstacleInfo.ObstructionTime >= 500f)
					{
						botAIObstacleInfo.ObstructionTime = 500f;
						if (Constants.RANDOM.NextFloat() < 0.1f)
						{
							botAIObstacleInfo.ObstructionTime = 300f;
						}
						flag2 = true;
					}
					if (this.m_botAIKeyActionLeftRight && (!this.Sprinting || !this.BotAINav.CurrentConnectionIsOfType(PathNodeConnectionType.Dive)))
					{
						botAIObstacleInfo.ActionTime -= totalMs;
						if (botAIObstacleInfo.ActionTime <= 0f)
						{
							botAIObstacleInfo.ActionTime = 200f;
							botAIObstacleInfo.ActionType = (botAIObstacleInfo.ActionType + 1) % 3;
						}
						if (this.m_botAINavMoveAroundObstacles)
						{
							switch (botAIObstacleInfo.ActionType)
							{
							case 0:
								if (this.StandingOnGround)
								{
									this.KeyActionJump();
									flag2 = false;
								}
								break;
							case 1:
								if (this.StandingOnGround)
								{
									this.KeyActionRollDive();
									flag2 = false;
								}
								break;
							case 2:
								if (!flag2 && this.StandingOnGround)
								{
									this.KeyActionJump();
								}
								break;
							}
						}
					}
				}
				if (flag2)
				{
					this.KeyAction(19, Player.PressKeyType.Release);
					if (!this.PerformingMelee && this.CurrentAction != PlayerAction.Kick)
					{
						if (((this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.NONE && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee) || Constants.RANDOM.NextFloat() < 0.6f) && this.CanKick(0f))
						{
							this.KeyAction(15, Player.PressKeyType.Tap);
							return;
						}
						if (this.AIMeleeSheatheCheckToMelee(false))
						{
							this.KeyAction(4, Player.PressKeyType.Tap);
							return;
						}
					}
				}
			}
			else
			{
				if (this.m_botAINavMoveAroundObstacles && this.Contacts.TopCollisionContactsCount > 0 && !this.LedgeGrabbing && !this.Climbing)
				{
					Body body = this.Contacts.TopCollisionContacts[0].Fixture.GetBody();
					if (!body.IsDestroyed && body.GetLinearVelocity().Y - this.PreBox2DLinearVelocity.Y < 0.5f)
					{
						if ((int)(this.m_botAINavStuckXTimer * 0.001f) % 2 == 0)
						{
							this.KeyActionJump();
						}
						else
						{
							this.KeyActionRollDive();
						}
					}
				}
				if (this.m_botAIObstacleInfo.Count > 0)
				{
					List<int> list = null;
					foreach (KeyValuePair<int, Player.BotAIObstacleInfo> keyValuePair in this.m_botAIObstacleInfo)
					{
						keyValuePair.Value.CooldownTime -= totalMs;
						if (keyValuePair.Value.CooldownTime <= 0f)
						{
							if (list == null)
							{
								list = new List<int>();
							}
							list.Add(keyValuePair.Key);
						}
					}
					if (list != null)
					{
						foreach (int key in list)
						{
							this.m_botAIObstacleInfo.Remove(key);
						}
					}
				}
			}
		}

		// Token: 0x0600394D RID: 14669 RVA: 0x000E54E8 File Offset: 0x000E36E8
		private void AIUpdateMeleeEnrage(float totalMs)
		{
			if (this.MeleeHit)
			{
				this.m_botAIMeleeEnrageAccumulation = Math.Min(this.m_botAIMeleeEnrageAccumulation + totalMs * 2f * this.m_botBehaviorSet.OffensiveEnrageLevel, 3000f + 2000f * this.m_botBehaviorSet.OffensiveEnrageLevel);
			}
			else if (this.m_botAIMeleeEnrageAccumulation > 0f)
			{
				this.m_botAIMeleeEnrageAccumulation -= totalMs * (this.Sprinting ? 0.3f : 0.1f);
			}
			if (this.BotAIEnragedSprint)
			{
				this.KeyAction(18, Player.PressKeyType.Hold);
			}
		}

		// Token: 0x0600394E RID: 14670 RVA: 0x000E557C File Offset: 0x000E377C
		private void UpdateAIMelee_Object(float totalMs, Player.BotAITargetData targetData)
		{
			this.m_botAIMeleeRandomInitialDelayPerformed = false;
			this.m_botAIMeleeDelay -= totalMs;
			if (this.m_botAIMeleeDelay <= 0f)
			{
				if (this.PerformingMelee)
				{
					if (Constants.RANDOM.NextFloat() <= 0.7f)
					{
						this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(200f, 300f);
					}
					else
					{
						this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(600f, 900f);
					}
				}
				if (Constants.RANDOM.NextFloat() > 0.25f)
				{
					if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee || this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE)
					{
						this.KeyAction(4, Player.PressKeyType.Tap);
						return;
					}
				}
				this.KeyAction(15, Player.PressKeyType.Tap);
				return;
			}
		}

		// Token: 0x0600394F RID: 14671 RVA: 0x000E5638 File Offset: 0x000E3838
		private void UpdateAIMelee_Default(float totalMs, Player.BotAITargetData targetData)
		{
			this.AIMeleeSheatheCheckToMelee(false);
			if (this.m_botAIMeleeRandomInitialDelayPerformed)
			{
				this.m_botAIMeleeDefaultCacheTime = 0f;
			}
			this.m_botAIMeleeRandomInitialDelayPerformed = false;
			this.m_botAIMeleeDelay -= totalMs;
			this.m_botAIMeleeDefaultCacheTime -= totalMs;
			int num = this.Statisticts.TotalMeleeAttackSwings + this.Statisticts.TotalKickSwings + this.Statisticts.TotalGrabbedPlayers + this.Statisticts.TotalBlockedAttacks;
			if (this.m_botAIMeleeWaitActionStats == num && targetData.DistanceLength <= 80f)
			{
				this.m_botAIMeleeWaitActionTime += totalMs;
			}
			else
			{
				if (this.m_botAIMeleeWaitActionStats != num)
				{
					this.m_botAIMeleeWaitLimitTime = this.m_botBehaviorSet.GetMeleeWaitTimeLimit();
				}
				this.m_botAIMeleeWaitActionTime = 0f;
				this.m_botAIMeleeWaitActionStats = num;
			}
			if (this.m_botAIMeleeDelay <= 0f)
			{
				if (this.m_botAIMeleeDefaultCacheTime <= 0f)
				{
					this.m_botAIMeleeDefaultCacheTime = 100f;
					Player player = targetData.Player;
					TicketShare<Player.MeleeDefaultAction> ticketShare = new TicketShare<Player.MeleeDefaultAction>();
					BotMeleeActions botMeleeActions;
					BotMeleeActions botMeleeActions2;
					this.BotAIGetMeleeActions(out botMeleeActions, out botMeleeActions2);
					if (this.IsHoldingPlayerInGrab)
					{
						ticketShare.Add(Player.MeleeDefaultAction.Attack, 1);
					}
					else
					{
						bool flag = Math.Abs(targetData.Difference.X) < 4f;
						if (botMeleeActions.Wait > 0 && !this.IsHoldingChainsaw && this.m_botAIMeleeWaitLimitTime > 0f && this.m_botAIMeleeWaitActionTime < this.m_botAIMeleeWaitLimitTime)
						{
							if (this.m_botAIMeleeStatus.OpponentMovingAway && botMeleeActions.Wait >= 2)
							{
								ticketShare.Add(Player.MeleeDefaultAction.Wait, (int)(botMeleeActions.Wait / 2));
							}
							else
							{
								ticketShare.Add(Player.MeleeDefaultAction.Wait, (int)botMeleeActions.Wait);
							}
						}
						if (this.IsUsingChainsaw)
						{
							ticketShare.Add(Player.MeleeDefaultAction.Attack, (int)Math.Max(botMeleeActions.Attack, botMeleeActions.AttackCombo));
						}
						else if (this.PerformingMelee & botMeleeActions.AttackCombo > 0)
						{
							ticketShare.Add(Player.MeleeDefaultAction.Attack, (int)botMeleeActions.AttackCombo);
						}
						else if (!this.PerformingMelee & botMeleeActions.Attack > 0)
						{
							ticketShare.Add(Player.MeleeDefaultAction.Attack, (int)botMeleeActions.Attack);
						}
						if (botMeleeActions.Grab > 0 && !flag && this.CanInitiateGrab() && (player == null || !player.IsUsingChainsaw))
						{
							ticketShare.Add(Player.MeleeDefaultAction.Grab, (int)((this.IsHoldingChainsaw || (player != null && player.IsUsingChainsaw)) ? (botMeleeActions.Grab / 4) : botMeleeActions.Grab));
						}
						if (botMeleeActions.Kick > 0 && !this.m_botAIMeleeStatus.OpponentMovingAway && (player == null || this.CheckAABBKickOverlap(player)))
						{
							ticketShare.Add(Player.MeleeDefaultAction.Kick, (int)((!flag || this.IsHoldingChainsaw) ? botMeleeActions.Kick : (botMeleeActions.Grab + botMeleeActions.Kick)));
						}
						if (botMeleeActions.Block > 0 && !this.IsHoldingChainsaw && !player.IsHoldingChainsaw && !this.m_botAIMeleeStatus.OpponentMovingAway)
						{
							if (player != null && player.PerformingMelee)
							{
								ticketShare.Add(Player.MeleeDefaultAction.Block, (int)Math.Max(botMeleeActions.Block, botMeleeActions2.Block));
							}
							else
							{
								ticketShare.Add(Player.MeleeDefaultAction.Block, (int)botMeleeActions.Block);
							}
						}
						if (botMeleeActions.Jump > 0 && !this.IsHoldingChainsaw && !this.m_botAIMeleeStatus.OpponentMovingAway)
						{
							ticketShare.Add(Player.MeleeDefaultAction.Jump, (int)botMeleeActions.Jump);
						}
					}
					this.m_botAIMeleeDefaultCacheAction = ticketShare.GetRandom();
					if (this.m_botAIMeleeDefaultCacheAction == Player.MeleeDefaultAction.Attack && this.IsHoldingChainsaw)
					{
						this.m_botAIMeleeDefaultCacheTime = Constants.RANDOM.NextFloat(200f, 350f);
					}
					ticketShare.Dispose();
				}
				switch (this.m_botAIMeleeDefaultCacheAction)
				{
				case Player.MeleeDefaultAction.Wait:
					this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(100f, 300f);
					return;
				case Player.MeleeDefaultAction.Attack:
					if (this.PerformingMelee && !this.IsUsingChainsaw)
					{
						this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(50f, 200f);
					}
					this.KeyAction(4, Player.PressKeyType.Tap);
					return;
				case Player.MeleeDefaultAction.Kick:
					this.KeyAction(15, Player.PressKeyType.Tap);
					return;
				case Player.MeleeDefaultAction.Grab:
					this.KeyAction(22, Player.PressKeyType.Tap);
					return;
				case Player.MeleeDefaultAction.Block:
					this.KeyAction(5, Player.PressKeyType.Tap);
					return;
				case Player.MeleeDefaultAction.Jump:
					if (this.IsUsingChainsaw)
					{
						this.KeyAction(4, Player.PressKeyType.Tap);
					}
					this.KeyActionJump();
					break;
				default:
					return;
				}
			}
		}

		// Token: 0x06003950 RID: 14672 RVA: 0x000E5A50 File Offset: 0x000E3C50
		private void UpdateAIMelee_Zombie(float totalMs, Player.BotAITargetData targetData)
		{
			this.AIMeleeSheatheCheckToMelee(false);
			this.m_botAIMeleeRandomInitialDelayPerformed = false;
			this.m_botAIMeleeDelay -= totalMs;
			if (this.m_botAIMeleeDelay <= 0f)
			{
				if (this.CurrentAction == PlayerAction.MeleeAttack1)
				{
					float amount = (this.m_botAIMeleeEnrageAccumulation > 0f) ? Math.Min(this.m_botAIMeleeEnrageAccumulation * 0.001f, 1f) : 0f;
					if (Constants.RANDOM.NextFloat() <= Microsoft.Xna.Framework.MathHelper.Lerp(0.6f, 0.85f, amount))
					{
						this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(200f, 300f);
					}
					else
					{
						this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(600f, 900f);
					}
				}
				else if (this.CurrentAction == PlayerAction.MeleeAttack2)
				{
					if (this.m_botAIMeleeEnrageAccumulation > 400f)
					{
						float amount2 = Math.Min((this.m_botAIMeleeEnrageAccumulation - 400f) * 0.001f, 1f);
						if (Constants.RANDOM.NextFloat() < Microsoft.Xna.Framework.MathHelper.Lerp(0.6f, 1f, amount2))
						{
							this.m_botAIMeleeEnrageAccumulation -= 500f;
							this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(200f, 300f);
						}
						else
						{
							this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(600f, 900f);
						}
					}
					else
					{
						this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(600f, 900f);
					}
				}
				else if (this.CurrentAction == PlayerAction.MeleeAttack3)
				{
					if (Constants.RANDOM.NextBool())
					{
						this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(200f, 300f);
					}
					else
					{
						this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(600f, 900f);
					}
				}
				else if (Constants.RANDOM.NextFloat() <= 0.75f)
				{
					this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(200f, 300f);
				}
				else
				{
					this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(600f, 900f);
				}
				if (targetData.IsPlayer && Constants.RANDOM.NextFloat() <= 0.1f && this.CheckAABBKickOverlap(targetData.Player))
				{
					this.KeyAction(15, Player.PressKeyType.Tap);
					return;
				}
				this.KeyAction(4, Player.PressKeyType.Tap);
			}
		}

		// Token: 0x06003951 RID: 14673 RVA: 0x000E5CAC File Offset: 0x000E3EAC
		private bool UpdateAIMelee(float totalMs, Player.BotAITargetData targetData)
		{
			if (this.IsHoldingPlayerInGrab && this.HoldingPlayerInGrab != null && this.HoldingPlayerInGrab.IsDead)
			{
				this.KeyAction(4, Player.PressKeyType.Tap);
				return false;
			}
			this.AIClimbCheck(totalMs, targetData);
			if (!this.BotAIActionPhaseIsPrioritized(BotActionPhaseEnum.Melee))
			{
				return false;
			}
			this.BotAICheckMoveObstacles(totalMs);
			if (targetData.IsActivateable | !this.m_botBehaviorSet.MeleeUsage | targetData.IsFarAway | this.m_botAIShooting.ForceRangedTime > 0f | targetData.IsGuardTarget)
			{
				return false;
			}
			if (targetData.CurrentTarget != null && targetData.CurrentTarget.AITargetData.TargetMode == ObjectAITargetMode.RangeOnly)
			{
				return false;
			}
			this.BotAIActionPhaseSetActive(BotActionPhaseEnum.Melee);
			this.AIUpdateMeleeEnrage(totalMs);
			bool flag = false;
			if (this.m_botAIMeleeStatus.InMeleeRange && targetData.IsPlayer && this.m_botBehaviorSet.MeleeUsage)
			{
				if (this.m_botAIMeleeStatus.MustMoveCloser && this.m_botAIMeleeStatus.OpponentMovingAway && targetData.DistanceLength < 16f && this.m_botBehaviorSet.OffensiveSprintLevel >= 0.2f && this.Energy.CurrentValue > 30f)
				{
					this.KeyAction(18, Player.PressKeyType.Hold);
				}
				if (this.m_botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel > 0f)
				{
					Player player = targetData.Player;
					if ((!this.m_botAIMeleeStatus.MustMoveCloser || !player.PerformingMelee) && player.CurrentAction != PlayerAction.JumpAttack)
					{
						if (player.CurrentAction != PlayerAction.JumpKick)
						{
							if (this.m_botAIMeleeStatus.MustMoveCloser && (player.GrabCharging | player.GrabTelegraphing))
							{
								if (this.CurrentAction != PlayerAction.Idle || ((!player.GrabCharging || player.LastDirectionX == this.LastDirectionX || Math.Abs(targetData.Difference.X) >= 36f) && (!player.GrabTelegraphing || Math.Abs(targetData.Difference.X) >= 16f + this.GetCurrentMeleeWeaponInUse(false).Properties.Range)) || !this.m_botAIMeleeStatus.CheckShouldCounterOutOfRangeAttack(this, player, Player.BotAIMeleeStatus.OutOfRangeAttack.Grab))
								{
									goto IL_30D;
								}
								this.KeyAction(18, Player.PressKeyType.Release);
								if (this.IsHoldingChainsaw || this.AIMeleeSheatheCheckToMelee(false))
								{
									this.KeyAction(4, Player.PressKeyType.Tap);
									goto IL_30D;
								}
								goto IL_30D;
							}
							else
							{
								if (this.m_botAIMeleeStatus.MustMoveCloser && player.Diving && player.LastDirectionX != this.LastDirectionX && this.CurrentAction == PlayerAction.Idle && Math.Abs(targetData.Difference.X) <= 48f && this.m_botAIMeleeStatus.CheckShouldCounterOutOfRangeAttack(this, player, Player.BotAIMeleeStatus.OutOfRangeAttack.Dive) && (this.IsHoldingChainsaw || this.AIMeleeSheatheCheckToMelee(false)))
								{
									this.KeyAction(4, Player.PressKeyType.Tap);
									goto IL_30D;
								}
								goto IL_30D;
							}
						}
					}
					if (this.m_botAIMeleeStatus.CheckShouldCounterOutOfRangeAttack(this, player, Player.BotAIMeleeStatus.OutOfRangeAttack.Attack))
					{
						float num = 0f;
						Player.MeleeOverlapStatus meleeOverlapStatus = player.CheckAABBMeleeOverlap(this, false, 0f, 0f, out num);
						if (meleeOverlapStatus != Player.MeleeOverlapStatus.None && this.CanBlock() && !player.PerformedMeleeHitFrame())
						{
							this.KeyAction(5, Player.PressKeyType.Tap);
						}
					}
					IL_30D:
					if (player.InFreeAir && !player.Disabled && targetData.Direction.Y > 0.2f && player.PreBox2DLinearVelocity.Y < 4f && this.m_botAIMeleeStatus.CheckShouldCounterOutOfRangeAttack(this, player, Player.BotAIMeleeStatus.OutOfRangeAttack.JumpAttack))
					{
						if ((this.LastDirectionX == 1 && targetData.Difference.X > -2f) || (this.LastDirectionX == -1 && targetData.Difference.X < 2f))
						{
							float num2 = Math.Abs(targetData.Difference.X) - Converter.Box2DToWorld(this.m_botAIMeleeStatus.CurrentMeleeRange);
							if (num2 > 0f && (num2 < 0.32f || (this.BotAINav.NodeB == null && num2 < 0.64f)))
							{
								if (targetData.Difference.X > 0f)
								{
									this.KeyActionRight(Player.PressKeyType.Hold);
								}
								else
								{
									this.KeyActionLeft(Player.PressKeyType.Hold);
								}
							}
							if (this.IsHoldingChainsaw)
							{
								this.KeyAction(4, Player.PressKeyType.Tap);
							}
							else if (this.AIMeleeSheatheCheckToMelee(false) && this.InAir && num2 <= 0f)
							{
								this.KeyAction(4, Player.PressKeyType.Tap);
							}
							if (this.StandingOnGround && num2 < 16f)
							{
								BotMeleeActions botMeleeActions;
								BotMeleeActions botMeleeActions2;
								this.BotAIGetMeleeActions(out botMeleeActions, out botMeleeActions2);
								if ((botMeleeActions.Jump > 0 || botMeleeActions2.Jump > 0) && this.m_botAIMeleeJumpCounterRandom.GetValue(200f) > 0.5f)
								{
									this.KeyActionJump();
								}
								else if (num2 <= 0f && player.LastDirectionX != this.LastDirectionX && targetData.Difference.Y < 20f)
								{
									this.KeyAction(5, Player.PressKeyType.Tap);
								}
							}
						}
						else if (targetData.Difference.X > 0f)
						{
							this.KeyActionRight(Player.PressKeyType.Hold);
						}
						else
						{
							this.KeyActionLeft(Player.PressKeyType.Hold);
						}
					}
				}
			}
			if (!this.m_botAIMeleeStatus.StandingHitboxOverlap && !this.IsHoldingPlayerInGrab && !targetData.IsFarAway)
			{
				if (!this.m_botAIMeleeRandomInitialDelayPerformed)
				{
					this.m_botAIMeleeDelay = Constants.RANDOM.NextFloat(-10f, 150f);
					this.m_botAIMeleeRandomInitialDelayPerformed = true;
				}
				if (!this.m_botAIMeleeStatus.CrouchHitboxOverlap || this.Movement != PlayerMovement.Idle)
				{
					if (this.m_botBehaviorSet.MeleeWeaponUsage && this.CurrentMeleeMakeshiftWeapon == null && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Rifle && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Handgun && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee && this.CurrentMeleeWeapon != null && !this.CurrentMeleeWeapon.Durability.IsEmpty && !this.Sprinting)
					{
						this.KeyAction(8, Player.PressKeyType.Tap);
					}
					return false;
				}
				flag = true;
			}
			float num3 = (targetData.IsPlayer & !this.GrabTelegraphing) ? 4f : 0f;
			if (targetData.Difference.X < -num3 && this.LastDirectionX == 1)
			{
				this.KeyActionLeft(Player.PressKeyType.Hold);
			}
			else if (targetData.Difference.X > num3 && this.LastDirectionX == -1)
			{
				this.KeyActionRight(Player.PressKeyType.Hold);
			}
			else
			{
				if (!targetData.CurrentTarget.IsPunchable(this))
				{
					if (targetData.CurrentTarget.IsAITargetableObject || targetData.CurrentTarget == this.BotAIForcedTarget)
					{
						this.UpdateAIMelee_Object(totalMs, targetData);
					}
					return false;
				}
				if (flag)
				{
					this.m_botAINavCrouchStuckTimer = 0f;
					this.KeyActionCrouch();
				}
				if (targetData.IsPlayer)
				{
					switch (this.m_botBehaviorSet.MeleeMode)
					{
					case BotBehaviorMeleeMode.Default:
						this.UpdateAIMelee_Default(totalMs, targetData);
						break;
					case BotBehaviorMeleeMode.Zombie:
						this.UpdateAIMelee_Zombie(totalMs, targetData);
						break;
					}
				}
				else
				{
					this.UpdateAIMelee_Object(totalMs, targetData);
				}
			}
			return true;
		}

		// Token: 0x06003952 RID: 14674 RVA: 0x000E635C File Offset: 0x000E455C
		private bool AIMeleeSheatheCheckToMelee(bool hitAboveRequired = false)
		{
			this.m_botAIMeleeSheathToMeleeTimestamp = this.GameWorld.ElapsedTotalGameTime;
			if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.NONE && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee)
			{
				this.KeyAction(13, Player.PressKeyType.Tap);
				return false;
			}
			if (hitAboveRequired && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee && this.CurrentMeleeWeapon is WpnChainsaw)
			{
				this.KeyAction(13, Player.PressKeyType.Tap);
				return false;
			}
			return true;
		}

		// Token: 0x06003953 RID: 14675 RVA: 0x000E63BC File Offset: 0x000E45BC
		private void BotAIGetMeleeActions(out BotMeleeActions meleeActions, out BotMeleeActions meleeActionsWhenHit)
		{
			if (this.m_botAIMeleeEnrageAccumulation > 1000f && this.MeleeHit)
			{
				meleeActions = this.m_botBehaviorSet.MeleeActionsWhenEnragedAndHit;
				meleeActionsWhenHit = this.m_botBehaviorSet.MeleeActionsWhenEnragedAndHit;
				return;
			}
			if (this.m_botAIMeleeEnrageAccumulation > 1000f)
			{
				meleeActions = this.m_botBehaviorSet.MeleeActionsWhenEnraged;
				meleeActionsWhenHit = this.m_botBehaviorSet.MeleeActionsWhenEnragedAndHit;
				return;
			}
			if (this.MeleeHit)
			{
				meleeActions = this.m_botBehaviorSet.MeleeActionsWhenHit;
				meleeActionsWhenHit = this.m_botBehaviorSet.MeleeActionsWhenHit;
				return;
			}
			meleeActions = this.m_botBehaviorSet.MeleeActions;
			meleeActionsWhenHit = this.m_botBehaviorSet.MeleeActionsWhenHit;
		}

		// Token: 0x06003954 RID: 14676 RVA: 0x000E6480 File Offset: 0x000E4680
		private void AIMeleeCheckCloseToTarget(Player.BotAITargetData targetData)
		{
			if (targetData.IsFarAway)
			{
				this.m_botAIMeleeStatus.Reset();
				this.m_botAINavMeleeIgnoreCloseCheck.Reset();
				return;
			}
			if (this.m_botAIMeleeStatus.StandingHitboxOverlap && this.GameWorld.ElapsedTotalGameTime - this.m_botAIMeleeStatus.OverlapStartTimestamp < 100f)
			{
				return;
			}
			this.m_botAIMeleeStatus.OpponentMovingAway = false;
			this.m_botAIMeleeStatus.MovementXAdjust = 0f;
			this.m_botAIMeleeStatus.InMeleeRange = true;
			bool flag = !this.BotBehaviorSet.MeleeWeaponUseFullRange;
			if (!targetData.IsPlayer)
			{
				int num;
				int num2;
				targetData.CurrentTarget.GetObjectSize(out num, out num2);
				float num3 = (float)num * 0.5f;
				float num4 = (float)num2 * 0.5f;
				float num5 = flag ? this.CurrentMeleeFists.Properties.Range : this.GetCurrentMeleeWeaponInUse(false).Properties.Range;
				this.m_botAIMeleeStatus.CurrentMeleeRange = Converter.WorldToBox2D(num5);
				if (Math.Abs(targetData.Difference.X) <= num5 + num3 && Math.Abs(targetData.Difference.Y) <= 4f + num4 && !(targetData.Difference.X < 0f & this.LastDirectionX == 1) && !(targetData.Difference.X > --0f & this.LastDirectionX == -1))
				{
					if (this.m_botAINavMeleeIgnoreCloseCheck.CheckRecentMeleeTargetValid(this, targetData.CurrentTarget))
					{
						this.m_botAIMeleeStatus.StandingHitboxOverlap = true;
						this.m_botAIMeleeStatus.CrouchHitboxOverlap = (targetData.Difference.Y < 0f);
					}
					else
					{
						this.m_botAIMeleeStatus.StandingHitboxOverlap = false;
						this.m_botAIMeleeStatus.CrouchHitboxOverlap = false;
					}
				}
				else
				{
					this.m_botAIMeleeStatus.StandingHitboxOverlap = false;
					this.m_botAIMeleeStatus.CrouchHitboxOverlap = false;
				}
				this.m_botAIMeleeStatus.OpponentMovingAway = false;
				this.m_botAIMeleeStatus.MovementXAdjust = 0f;
				this.m_botAIMeleeStatus.MustMoveCloser = (!this.m_botAIMeleeStatus.CrouchHitboxOverlap & !this.m_botAIMeleeStatus.StandingHitboxOverlap);
				return;
			}
			Player player = targetData.Player;
			if (player == null || player.IsDisposed)
			{
				this.m_botAIMeleeStatus.StandingHitboxOverlap = false;
				this.m_botAIMeleeStatus.CrouchHitboxOverlap = false;
				this.m_botAIMeleeStatus.MustMoveCloser = true;
				return;
			}
			float num6 = 0f;
			if (player.LastDirectionX == this.LastDirectionX && player.Movement != PlayerMovement.Idle && this.Movement != PlayerMovement.Idle)
			{
				this.m_botAIMeleeStatus.OpponentMovingAway = true;
				if (player.Sprinting)
				{
					num6 = 0.32f;
				}
				else if (player.Running)
				{
					num6 = 0.32f;
				}
				else if (player.Walking)
				{
					num6 = 0.16f;
				}
			}
			this.m_botAIMeleeStatus.MovementXAdjust = num6 * -(float)this.LastDirectionX;
			float weaponWidthShrink = (this.m_botAIMeleeStatus.StandingHitboxOverlap || this.IsHoldingChainsaw) ? 0f : ((this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee || flag) ? 0.08f : 0.16f);
			Player.MeleeOverlapStatus meleeOverlapStatus = this.CheckAABBMeleeOverlap(player, flag, weaponWidthShrink, this.m_botAIMeleeStatus.MovementXAdjust, out this.m_botAIMeleeStatus.CurrentMeleeRange);
			if (meleeOverlapStatus == Player.MeleeOverlapStatus.None)
			{
				this.m_botAINavMeleeIgnoreCloseCheck.CheckRecentMeleeTargetOffset(this, player);
				this.m_botAIMeleeStatus.StandingHitboxOverlap = false;
				this.m_botAIMeleeStatus.CrouchHitboxOverlap = false;
				this.m_botAIMeleeStatus.MustMoveCloser = true;
				return;
			}
			if (this.m_botAINavMeleeIgnoreCloseCheck.CheckRecentMeleeTargetValid(this, player))
			{
				this.m_botAIMeleeStatus.StandingHitboxOverlap = ((meleeOverlapStatus & Player.MeleeOverlapStatus.Standing) != Player.MeleeOverlapStatus.None);
				this.m_botAIMeleeStatus.CrouchHitboxOverlap = ((meleeOverlapStatus & Player.MeleeOverlapStatus.Crouching) != Player.MeleeOverlapStatus.None);
				this.m_botAIMeleeStatus.MustMoveCloser = false;
				this.m_botAIMeleeStatus.OverlapStartTimestamp = this.GameWorld.ElapsedTotalGameTime;
				return;
			}
			this.m_botAIMeleeStatus.StandingHitboxOverlap = false;
			this.m_botAIMeleeStatus.CrouchHitboxOverlap = false;
			this.m_botAIMeleeStatus.MustMoveCloser = true;
		}

		// Token: 0x17000946 RID: 2374
		// (get) Token: 0x06003955 RID: 14677 RVA: 0x0002F29F File Offset: 0x0002D49F
		internal Player.BotAINavigation BotAINav
		{
			get
			{
				return this.m_botAINav;
			}
		}

		// Token: 0x06003956 RID: 14678 RVA: 0x000E6874 File Offset: 0x000E4A74
		private void BotAICheckActivateables(float totalMs, Player.BotAITargetData targetData)
		{
			if ((targetData.CurrentTarget.Activateable || targetData.CurrentTarget is ObjectSupplyCrate) && !this.Disabled && ((Math.Abs(targetData.Difference.X) < 10f && targetData.Difference.Y > -50f && targetData.Difference.Y < -10f) || targetData.DistanceLength < Math.Max(28f, targetData.CurrentTarget.ActivateRange + 8f)))
			{
				if (targetData.DistanceLength <= targetData.CurrentTarget.ActivateRange)
				{
					ObjectData closestActivateableObject = this.GetClosestActivateableObject(true, false, 200f, totalMs);
					if (this.m_botAIUnreachableActivateablesTime > 1000f || targetData.CurrentTarget == closestActivateableObject)
					{
						this.KeyAction(16, Player.PressKeyType.Tap);
					}
				}
				if (this.m_botAIUnreachableActivateablesObjectID != targetData.CurrentTarget.ObjectID)
				{
					this.m_botAIUnreachableActivateablesObjectID = targetData.CurrentTarget.ObjectID;
					this.m_botAIUnreachableActivateablesTime = 0f;
				}
				this.m_botAIUnreachableActivateablesTime += totalMs;
				if (this.m_botAIUnreachableActivateablesTime > 4000f)
				{
					this.AddAIUnavailableTarget(null, targetData.CurrentTarget.ObjectID);
					this.m_botAIUnreachableActivateablesTime = 0f;
					this.BotAINavResetNavNextUpdate(50f);
				}
			}
		}

		// Token: 0x06003957 RID: 14679 RVA: 0x0002F2A7 File Offset: 0x0002D4A7
		private void BotAINavResetNavNextUpdate(float requeuePathFindingTime = 50f)
		{
			this.m_requeuePathFindingNextUpdateTime = requeuePathFindingTime;
		}

		// Token: 0x06003958 RID: 14680 RVA: 0x000E69C0 File Offset: 0x000E4BC0
		private void BotAINavResetNav(float requeuePathFindingTime = 50f)
		{
			if (this.BotAINav.NodeA != null)
			{
				this.BotAINav.ClearData();
			}
			this.m_botAINavForceReachedNextTimer = 0f;
			this.BotAINav.BasedOnPathFindingResultID = this.m_botAINavPathFinding.ProcessedCount;
			this.m_requeuePathFindingTime = requeuePathFindingTime;
		}

		// Token: 0x06003959 RID: 14681 RVA: 0x000E6A10 File Offset: 0x000E4C10
		private bool AINavigationPathFinding(float totalMs, Player.BotAITargetData targetData)
		{
			if ((!this.m_botAIMeleeStatus.MustMoveCloser | this.PerformingMelee | !this.m_botAICurrentActiveActionPhaseCanMove) & !this.InAir & !this.Climbing & !targetData.IsActivateable & !targetData.IsGuardTarget)
			{
				this.m_botAINavigationCodePath = Player.BotAINavCodePath.NA;
				return true;
			}
			GameWorld.PlayerAIPackagePathFinding botAINavPathFinding = this.m_botAINavPathFinding;
			if (this.Disabled)
			{
				this.BotAINavResetNav(50f);
				this.m_botAINavigationCodePath = Player.BotAINavCodePath.Disabled;
				return false;
			}
			if (this.m_botAILastTeleportCounter != this.TeleportCounter | (this.m_botAILastDiveCounter != this.Statisticts.TotalDives & !this.Diving) | (this.m_botAILastClimbing != this.Climbing & this.Climbing))
			{
				this.m_botAILastTeleportCounter = this.TeleportCounter;
				this.m_botAILastDiveCounter = this.Statisticts.TotalDives;
				this.m_botAILastClimbing = this.Climbing;
				if (!this.AINavigationCheckTeleportation(botAINavPathFinding.GoalResult))
				{
					this.BotAINavResetNav(50f);
					this.m_botAINavigationCodePath = Player.BotAINavCodePath.Teleportation_Reset;
					return false;
				}
				this.m_botAINavForceReachedNextTimer = 0f;
				this.BotAINav.BasedOnPathFindingResultID = botAINavPathFinding.ProcessedCount;
			}
			this.m_botAILastClimbing = this.Climbing;
			this.m_botAINavStuckXTimer += totalMs;
			if (Math.Abs(this.PreBox2DPosition.X - this.m_botAINavStuckXPosition) > 0.24f)
			{
				this.m_botAINavStuckXPosition = this.PreBox2DPosition.X;
				this.m_botAINavStuckXTimer = 0f;
			}
			bool flag;
			if (flag = (!this.InAir || (this.Climbing | this.LedgeGrabbing | this.Diving | this.Rolling)))
			{
				botAINavPathFinding.Target = targetData.FinalTarget;
				if (this.m_requeuePathFindingTime > 0f)
				{
					botAINavPathFinding.Requeue(this.m_requeuePathFindingTime);
					if (botAINavPathFinding.IsQueued)
					{
						this.m_requeuePathFindingTime = 0f;
					}
				}
				else
				{
					int goalResultSteps = botAINavPathFinding.GoalResultSteps;
					float delayTime = 400f + this.m_botAINavRandomPathFindingDelay + ((goalResultSteps > 10) ? 2500f : ((goalResultSteps > 3) ? 700f : 0f));
					if (this.BotAINav.NodeC == null && targetData.IsPlayer)
					{
						delayTime = ((!this.Sprinting || !targetData.Player.Sprinting) ? 400f : 100f);
					}
					if (targetData.FinalTarget != null && botAINavPathFinding.PathBasedOnTargetID != targetData.FinalTarget.ObjectID)
					{
						delayTime = 100f;
					}
					botAINavPathFinding.Requeue(delayTime);
				}
			}
			SimpleLinkedList<ListPathPointNode> goalResult = botAINavPathFinding.GoalResult;
			if (goalResult != null && flag && (this.BotAINav.BasedOnPathFindingResultID != botAINavPathFinding.ProcessedCount || this.BotAINav.BasedOnPathFindingType != botAINavPathFinding.GoalTargetType))
			{
				this.BotAINav.BasedOnPathFindingResultID = botAINavPathFinding.ProcessedCount;
				this.BotAINav.UpdatePath(goalResult, this);
				this.BotAINav.TotalNodeSteps = botAINavPathFinding.GoalResultSteps;
				this.m_botAINavRandomPathFindingDelay = Constants.RANDOM.NextFloat(0f, 300f);
				if (this.BotAINav.BasedOnPathFindingType != botAINavPathFinding.GoalTargetType)
				{
					this.BotAINav.BasedOnPathFindingType = botAINavPathFinding.GoalTargetType;
					this.AINavigationCheckTeleportation(botAINavPathFinding.GoalResult);
				}
			}
			this.m_botAINavBlindNavigationTime += totalMs;
			this.m_botAINavReachedNextNode = false;
			if (this.BotAINav.CurrentConnectionNodesSetup)
			{
				this.m_botAINavValidNavigationLastPathProcessedCount = this.BotAINav.BasedOnPathFindingResultID;
				this.m_botAINavBlindNavigationTime = 0f;
				if (!this.BotAINav.NodeA.IsValidToNavigate() | !this.BotAINav.NodeB.IsValidToNavigate())
				{
					this.m_botAINavigationCodePath = Player.BotAINavCodePath.Nav_Reset;
					this.BotAINavResetNav(50f);
				}
				else
				{
					this.m_botAINavigationCodePath = Player.BotAINavCodePath.Nav_A_Move;
					this.AINavigationMoveBasedOnNav(totalMs, targetData);
					if (this.BotAINav.CurrentConnectionNodesSetup)
					{
						this.m_botAINavReachedNextNode |= this.AINavigationCheckReachedNode();
					}
				}
			}
			else if (this.BotAINav.NodeA != null)
			{
				this.m_botAINavForceReachedNextTimer = 0f;
				bool canNavigateDown = this.m_botAINavBlindNavigationTime > 1000f && this.m_botAINavValidNavigationLastPathProcessedCount != this.BotAINav.BasedOnPathFindingResultID;
				int num = 0;
				if (targetData.IsPlayer)
				{
					if (targetData.DistanceLength < 80f)
					{
						PathNode pathNode = targetData.Player.BotAIGetClosestPathNodeOnLastGroundPosition();
						if (pathNode == this.BotAINav.NodeA)
						{
							if (targetData.Player.InAir)
							{
								Microsoft.Xna.Framework.Vector2 vector = targetData.Player.PreBox2DPosition - this.PreBox2DPosition;
								Microsoft.Xna.Framework.Vector2 vector2 = targetData.Player.LastBox2DPositionGround - this.PreBox2DPosition;
								if (Math.Abs(vector.X) - 0.32f <= Math.Abs(vector2.X))
								{
									num = 1;
								}
							}
							else
							{
								num = 1;
							}
						}
					}
				}
				else if (targetData.CurrentTarget != null && Math.Abs(targetData.Difference.X) < 40f && Math.Abs(targetData.Difference.Y) < 50f)
				{
					num = 2;
				}
				if (!this.StandingOnGround || !this.BotAIActionPhaseIsActive(BotActionPhaseEnum.MeleeBlock | BotActionPhaseEnum.ManualAim))
				{
					if (num == 0)
					{
						if (this.InAir)
						{
							if (this.LedgeGrabbing && this.BotAINav.NodeA.NavType == PathNode.PathNodeNavType.LedgeGrab)
							{
								this.m_botAINavigationCodePath = Player.BotAINavCodePath.Nav_F_Move;
								this.KeyActionJump();
							}
							else
							{
								this.m_botAINavigationCodePath = Player.BotAINavCodePath.Nav_D_Move;
								Player.BotAITargetData botAITargetData = Player.BotAITargetData.NewTargetData(this.AINavigationGetAirNodeTarget(this.BotAINav.NodeA.OwnerObject), this);
								this.AINavigationPlainGround(totalMs, botAITargetData, canNavigateDown);
								botAITargetData.ReturnToPool();
							}
						}
						else if (Math.Abs((this.BotAINav.NodeA.Box2DPosition - this.PreBox2DPosition).X) > 0.19999999f)
						{
							this.m_botAINavigationCodePath = Player.BotAINavCodePath.Nav_C_Move;
							Player.BotAITargetData botAITargetData2 = Player.BotAITargetData.NewTargetData(this.BotAINav.NodeA.OwnerObject, this);
							this.AINavigationPlainGround(totalMs, botAITargetData2, canNavigateDown);
							botAITargetData2.ReturnToPool();
						}
					}
					else if (num == 1)
					{
						this.m_botAINavigationCodePath = Player.BotAINavCodePath.Nav_B_Move;
						this.AINavigationPlainGround(totalMs, targetData, canNavigateDown);
					}
					else if (targetData.CurrentTarget != null && !this.m_botAIUnavailableTargets.Contains(targetData.CurrentTarget.ObjectID))
					{
						this.m_botAINavigationCodePath = Player.BotAINavCodePath.Nav_E1_Move;
						Player.BotAITargetData botAITargetData3 = Player.BotAITargetData.NewTargetData(targetData.CurrentTarget, this);
						this.AINavigationPlainGround(totalMs, botAITargetData3, canNavigateDown);
						botAITargetData3.ReturnToPool();
					}
				}
			}
			else if (!this.StandingOnGround || !this.BotAIActionPhaseIsActive(BotActionPhaseEnum.MeleeBlock | BotActionPhaseEnum.ManualAim))
			{
				bool canNavigateDown2 = this.m_botAINavBlindNavigationTime > 1000f && this.m_botAINavValidNavigationLastPathProcessedCount != this.BotAINav.BasedOnPathFindingResultID;
				if (targetData.CurrentTarget != null && !targetData.IsPlayer && !this.m_botAIUnavailableTargets.Contains(targetData.CurrentTarget.ObjectID))
				{
					this.m_botAINavigationCodePath = Player.BotAINavCodePath.Nav_E2_Move;
					Player.BotAITargetData botAITargetData4 = Player.BotAITargetData.NewTargetData(this.AINavigationGetAirNodeTarget(targetData.CurrentTarget), this);
					this.AINavigationPlainGround(totalMs, botAITargetData4, canNavigateDown2);
					botAITargetData4.ReturnToPool();
				}
				else if (this.InAir)
				{
					this.m_botAINavigationCodePath = Player.BotAINavCodePath.Nav_E3_Move;
					Player.BotAITargetData botAITargetData5 = Player.BotAITargetData.NewTargetData(this.AINavigationGetAirNodeTarget(targetData.CurrentTarget), this);
					this.AINavigationPlainGround(totalMs, botAITargetData5, canNavigateDown2);
					botAITargetData5.ReturnToPool();
				}
			}
			this.m_botAINavForceReachedNextTimer += totalMs;
			if (this.m_botAINavForceReachedNextTimer > 1250f && flag)
			{
				this.m_botAINavForceReachedNextTimer = 0f;
				if (this.Contacts.LeftCollisionContactsCount > 0 | this.Contacts.RightCollisionContactsCount > 0)
				{
					this.BotAINavResetNav(50f);
				}
			}
			if (this.m_botAINavReachedNextNode)
			{
				if (goalResult == null)
				{
					this.BotAINav.ClearData();
				}
				else
				{
					SimpleLinkedList<ListPathPointNode> simpleLinkedList = goalResult.FindItemNode((ListPathPointNode n) => n.Node.InstanceID == this.BotAINav.NodeBInstanceID);
					if (simpleLinkedList == null)
					{
						this.BotAINav.UpdatePath(goalResult, this);
						this.BotAINav.TotalNodeSteps = botAINavPathFinding.GoalResultSteps;
					}
					else
					{
						this.BotAINav.SetPath(simpleLinkedList);
						this.BotAINav.TotalNodeSteps--;
					}
				}
				this.m_botAINavMoveAroundAndDownBody = null;
				this.m_botAINavForceReachedNextTimer = 0f;
				this.m_botAINavWaitElevatorTimer = 0f;
				this.m_botAINavReachedNextNode = false;
			}
			return false;
		}

		// Token: 0x0600395A RID: 14682 RVA: 0x000E7254 File Offset: 0x000E5454
		private PathNode BotAIGetClosestPathNodeOnLastGroundPosition()
		{
			Microsoft.Xna.Framework.Vector2 vector = this.m_botAILastGroundPathNodePosition - this.LastBox2DPositionGround;
			if (GameSFD.LastUpdateNetTimeMS - this.m_botAILastGroundPathNodeCacheTime > 200f || this.m_botAILastGroundPathNodeInstanceID != ((this.m_botAILastGroundPathNode != null) ? this.m_botAILastGroundPathNode.InstanceID : 0) || Math.Abs(vector.X) > 0.64f || Math.Abs(vector.Y) > 0.64f)
			{
				this.m_botAILastGroundPathNodeCacheTime = GameSFD.LastUpdateNetTimeMS;
				this.m_botAILastGroundPathNode = this.GameWorld.PathGrid.FindClosestPathNodeBelow(this.LastBox2DPositionGround, false, 1.1999999f, 1.28f, 0.64f);
				this.m_botAILastGroundPathNodeInstanceID = ((this.m_botAILastGroundPathNode != null) ? this.m_botAILastGroundPathNode.InstanceID : 0);
				this.m_botAILastGroundPathNodePosition = this.LastBox2DPositionGround;
			}
			return this.m_botAILastGroundPathNode;
		}

		// Token: 0x0600395B RID: 14683 RVA: 0x000E7330 File Offset: 0x000E5530
		private bool AINavigationCheckReachedNodeBasedOnDistance(Microsoft.Xna.Framework.Vector2 playerBDiff, Microsoft.Xna.Framework.Vector2 offset, float tolerance, bool allowStandingOnObjectCheck)
		{
			playerBDiff += offset;
			if (Math.Abs(playerBDiff.X) <= tolerance)
			{
				if (Math.Abs(playerBDiff.Y) <= tolerance)
				{
					return true;
				}
				if (allowStandingOnObjectCheck && this.StandingOnBody != null && this.StandingOnBody.GetType() == Box2D.XNA.BodyType.Dynamic)
				{
					if (this.BotAINav.NodeA.FollowObjectID != this.StandingOnBody.BodyID)
					{
						if (this.BotAINav.NodeB.FollowObjectID != this.StandingOnBody.BodyID)
						{
							if ((this.BotAINav.NodeA.FollowObjectID != 0 | this.BotAINav.NodeB.FollowObjectID != 0) && this.StandingOnBody.GetBodyFromWeldJoint(this.BotAINav.NodeA.FollowObjectID, this.BotAINav.NodeB.FollowObjectID) != null)
							{
								return false;
							}
							if (playerBDiff.Y - 0.32f < 0f)
							{
								PathNode pn = this.GameWorld.PathGrid.FindClosestPathNodeBelow(this.PreBox2DPosition, false, 1.1999999f, 4f, 0.64f);
								if (pn != null)
								{
									if (this.BotAINav.NodeB != pn)
									{
										if (this.BotAINav.NodeC != pn)
										{
											SimpleLinkedList<ListPathPointNode> goalResult = this.m_botAINavPathFinding.GoalResult;
											if (goalResult == null)
											{
												goto IL_1CE;
											}
											bool nodeAFound = false;
											int indexNodeA = -1;
											bool nodePNFound = false;
											int indexPN = -1;
											goalResult.IterateItemNodes(delegate(ListPathPointNode x)
											{
												if (!nodeAFound)
												{
													indexNodeA++;
													nodeAFound = (x.Node == this.BotAINav.NodeA);
												}
												if (!nodePNFound)
												{
													indexPN++;
													nodePNFound = (x.Node == pn);
												}
												return true;
											});
											if (indexPN > indexNodeA)
											{
												return true;
											}
											goto IL_1CE;
										}
									}
									return true;
								}
								IL_1CE:
								if (playerBDiff.X < 0.16f && (this.BotAINav.NodeA.Box2DPosition - this.PreBox2DPosition).Sanitize().X > playerBDiff.X && playerBDiff.Y > -1.5999999f)
								{
									return true;
								}
							}
							return false;
						}
					}
					return false;
				}
			}
			return false;
		}

		// Token: 0x0600395C RID: 14684 RVA: 0x000E7560 File Offset: 0x000E5760
		private bool AINavigationCheckTeleportation(SimpleLinkedList<ListPathPointNode> pathRoot)
		{
			if (pathRoot == null)
			{
				return false;
			}
			PathNode currNode = this.GameWorld.PathGrid.FindClosestPathNodeBelow(this.PreBox2DPosition, true, 1.1999999f, 2.56f, 0.64f);
			if (currNode == null)
			{
				return false;
			}
			if ((currNode.Box2DPosition - this.PreBox2DPosition).CalcSafeLengthSquared() > 1.4399999f)
			{
				return false;
			}
			int currentNodeInstanceID = (this.BotAINav.NodeA != null) ? this.BotAINav.NodeA.InstanceID : 0;
			int currentIndex = -1;
			int nextIndex = -1;
			SimpleLinkedList<ListPathPointNode> simpleLinkedList = pathRoot.FindItemNode(delegate(ListPathPointNode n)
			{
				if (currentNodeInstanceID > 0)
				{
					currentIndex++;
					if (currentNodeInstanceID == n.Node.InstanceID)
					{
						currentNodeInstanceID = 0;
					}
				}
				nextIndex++;
				return n.Node.InstanceID == currNode.InstanceID;
			});
			if (simpleLinkedList == null)
			{
				return false;
			}
			this.BotAINav.SetPath(simpleLinkedList);
			int num = Math.Min(this.BotAINav.TotalNodeSteps, Math.Max(nextIndex - currentIndex, 0));
			this.BotAINav.TotalNodeSteps -= num;
			return true;
		}

		// Token: 0x0600395D RID: 14685 RVA: 0x000E7664 File Offset: 0x000E5864
		private bool AINavigationCheckReachedNode()
		{
			Microsoft.Xna.Framework.Vector2 value = (this.BotAINav.NodeB.Box2DPosition - this.BotAINav.NodeA.Box2DPosition).Sanitize();
			Microsoft.Xna.Framework.Vector2 value2 = Microsoft.Xna.Framework.Vector2.Normalize(value).Sanitize();
			Microsoft.Xna.Framework.Vector2 playerBDiff = (this.BotAINav.NodeB.Box2DPosition - this.PreBox2DPosition).Sanitize();
			switch (this.BotAINav.NodeB.NavType)
			{
			case PathNode.PathNodeNavType.Ground:
			{
				bool flag = false;
				if (this.StandingOnGround)
				{
					if (this.BotAINav.NodeA.NavType != PathNode.PathNodeNavType.Ladder)
					{
						if (this.BotAINav.NodeA.NavType != PathNode.PathNodeNavType.LedgeGrab)
						{
							goto IL_1E7;
						}
					}
					return true;
				}
				if (this.BotAINav.NodeC != null && this.BotAINav.NodeC.NavType == this.BotAINav.NodeB.NavType && this.BotAINav.NextConnectionIsOfType(PathNodeConnectionType.Default))
				{
					Microsoft.Xna.Framework.Vector2 vector = this.BotAINav.NodeC.Box2DPosition - this.BotAINav.NodeB.Box2DPosition;
					if (Math.Abs(vector.Y) < Math.Abs(vector.X) && Math.Abs(vector.Y) < 0.64f)
					{
						flag = true;
						if ((this.BotAINav.NodeA.NavType == PathNode.PathNodeNavType.Ladder && this.Climbing) || this.BotAINav.NodeB.IsElevatorNode != this.BotAINav.NodeC.IsElevatorNode || (this.BotAINav.NodeB.FollowObjectID != this.BotAINav.NodeC.FollowObjectID && (this.BotAINav.NodeB.IsElevatorNode ^ this.BotAINav.NodeC.IsElevatorNode)))
						{
							flag = false;
						}
					}
				}
				IL_1E7:
				if (this.StandingOnGround || flag)
				{
					if (this.AINavigationCheckReachedNodeBasedOnDistance(playerBDiff, Microsoft.Xna.Framework.Vector2.Zero, 0.32f, true))
					{
						return true;
					}
					float tunnelingDist = flag ? 0.16f : 0f;
					bool flag2;
					if ((flag2 = (Math.Abs(Microsoft.Xna.Framework.Vector2.Dot(value2, -Microsoft.Xna.Framework.Vector2.UnitY)) < 0.73f)) && this.StandingOnGround && this.PreBox2DPosition.Y > this.BotAINav.NodeB.Box2DPosition.Y && this.PreBox2DPosition.Y - this.BotAINav.NodeB.Box2DPosition.Y < 0.79999995f)
					{
						tunnelingDist = 0.16f;
					}
					if (!flag && flag2 && this.StandingOnBody != null && this.StandingOnBody.GetType() == Box2D.XNA.BodyType.Dynamic)
					{
						tunnelingDist = 0.16f;
					}
					if (Player.AINavigationHelpers.PassedDestination(this.PreBox2DPosition, this.BotAINav.NodeB.Box2DPosition, ref value2, flag2, tunnelingDist))
					{
						return true;
					}
				}
				break;
			}
			case PathNode.PathNodeNavType.Ladder:
				if (this.BotAINav.NodeA.NavType == PathNode.PathNodeNavType.Ladder || this.Climbing)
				{
					if (this.AINavigationCheckReachedNodeBasedOnDistance(playerBDiff, Microsoft.Xna.Framework.Vector2.Zero, 0.16f, false))
					{
						return true;
					}
					if (Player.AINavigationHelpers.PassedDestination(this.PreBox2DPosition, this.BotAINav.NodeB.Box2DPosition, ref value2, false, 0f))
					{
						return true;
					}
				}
				break;
			case PathNode.PathNodeNavType.LedgeGrab:
				if (this.StandingOnGround)
				{
					if (this.AINavigationCheckReachedNodeBasedOnDistance(playerBDiff, new Microsoft.Xna.Framework.Vector2(0f, -0.32f), 0.32f, false))
					{
					}
				}
				else if (this.LedgeGrabbing)
				{
					if (this.AINavigationCheckReachedNodeBasedOnDistance(playerBDiff, new Microsoft.Xna.Framework.Vector2(0f, -0.32f), 0.32f, false))
					{
						return true;
					}
					if (Player.AINavigationHelpers.PassedDestination(this.PreBox2DPosition, this.BotAINav.NodeB.Box2DPosition, ref value2, false, 0f))
					{
						return true;
					}
				}
				else if (this.InAir && Math.Abs(playerBDiff.X) < 0.32f && playerBDiff.Y < -0.32f && this.BotAINav.NodeC != null)
				{
					Microsoft.Xna.Framework.Vector2 nodeDistance = this.BotAINav.GetNodeDistance(1);
					if ((Math.Abs(nodeDistance.X) < 0.32f & Math.Abs(nodeDistance.Y) < 0.32f) && ((value2.X > 0.4f && nodeDistance.X > 0f) | (value2.X < -0.4f && nodeDistance.X < 0f)))
					{
						return true;
					}
				}
				break;
			}
			return false;
		}

		// Token: 0x0600395E RID: 14686 RVA: 0x000E7AF0 File Offset: 0x000E5CF0
		private ObjectData AINavigationGetAirNodeTarget(ObjectData pathNode)
		{
			if (this.InAir && (pathNode == null || pathNode.GetBox2DPosition().Y > this.PreBox2DPosition.Y))
			{
				if (this.m_botAINavAirNodeBackupTarget != null)
				{
					if (!this.m_botAINavAirNodeBackupTarget.IsDisposed && (pathNode == null || this.m_botAINavAirNodeBackupTargetSourceNodeID == pathNode.ObjectID) && this.GameWorld.ElapsedTotalGameTime - this.m_botAINavAirNodeBackupTargetTime <= 150f)
					{
						return this.m_botAINavAirNodeBackupTarget;
					}
					this.m_botAINavAirNodeBackupTarget = null;
				}
				PathNode pathNode2 = this.GameWorld.PathGrid.FindClosestPathNodeBelow(this.PreBox2DPosition, false, 1.1999999f, 2.56f, 0f);
				if (pathNode2 != null)
				{
					this.m_botAINavAirNodeBackupTarget = pathNode2.OwnerObject;
					this.m_botAINavAirNodeBackupTargetTime = this.GameWorld.ElapsedTotalGameTime;
					this.m_botAINavAirNodeBackupTargetSourceNodeID = ((pathNode != null) ? pathNode.ObjectID : 0);
					return pathNode2.OwnerObject;
				}
			}
			return pathNode;
		}

		// Token: 0x0600395F RID: 14687 RVA: 0x000E7BD4 File Offset: 0x000E5DD4
		private void BotAIPrepareUpdate()
		{
			this.m_botAINavMoveAroundObstacles = false;
			if (this.m_requeuePathFindingNextUpdateTime > 0f)
			{
				this.BotAINavResetNav(this.m_requeuePathFindingNextUpdateTime);
				this.m_requeuePathFindingNextUpdateTime = 0f;
			}
			if (this.m_botAINavMoveDownDelay > 0)
			{
				this.m_botAINavMoveDownDelay -= 1;
			}
			if (this.m_botAISeekCoverObject != null && this.m_botAISeekCoverObject.IsDisposed)
			{
				this.m_botAISeekCoverObject = null;
			}
		}

		// Token: 0x06003960 RID: 14688 RVA: 0x000E7C40 File Offset: 0x000E5E40
		private void AINavigationMoveBasedOnNav_MoveDown(Player.AIMoveData moveData)
		{
			if (this.m_botAINavMoveDownDelay <= 0)
			{
				this.m_botAINavMoveDownDelay = 2;
				return;
			}
			this.m_botAINavMoveDownDelay = 2;
			Microsoft.Xna.Framework.Vector2 playerTargetDiff = moveData.PlayerTargetDiff;
			Microsoft.Xna.Framework.Vector2 nodeDifference = moveData.NodeDifference;
			Microsoft.Xna.Framework.Vector2 nodeDirection = moveData.NodeDirection;
			Body botAINavMoveAroundAndDownBody = this.m_botAINavMoveAroundAndDownBody;
			this.m_botAINavMoveAroundAndDownBody = null;
			if (this.StandingOnGround && playerTargetDiff.Y < 0.16f)
			{
				if (this.StandingOnBody != null)
				{
					ObjectData objectData = ObjectData.Read(this.StandingOnBody);
					if (this.Contacts.CenterMostWalkContact != null && this.Contacts.CenterMostWalkContact.Fixture != null && this.Contacts.CenterMostWalkContact.Fixture.IsCloud())
					{
						if (this.VirtualKeyboardLastMovement == PlayerMovement.Idle && this.CurrentSpeed.X == 0f)
						{
							this.KeyAction(20, Player.PressKeyType.Tap);
						}
						if (!this.Sprinting && Microsoft.Xna.Framework.Vector2.Dot(nodeDirection, -Microsoft.Xna.Framework.Vector2.UnitY) > 0.74f)
						{
							if (this.VirtualKeyboardLastMovement == PlayerMovement.Left && this.Contacts.LeftCollisionContactsCount > 0)
							{
								this.KeyAction(20, Player.PressKeyType.Tap);
								return;
							}
							if (this.VirtualKeyboardLastMovement == PlayerMovement.Right && this.Contacts.RightCollisionContactsCount > 0)
							{
								this.KeyAction(20, Player.PressKeyType.Tap);
							}
						}
						return;
					}
					if (objectData != null && objectData is ObjectGlass)
					{
						if (this.m_botAINavForceReachedNextTimer > 500f)
						{
							if (this.LastDirectionXActionKick == 1)
							{
								this.KeyActionLeft(Player.PressKeyType.Hold);
							}
							else
							{
								this.KeyActionRight(Player.PressKeyType.Hold);
							}
							this.m_botAINavForceReachedNextTimer = 0f;
							return;
						}
						this.KeyAction(15, Player.PressKeyType.Tap);
						return;
					}
					else
					{
						if (this.StandingOnBody.GetType() == Box2D.XNA.BodyType.Dynamic && !this.BotAINav.NodeAOrBFollowsObject(objectData.ObjectID))
						{
							Microsoft.Xna.Framework.Vector2 vector = this.PreBox2DPosition - objectData.GetBox2DCenterPosition();
							this.m_botAINavMoveAroundAndDownBody = this.StandingOnBody;
							if (botAINavMoveAroundAndDownBody != this.StandingOnBody)
							{
								this.m_botAINavMoveAroundKickCount = this.Statisticts.m_TotalKickSwings;
							}
							else if (this.Statisticts.m_TotalKickSwings - this.m_botAINavMoveAroundKickCount >= 2 && this.CurrentAction != PlayerAction.Kick)
							{
								int num = (int)(this.GameWorld.ElapsedTotalRealTime * 0.001f - this.CurrentActionTime * 0.005f);
								if (num % 2 == 0)
								{
									if (vector.X > 0f)
									{
										this.KeyActionRight(Player.PressKeyType.Hold);
									}
									else
									{
										this.KeyActionLeft(Player.PressKeyType.Hold);
									}
									this.m_botAINavForceReachedNextTimer = 0f;
									return;
								}
							}
							int num2 = (vector.X > 0f) ? -1 : 1;
							bool flag;
							if ((flag = this.CanKick(0f)) && num2 == 1 && this.LastDirectionX == -1)
							{
								this.KeyActionRight(Player.PressKeyType.Hold);
							}
							else if (flag && num2 == -1 && this.LastDirectionX == 1)
							{
								this.KeyActionLeft(Player.PressKeyType.Hold);
							}
							else if (flag)
							{
								this.KeyAction(15, Player.PressKeyType.Tap);
							}
							else if (this.CurrentAction != PlayerAction.Kick && Math.Abs(moveData.PlayerTargetDiff.X) < 0.32f)
							{
								if (num2 == 1)
								{
									this.KeyActionLeft(Player.PressKeyType.Hold);
								}
								else if (num2 == -1)
								{
									this.KeyActionRight(Player.PressKeyType.Hold);
								}
							}
							this.m_botAINavForceReachedNextTimer = 0f;
							return;
						}
						if (!(playerTargetDiff.Y < 3.1999998f & Math.Abs(playerTargetDiff.X) < 0.64f))
						{
							this.BotAINavResetNavNextUpdate(50f);
							return;
						}
						if (nodeDifference.X < -0.001f)
						{
							this.KeyActionLeft(Player.PressKeyType.Hold);
						}
						else if (nodeDifference.X > 0.001f)
						{
							this.KeyActionRight(Player.PressKeyType.Hold);
						}
					}
				}
				if (this.BotAINav.NodeAIsOfType(PathNodeType.Platform))
				{
					if (this.StandingOnBody != null && this.StandingOnBody.GetType() == Box2D.XNA.BodyType.Static)
					{
						if ((this.PreBox2DPosition - this.BotAINav.NodeA.Box2DPosition).X > 0f)
						{
							this.KeyActionLeft(Player.PressKeyType.Hold);
							return;
						}
						this.KeyActionRight(Player.PressKeyType.Hold);
						return;
					}
					else if (this.VirtualKeyboardLastMovement == PlayerMovement.Idle && this.CurrentSpeed.X == 0f)
					{
						this.KeyAction(20, Player.PressKeyType.Tap);
					}
				}
			}
		}

		// Token: 0x06003961 RID: 14689 RVA: 0x000E8028 File Offset: 0x000E6228
		private void AINavigationMoveBasedOnNav_PrecisionJump(ref Microsoft.Xna.Framework.Vector2 nodeDiff, ref Microsoft.Xna.Framework.Vector2 nodeDir, float totalMs, float tunnelingDistance, bool onlyIfPassedA)
		{
			if (Math.Abs(nodeDiff.X) > 0.32f && this.BotAINav.NodeA.NavType == PathNode.PathNodeNavType.Ground)
			{
				if (this.CurrentSpeed.X != 0f && this.CurrentSpeed.X == this.CurrentTargetSpeed.X && Player.AINavigationHelpers.PassedDestination(this.m_preBox2DPosition, this.BotAINav.NodeA.Box2DPosition, ref nodeDir, true, tunnelingDistance))
				{
					this.KeyActionJump();
					return;
				}
				if (!onlyIfPassedA && this.AINavigationCheckStuckness(totalMs, 250f))
				{
					this.KeyActionJump();
					return;
				}
			}
			else if (this.CurrentSpeed.X == this.CurrentTargetSpeed.X)
			{
				this.KeyActionJump();
			}
		}

		// Token: 0x06003962 RID: 14690 RVA: 0x000E80E4 File Offset: 0x000E62E4
		private Player.BotAIObstacleResult BotAINavGetOstacleAbove(Player.AIMoveData moveData, bool trace = true, float traceWorldDistance = 28f)
		{
			if (this.Contacts.TopCollisionContactsCount > 0)
			{
				this.m_botAINavObstacleAboveCacheObject.Object = ObjectData.Read(this.Contacts.TopCollisionContacts[0].Fixture);
				this.m_botAINavObstacleAboveCacheObject.LastHitBox2DPosition = this.Contacts.TopCollisionContacts[0].WorldPoint;
				this.m_botAINavObstacleAboveCacheTime = this.GameWorld.ElapsedTotalRealTime;
				if (this.m_botAINavObstacleAboveCacheObject.Object.IsDisposed)
				{
					this.m_botAINavObstacleAboveCacheObject.Object = null;
				}
				return this.m_botAINavObstacleAboveCacheObject;
			}
			if (this.GameWorld.ElapsedTotalRealTime - this.m_botAINavObstacleAboveCacheTime < 200f)
			{
				if (this.m_botAINavObstacleAboveCacheObject.Object == null || !this.m_botAINavObstacleAboveCacheObject.Object.IsDisposed)
				{
					return this.m_botAINavObstacleAboveCacheObject;
				}
				this.m_botAINavObstacleAboveCacheObject.Object = null;
			}
			if (!trace)
			{
				return null;
			}
			float num = Microsoft.Xna.Framework.Vector2.Dot(moveData.NodeDirection, Microsoft.Xna.Framework.Vector2.UnitY);
			if (num > 0.57739997f)
			{
				this.m_botAINavObstacleAboveCacheTime = this.GameWorld.ElapsedTotalRealTime;
				float closestFraction = 999f;
				Microsoft.Xna.Framework.Vector2 closestHitPosition = Microsoft.Xna.Framework.Vector2.Zero;
				ObjectData closestObject = null;
				Box2D.XNA.RayCastInput rci = default(Box2D.XNA.RayCastInput);
				rci.p1 = this.PreBox2DPosition + Microsoft.Xna.Framework.Vector2.UnitY * 4f * 0.04f;
				rci.p2 = rci.p1 + Microsoft.Xna.Framework.Vector2.UnitY * traceWorldDistance * 0.04f;
				rci.maxFraction = 1f;
				AABB aabb;
				AABB.Create(out aabb, rci.p1, rci.p2, 0.04f);
				this.GameWorld.GetActiveWorld.QueryAABB(delegate(Fixture fixture)
				{
					ObjectData objectData;
					RayCastOutput rayCastOutput;
					if (this.CheckCollisionFixture(fixture, out objectData, 0f, true) && fixture.RayCast(out rayCastOutput, ref rci) && rayCastOutput.fraction < closestFraction)
					{
						closestFraction = rayCastOutput.fraction;
						closestHitPosition = rci.GetHitPosition(rayCastOutput.fraction);
						closestObject = ObjectData.Read(fixture);
					}
					return true;
				}, ref aabb);
				this.m_botAINavObstacleAboveCacheObject.Object = closestObject;
				this.m_botAINavObstacleAboveCacheObject.LastHitBox2DPosition = closestHitPosition;
				return this.m_botAINavObstacleAboveCacheObject;
			}
			return null;
		}

		// Token: 0x06003963 RID: 14691 RVA: 0x000E8304 File Offset: 0x000E6504
		private void AINavigationMoveBasedOnNav(float totalMs, Player.BotAITargetData targetData)
		{
			if (this.StandingOnGround && this.BotAIActionPhaseIsActive(BotActionPhaseEnum.MeleeBlock | BotActionPhaseEnum.ManualAim))
			{
				return;
			}
			if (this.AINavigationCheckStuckTakingCover(totalMs))
			{
				return;
			}
			this.m_botAINavMoveData.SetTarget(this.BotAINav.NodeB.OwnerObject, this);
			Microsoft.Xna.Framework.Vector2 vector = this.m_botAINavMoveData.PlayerTargetDiff;
			Microsoft.Xna.Framework.Vector2 nodeDifference = this.m_botAINavMoveData.NodeDifference;
			Microsoft.Xna.Framework.Vector2 nodeDirection = this.m_botAINavMoveData.NodeDirection;
			Player.NodeAction nodeAction = this.AINavigationAnalyzeRequiredActions();
			this.m_botAINavSprintRequred = ((nodeAction & Player.NodeAction.Sprint) == Player.NodeAction.Sprint);
			this.m_botAINavChargingEnergy = (this.m_botAINavSprintRequred && this.StandingOnGround && this.Energy.CurrentValue < Math.Min(30f, this.Energy.MaxValue));
			if ((this.m_botAINavSprintRequred & this.m_botAINavChargingEnergy) && this.StandingOnGround && this.CanRechargeEnergy())
			{
				this.KeyAction(2, Player.PressKeyType.Release);
				this.KeyAction(3, Player.PressKeyType.Release);
				return;
			}
			if (this.m_botAINavSprintRequred | this.BotAIEnragedSprint)
			{
				this.KeyAction(18, Player.PressKeyType.Hold);
			}
			else if (this.m_botBehaviorSet.OffensiveSprintLevel > 0f)
			{
				if (this.Sprinting)
				{
					this.KeyAction(18, Player.PressKeyType.Hold);
					if (this.StandingOnGround && this.m_botBehaviorSet.OffensiveDiveLevel > 0f && !targetData.IsGuardTarget)
					{
						if (this.GameWorld.ElapsedTotalGameTime - this.m_botAIOffensiveDiveRandomTime > 400f)
						{
							this.m_botAIOffensiveDiveRandomTime = this.GameWorld.ElapsedTotalGameTime;
							this.m_botAIOffensiveDiveRandomResult = (this.m_botBehaviorSet.OffensiveDiveLevel >= Constants.RANDOM.NextFloat());
						}
						if (this.m_botAIOffensiveDiveRandomResult)
						{
							GameWorld.PlayerAIPackageDiveCheck playerAIPackage = this.GetPlayerAIPackage<GameWorld.PlayerAIPackageDiveCheck>();
							playerAIPackage.Target = targetData.CurrentTarget;
							playerAIPackage.Requeue(200f);
							if (playerAIPackage.CanDive)
							{
								this.KeyActionRollDive();
							}
						}
					}
				}
				else
				{
					float num = Microsoft.Xna.Framework.MathHelper.Lerp(0.8f, 0.4f, this.m_botBehaviorSet.OffensiveSprintLevel);
					float num2 = (this.m_botBehaviorSet.OffensiveSprintLevel >= 1f) ? 999f : Microsoft.Xna.Framework.MathHelper.Lerp(4f, 20f, this.m_botBehaviorSet.OffensiveSprintLevel);
					if ((this.Energy.Fullness > num || this.Energy.CurrentValue >= num * 100f) && this.BotAINav.TotalNodeSteps < (int)num2)
					{
						this.KeyAction(18, Player.PressKeyType.Hold);
					}
					else if (this.Energy.CurrentValue > 35f && targetData.IsPlayer && targetData.DistanceLength < 90f && Math.Abs(Microsoft.Xna.Framework.Vector2.Dot(targetData.Direction, Microsoft.Xna.Framework.Vector2.UnitX)) > 0.7f && (targetData.Player.Sprinting || targetData.DistanceLength < 45f || targetData.Player.CurrentAction == PlayerAction.ManualAim || targetData.Player.CurrentAction == PlayerAction.HipFire))
					{
						this.KeyAction(18, Player.PressKeyType.Hold);
					}
					if ((this.Energy.CurrentValue > 65f || (this.Sprinting && this.Energy.CurrentValue > 15f)) && this.HasGuardTarget && !targetData.IsPlayer && targetData.DistanceLength > this.m_botBehaviorSet.GuardRange * 2f)
					{
						this.KeyAction(18, Player.PressKeyType.Hold);
					}
				}
			}
			int num3 = (int)((int)this.BotAINav.NodeA.NavType << 8 | this.BotAINav.NodeB.NavType);
			if (this.LedgeGrabbing)
			{
				this.m_botAINavLedgeGrabDelayTimer += totalMs;
				if (this.m_botAINavLedgeGrabDelayTimer < 100f)
				{
					num3 = 1;
				}
			}
			else
			{
				this.m_botAINavLedgeGrabDelayTimer = 0f;
			}
			bool flag = this.BotAINav.CurrentConnectionIsOfType(PathNodeConnectionType.Jump);
			bool flag2 = this.BotAINav.CurrentConnectionIsOfType(PathNodeConnectionType.Dive);
			if (this.Climbing | this.LedgeGrabbing)
			{
				this.m_botAINavLastNavNodeAInstanceIDJumped = this.BotAINav.NodeAInstanceID;
			}
			else if ((flag || flag2) && this.m_botAINavLastNavNodeAInstanceIDJumped != this.BotAINav.NodeAInstanceID)
			{
				if (this.CurrentVelocity.Y > this.AirControlBaseVelocity.Y + 2f)
				{
					this.m_botAINavLastNavNodeAInstanceIDJumped = this.BotAINav.NodeAInstanceID;
				}
				else if (this.InAir)
				{
					num3 = 2;
				}
			}
			bool flag3;
			bool flag4;
			this.BotAINav.GetCurrentConnectionConsideredElevator(out flag3, out flag4);
			if (!flag)
			{
				flag = ((nodeDirection.Y > 0.02f & (flag3 | this.BotAINav.CurrentConnectionIsDynamic())) && this.BotAINav.NodeBIsOfType(PathNodeType.Platform));
			}
			if (flag && this.StandingOnGround && this.m_haveTouchedGroundSinceLastInAir && (!this.CanJump() || (this.m_botAINavSprintRequred && !this.Sprinting && !this.CanActivateSprint())))
			{
				this.KeyActionDirection(0, Player.PressKeyType.Release);
				this.AINavigationCheckStuckCrouching(totalMs, vector);
				return;
			}
			if (this.InAir && this.Contacts.TopCollisionContactsCount > 0 && vector.Y > 0.16f)
			{
				ObjectData objectData = ObjectData.Read(this.Contacts.TopCollisionContacts[0].Fixture);
				if (objectData != null && !objectData.IsDisposed && objectData.Body.GetType() == Box2D.XNA.BodyType.Dynamic && (!objectData.Destructable || this.CurrentAction != PlayerAction.JumpAttack) && this.GameWorld.PathGrid.RegisterBlockedNodeUpwards(this.BotAINav.NodeB, objectData))
				{
					this.m_botAINavPathFinding.Requeue(10f);
				}
			}
			if (num3 == 257 && this.m_botBehaviorSet.NavigationRandomPausesLevel > 0f && this.StandingOnGround && (!targetData.IsGuardTarget || targetData.DistanceLength < this.BotBehaviorSet.GuardRange))
			{
				if (this.GameWorld.ElapsedTotalGameTime > this.m_botAINavPauseNextTime)
				{
					if (this.m_botAINavPauseNextTime == 0f)
					{
						this.m_botAINavPauseTime = this.GameWorld.ElapsedTotalGameTime + 250f;
					}
					else if (this.GameWorld.ElapsedTotalGameTime - this.m_botAINavPauseNextTime < 2000f && targetData.DistanceLength > 114f)
					{
						this.m_botAINavPauseTime = this.GameWorld.ElapsedTotalGameTime + Constants.RANDOM.NextFloat(500f + 1000f * this.m_botBehaviorSet.NavigationRandomPausesLevel, 1000f + 2000f * this.m_botBehaviorSet.NavigationRandomPausesLevel);
					}
					this.m_botAINavPauseNextTime = this.GameWorld.ElapsedTotalGameTime + Constants.RANDOM.NextFloat(10000f - 6000f * this.m_botBehaviorSet.NavigationRandomPausesLevel, 20000f - 10000f * this.m_botBehaviorSet.NavigationRandomPausesLevel);
				}
				if (this.m_botAINavPauseTime > this.GameWorld.ElapsedTotalGameTime)
				{
					if (this.Health.CheckRecentlyDecreased(200f))
					{
						this.m_botAINavPauseTime = this.GameWorld.ElapsedTotalGameTime;
					}
					num3 = 1;
					this.m_botAINavForceReachedNextTimer = 0f;
				}
			}
			if ((flag3 || flag4) && (this.StandingOnGround | this.Climbing | this.LedgeGrabbing))
			{
				float num4 = 26f;
				bool flag5 = flag3 & !flag4;
				Microsoft.Xna.Framework.Vector2 vector2 = this.BotAINav.NodeB.GetLinearVelocity();
				vector2.Normalize();
				if (!vector2.IsValid())
				{
					vector2 = Microsoft.Xna.Framework.Vector2.UnitX;
				}
				Microsoft.Xna.Framework.Vector2 relVel = this.BotAINav.NodeB.GetLinearVelocity() - this.BotAINav.NodeA.GetLinearVelocity();
				Player.ElevatorStatus elevatorStatus = this.CalculateElevatorStatus(relVel, nodeDirection);
				Player.ElevatorDirection elevatorDirection = this.CalculateElevatorDirection(vector2);
				if (elevatorStatus == Player.ElevatorStatus.Still && vector.Y > -Converter.WorldToBox2D(80f) && vector.Y < -0.16f && Microsoft.Xna.Framework.Vector2.Dot(targetData.Direction, -Microsoft.Xna.Framework.Vector2.UnitY) > 0.96f)
				{
					num4 = 80f;
				}
				else if (elevatorStatus == Player.ElevatorStatus.ComingCloser && (elevatorDirection == Player.ElevatorDirection.Vertical || (relVel.Y < -1f && Math.Abs(relVel.X) < 0.2f)) && vector.Y > 0.04f * (flag ? 28f : 14f))
				{
					num3 = 1;
				}
				else if (relVel.Y < -1f && Math.Abs(relVel.X) < 0.2f && vector.Y < -0.16f)
				{
					num4 = 50f;
				}
				else if (elevatorDirection == Player.ElevatorDirection.Horizontal)
				{
					num4 = ((this.Sprinting | this.m_botAINavSprintRequred) ? this.GetMaxSprintJumpDistance(false) : this.GetMaxRunJumpDistance()) * ((elevatorStatus == Player.ElevatorStatus.GoingAway) ? 0.5f : 0.9f);
				}
				else if (vector.Y < -0.16f && flag5 && elevatorDirection == Player.ElevatorDirection.Vertical && elevatorStatus == Player.ElevatorStatus.ComingCloser && this.BotAINav.NodeA.GetLinearVelocity().Y < -0.2f)
				{
					num4 = 30f;
				}
				else if (elevatorStatus == Player.ElevatorStatus.GoingAway & !flag5)
				{
					num4 = 20f;
				}
				else if (elevatorStatus == Player.ElevatorStatus.Still)
				{
					num4 = this.GetMaxSprintJumpDistance(false);
				}
				else if (elevatorStatus == Player.ElevatorStatus.GoingAway)
				{
					if ((Math.Abs(relVel.X) < 0.5f && elevatorDirection == Player.ElevatorDirection.Horizontal) || (Math.Abs(relVel.Y) < 0.5f && elevatorDirection == Player.ElevatorDirection.Vertical) || (relVel.Length() < 0.5f && elevatorDirection == Player.ElevatorDirection.Other))
					{
						float maxSprintJumpDistance = this.GetMaxSprintJumpDistance(false);
						float maxRunJumpDistance = this.GetMaxRunJumpDistance();
						if (maxSprintJumpDistance * 0.7f > num4 || maxRunJumpDistance * 0.7f > num4)
						{
							num4 = Math.Max(maxSprintJumpDistance * 0.7f, maxRunJumpDistance * 0.7f);
						}
					}
				}
				else if (elevatorStatus == Player.ElevatorStatus.ComingCloser && !flag5 && relVel.Length() < 0.5f)
				{
					num4 = Math.Max(this.GetMaxSprintJumpDistance(false) * 0.7f, num4);
				}
				num4 *= 0.04f;
				if (vector.Y < 0.24f)
				{
					num4 += 0.08f;
				}
				if (!flag2 & nodeDifference.CalcSafeLength() > num4)
				{
					num3 = 1;
				}
				if (num3 == 1)
				{
					this.m_botAINavForceReachedNextTimer = 0f;
					this.m_botAINavWaitElevatorTimer += totalMs;
					Microsoft.Xna.Framework.Vector2 x = (this.BotAINav.NodeA.Box2DPosition - this.PreBox2DPosition).Sanitize();
					if (this.m_botAINavWaitElevatorTimer > 150f && x.CalcSafeLength() > 0.79999995f)
					{
						this.BotAINavResetNav(1f);
						this.AINavigationCheckStuckCrouching(totalMs, vector);
						return;
					}
					if (this.BotAINav.NodeA.NavType == PathNode.PathNodeNavType.Ground)
					{
						if (nodeDifference.X > 0.16f)
						{
							x.X -= 0.16f;
						}
						else if (nodeDifference.X < -0.16f)
						{
							x.X += 0.16f;
						}
						if (x.X > 0.16f)
						{
							this.KeyActionRight(Player.PressKeyType.Hold);
						}
						else if (x.X < -0.16f)
						{
							this.KeyActionLeft(Player.PressKeyType.Hold);
						}
					}
				}
			}
			int num5 = num3;
			if (num5 <= 259)
			{
				switch (num5)
				{
				case 1:
					if (this.Rolling)
					{
						this.KeyActionJump();
						goto IL_179F;
					}
					goto IL_179F;
				case 2:
				{
					Microsoft.Xna.Framework.Vector2 vector3 = (this.BotAINav.NodeA.Box2DPosition - this.PreBox2DPosition).Sanitize();
					if (vector3.X > 0.08f)
					{
						this.KeyActionRight(Player.PressKeyType.Hold);
						goto IL_179F;
					}
					if (vector3.X < -0.08f)
					{
						this.KeyActionLeft(Player.PressKeyType.Hold);
						goto IL_179F;
					}
					goto IL_179F;
				}
				default:
					switch (num5)
					{
					case 257:
						break;
					case 258:
						goto IL_112D;
					case 259:
						goto IL_1425;
					default:
						goto IL_179F;
					}
					break;
				}
			}
			else
			{
				switch (num5)
				{
				case 513:
					break;
				case 514:
					goto IL_112D;
				case 515:
					goto IL_1425;
				default:
					switch (num5)
					{
					case 769:
						break;
					case 770:
						goto IL_112D;
					case 771:
						goto IL_1425;
					default:
						goto IL_179F;
					}
					break;
				}
			}
			ObjectData objectData2 = null;
			if (this.LedgeGrabbing)
			{
				if (this.LedgeGrabbing && (this.LedgeGrabData.Body == null || this.LedgeGrabData.Body.GetType() == Box2D.XNA.BodyType.Dynamic) && this.LedgeGrabData.Body != this.m_botAINavMoveAroundAndDownBody && this.BotAINav.NodeA.NavType != PathNode.PathNodeNavType.LedgeGrab && Math.Abs(vector.X) >= 0.16f)
				{
					this.KeyActionJump();
				}
				else if (Microsoft.Xna.Framework.Vector2.Normalize(vector).Sanitize().Y < -0.74f)
				{
					this.KeyActionDropClimbingOrLedgeGrabbing();
				}
				else
				{
					this.KeyActionJump();
				}
			}
			else if (this.Climbing)
			{
				if (Microsoft.Xna.Framework.Vector2.Normalize(vector).Sanitize().Y < -0.74f)
				{
					this.KeyActionDropClimbingOrLedgeGrabbing();
				}
				else
				{
					Player.BotAIObstacleResult botAIObstacleResult = this.BotAINavGetOstacleAbove(this.m_botAINavMoveData, true, 28f);
					objectData2 = ((botAIObstacleResult != null) ? botAIObstacleResult.Object : null);
					if (objectData2 == null)
					{
						this.KeyActionJump();
					}
				}
			}
			float num6 = 0.16f;
			if (this.InAir && this.BotAINav.NodeB.IsElevatorNode && this.BotAINav.NodeA.NavType == PathNode.PathNodeNavType.Ground)
			{
				Microsoft.Xna.Framework.Vector2 vector4 = this.BotAINav.NodeB.GetLinearVelocity();
				vector4.Normalize();
				if (!vector4.IsValid())
				{
					vector4 = Microsoft.Xna.Framework.Vector2.UnitX;
				}
				num6 = 0f;
				vector += vector4 * Math.Min(this.BotAINav.NodeB.GetLinearVelocity().Length(), 0.3f);
			}
			if (this.AINavigationCheckMoveDownThroughPlatform(this.m_botAINavMoveData, nodeDirection, this.ForceKneel ? 0.48f : num6))
			{
				this.AINavigationMoveBasedOnNav_MoveDown(this.m_botAINavMoveData);
			}
			else if (this.StandingOnBody != null && this.StandingOnBody == this.m_botAINavMoveAroundAndDownBody)
			{
				this.AINavigationMoveBasedOnNav_MoveDown(this.m_botAINavMoveData);
			}
			else if (vector.X > num6)
			{
				if (this.Contacts.RightCollisionContactsCount > 0 && this.BotAINav.NodeAIsOfType(PathNodeType.Platform) && !this.BotAINav.CurrentConnectionIsOfType(PathNodeConnectionType.Dive) && Microsoft.Xna.Framework.Vector2.Dot(nodeDirection, -Microsoft.Xna.Framework.Vector2.UnitY) > 0.74f)
				{
					this.AINavigationMoveBasedOnNav_MoveDown(this.m_botAINavMoveData);
				}
				else
				{
					this.KeyActionRight(Player.PressKeyType.Hold);
					this.m_botAINavMoveAroundObstacles = true;
					if (this.Contacts.RightCollisionContactsCount > 0 && !this.Climbing && !this.LedgeGrabbing && vector.Y > 0.08f && nodeDirection.Y > 0.2f)
					{
						this.KeyActionJump();
					}
				}
			}
			else if (vector.X < -num6)
			{
				if (this.Contacts.LeftCollisionContactsCount > 0 && this.BotAINav.NodeAIsOfType(PathNodeType.Platform) && !this.BotAINav.CurrentConnectionIsOfType(PathNodeConnectionType.Dive) && Microsoft.Xna.Framework.Vector2.Dot(nodeDirection, -Microsoft.Xna.Framework.Vector2.UnitY) > 0.74f)
				{
					this.AINavigationMoveBasedOnNav_MoveDown(this.m_botAINavMoveData);
				}
				else
				{
					this.KeyActionLeft(Player.PressKeyType.Hold);
					this.m_botAINavMoveAroundObstacles = true;
					if (this.Contacts.LeftCollisionContactsCount > 0 && !this.Climbing && !this.LedgeGrabbing && vector.Y > 0.08f && nodeDirection.Y > 0.2f)
					{
						this.KeyActionJump();
					}
				}
			}
			else
			{
				if (this.BotAINav.NodeB.UseDynamicConnections)
				{
					if (vector.X > 0f & this.LastDirectionX == 1 & this.Contacts.RightCollisionContactsCount == 0)
					{
						this.KeyActionRight(Player.PressKeyType.Hold);
					}
					else if (vector.X < 0f & this.LastDirectionX == -1 & this.Contacts.LeftCollisionContactsCount == 0)
					{
						this.KeyActionLeft(Player.PressKeyType.Hold);
					}
				}
				if (vector.Y > 0.32f)
				{
					if (this.Contacts.TopCollisionContactsCount > 0)
					{
						if (vector.X > 0f)
						{
							this.KeyActionRight(Player.PressKeyType.Hold);
						}
						else if (vector.X < 0f)
						{
							this.KeyActionLeft(Player.PressKeyType.Hold);
						}
					}
					if (objectData2 == null)
					{
						this.KeyActionJump();
					}
				}
				else if (vector.Y < -0.32f)
				{
					this.AINavigationMoveBasedOnNav_MoveDown(this.m_botAINavMoveData);
				}
				if (objectData2 != null)
				{
					if (this.AINavigationCheckStuckness(totalMs, 1000f) && this.GameWorld.PathGrid.RegisterBlockedNodeUpwards(this.BotAINav.NodeB, objectData2))
					{
						this.m_botAINavPathFinding.Requeue(10f);
					}
					if (this.Climbing)
					{
						this.KeyActionUp();
					}
				}
			}
			if (this.m_botAINavSprintRequred)
			{
				this.KeyAction(18, Player.PressKeyType.Hold);
			}
			if (flag)
			{
				if ((!this.m_botAINavSprintRequred || (this.Sprinting && this.Movement != PlayerMovement.Idle)) && Player.AINavigationHelpers.PassedDestination(this.PreBox2DPosition, this.BotAINav.NodeA.Box2DPosition, ref nodeDirection, this.StandingOnGround, 0f))
				{
					this.KeyActionJump();
					goto IL_179F;
				}
				goto IL_179F;
			}
			else
			{
				if (flag2 && this.Sprinting && Player.AINavigationHelpers.PassedDestination(this.PreBox2DPosition, this.BotAINav.NodeA.Box2DPosition, ref nodeDirection, this.StandingOnGround, 0f))
				{
					this.KeyAction(20, Player.PressKeyType.Tap);
					goto IL_179F;
				}
				goto IL_179F;
			}
			IL_112D:
			if (this.LedgeGrabbing)
			{
				if (Microsoft.Xna.Framework.Vector2.Normalize(vector).Sanitize().Y < -0.74f)
				{
					this.KeyActionDropClimbingOrLedgeGrabbing();
				}
				else
				{
					this.KeyActionJump();
				}
			}
			if (!this.Climbing && (Math.Abs(vector.X) < 0.16f & Math.Abs(vector.X) > 0.04f))
			{
				this.KeyAction(21, Player.PressKeyType.Hold);
			}
			bool flag6 = vector.Y + 0.16f > 0f;
			if (!this.Climbing && vector.X > 0.04f)
			{
				this.KeyActionRight(Player.PressKeyType.Hold);
				this.KeyAction(0, Player.PressKeyType.Hold);
				if (this.Contacts.RightCollisionContactsCount > 0 && !this.LedgeGrabbing)
				{
					this.KeyActionJump();
				}
				if (this.StandingOnGround && flag6)
				{
					this.AINavigationMoveBasedOnNav_PrecisionJump(ref nodeDifference, ref nodeDirection, totalMs, -0.16f, true);
				}
				this.KeyAction(0, Player.PressKeyType.Hold);
			}
			else if (!this.Climbing && vector.X < -0.04f)
			{
				this.KeyActionLeft(Player.PressKeyType.Hold);
				this.KeyAction(0, Player.PressKeyType.Hold);
				if (this.Contacts.LeftCollisionContactsCount > 0 && !this.LedgeGrabbing)
				{
					this.KeyActionJump();
				}
				if (this.StandingOnGround && flag6)
				{
					this.AINavigationMoveBasedOnNav_PrecisionJump(ref nodeDifference, ref nodeDirection, totalMs, -0.16f, true);
				}
				this.KeyAction(0, Player.PressKeyType.Hold);
			}
			else
			{
				if (flag6 && this.BotAINav.NodeC != null && this.BotAINav.NodeC.NavType == PathNode.PathNodeNavType.Ladder && this.BotAINav.GetNodeDistance(1).Y < -0.16f)
				{
					flag6 = false;
				}
				if (flag6)
				{
					if (this.StandingOnGround)
					{
						this.KeyActionJump();
					}
					this.KeyAction(0, Player.PressKeyType.Hold);
					if (this.Climbing && vector.Y < 0.79999995f && !this.BotAINav.NodeBIsOfType(PathNodeType.Ladder))
					{
						this.KeyActionJump();
					}
					if (this.Climbing)
					{
						if (vector.X > 0.04f)
						{
							this.KeyActionRight(Player.PressKeyType.Hold);
						}
						else if (vector.X < -0.04f)
						{
							this.KeyActionLeft(Player.PressKeyType.Hold);
						}
					}
				}
				else
				{
					if (!this.AINavigationCheckTeammateClimbingBelow())
					{
						if (!this.Climbing && this.StandingOnGround && this.AINavigationCheckStuckness(totalMs, 200f))
						{
							this.AINavigationMoveBasedOnNav_MoveDown(this.m_botAINavMoveData);
						}
						this.KeyAction(1, Player.PressKeyType.Hold);
					}
					else if (!this.Climbing && this.InAir)
					{
						this.KeyAction(0, Player.PressKeyType.Hold);
					}
					if (this.Climbing && vector.Y > -0.96f && !this.BotAINav.NodeBIsOfType(PathNodeType.Ladder))
					{
						this.KeyActionDropClimbingOrLedgeGrabbing();
					}
				}
			}
			if (flag && (!this.m_botAINavSprintRequred || (this.Sprinting && this.Movement != PlayerMovement.Idle)) && Player.AINavigationHelpers.PassedDestination(this.PreBox2DPosition, this.BotAINav.NodeA.Box2DPosition, ref nodeDirection, this.StandingOnGround, 0f))
			{
				this.KeyActionJump();
				goto IL_179F;
			}
			goto IL_179F;
			IL_1425:
			int num7 = (this.BotAINav.NodeB.NodeType == PathNodeType.LeftLedgeGrab) ? -1 : 1;
			if (this.Climbing | this.LedgeGrabbing)
			{
				if (nodeDirection.Y < 0f)
				{
					this.KeyActionDropClimbingOrLedgeGrabbing();
				}
				else
				{
					this.KeyActionJump();
				}
			}
			else
			{
				this.m_botAINavLedgeGrabDelayTimer = 0f;
			}
			if (!this.InAir && nodeDirection.Y < -0.5f && this.CurrentVelocity.Y >= -5f && Math.Abs(vector.X) < 0.32f)
			{
				if (num7 == -1)
				{
					this.KeyActionRight(Player.PressKeyType.Hold);
				}
				else
				{
					this.KeyActionLeft(Player.PressKeyType.Hold);
				}
				this.m_botAINavDownFromLedgeFallTimer = 150f;
			}
			else
			{
				if (this.m_botAINavDownFromLedgeFallTimer > 0f)
				{
					this.m_botAINavDownFromLedgeFallTimer -= totalMs;
					vector.X += (float)(-(float)num7) * 0.04f * 6f;
				}
				else if (vector.Y < -0.48f)
				{
					if (this.InAir && this.CurrentVelocity.Y < 0.1f)
					{
						if (this.CurrentVelocity.Y < -5f && vector.Y < 0f)
						{
							vector.X += (float)(-(float)num7) * 0.04f * 6f;
						}
					}
					else
					{
						vector.X += (float)(-(float)num7) * 0.04f * 6f;
					}
				}
				else if (vector.Y > 0f && Microsoft.Xna.Framework.Vector2.Dot(nodeDirection, Microsoft.Xna.Framework.Vector2.UnitY) > 0.1f && vector.Y > nodeDifference.Y * 0.5f)
				{
					vector.X += (float)(-(float)num7) * 0.04f * 6f;
				}
				if (Microsoft.Xna.Framework.Vector2.Normalize(vector).Sanitize().Y < -0.74f && this.BotAINav.NodeA.NodeType == PathNodeType.Platform && this.StandingOnGround)
				{
					this.AINavigationMoveBasedOnNav_MoveDown(this.m_botAINavMoveData);
				}
				else if (this.m_botAINavDownFromLedgeFallTimer <= 0f)
				{
					if (vector.X > 0.04f)
					{
						this.KeyActionRight(Player.PressKeyType.Hold);
					}
					else if (vector.X < -0.04f)
					{
						this.KeyActionLeft(Player.PressKeyType.Hold);
					}
					if (vector.Y > 0.64f)
					{
						if (this.BotAINav.NodeA.NavType == PathNode.PathNodeNavType.Ground && ((num7 == -1 && vector.X < 0.08f) || (num7 == 1 && vector.X > -0.08f)))
						{
							this.AINavigationMoveBasedOnNav_PrecisionJump(ref nodeDifference, ref nodeDirection, totalMs, -0.16f, false);
						}
						else
						{
							this.KeyAction(18, Player.PressKeyType.Hold);
							if (Math.Sign((this.BotAINav.NodeA.Box2DPosition - this.PreBox2DPosition).Sanitize().X - (float)num7 * 0.08f) == num7)
							{
								this.AINavigationMoveBasedOnNav_PrecisionJump(ref nodeDifference, ref nodeDirection, totalMs, -0.16f, false);
							}
						}
					}
					else if (this.StandingOnGround && Math.Abs(vector.X) < 0.24f)
					{
						this.m_botAINavReachedNextNode = true;
					}
				}
			}
			if (flag && (!this.m_botAINavSprintRequred || (this.Sprinting && this.Movement != PlayerMovement.Idle)) && Player.AINavigationHelpers.PassedDestination(this.PreBox2DPosition, this.BotAINav.NodeA.Box2DPosition, ref nodeDirection, this.StandingOnGround, 0f))
			{
				this.KeyActionJump();
			}
			IL_179F:
			if (this.InAir && !this.Climbing && this.CurrentVelocity.Y > -2f && this.m_botAINavMoveData.PlayerTargetDiff.Y > 0f && (this.m_botAINavMoveData.PlayerTargetDiff.Y > Math.Abs(this.m_botAINavMoveData.PlayerTargetDiff.X) || Math.Abs(this.m_botAINavMoveData.PlayerTargetDiff.X) < 0.32f))
			{
				Player.BotAIObstacleResult botAIObstacleResult2 = this.BotAINavGetOstacleAbove(this.m_botAINavMoveData, true, 28f);
				if (botAIObstacleResult2 != null && botAIObstacleResult2.Object != null && botAIObstacleResult2.Object.Destructable)
				{
					Microsoft.Xna.Framework.Vector2 vector5 = botAIObstacleResult2.LastHitBox2DPosition - this.PreBox2DPosition;
					if (this.AIMeleeSheatheCheckToMelee(true) && vector5.Y < Constants.RANDOM.NextFloat(0.92f, 1.05f))
					{
						this.KeyActionDirection(((botAIObstacleResult2.Object.GetBox2DCenterPosition() - this.PreBox2DPosition).X > 0f) ? 1 : -1, Player.PressKeyType.Tap);
						this.KeyAction(4, Player.PressKeyType.Tap);
					}
					if (this.BotAINav.NodeB != null && botAIObstacleResult2.Object != null && !botAIObstacleResult2.Object.IsDisposed && this.AINavigationCheckStuckness(totalMs, 1000f) && this.GameWorld.PathGrid.RegisterBlockedNodeUpwards(this.BotAINav.NodeB, botAIObstacleResult2.Object))
					{
						this.m_botAINavPathFinding.Requeue(10f);
					}
				}
			}
			this.AINavigationCheckStuckCrouching(totalMs, vector);
		}

		// Token: 0x06003964 RID: 14692 RVA: 0x000E9C58 File Offset: 0x000E7E58
		private bool AINavigationCheckMoveDownThroughPlatform(Player.AIMoveData moveData, Microsoft.Xna.Framework.Vector2 nodeDir, float xTolerance)
		{
			if (this.StandingOnGround && Microsoft.Xna.Framework.Vector2.Dot(nodeDir, -Microsoft.Xna.Framework.Vector2.UnitY) > 0.74f && this.BotAINav.NodeAIsOfType(PathNodeType.Platform) && !this.BotAINav.CurrentConnectionIsOfType(PathNodeConnectionType.Dive) && this.StandingOnBody != null && this.StandingOnBody.GetFixtureList() != null && this.StandingOnBody.GetFixtureList().IsCloud())
			{
				bool flag;
				bool flag2;
				this.BotAINav.GetCurrentConnectionConsideredElevator(out flag, out flag2);
				if (flag || flag2)
				{
					if (!flag && moveData.NodeDifference.Y < -0.64f)
					{
						float num = Microsoft.Xna.Framework.Vector2.Dot(nodeDir, -Microsoft.Xna.Framework.Vector2.UnitY);
						if (num > 0.96f)
						{
							return true;
						}
					}
					return false;
				}
				float num2 = Math.Min(this.BotAINav.NodeA.Box2DPosition.X, this.BotAINav.NodeB.Box2DPosition.X) - xTolerance;
				float num3 = Math.Max(this.BotAINav.NodeA.Box2DPosition.X, this.BotAINav.NodeB.Box2DPosition.X) + xTolerance;
				if (this.PreBox2DPosition.X > num2 && this.PreBox2DPosition.X < num3)
				{
					return true;
				}
				if (moveData.NodeDifference.Y < -0.64f)
				{
					float num4 = Microsoft.Xna.Framework.Vector2.Dot(nodeDir, -Microsoft.Xna.Framework.Vector2.UnitY);
					if (num4 > 0.96f)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06003965 RID: 14693 RVA: 0x000E9DE0 File Offset: 0x000E7FE0
		private bool AINavigationCheckTeammateClimbingBelow()
		{
			float num = 1.04f;
			if (!this.Climbing)
			{
				num = 1.52f;
			}
			for (int i = 0; i < this.GameWorld.Players.Count; i++)
			{
				Player player = this.GameWorld.Players[i];
				if (!player.IsDisposed && player != this && (player.Climbing || player.InAir))
				{
					Microsoft.Xna.Framework.Vector2 vector = player.PreBox2DPosition - this.PreBox2DPosition;
					if (Math.Abs(vector.X) <= 0.16f && player.InSameTeam(this) && vector.Y < (this.StandingOnGround ? 0.16f : 0f) && vector.Y > -num)
					{
						this.m_botAINavigationCheckTeammateClimbingBelowRandomDelay = this.GameWorld.ElapsedTotalGameTime + Constants.RANDOM.NextFloat(0f, 250f);
						return true;
					}
				}
			}
			return this.m_botAINavigationCheckTeammateClimbingBelowRandomDelay > this.GameWorld.ElapsedTotalGameTime;
		}

		// Token: 0x06003966 RID: 14694 RVA: 0x0002F2B0 File Offset: 0x0002D4B0
		private void AINavigationCheckStucknessPost()
		{
			if (this.m_botAINavStuckReset)
			{
				this.m_botAINavStuckTimer = 0f;
			}
			this.m_botAINavStuckReset = true;
		}

		// Token: 0x06003967 RID: 14695 RVA: 0x0002F2CC File Offset: 0x0002D4CC
		private bool AINavigationCheckStuckness(float totalMs, float threshold)
		{
			this.m_botAINavStuckTimer += totalMs;
			this.m_botAINavStuckReset = false;
			return this.m_botAINavStuckTimer > threshold;
		}

		// Token: 0x06003968 RID: 14696 RVA: 0x000E9EE4 File Offset: 0x000E80E4
		private bool AINavigationCheckStuckTakingCover(float totalMs)
		{
			if (this.TakingCover && this.m_botAIShooting.ForcedCoverTime <= -200f && !this.Reloading)
			{
				if (this.AINavigationCheckStuckness(totalMs, 200f))
				{
					if ((this.m_botAIActionPhaseValues & BotActionPhaseEnum.DrawWeapon) == BotActionPhaseEnum.DrawWeapon)
					{
						return true;
					}
					this.KeyActionJump();
				}
				return true;
			}
			return false;
		}

		// Token: 0x06003969 RID: 14697 RVA: 0x000E9F40 File Offset: 0x000E8140
		private bool AINavigationCheckStuckCrouching(float totalMs, Microsoft.Xna.Framework.Vector2 playerDirection)
		{
			if (this.Crouching)
			{
				this.m_botAINavCrouchStuckTimer += totalMs;
				if (this.m_botAINavCrouchStuckTimer > 200f)
				{
					if (!this.Rolling)
					{
						if (this.CanRoll())
						{
							if (playerDirection.X > 0f && this.Contacts.RightCollisionContactsCount == 0)
							{
								this.KeyActionRight(Player.PressKeyType.Hold);
							}
							else if (playerDirection.X < 0f && this.Contacts.LeftCollisionContactsCount == 0)
							{
								this.KeyActionLeft(Player.PressKeyType.Hold);
							}
							else if (this.LastDirectionXActionRoll == 1)
							{
								this.KeyActionLeft(Player.PressKeyType.Hold);
							}
							else
							{
								this.KeyActionRight(Player.PressKeyType.Hold);
							}
							this.KeyAction(20, Player.PressKeyType.Tap);
						}
						else if (this.AIMeleeSheatheCheckToMelee(false))
						{
							if (this.LastDirectionXActionRoll == 1)
							{
								this.KeyActionRight(Player.PressKeyType.Hold);
							}
							else
							{
								this.KeyActionLeft(Player.PressKeyType.Hold);
							}
							this.KeyAction(4, Player.PressKeyType.Tap);
						}
					}
					return true;
				}
			}
			else if (this.m_botAINavCrouchStuckTimer > 0f && !this.Rolling)
			{
				this.m_botAINavCrouchStuckTimer = 0f;
			}
			return false;
		}

		// Token: 0x0600396A RID: 14698 RVA: 0x000EA044 File Offset: 0x000E8244
		private Player.ElevatorStatus CalculateElevatorStatus(Microsoft.Xna.Framework.Vector2 relVel, Microsoft.Xna.Framework.Vector2 relPosDir)
		{
			if (Math.Abs(relVel.X) < 0.25f && Math.Abs(relVel.Y) < 0.25f)
			{
				return Player.ElevatorStatus.Still;
			}
			relVel.Normalize();
			float num = Microsoft.Xna.Framework.Vector2.Dot(relVel, relPosDir);
			if (num <= 0f)
			{
				return Player.ElevatorStatus.ComingCloser;
			}
			return Player.ElevatorStatus.GoingAway;
		}

		// Token: 0x0600396B RID: 14699 RVA: 0x000EA094 File Offset: 0x000E8294
		private Player.ElevatorDirection CalculateElevatorDirection(Microsoft.Xna.Framework.Vector2 nodeDir)
		{
			float value = Microsoft.Xna.Framework.Vector2.Dot(nodeDir, Microsoft.Xna.Framework.Vector2.UnitY);
			if (Math.Abs(value) > 0.85f)
			{
				return Player.ElevatorDirection.Vertical;
			}
			if (Math.Abs(value) < 0.15f)
			{
				return Player.ElevatorDirection.Horizontal;
			}
			return Player.ElevatorDirection.Other;
		}

		// Token: 0x0600396C RID: 14700 RVA: 0x000EA0CC File Offset: 0x000E82CC
		private Player.NodeAction AINavigationAnalyzeRequiredActions()
		{
			Player.NodeAction nodeAction = Player.NodeAction.None;
			if (this.BotAINav.CurrentConnectionIsOfType(PathNodeConnectionType.Dive))
			{
				nodeAction |= (Player.NodeAction.Sprint | Player.NodeAction.Dive);
			}
			else if (this.BotAINav.CurrentConnectionIsOfType(PathNodeConnectionType.Jump))
			{
				nodeAction |= Player.NodeAction.Jump;
				if (Math.Abs(this.BotAINav.GetNodeDistance(0).X) >= 0.04f * this.GetMaxRunJumpDistance() - 0.32f)
				{
					nodeAction |= Player.NodeAction.Sprint;
				}
			}
			else if (this.BotAINav.CurrentConnectionIsOfType(PathNodeConnectionType.Default))
			{
				Microsoft.Xna.Framework.Vector2 nodeDistance = this.BotAINav.GetNodeDistance(0);
				if (nodeDistance.Y > 0.64f && Math.Abs(nodeDistance.X) < Math.Abs(nodeDistance.Y))
				{
					nodeAction |= Player.NodeAction.Jump;
				}
			}
			if (nodeAction != Player.NodeAction.None)
			{
				return nodeAction;
			}
			if (this.BotAINav.NextConnectionIsOfType(PathNodeConnectionType.Dive))
			{
				nodeAction |= (Player.NodeAction.Sprint | Player.NodeAction.Dive);
			}
			else if (this.BotAINav.NodeB.NavType == PathNode.PathNodeNavType.Ground && this.BotAINav.NextConnectionIsOfType(PathNodeConnectionType.Jump) && Math.Abs(this.BotAINav.GetNodeDistance(1).X) >= 0.04f * this.GetMaxRunJumpDistance() - 0.32f)
			{
				nodeAction |= Player.NodeAction.Sprint;
			}
			if (this.BotAINav.CurrentConnection != null && this.BotAINav.CurrentConnection.CheckConnectionIsElevatorTransition())
			{
				nodeAction |= Player.NodeAction.Sprint;
			}
			return nodeAction;
		}

		// Token: 0x0600396D RID: 14701 RVA: 0x0000C8F7 File Offset: 0x0000AAF7
		private bool AINavigationNone(float totalMs, Player.BotAITargetData targetData)
		{
			return true;
		}

		// Token: 0x0600396E RID: 14702 RVA: 0x000EA210 File Offset: 0x000E8410
		private bool AINavigationPlainGround(float totalMs, Player.BotAITargetData targetData, bool canNavigateDown = true)
		{
			if (!this.m_botAIMeleeStatus.MustMoveCloser & !targetData.IsActivateable & !this.InAir)
			{
				return true;
			}
			if (this.AINavigationCheckStuckCrouching(totalMs, targetData.Direction))
			{
				return true;
			}
			if (this.AINavigationCheckStuckTakingCover(totalMs))
			{
				return true;
			}
			float num = targetData.Difference.X;
			float y = targetData.Difference.Y;
			bool flag = targetData.IsPlayer && targetData.Player.StandingOnGround;
			float num2 = (targetData.IsActivateable || this.InAir) ? 4f : 12f;
			if (this.StandingOnGround && flag)
			{
				num -= Converter.Box2DToWorld(this.m_botAIMeleeStatus.MovementXAdjust);
			}
			if (this.LedgeGrabbing)
			{
				if (y > 0f)
				{
					this.KeyActionJump();
				}
				else
				{
					this.KeyActionDropClimbingOrLedgeGrabbing();
				}
			}
			else if (num >= -num2 && (y >= -4f || num >= -4f || !flag))
			{
				if (num <= num2 && (y >= -4f || num <= 4f || !flag))
				{
					if (y > 12f)
					{
						if (!targetData.IsPlayer || !targetData.Player.InFreeAir)
						{
							this.KeyActionJump();
						}
					}
					else if (y < -4f && !flag && (this.m_botAIMeleeStatus.MustMoveCloser | targetData.IsActivateable) && canNavigateDown)
					{
						Player.AIMoveData aimoveData = Player.AIMoveData.NewMoveData(targetData.CurrentTarget, this);
						this.AINavigationMoveBasedOnNav_MoveDown(aimoveData);
						aimoveData.ReturnToPool();
					}
					else if (y < -6f && flag)
					{
						if (this.LastDirectionX == 1)
						{
							this.KeyActionRight(Player.PressKeyType.Hold);
						}
						else
						{
							this.KeyActionLeft(Player.PressKeyType.Hold);
						}
					}
					else if (num < 0f && this.LastDirectionX == 1)
					{
						this.KeyActionLeft(Player.PressKeyType.Hold);
					}
					else if (num > 0f && this.LastDirectionX == -1)
					{
						this.KeyActionRight(Player.PressKeyType.Hold);
					}
				}
				else
				{
					this.KeyActionRight(Player.PressKeyType.Hold);
					if (this.Contacts.RightCollisionContactsCount > 0)
					{
						this.KeyActionJump();
					}
				}
			}
			else
			{
				this.KeyActionLeft(Player.PressKeyType.Hold);
				if (this.Contacts.LeftCollisionContactsCount > 0)
				{
					this.KeyActionJump();
				}
			}
			return false;
		}

		// Token: 0x0600396F RID: 14703 RVA: 0x0002F2EF File Offset: 0x0002D4EF
		private void KeyActionDirection(int direction, Player.PressKeyType keyType = Player.PressKeyType.Hold)
		{
			if (direction == 1)
			{
				this.KeyActionRight(keyType);
				return;
			}
			if (direction == -1)
			{
				this.KeyActionLeft(keyType);
				return;
			}
			this.m_botAIKeyActionLeftRight = false;
			this.KeyAction(3, Player.PressKeyType.Release);
			this.KeyAction(2, Player.PressKeyType.Release);
		}

		// Token: 0x06003970 RID: 14704 RVA: 0x0002F320 File Offset: 0x0002D520
		private void KeyActionLeft(Player.PressKeyType keyType = Player.PressKeyType.Hold)
		{
			this.m_botAIKeyActionLeftRight = true;
			this.KeyAction(3, Player.PressKeyType.Release);
			this.KeyAction(2, keyType);
		}

		// Token: 0x06003971 RID: 14705 RVA: 0x0002F339 File Offset: 0x0002D539
		private void KeyActionRight(Player.PressKeyType keyType = Player.PressKeyType.Hold)
		{
			this.m_botAIKeyActionLeftRight = true;
			this.KeyAction(2, Player.PressKeyType.Release);
			this.KeyAction(3, keyType);
		}

		// Token: 0x06003972 RID: 14706 RVA: 0x0002F352 File Offset: 0x0002D552
		private void KeyActionUp()
		{
			this.KeyAction(1, Player.PressKeyType.Release);
			this.KeyAction(0, Player.PressKeyType.Hold);
		}

		// Token: 0x06003973 RID: 14707 RVA: 0x0002F364 File Offset: 0x0002D564
		private void KeyActionDown()
		{
			this.KeyAction(0, Player.PressKeyType.Release);
			this.KeyAction(1, Player.PressKeyType.Hold);
		}

		// Token: 0x06003974 RID: 14708 RVA: 0x0002F376 File Offset: 0x0002D576
		private void KeyActionJump()
		{
			this.KeyAction(this.Climbing ? 4 : 19, Player.PressKeyType.Tap);
		}

		// Token: 0x06003975 RID: 14709 RVA: 0x0002F38C File Offset: 0x0002D58C
		private void KeyActionRollDive()
		{
			this.KeyAction(20, Player.PressKeyType.Tap);
		}

		// Token: 0x06003976 RID: 14710 RVA: 0x0002F397 File Offset: 0x0002D597
		private void KeyActionCrouch()
		{
			this.KeyAction(20, Player.PressKeyType.Hold);
		}

		// Token: 0x06003977 RID: 14711 RVA: 0x0002F3A2 File Offset: 0x0002D5A2
		private void KeyActionDropClimbingOrLedgeGrabbing()
		{
			if (this.Climbing || this.LedgeGrabbing)
			{
				this.KeyAction(5, Player.PressKeyType.Tap);
			}
		}

		// Token: 0x06003978 RID: 14712 RVA: 0x000EA42C File Offset: 0x000E862C
		private void KeyAction(int virtualKey, Player.PressKeyType keyType = Player.PressKeyType.Hold)
		{
			if (this.VirtualKeyboard.MovementFlipped && (keyType == Player.PressKeyType.Hold || keyType == Player.PressKeyType.Tap))
			{
				if ((this.VirtualKeyboard.MovementKeyFlipped == 3 && virtualKey == 2) || (this.VirtualKeyboard.MovementKeyFlipped == 2 && virtualKey == 3))
				{
					virtualKey = this.VirtualKeyboard.MovementKeyFlipped;
				}
				else if (this.VirtualKeyboard.MovementKeyFlipped == virtualKey)
				{
					return;
				}
			}
			Player.BotAIKeyPressAction botAIKeyPressAction = null;
			if (this.m_keyActionsQueuedLookup.TryGetValue(virtualKey, out botAIKeyPressAction))
			{
				botAIKeyPressAction.KeyType = keyType;
				return;
			}
			botAIKeyPressAction = Player.BotAIKeyPressAction.GetNew(virtualKey, keyType);
			this.m_keyActionsQueued.Add(botAIKeyPressAction);
			this.m_keyActionsQueuedLookup.Add(virtualKey, botAIKeyPressAction);
		}

		// Token: 0x06003979 RID: 14713 RVA: 0x000EA4CC File Offset: 0x000E86CC
		private int KeyActionCurrentlyPressedTappedDirection()
		{
			Player.BotAIKeyPressAction botAIKeyPressAction = null;
			if (this.m_keyActionsQueuedLookup.TryGetValue(2, out botAIKeyPressAction) && botAIKeyPressAction.KeyType != Player.PressKeyType.Release)
			{
				return -1;
			}
			if (this.m_keyActionsQueuedLookup.TryGetValue(3, out botAIKeyPressAction) && botAIKeyPressAction.KeyType != Player.PressKeyType.Release)
			{
				return 1;
			}
			return 0;
		}

		// Token: 0x0600397A RID: 14714 RVA: 0x000EA514 File Offset: 0x000E8714
		private void ActivateNewKeyActions(float totalMs)
		{
			this.m_botAIKeyActionTapTimer -= totalMs;
			this.m_botAIKeyActionLeftRightTimer -= totalMs;
			if (this.m_keyActionsQueued.Count > 0)
			{
				foreach (Player.BotAIKeyPressAction botAIKeyPressAction in this.m_keyActionsQueued)
				{
					int virtualKey = botAIKeyPressAction.VirtualKey;
					Player.PressKeyType keyType = botAIKeyPressAction.KeyType;
					botAIKeyPressAction.FlagFree();
					if ((virtualKey == 2 | virtualKey == 3) && keyType != Player.PressKeyType.Release)
					{
						if (this.m_botAIKeyActionLeftRightTimer > 0f & this.m_botAIKeyActionLeftRightLastKey != virtualKey)
						{
							continue;
						}
						this.m_botAIKeyActionLeftRightLastKey = virtualKey;
						this.m_botAIKeyActionLeftRightTimer = 80f;
					}
					if (this.m_keyActionsNew.Add(virtualKey))
					{
						this.m_keyActionsOld.Remove(virtualKey);
						bool keyIsPressed = false;
						switch (keyType)
						{
						case Player.PressKeyType.Hold:
							keyIsPressed = true;
							break;
						case Player.PressKeyType.Tap:
							if (this.m_botAIKeyActionTapTimer <= 0f)
							{
								keyIsPressed = !this.VirtualKeyboard.PressingKey(virtualKey, false);
							}
							else
							{
								keyIsPressed = this.VirtualKeyboard.PressingKey(virtualKey, false);
							}
							break;
						}
						this.HandlePlayerKeyUpdate(virtualKey, keyIsPressed, Player.PlayerInputType.Forced, false);
					}
				}
				this.m_keyActionsQueued.Clear();
				this.m_keyActionsQueuedLookup.Clear();
				if (this.m_botAIKeyActionTapTimer <= 0f)
				{
					this.m_botAIKeyActionTapTimer = 40f;
				}
				this.m_botAIKeyActionLeftRight = false;
			}
		}

		// Token: 0x0600397B RID: 14715 RVA: 0x000EA688 File Offset: 0x000E8888
		private void ReleaseOldKeyActions()
		{
			foreach (int virtualKey in this.m_keyActionsOld)
			{
				this.HandlePlayerKeyUpdate(virtualKey, false, Player.PlayerInputType.Forced, false);
			}
			HashSet<int> keyActionsOld = this.m_keyActionsOld;
			this.m_keyActionsOld = this.m_keyActionsNew;
			this.m_keyActionsNew = keyActionsOld;
			this.m_keyActionsNew.Clear();
			this.m_botAIKeyActionLeftRight = false;
		}

		// Token: 0x0600397C RID: 14716 RVA: 0x000EA70C File Offset: 0x000E890C
		private bool UpdateContinousCommandActions(float ms)
		{
			if (!this.Disabled && !this.Rolling && !this.Diving)
			{
				if (this.CommandData.ContinousFaceDirection != 0 && this.CommandData.ContinousFaceDirection != this.LastDirectionX)
				{
					this.KeyActionDirection(this.CommandData.ContinousFaceDirection, Player.PressKeyType.Tap);
				}
				else
				{
					this.CommandData.ContinousFaceDirection = 0;
				}
			}
			if (this.CommandData.ContinousStagger && this.Staggering)
			{
				this.TimeSequence.TimeStagger = 5000f;
			}
			if (this.CommandData.ContinousGrab && this.IsHoldingPlayerInGrab)
			{
				this.TimeSequence.TimeGrabHold = 0f;
			}
			bool result = false;
			if (this.CommandData.ContinousAttack)
			{
				RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
				if (currentRangedWeaponInUse != null && currentRangedWeaponInUse.CurrentRoundsInWeapon == 0 && currentRangedWeaponInUse.CanBeReloaded(this))
				{
					if (!(this.m_currentCommandAction is Player.PlayerActionCommandWaitEmptyAmmo))
					{
						this.KeyAction(14, Player.PressKeyType.Tap);
					}
				}
				else
				{
					this.KeyAction(4, Player.PressKeyType.Tap);
				}
				result = true;
			}
			if (this.CommandData.AimAtData.Enabled && (this.CurrentAction == PlayerAction.ManualAim || this.CanAim()))
			{
				this.KeyAction(26, Player.PressKeyType.Hold);
				if (this.CurrentAction == PlayerAction.ManualAim)
				{
					Microsoft.Xna.Framework.Vector2 value = this.CommandData.AimAtData.TargetWorldPosition;
					if (this.CommandData.AimAtData.TargetID != 0)
					{
						if (this.CommandData.AimAtData.TargetObject == null || this.CommandData.AimAtData.TargetObject.ObjectID != this.CommandData.AimAtData.TargetID || this.CommandData.AimAtData.TargetObject.IsDisposed)
						{
							this.CommandData.AimAtData.TargetObject = this.GameWorld.GetObjectDataByID(this.CommandData.AimAtData.TargetID);
							if (this.CommandData.AimAtData.TargetObject == null)
							{
								this.CommandData.AimAtData.TargetID = 0;
							}
						}
						if (this.CommandData.AimAtData.TargetObject != null)
						{
							value = this.CommandData.AimAtData.TargetObject.GetWorldCenterPosition();
							if (this.CommandData.AimAtData.TargetObject.IsPlayer)
							{
								if (!((Player)this.CommandData.AimAtData.TargetObject.InternalData).Crouching && !((Player)this.CommandData.AimAtData.TargetObject.InternalData).Rolling)
								{
									value.Y += 8f;
								}
								else
								{
									value.Y += 4f;
								}
							}
						}
					}
					Microsoft.Xna.Framework.Vector2 x = value - (this.Position + this.AIM_ARM_OFFSET);
					if (x.CalcSafeLength() > 1f)
					{
						x.Normalize();
						if (this.CommandData.AimAtData.AccuracyCone > 0f)
						{
							SFDMath.RotatePosition(ref x, this.CommandData.AimAtData.CurrentAccuracyDeflection, out x);
							Player.CommandDataContainer commandData = this.CommandData;
							commandData.AimAtData.NextAccuracyDeflectionTime = commandData.AimAtData.NextAccuracyDeflectionTime - ms;
							if (this.CommandData.AimAtData.NextAccuracyDeflectionTime <= 0f)
							{
								this.CommandData.AimAtData.NextAccuracyDeflectionTime = Constants.RANDOM.NextFloat(400f, 1000f);
								this.CommandData.AimAtData.CurrentAccuracyDeflection = Constants.RANDOM.NextFloat(-this.CommandData.AimAtData.AccuracyCone, this.CommandData.AimAtData.AccuracyCone);
							}
						}
						if (x.X < 0f && this.LastDirectionX == 1)
						{
							this.KeyActionDirection(-1, Player.PressKeyType.Hold);
						}
						else if (x.X > 0f && this.LastDirectionX == -1)
						{
							this.KeyActionDirection(1, Player.PressKeyType.Hold);
						}
						else
						{
							this.KeyActionDirection(0, Player.PressKeyType.Hold);
							Microsoft.Xna.Framework.Vector2 vector = Microsoft.Xna.Framework.Vector2.UnitX * (float)this.LastDirectionX;
							if (this.LastDirectionX == 1)
							{
								SFDMath.RotatePosition(ref vector, -this.AimAngle, out vector);
							}
							else
							{
								SFDMath.RotatePosition(ref vector, this.AimAngle, out vector);
							}
							float num = 0.2f;
							if (Math.Abs(vector.Y - x.Y) < num)
							{
								this.KeyAction(21, Player.PressKeyType.Hold);
							}
							if (vector.Y > x.Y)
							{
								this.KeyActionDown();
							}
							else if (vector.Y < x.Y)
							{
								this.KeyActionUp();
							}
						}
					}
				}
				result = true;
			}
			if (this.CommandData.ContinousClimb != 0)
			{
				if (this.CommandData.ContinousClimb == 1)
				{
					this.KeyActionUp();
				}
				else if (this.CommandData.ContinousClimb == -1)
				{
					this.KeyActionDown();
				}
				result = true;
			}
			if (this.CommandData.ContinousPrepareThrow)
			{
				this.KeyAction(4, Player.PressKeyType.Hold);
				result = true;
			}
			if (this.CommandData.ContinousCrouch)
			{
				this.KeyAction(20, Player.PressKeyType.Hold);
				result = true;
			}
			else if (this.CommandData.RunToPositionData.Enabled)
			{
				float num2 = this.CommandData.RunToPositionData.WorldLocation.X - this.Position.X;
				if (this.CommandData.RunToPositionData.TeleportCounter != this.TeleportCounter)
				{
					if ((this.LastDirectionX == 1 && num2 > 0f) || (this.LastDirectionX == -1 && num2 < 0f))
					{
						this.CommandData.RunToPositionData.TeleportCounter = this.TeleportCounter;
					}
					else
					{
						num2 = 0f;
					}
				}
				if (Math.Abs(num2) > 4f)
				{
					if (num2 < 0f)
					{
						this.KeyActionDirection(-1, Player.PressKeyType.Hold);
					}
					else
					{
						this.KeyActionDirection(1, Player.PressKeyType.Hold);
					}
					switch (this.CommandData.RunToPositionData.Movement)
					{
					case Player.CommandDataContainer.MoveMode.Walk:
						this.KeyAction(21, Player.PressKeyType.Hold);
						this.KeyAction(18, Player.PressKeyType.Release);
						break;
					case Player.CommandDataContainer.MoveMode.Run:
						this.KeyAction(21, Player.PressKeyType.Release);
						this.KeyAction(18, Player.PressKeyType.Release);
						this.Sprinting = false;
						break;
					case Player.CommandDataContainer.MoveMode.Sprint:
						this.KeyAction(21, Player.PressKeyType.Release);
						this.KeyAction(18, Player.PressKeyType.Hold);
						break;
					}
				}
				else
				{
					this.KeyAction(2, Player.PressKeyType.Release);
					this.KeyAction(3, Player.PressKeyType.Release);
					this.KeyAction(21, Player.PressKeyType.Release);
					this.KeyAction(18, Player.PressKeyType.Release);
					if (this.CommandData.RunToPositionData.FacingDirection != 0)
					{
						this.LastDirectionX = ((this.CommandData.RunToPositionData.FacingDirection != 1) ? -1 : 1);
					}
					this.CommandData.RunToPositionData.Enabled = false;
				}
				result = true;
			}
			return result;
		}

		// Token: 0x0600397D RID: 14717 RVA: 0x000EAD8C File Offset: 0x000E8F8C
		public bool UpdateAICommands(float totalMs)
		{
			bool canCommandPlayer;
			if (!(canCommandPlayer = this.CanCommandPlayer) && !this.CanCommandPlayerPrevUpdate)
			{
				if (this.m_bot_commandsUsed)
				{
					this.CommandData.EndContinousCommandActions();
					this.ReleaseOldKeyActions();
					this.CanCommandPlayerPrevUpdate = false;
					this.m_bot_commandsUsed = false;
				}
				return false;
			}
			this.UpdateCommandActions(totalMs);
			this.UpdateContinousCommandActions(totalMs);
			this.ActivateNewKeyActions(totalMs);
			this.ReleaseOldKeyActions();
			this.CanCommandPlayerPrevUpdate = canCommandPlayer;
			this.m_bot_commandsUsed = true;
			return true;
		}

		// Token: 0x17000947 RID: 2375
		// (get) Token: 0x0600397E RID: 14718 RVA: 0x0002F3BC File Offset: 0x0002D5BC
		// (set) Token: 0x0600397F RID: 14719 RVA: 0x0002F3C4 File Offset: 0x0002D5C4
		internal Player.CommandDataContainer CommandData { get; private set; }

		// Token: 0x17000948 RID: 2376
		// (get) Token: 0x06003980 RID: 14720 RVA: 0x0002F3CD File Offset: 0x0002D5CD
		// (set) Token: 0x06003981 RID: 14721 RVA: 0x0002F3D5 File Offset: 0x0002D5D5
		public int PerformedCommandActionsCount { get; private set; }

		// Token: 0x17000949 RID: 2377
		// (get) Token: 0x06003982 RID: 14722 RVA: 0x0002F3DE File Offset: 0x0002D5DE
		// (set) Token: 0x06003983 RID: 14723 RVA: 0x0002F3E6 File Offset: 0x0002D5E6
		public int CurrentCommandActionIndex { get; private set; }

		// Token: 0x1700094A RID: 2378
		// (get) Token: 0x06003984 RID: 14724 RVA: 0x0002F3EF File Offset: 0x0002D5EF
		// (set) Token: 0x06003985 RID: 14725 RVA: 0x0002F3F7 File Offset: 0x0002D5F7
		public int TotalCommandActionCount { get; private set; }

		// Token: 0x1700094B RID: 2379
		// (get) Token: 0x06003986 RID: 14726 RVA: 0x0002F400 File Offset: 0x0002D600
		public float CurrentCommandDelayTimeRemaining
		{
			get
			{
				if (this.m_currentCommandAction != null)
				{
					return this.m_currentCommandAction.DelayTime;
				}
				return 0f;
			}
		}

		// Token: 0x06003987 RID: 14727 RVA: 0x000EAE00 File Offset: 0x000E9000
		private void UpdateCommandActions(float ms)
		{
			if (this.m_currentCommandAction == null)
			{
				if (this.m_commandActionQueue.Count <= 0)
				{
					return;
				}
				this.m_currentCommandAction = this.m_commandActionQueue.Dequeue();
				this.CurrentCommandActionIndex++;
				if (this.m_currentCommandAction.TargetObjectID != 0)
				{
					this.CommandData.ContinousFaceDirection = 0;
				}
				else if (this.m_currentCommandAction.FaceDirection != 0)
				{
					this.CommandData.ContinousFaceDirection = this.m_currentCommandAction.FaceDirection;
				}
				this.m_currentCommandAction.Init(this);
			}
			if (this.m_currentCommandAction != null)
			{
				if (!this.m_currentCommandAction.Performed)
				{
					this.m_currentCommandAction.Update(this, ms);
				}
				if (this.m_currentCommandAction.Performed)
				{
					this.m_currentCommandAction.DelayTime -= ms;
					if (this.m_currentCommandAction.DelayTime <= 0f)
					{
						this.m_currentCommandAction.Dispose();
						this.m_currentCommandAction = null;
						this.PerformedCommandActionsCount++;
					}
				}
			}
		}

		// Token: 0x06003988 RID: 14728 RVA: 0x0002F41B File Offset: 0x0002D61B
		private void InitCommandActions()
		{
			this.CommandData = new Player.CommandDataContainer();
			this.m_commandActionQueue = new Queue<Player.PlayerActionCommandItem>();
			this.TotalCommandActionCount = 0;
			this.PerformedCommandActionsCount = 0;
			this.CurrentCommandActionIndex = -1;
		}

		// Token: 0x06003989 RID: 14729 RVA: 0x0002F448 File Offset: 0x0002D648
		private void DisposeCommandActions()
		{
			if (this.m_commandActionQueue != null)
			{
				this.m_commandActionQueue.Clear();
				this.m_commandActionQueue = null;
			}
			this.CommandData = null;
		}

		// Token: 0x0600398A RID: 14730 RVA: 0x000EAF04 File Offset: 0x000E9104
		internal Player.PlayerActionCommandItem AddCommandAction(PlayerCommand command)
		{
			Player.PlayerActionCommandItem playerActionCommandItem = Player.PlayerActionCommandItem.CreateFromCommand(ref command, this.TotalCommandActionCount);
			this.TotalCommandActionCount++;
			this.m_commandActionQueue.Enqueue(playerActionCommandItem);
			return playerActionCommandItem;
		}

		// Token: 0x0600398B RID: 14731 RVA: 0x000EAF3C File Offset: 0x000E913C
		public void ClearCommandQueue()
		{
			if (this.m_commandActionQueue.Count > 0)
			{
				while (this.m_commandActionQueue.Count > 0)
				{
					Player.PlayerActionCommandItem playerActionCommandItem = this.m_commandActionQueue.Dequeue();
					if (playerActionCommandItem != null)
					{
						playerActionCommandItem.Dispose();
					}
				}
			}
			this.CurrentCommandActionIndex = this.TotalCommandActionCount;
			if (this.m_currentCommandAction != null)
			{
				if (!this.m_currentCommandAction.IsDisposed)
				{
					this.m_currentCommandAction.Dispose();
				}
				this.m_currentCommandAction = null;
			}
			this.PerformedCommandActionsCount = this.TotalCommandActionCount;
		}

		// Token: 0x0600398C RID: 14732 RVA: 0x0002F46B File Offset: 0x0002D66B
		private void InitModifiers()
		{
			this.m_modifiers = new PlayerModifiers(true);
			this.SetModifiers(this.m_modifiers);
			this.ModifiersUpdated = false;
		}

		// Token: 0x0600398D RID: 14733 RVA: 0x0002F48C File Offset: 0x0002D68C
		private void DisposeModifiers()
		{
			this.m_modifiers = null;
		}

		// Token: 0x0600398E RID: 14734 RVA: 0x000EAFBC File Offset: 0x000E91BC
		public void SetModifiers(PlayerModifiers value)
		{
			if (value != null)
			{
				value.SanitizeInput();
				value.DefaultValues();
				if (value.MaxHealth != -1)
				{
					this.ModifiersUpdated |= (this.m_modifiers.MaxHealth != value.MaxHealth);
					this.m_modifiers.MaxHealth = value.MaxHealth;
				}
				if (value.MaxEnergy != -1)
				{
					this.ModifiersUpdated |= (this.m_modifiers.MaxEnergy != value.MaxEnergy);
					this.m_modifiers.MaxEnergy = value.MaxEnergy;
				}
				if (value.CurrentHealth != -1f)
				{
					this.m_modifiers.CurrentHealth = value.CurrentHealth;
				}
				if (value.CurrentEnergy != -1f)
				{
					this.m_modifiers.CurrentEnergy = value.CurrentEnergy;
				}
				if (value.EnergyConsumptionModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.EnergyConsumptionModifier != value.EnergyConsumptionModifier);
					this.m_modifiers.EnergyConsumptionModifier = value.EnergyConsumptionModifier;
				}
				if (value.ExplosionDamageTakenModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.ExplosionDamageTakenModifier != value.ExplosionDamageTakenModifier);
					this.m_modifiers.ExplosionDamageTakenModifier = value.ExplosionDamageTakenModifier;
				}
				if (value.ProjectileDamageTakenModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.ProjectileDamageTakenModifier != value.ProjectileDamageTakenModifier);
					this.m_modifiers.ProjectileDamageTakenModifier = value.ProjectileDamageTakenModifier;
				}
				if (value.ProjectileCritChanceTakenModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.ProjectileCritChanceTakenModifier != value.ProjectileCritChanceTakenModifier);
					this.m_modifiers.ProjectileCritChanceTakenModifier = value.ProjectileCritChanceTakenModifier;
				}
				if (value.FireDamageTakenModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.FireDamageTakenModifier != value.FireDamageTakenModifier);
					this.m_modifiers.FireDamageTakenModifier = value.FireDamageTakenModifier;
				}
				if (value.MeleeDamageTakenModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.MeleeDamageTakenModifier != value.MeleeDamageTakenModifier);
					this.m_modifiers.MeleeDamageTakenModifier = value.MeleeDamageTakenModifier;
				}
				if (value.ImpactDamageTakenModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.ImpactDamageTakenModifier != value.ImpactDamageTakenModifier);
					this.m_modifiers.ImpactDamageTakenModifier = value.ImpactDamageTakenModifier;
				}
				if (value.ProjectileDamageDealtModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.ProjectileDamageDealtModifier != value.ProjectileDamageDealtModifier);
					this.m_modifiers.ProjectileDamageDealtModifier = value.ProjectileDamageDealtModifier;
				}
				if (value.ProjectileCritChanceDealtModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.ProjectileCritChanceDealtModifier != value.ProjectileCritChanceDealtModifier);
					this.m_modifiers.ProjectileCritChanceDealtModifier = value.ProjectileCritChanceDealtModifier;
				}
				if (value.MeleeDamageDealtModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.MeleeDamageDealtModifier != value.MeleeDamageDealtModifier);
					this.m_modifiers.MeleeDamageDealtModifier = value.MeleeDamageDealtModifier;
				}
				if (value.MeleeForceModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.MeleeForceModifier != value.MeleeForceModifier);
					this.m_modifiers.MeleeForceModifier = value.MeleeForceModifier;
				}
				if (value.MeleeStunImmunity != -1)
				{
					this.ModifiersUpdated |= (this.m_modifiers.MeleeStunImmunity != value.MeleeStunImmunity);
					this.m_modifiers.MeleeStunImmunity = value.MeleeStunImmunity;
				}
				if (value.CanBurn != -1)
				{
					this.ModifiersUpdated |= (this.m_modifiers.CanBurn != value.CanBurn);
					this.m_modifiers.CanBurn = value.CanBurn;
				}
				if (value.RunSpeedModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.RunSpeedModifier != value.RunSpeedModifier);
					this.m_modifiers.RunSpeedModifier = value.RunSpeedModifier;
				}
				if (value.SprintSpeedModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.SprintSpeedModifier != value.SprintSpeedModifier);
					this.m_modifiers.SprintSpeedModifier = value.SprintSpeedModifier;
				}
				if (value.EnergyRechargeModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.EnergyRechargeModifier != value.EnergyRechargeModifier);
					this.m_modifiers.EnergyRechargeModifier = value.EnergyRechargeModifier;
				}
				if (value.SizeModifier != -1f)
				{
					this.ModifiersUpdated |= (this.m_modifiers.SizeModifier != value.SizeModifier);
					this.m_modifiers.SizeModifier = value.SizeModifier;
				}
				if (value.InfiniteAmmo != -1)
				{
					this.ModifiersUpdated |= (this.m_modifiers.InfiniteAmmo != value.InfiniteAmmo);
					this.m_modifiers.InfiniteAmmo = value.InfiniteAmmo;
				}
				if (value.ItemDropMode != -1)
				{
					this.ModifiersUpdated |= (this.m_modifiers.ItemDropMode != value.ItemDropMode);
					this.m_modifiers.ItemDropMode = value.ItemDropMode;
				}
				if (this.m_modifiers.MaxHealth != -1)
				{
					this.Health.MaxValue = (float)this.m_modifiers.MaxHealth;
				}
				if (this.m_modifiers.MaxEnergy != -1)
				{
					this.Energy.MaxValue = (float)this.m_modifiers.MaxEnergy;
				}
				if (value.CurrentHealth != -1f)
				{
					this.Health.CurrentValue = value.CurrentHealth;
				}
				if (value.CurrentEnergy != -1f)
				{
					this.Energy.CurrentValue = value.CurrentEnergy;
				}
			}
		}

		// Token: 0x0600398F RID: 14735 RVA: 0x0002F495 File Offset: 0x0002D695
		public PlayerModifiers GetModifiers()
		{
			this.m_modifiers.CurrentHealth = this.Health.CurrentValue;
			this.m_modifiers.CurrentEnergy = this.Energy.CurrentValue;
			return this.m_modifiers;
		}

		// Token: 0x06003990 RID: 14736 RVA: 0x0002F4C9 File Offset: 0x0002D6C9
		public void ClearModifiers()
		{
			this.SetModifiers(new PlayerModifiers(true));
		}

		// Token: 0x06003991 RID: 14737 RVA: 0x0002F4D7 File Offset: 0x0002D6D7
		internal void UpdatePlayerModifierData(NetMessage.PlayerUpdateModifierData.Data data)
		{
			this.SetModifiers(data.Modifiers);
		}

		// Token: 0x06003992 RID: 14738 RVA: 0x000EB5DC File Offset: 0x000E97DC
		internal void SyncPlayerModifierData(NetConnection singleRecipient = null)
		{
			if (this.GameOwner == GameOwnerEnum.Server)
			{
				if (this.m_game.Server != null)
				{
					NetMessage.PlayerUpdateModifierData.Data data = new NetMessage.PlayerUpdateModifierData.Data(this, this.m_game.Server.NextInvariantSequenceNr());
					NetOutgoingMessage msg = NetMessage.PlayerUpdateModifierData.Write(ref data, GameSFD.Handle.Server.NetServer.CreateMessage());
					if (singleRecipient == null)
					{
						GameSFD.Handle.Server.NetServer.SendToAll(msg, null, NetMessage.PlayerUpdateModifierData.Delivery.Method, NetMessage.PlayerUpdateModifierData.Delivery.Channel);
						return;
					}
					GameSFD.Handle.Server.NetServer.SendMessage(msg, singleRecipient, NetMessage.PlayerUpdateModifierData.Delivery.Method, NetMessage.PlayerUpdateModifierData.Delivery.Channel);
					return;
				}
				else
				{
					ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "Player.SyncPlayerModifierData - Server is null");
				}
			}
		}

		// Token: 0x1700094C RID: 2380
		// (get) Token: 0x06003993 RID: 14739 RVA: 0x000EB6A4 File Offset: 0x000E98A4
		public Player.ItemDropModeEnum ItemDropMode
		{
			get
			{
				switch (this.m_modifiers.ItemDropMode)
				{
				case 0:
					return Player.ItemDropModeEnum.Default;
				case 1:
					return Player.ItemDropModeEnum.Break;
				case 2:
					return Player.ItemDropModeEnum.RemoveOnDeath;
				default:
					return Player.ItemDropModeEnum.Default;
				}
			}
		}

		// Token: 0x1700094D RID: 2381
		// (get) Token: 0x06003994 RID: 14740 RVA: 0x0002F4E6 File Offset: 0x0002D6E6
		internal bool ModifierCanBurn
		{
			get
			{
				return this.m_modifiers.CanBurn >= 1;
			}
		}

		// Token: 0x1700094E RID: 2382
		// (get) Token: 0x06003995 RID: 14741 RVA: 0x0002F4F9 File Offset: 0x0002D6F9
		internal bool HasMeleeStunImmunity
		{
			get
			{
				return this.m_modifiers.MeleeStunImmunity >= 1 && !this.IsDead;
			}
		}

		// Token: 0x1700094F RID: 2383
		// (get) Token: 0x06003996 RID: 14742 RVA: 0x0002F514 File Offset: 0x0002D714
		internal float ThrowForceModifier
		{
			get
			{
				if (!this.StrengthBoostActive)
				{
					return 1f;
				}
				return 1.5f;
			}
		}

		// Token: 0x17000950 RID: 2384
		// (get) Token: 0x06003997 RID: 14743 RVA: 0x0002F529 File Offset: 0x0002D729
		internal float MeleeForceModifier
		{
			get
			{
				return this.m_modifiers.MeleeForceModifier * (this.StrengthBoostActive ? 1.5f : 1f);
			}
		}

		// Token: 0x17000951 RID: 2385
		// (get) Token: 0x06003998 RID: 14744 RVA: 0x0002F54B File Offset: 0x0002D74B
		internal float MeleeThrowGrabbedPlayerModifier
		{
			get
			{
				return this.m_modifiers.MeleeForceModifier * (this.StrengthBoostActive ? 1.2f : 1f);
			}
		}

		// Token: 0x17000952 RID: 2386
		// (get) Token: 0x06003999 RID: 14745 RVA: 0x0002F56D File Offset: 0x0002D76D
		internal float MeleeDamageDealtModifier
		{
			get
			{
				return this.m_modifiers.MeleeDamageDealtModifier * (this.StrengthBoostActive ? 1.5f : 1f);
			}
		}

		// Token: 0x17000953 RID: 2387
		// (get) Token: 0x0600399A RID: 14746 RVA: 0x0002F58F File Offset: 0x0002D78F
		public bool InfiniteAmmo
		{
			get
			{
				return Cheat.InfiniteAmmo || this.m_modifiers.InfiniteAmmo >= 1;
			}
		}

		// Token: 0x0600399B RID: 14747 RVA: 0x0002F5AB File Offset: 0x0002D7AB
		private bool CanInitiateGrab()
		{
			return this.TimeSequence.TimeGrabCooldown <= 0f && this.TimeSequence.GrabCheckInitiateTimer <= 0f && !this.IsGrabbing && this.CurrentWeaponDrawnIsMeleeType;
		}

		// Token: 0x0600399C RID: 14748 RVA: 0x000EB6D8 File Offset: 0x000E98D8
		private bool CanStartGrab()
		{
			return (this.StandingOnGround & !this.Rolling & !this.MeleeHit & !this.MeleeWeaponBroken & !this.LayingOnGround & this.m_haveTouchedGroundSinceLastInAir & !this.Climbing & this.CurrentWeaponDrawnIsMeleeType) && (this.CurrentAction == PlayerAction.Idle || this.CurrentAction == PlayerAction.Block);
		}

		// Token: 0x0600399D RID: 14749 RVA: 0x000EB744 File Offset: 0x000E9944
		private void StopGrabbingChargeSequence(bool goBackToIdle = true)
		{
			if (this.GrabTelegraphing | this.GrabCharging)
			{
				this.GrabTelegraphing = false;
				this.TimeSequence.TimeGrabTelegraphing = 0f;
				this.GrabCharging = false;
				this.TimeSequence.TimeGrabCharging = 0f;
				this.Movement = PlayerMovement.Idle;
				this.ImportantUpdate = true;
				this.ForceServerMovementState(10);
				this.ForceServerPositionState();
				if (goBackToIdle)
				{
					this.CurrentActionToIdle();
				}
			}
		}

		// Token: 0x0600399E RID: 14750 RVA: 0x000EB7B4 File Offset: 0x000E99B4
		private void DisableGrabbing(bool togglePlayerAction = false)
		{
			if (this.IsHoldingPlayerInGrab)
			{
				this.DropGrabbedPlayer(null, false, true, true);
			}
			this.TimeSequence.GrabCheckInitiateTimer = 0f;
			this.GrabTelegraphing = false;
			this.TimeSequence.TimeGrabTelegraphing = 0f;
			this.GrabCharging = false;
			this.TimeSequence.TimeGrabCharging = 0f;
			this.GrabAttacking = false;
			this.GrabKicking = false;
			this.GrabThrowing = false;
			this.TimeSequence.TimeGrabActionPauseCooldown = 0f;
			if (this.CurrentAction == PlayerAction.Grabbing)
			{
				this.TimeSequence.TimeGrabCooldown = 1105f;
				if (togglePlayerAction)
				{
					this.CurrentActionToIdle();
				}
			}
		}

		// Token: 0x0600399F RID: 14751 RVA: 0x000EB864 File Offset: 0x000E9A64
		private void StartGrabTelegraphing()
		{
			this.TimeSequence.GrabCheckInitiateTimer = 0f;
			this.Rolling = false;
			this.CurrentAction = PlayerAction.Grabbing;
			this.GrabTelegraphing = true;
			this.TimeSequence.TimeGrabTelegraphing = 300f;
			this.TimeSequence.DisableQueuedKey(new int[]
			{
				5,
				26,
				22,
				4
			});
			this.ForceServerMovementState(10);
			this.ImportantUpdate = true;
			this.Statisticts.m_TotalGrabCharges++;
		}

		// Token: 0x060039A0 RID: 14752 RVA: 0x000EB8F0 File Offset: 0x000E9AF0
		private void StartGrabCharging()
		{
			this.m_grabbedPlayerForceHit = null;
			this.GrabTelegraphing = false;
			this.TimeSequence.TimeGrabTelegraphing = 0f;
			this.GrabCharging = true;
			this.DrainEnergy(10f);
			this.TimeSequence.TimeGrabCharging = 0f;
			this.ClientMustInitiateMovement(true);
			this.TimeSequence.DisableQueuedKey(new int[]
			{
				5,
				26,
				22,
				4
			});
			this.ForceServerMovementState(10);
			this.ImportantUpdate = true;
		}

		// Token: 0x060039A1 RID: 14753 RVA: 0x0002F5E1 File Offset: 0x0002D7E1
		private void GrabImmunityToGrabbedPlayer()
		{
			if (this.HoldingPlayerInGrab != null)
			{
				this.HoldingPlayerInGrab.GrabImmunity = true;
				if (this.HoldingPlayerInGrab.TimeSequence != null)
				{
					this.HoldingPlayerInGrab.TimeSequence.TimeGrabImmunityPostTime = 0f;
				}
			}
		}

		// Token: 0x060039A2 RID: 14754 RVA: 0x000EB978 File Offset: 0x000E9B78
		private void PerformGrabAttackHit()
		{
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				return;
			}
			this.m_grabbedPlayerForceHit = this.HoldingPlayerInGrab;
			this.DrainEnergy(5f);
			this.GrabImmunityToGrabbedPlayer();
			this.PerformMeleeHit();
			this.DropGrabbedPlayer(new Microsoft.Xna.Framework.Vector2?(new Microsoft.Xna.Framework.Vector2((float)this.LastDirectionX * 2.3f, 1.4f) * this.MeleeThrowGrabbedPlayerModifier), false, false, false);
			this.ImportantUpdate = true;
		}

		// Token: 0x060039A3 RID: 14755 RVA: 0x000EB9EC File Offset: 0x000E9BEC
		private void PerformGrabThrow()
		{
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				return;
			}
			if (this.HoldingPlayerInGrabID != 0)
			{
				this.Statisticts.m_TotalPlayersThrown++;
			}
			this.DrainEnergy(10f);
			this.GrabImmunityToGrabbedPlayer();
			this.UpdateGrabbedPlayerPositionJoint(this.HoldingPlayerInGrab);
			this.DropGrabbedPlayer(new Microsoft.Xna.Framework.Vector2?(((this.WorldBody != null) ? this.WorldBody.GetLinearVelocity() : Microsoft.Xna.Framework.Vector2.Zero) + new Microsoft.Xna.Framework.Vector2((float)this.LastDirectionX * 5f, 2.5f) * this.MeleeThrowGrabbedPlayerModifier), false, false, false);
			this.ImportantUpdate = true;
		}

		// Token: 0x060039A4 RID: 14756 RVA: 0x000EBA94 File Offset: 0x000E9C94
		private void BeginGrabbedPlayerPositionJoint(Player grabbedPlayer)
		{
			if (grabbedPlayer != null && grabbedPlayer.ObjectData != null && !grabbedPlayer.ObjectData.IsDisposed)
			{
				ConsoleOutput.ShowMessage(ConsoleOutputType.PlayerAction, "Adding grabMouseJoint object");
				ObjectData objectData = grabbedPlayer.ObjectData;
				this.m_grabMouseJointTarget = objectData.ObjectID;
				MouseJointDef mouseJointDef = new MouseJointDef();
				mouseJointDef.target = this.GetGrabBox2DWorldPosition();
				mouseJointDef.localAnchor = Microsoft.Xna.Framework.Vector2.Zero;
				float mass = objectData.Body.GetMass();
				mouseJointDef.maxForce = mass * 130f;
				mouseJointDef.dampingRatio = 0f;
				mouseJointDef.frequencyHz = 200f;
				mouseJointDef.collideConnected = false;
				this.m_grabMouseWorld = objectData.Body.GetWorld();
				mouseJointDef.bodyA = this.m_grabMouseWorld.GroundBody;
				mouseJointDef.bodyB = objectData.Body;
				this.m_grabMouseJoint = (MouseJoint)this.m_grabMouseWorld.CreateJoint(mouseJointDef);
			}
		}

		// Token: 0x060039A5 RID: 14757 RVA: 0x0002F619 File Offset: 0x0002D819
		private void EndGrabbedPlayerPositionJoint()
		{
			if (this.m_grabMouseJoint != null)
			{
				if (!this.m_grabMouseJoint.IsRemoved)
				{
					this.m_grabMouseWorld.DestroyJoint(this.m_grabMouseJoint);
				}
				this.m_grabMouseJoint = null;
				this.m_grabMouseWorld = null;
			}
			this.m_grabMouseJointTarget = 0;
		}

		// Token: 0x060039A6 RID: 14758 RVA: 0x000EBB78 File Offset: 0x000E9D78
		private void UpdateGrabbedPlayerPositionJoint(Player grabbedPlayer)
		{
			if (grabbedPlayer == null)
			{
				return;
			}
			if (this.m_grabMouseJointTarget != grabbedPlayer.ObjectID)
			{
				this.EndGrabbedPlayerPositionJoint();
				this.BeginGrabbedPlayerPositionJoint(grabbedPlayer);
			}
			if (this.m_grabMouseJoint != null && grabbedPlayer.ObjectData != null && grabbedPlayer.WorldBody != null)
			{
				this.SetCollisionPlayerPlayerOverlapping(grabbedPlayer, 100f);
				this.m_grabMouseJoint.SetMaxForce(grabbedPlayer.WorldBody.GetMass() * ((this.GrabThrowing ? 250f : 130f) + this.WorldBody.GetLinearVelocity().CalcSafeLength() * 20f));
				grabbedPlayer.LastDirectionX = -this.LastDirectionX;
				Microsoft.Xna.Framework.Vector2 grabBox2DWorldPosition = this.GetGrabBox2DWorldPosition();
				Microsoft.Xna.Framework.Vector2 position = grabbedPlayer.WorldBody.GetPosition();
				float num = this.WorldBody.GetPosition().Y + 0.48f;
				if (!this.GrabThrowing && ((this.LastDirectionX == 1 && position.X + 0.08f < this.WorldBody.GetPosition().X) || (this.LastDirectionX == -1 && position.X - 0.08f > this.WorldBody.GetPosition().X)))
				{
					grabbedPlayer.WorldBody.SetTransform(new Microsoft.Xna.Framework.Vector2(this.WorldBody.GetPosition().X, num), 0f);
				}
				else if (position.Y + 0.08f < num)
				{
					grabbedPlayer.WorldBody.SetTransform(new Microsoft.Xna.Framework.Vector2(position.X, num), 0f);
				}
				if (this.m_grabMouseJoint != null)
				{
					this.m_grabMouseJoint.SetTarget(grabBox2DWorldPosition);
				}
				grabbedPlayer.WorldBody.SetLinearVelocity(this.WorldBody.GetLinearVelocity());
			}
		}

		// Token: 0x060039A7 RID: 14759 RVA: 0x000EBD24 File Offset: 0x000E9F24
		private Microsoft.Xna.Framework.Vector2 GetGrabBox2DWorldPosition()
		{
			if (this.WorldBody == null)
			{
				return Microsoft.Xna.Framework.Vector2.Zero;
			}
			Microsoft.Xna.Framework.Vector2 value = Microsoft.Xna.Framework.Vector2.Zero;
			if (this.GrabThrowing)
			{
				value = Converter.WorldToBox2D(new Microsoft.Xna.Framework.Vector2((float)this.LastDirectionX * -4f, 20f));
			}
			else
			{
				value = Converter.WorldToBox2D(new Microsoft.Xna.Framework.Vector2((float)this.LastDirectionX * 6f, 12f));
			}
			return this.WorldBody.GetPosition() + value;
		}

		// Token: 0x060039A8 RID: 14760 RVA: 0x000EBD9C File Offset: 0x000E9F9C
		private Microsoft.Xna.Framework.Vector2 GetGrabWorldPosition()
		{
			if (this.WorldBody == null)
			{
				return Microsoft.Xna.Framework.Vector2.Zero;
			}
			Microsoft.Xna.Framework.Vector2 zero = Microsoft.Xna.Framework.Vector2.Zero;
			if (this.GrabThrowing)
			{
				zero = new Microsoft.Xna.Framework.Vector2((float)this.LastDirectionX * -4f, 20f);
			}
			else
			{
				zero = new Microsoft.Xna.Framework.Vector2((float)this.LastDirectionX * 6f, 12f);
			}
			return this.Position + zero;
		}

		// Token: 0x060039A9 RID: 14761 RVA: 0x0002F656 File Offset: 0x0002D856
		private void BeginGrabAttack()
		{
			if (!this.IsPerformingGrabAction & !this.TimeSequence.GrabActionPauseCooldown)
			{
				this.GrabAttacking = true;
				this.ImportantUpdate = true;
			}
		}

		// Token: 0x060039AA RID: 14762 RVA: 0x0002F680 File Offset: 0x0002D880
		private void BeginGrabKick()
		{
			ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "BeginGrabKick not yet implemented");
		}

		// Token: 0x060039AB RID: 14763 RVA: 0x0002F68E File Offset: 0x0002D88E
		private void DropGrab()
		{
			if (!this.IsPerformingGrabAction & !this.TimeSequence.GrabActionPauseCooldown)
			{
				this.DropGrabbedPlayer(new Microsoft.Xna.Framework.Vector2?(this.m_preBox2DLinearVelocity), false, true, true);
				this.ImportantUpdate = true;
			}
		}

		// Token: 0x060039AC RID: 14764 RVA: 0x0002F6C5 File Offset: 0x0002D8C5
		private void BeginGrabThrow()
		{
			if (!this.IsPerformingGrabAction & !this.TimeSequence.GrabActionPauseCooldown)
			{
				this.GrabThrowing = true;
				this.ImportantUpdate = true;
			}
		}

		// Token: 0x060039AD RID: 14765 RVA: 0x000EBE08 File Offset: 0x000EA008
		private bool CheckWithinGrabPositionReach(Player other)
		{
			Microsoft.Xna.Framework.Vector2 vector = this.PreBox2DPosition - other.PreBox2DPosition;
			return Math.Abs(vector.X) <= 0.64f && vector.Y <= 0.16f && vector.Y >= -0.64f && (!(this.LastDirectionX == 1 & vector.X > 0f) && !(this.LastDirectionX == -1 & vector.X < 0f));
		}

		// Token: 0x060039AE RID: 14766 RVA: 0x000EBE90 File Offset: 0x000EA090
		private bool CheckStillInGrabPositionReach(Player other)
		{
			Microsoft.Xna.Framework.Vector2 vector = this.PreBox2DPosition - other.PreBox2DPosition;
			return Math.Abs(vector.X) <= 0.71999997f && vector.Y <= 0.19999999f && vector.Y >= -0.71999997f;
		}

		// Token: 0x17000954 RID: 2388
		// (get) Token: 0x060039AF RID: 14767 RVA: 0x0002F6EF File Offset: 0x0002D8EF
		private bool CanWalkDuringGrab
		{
			get
			{
				return this.CommandData.ContinousGrab || this.HoldingPlayerInGrab.IsDead;
			}
		}

		// Token: 0x060039B0 RID: 14768 RVA: 0x000EBEE4 File Offset: 0x000EA0E4
		private void UpdateGrabbing()
		{
			if (this.IsHoldingPlayerInGrab)
			{
				this.UpdateGrabbedPlayerPositionJoint(this.HoldingPlayerInGrab);
				if (this.GameOwner != GameOwnerEnum.Client)
				{
					if (this.HoldingPlayerInGrab == null || this.IsPerformingGrabAction || !this.CanWalkDuringGrab)
					{
						this.Movement = PlayerMovement.Idle;
					}
					if (this.HoldingPlayerInGrab != null && !this.HoldingPlayerInGrab.IsDisposed && (this.IsPerformingGrabAction || this.HoldingPlayerInGrab.IsDead || this.TimeSequence.TimeGrabHold < Player.TimeSequenceValues.GetMaxGrabHoldTime(this.HoldingPlayerInGrab.TimeSequence.SequencialGrabCount)))
					{
						if ((this.HoldingPlayerInGrab != null & !this.GrabThrowing) && !this.CheckStillInGrabPositionReach(this.HoldingPlayerInGrab))
						{
							this.DropGrab();
							this.DisableGrabbing(true);
						}
					}
					else
					{
						this.DropGrab();
						this.DisableGrabbing(true);
					}
				}
			}
			if (this.InAir)
			{
				if (this.GameOwner != GameOwnerEnum.Client)
				{
					if (this.TimeSequence.TimeInAir > 20f)
					{
						this.StopGrabbingChargeSequence(true);
					}
					if (this.CurrentAction == PlayerAction.Grabbing && this.TimeSequence.TimeInAir > 250f)
					{
						this.DropGrab();
						this.DisableGrabbing(true);
						return;
					}
				}
			}
			else if (this.GrabCharging)
			{
				this.Movement = ((this.LastDirectionX == 1) ? PlayerMovement.Right : PlayerMovement.Left);
				if (this.GameOwner != GameOwnerEnum.Client)
				{
					this.CheckGrabCollision();
					return;
				}
			}
			else if (!this.IsHoldingPlayerInGrab)
			{
				this.Movement = PlayerMovement.Idle;
			}
		}

		// Token: 0x060039B1 RID: 14769 RVA: 0x000EC050 File Offset: 0x000EA250
		private Player GetPlayerWithinGrabReach()
		{
			AABB aabb;
			this.GetAABBChargeGrab(out aabb, this.PreBox2DPosition, this.LastDirectionX);
			Player result = null;
			float num = 9999f;
			for (int i = 0; i < this.m_gameWorld.Players.Count; i++)
			{
				Player player = this.m_gameWorld.Players[i];
				if (player != this && player.CanBeCaughtByGrab(this))
				{
					AABB aabb2;
					player.GetAABBGrabHitbox(out aabb2);
					if (aabb.Overlap(ref aabb2))
					{
						float num2 = Math.Abs(this.PreBox2DPosition.X - player.PreBox2DPosition.X);
						if (num2 < num && this.CheckWithinGrabPositionReach(player))
						{
							bool obstructureBetween = false;
							Microsoft.Xna.Framework.Vector2 point3 = this.PreBox2DPosition + Microsoft.Xna.Framework.Vector2.UnitY * 0.04f * 7f;
							Microsoft.Xna.Framework.Vector2 point2 = player.PreBox2DPosition + Microsoft.Xna.Framework.Vector2.UnitY * 0.04f * 7f;
							this.GameWorld.GetActiveWorld.RayCast(delegate(Fixture fixture, Microsoft.Xna.Framework.Vector2 point, Microsoft.Xna.Framework.Vector2 normal, float fraction)
							{
								if (fixture == null || fixture.GetUserData() == null || fixture.IsSensor())
								{
									return -1f;
								}
								ObjectData objectData = ObjectData.Read(fixture);
								if (this.CheckCollisionFixture(fixture, out objectData, 0f, true))
								{
									obstructureBetween = true;
									return 0f;
								}
								return 1f;
							}, point3, point2);
							if (!obstructureBetween)
							{
								num = num2;
								result = player;
							}
						}
					}
				}
			}
			return result;
		}

		// Token: 0x060039B2 RID: 14770 RVA: 0x000EC1A8 File Offset: 0x000EA3A8
		private void CheckGrabCollision()
		{
			if (this.GameOwner != GameOwnerEnum.Client && this.TimeSequence.TimeGrabCharging >= 100f && this.CurrentAction == PlayerAction.Grabbing)
			{
				Player playerWithinGrabReach = this.GetPlayerWithinGrabReach();
				if (playerWithinGrabReach != null)
				{
					if (!this.HasMeleeStunImmunity && playerWithinGrabReach.HasMeleeStunImmunity)
					{
						Microsoft.Xna.Framework.Vector2 worldPosition = playerWithinGrabReach.Position + (this.Position - playerWithinGrabReach.Position) * 0.5f;
						worldPosition.Y += 10f;
						EffectHandler.PlayEffect("Smack", worldPosition, this.GameWorld);
						SoundHandler.PlaySound("MeleeBlock", worldPosition, this.GameWorld);
						this.StopGrabbingChargeSequence(true);
						this.StartStaggering(250f);
						return;
					}
					if (playerWithinGrabReach.IsInDiveAttackFrameWindow && playerWithinGrabReach.LastDirectionX != this.LastDirectionX && playerWithinGrabReach.CanBeHitByMelee(this))
					{
						if (!this.HasMeleeStunImmunity)
						{
							this.HitByMelee(playerWithinGrabReach);
							return;
						}
					}
					else
					{
						if (playerWithinGrabReach.Diving && playerWithinGrabReach.LastDirectionX != this.LastDirectionX)
						{
							SoundHandler.PlaySound("PlayerDiveCatch", this.Position, this.GameWorld);
							playerWithinGrabReach.Fall();
							this.StopGrabbingChargeSequence(false);
							this.Fall();
							return;
						}
						if (playerWithinGrabReach.GrabCharging && playerWithinGrabReach.LastDirectionX != this.LastDirectionX)
						{
							playerWithinGrabReach.StartStaggering(250f);
							this.StartStaggering(250f);
							Microsoft.Xna.Framework.Vector2 worldPosition2 = playerWithinGrabReach.Position + (this.Position - playerWithinGrabReach.Position) * 0.5f;
							worldPosition2.Y += 10f;
							EffectHandler.PlayEffect("Smack", worldPosition2, this.GameWorld);
							SoundHandler.PlaySound("MeleeBlock", worldPosition2, this.GameWorld);
							return;
						}
						SoundHandler.PlaySound("PlayerGrabCatch", this.Position, this.GameWorld);
						this.StopGrabbingChargeSequence(false);
						this.LastHoldingPlayerInGrabID = playerWithinGrabReach.ObjectID;
						playerWithinGrabReach.CheckThrowableDisarm();
						playerWithinGrabReach.CheckDisarmByHit(playerWithinGrabReach.LastDirectionX, Microsoft.Xna.Framework.Vector2.Zero);
						playerWithinGrabReach.StopGrabbingChargeSequence(false);
						playerWithinGrabReach.DropGrabbedPlayer(null, false, false, true);
						playerWithinGrabReach.DropCaughtByPlayer();
						playerWithinGrabReach.CurrentAction = PlayerAction.Disabled;
						playerWithinGrabReach.LastDirectionX = -this.LastDirectionX;
						playerWithinGrabReach.GrabbedByPlayerID = this.ObjectID;
						playerWithinGrabReach.Falling = false;
						playerWithinGrabReach.FullLanding = false;
						playerWithinGrabReach.DeathKneeling = false;
						playerWithinGrabReach.TimeSequence.TimeJumpTimeout = 0f;
						playerWithinGrabReach.TimeSequence.TimeTriggerJump = 0f;
						playerWithinGrabReach.Rolling = false;
						playerWithinGrabReach.Crouching = false;
						playerWithinGrabReach.LayingOnGround = false;
						playerWithinGrabReach.Climbing = false;
						playerWithinGrabReach.Diving = false;
						playerWithinGrabReach.Staggering = false;
						playerWithinGrabReach.TimeSequence.TimeStagger = 0f;
						playerWithinGrabReach.TimeSequence.TimeFullLanding = 0f;
						playerWithinGrabReach.TimeSequence.SequencialGrabCount++;
						playerWithinGrabReach.TimeSequence.SequencialGrabDecreaseTime = 425f;
						this.TimeSequence.TimeGrabHold = 0f;
						this.TimeSequence.TimeGrabActionPauseCooldown = 170f;
						playerWithinGrabReach.TimeSequence.TimeGrabHold = 0f;
						this.HoldingPlayerInGrabID = playerWithinGrabReach.ObjectID;
						this.UpdateGrabbedPlayerPositionJoint(playerWithinGrabReach);
						playerWithinGrabReach.UpdateResyncBox2DContacts();
						this.TimeSequence.DisableQueuedKey(new int[]
						{
							4,
							5,
							26,
							15
						});
						playerWithinGrabReach.ForceServerMovementState(20);
						playerWithinGrabReach.ForceServerPositionState();
						this.ForceServerMovementState(10);
						this.ForceServerPositionState();
						this.ImportantUpdate = true;
						playerWithinGrabReach.ImportantUpdate = true;
						this.Statisticts.m_TotalGrabbedPlayers++;
					}
				}
			}
		}

		// Token: 0x060039B3 RID: 14771 RVA: 0x000EC544 File Offset: 0x000EA744
		private void ClearNewRegisteredObjectImpacts(bool clearIgnoredBodiesFromImpacts = false)
		{
			if (this.m_registeredObjectImpacts.Count > 0)
			{
				for (int i = this.m_registeredObjectImpacts.Count - 1; i >= 0; i--)
				{
					Player.ObjectImpactData objectImpactData = this.m_registeredObjectImpacts[i];
					if (objectImpactData.IsNew)
					{
						objectImpactData.ObjectData.Health.CurrentValue = objectImpactData.ObjectHealthBefore;
						if (this.GameOwner == GameOwnerEnum.Client && clearIgnoredBodiesFromImpacts)
						{
							this.StopIgnoreBodyID(objectImpactData.ObjectData.BodyID);
						}
					}
				}
				this.m_registeredObjectImpacts.Clear();
			}
		}

		// Token: 0x060039B4 RID: 14772 RVA: 0x000EC5D0 File Offset: 0x000EA7D0
		private void HandleRegisteredObjectImpacts()
		{
			if (this.m_registeredObjectImpacts.Count > 0)
			{
				Microsoft.Xna.Framework.Vector2? vector = null;
				for (int i = 0; i < this.m_registeredObjectImpacts.Count; i++)
				{
					Player.ObjectImpactData objectImpactData = this.m_registeredObjectImpacts[i];
					if (!objectImpactData.ObjectData.IsDisposed && objectImpactData.ObjectData.Health.IsEmpty && !objectImpactData.ObjectData.TerminationInitiated)
					{
						if (this.GameOwner != GameOwnerEnum.Client)
						{
							objectImpactData.ObjectData.Destroy();
						}
						vector = new Microsoft.Xna.Framework.Vector2?(objectImpactData.PlayerVelocityAfter);
					}
				}
				if (!this.IsRemoved && vector != null)
				{
					this.WorldBody.SetLinearVelocity(vector.Value);
				}
			}
		}

		// Token: 0x060039B5 RID: 14773 RVA: 0x000EC68C File Offset: 0x000EA88C
		private void UpdateRegisteredObjectImpacts(float ms)
		{
			if (this.m_registeredObjectImpacts.Count > 0)
			{
				float num = 0f;
				List<Player.ObjectImpactData> list = null;
				Microsoft.Xna.Framework.Vector2 vector = Microsoft.Xna.Framework.Vector2.Zero;
				for (int i = this.m_registeredObjectImpacts.Count - 1; i >= 0; i--)
				{
					Player.ObjectImpactData objectImpactData = this.m_registeredObjectImpacts[i];
					if (objectImpactData.IsNew)
					{
						objectImpactData.IsNew = false;
						if (list == null)
						{
							list = new List<Player.ObjectImpactData>();
						}
						list.Add(objectImpactData);
						num = Math.Max(num, objectImpactData.PlayerDamage);
						vector += objectImpactData.PlayerBox2DPosition;
					}
					objectImpactData.LifeTimeLeft -= ms;
					if (objectImpactData.ObjectData.IsDisposed || objectImpactData.LifeTimeLeft <= 0f)
					{
						this.m_registeredObjectImpacts.RemoveAt(i);
					}
				}
				if (list != null)
				{
					vector /= (float)list.Count;
					this.RegisterFallDamageAmongExistingImpacts(num, vector, list);
				}
			}
		}

		// Token: 0x060039B6 RID: 14774 RVA: 0x000EC774 File Offset: 0x000EA974
		private void RegisterFallDamageAmongExistingImpacts(float playerFallDamage, Microsoft.Xna.Framework.Vector2 fallDamageBox2DPosition, List<Player.ObjectImpactData> newImpacts)
		{
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				if (!this.HasLocalControl)
				{
					return;
				}
				NetMessage.SyncPlayerObjectImpact.Data data = default(NetMessage.SyncPlayerObjectImpact.Data);
				data.PlayerID = this.ObjectID;
				data.ObjectImpacts = newImpacts;
				this.m_game.Client.SendMessage(MessageType.SyncPlayerObjectImpact, data);
			}
			float num = playerFallDamage;
			for (int i = 0; i < this.m_registeredObjectImpacts.Count; i++)
			{
				Player.ObjectImpactData objectImpactData = this.m_registeredObjectImpacts[i];
				if (newImpacts != null && newImpacts.Contains(objectImpactData))
				{
					objectImpactData.PlayerDamage = playerFallDamage;
				}
				else if ((objectImpactData.PlayerBox2DPosition - fallDamageBox2DPosition).CalcSafeLength() <= this.FALL_DAMAGE_TRESHOLD_RADIUS)
				{
					float num2 = playerFallDamage - objectImpactData.PlayerDamage;
					if (num2 > 0f)
					{
						objectImpactData.PlayerDamage += num2;
						num = Math.Min(num2, num);
					}
					else
					{
						num = 0f;
					}
				}
			}
			if (num > 0f)
			{
				if (this.GameOwner != GameOwnerEnum.Client)
				{
					this.TakeFallDamage(num);
				}
				if (num > 7f)
				{
					this.CanRecoverFromFall = false;
				}
			}
		}

		// Token: 0x060039B7 RID: 14775 RVA: 0x000EC878 File Offset: 0x000EAA78
		public void ReceivedClientObjectImpact(List<Player.ObjectImpactData> clientObjectImpactDatas)
		{
			if (this.GameOwner != GameOwnerEnum.Server)
			{
				throw new Exception("Only the server is allowed to call Player.ReceivedClientObjectImpact()");
			}
			string text = "";
			List<Player.ObjectImpactData> list = null;
			int num = 0;
			Microsoft.Xna.Framework.Vector2 vector = Microsoft.Xna.Framework.Vector2.Zero;
			float num2 = 0f;
			for (int i = 0; i < clientObjectImpactDatas.Count; i++)
			{
				Player.ObjectImpactData objectImpactData = clientObjectImpactDatas[i];
				if (objectImpactData.Broken)
				{
					string text2 = text;
					text = string.Concat(new string[]
					{
						text2,
						"Ignoring broken package (i:",
						i.ToString(),
						"/c:",
						clientObjectImpactDatas.Count.ToString(),
						"). "
					});
				}
				else
				{
					bool flag = objectImpactData.ObjectHealthAfter <= 0f;
					Player.ObjectImpactData objectImpactData2 = this.GetObjectImpact(objectImpactData.ObjectID);
					if (objectImpactData2 == null)
					{
						objectImpactData2 = objectImpactData;
						objectImpactData2.ObjectData = this.GameWorld.GetObjectDataByID(objectImpactData2.ObjectID);
						if (objectImpactData2.ObjectData != null && !objectImpactData2.ObjectData.IsDisposed)
						{
							if (!objectImpactData2.ObjectData.IsPlayer)
							{
								if (list == null)
								{
									list = new List<Player.ObjectImpactData>();
								}
								list.Add(objectImpactData2);
								num++;
								vector += objectImpactData2.PlayerBox2DPosition;
								num2 = Math.Max(objectImpactData2.PlayerDamage, num2);
								objectImpactData2.IsNew = false;
								objectImpactData2.LifeTimeLeft = Math.Min(this.GetAverageRoundtripTime() * 2f + 200f, 500f);
								objectImpactData2.ObjectHealthBefore = objectImpactData2.ObjectData.Health.CurrentValue;
								objectImpactData2.ObjectData.TakePlayerImpactDamage(objectImpactData2.ObjectDamage, objectImpactData2.PlayerID);
								objectImpactData2.ObjectHealthAfter = objectImpactData2.ObjectData.Health.CurrentValue;
								if (objectImpactData2.ObjectData.Health.CurrentValue <= 0f)
								{
									objectImpactData2.ObjectData.Destroy();
									this.WorldBody.SetLinearVelocity(objectImpactData2.PlayerVelocityAfter);
								}
								else if (flag)
								{
									if (objectImpactData2.ObjectData.Health.CurrentValue <= 5f)
									{
										objectImpactData2.ObjectData.TakePlayerImpactDamage(5f, objectImpactData2.PlayerID);
									}
									if (objectImpactData2.ObjectData.Health.CurrentValue <= 0f)
									{
										objectImpactData2.ObjectData.Destroy();
										this.WorldBody.SetLinearVelocity(objectImpactData2.PlayerVelocityAfter);
									}
								}
								this.WorldBody.SetLinearVelocity(objectImpactData2.PlayerVelocityAfter);
								this.m_registeredObjectImpacts.Add(objectImpactData2);
							}
							else
							{
								if (list == null)
								{
									list = new List<Player.ObjectImpactData>();
								}
								list.Add(objectImpactData2);
								num++;
								vector += objectImpactData2.PlayerBox2DPosition;
								num2 = Math.Max(objectImpactData2.PlayerDamage, num2);
								objectImpactData2.IsNew = false;
								objectImpactData2.LifeTimeLeft = Math.Min(this.GetAverageRoundtripTime() * 2f + 200f, 500f);
								Microsoft.Xna.Framework.Vector2 newVelocity = new Microsoft.Xna.Framework.Vector2(objectImpactData2.ObjectHealthBefore, objectImpactData2.ObjectHealthAfter);
								this.WorldBody.SetLinearVelocity(objectImpactData2.PlayerVelocityAfter);
								if (this.CheckObjectImpactProximityValid(objectImpactData2.ObjectData))
								{
									Player player = (Player)objectImpactData2.ObjectData.InternalData;
									player.FallWithSpeed(newVelocity);
									player.TakeFallDamage(objectImpactData2.PlayerDamage);
								}
								else
								{
									text += "Proximity invalid for player, ignoring impact. ";
								}
							}
						}
					}
					else if (!objectImpactData2.ObjectData.IsDisposed)
					{
						if (!objectImpactData2.ObjectData.IsPlayer)
						{
							num++;
							vector += objectImpactData2.PlayerBox2DPosition;
							num2 = Math.Max(num2, objectImpactData2.PlayerDamage);
							float num3 = objectImpactData.ObjectDamage - objectImpactData2.ObjectDamage;
							if (num3 > 0f)
							{
								objectImpactData2.ObjectDamage += num3;
								objectImpactData2.ObjectData.TakePlayerImpactDamage(num3, objectImpactData2.PlayerID);
								objectImpactData2.ObjectHealthAfter = objectImpactData2.ObjectData.Health.CurrentValue;
								if (objectImpactData2.ObjectData.Health.CurrentValue <= 0f)
								{
									objectImpactData2.ObjectData.Destroy();
									this.WorldBody.SetLinearVelocity(objectImpactData2.PlayerVelocityAfter);
								}
								else if (flag)
								{
									if (objectImpactData2.ObjectData.Health.CurrentValue <= 5f)
									{
										objectImpactData2.ObjectData.TakePlayerImpactDamage(5f, objectImpactData2.PlayerID);
									}
									if (objectImpactData2.ObjectData.Health.CurrentValue <= 0f)
									{
										objectImpactData2.ObjectData.Destroy();
										this.WorldBody.SetLinearVelocity(objectImpactData2.PlayerVelocityAfter);
									}
								}
							}
						}
						else
						{
							num++;
							vector += objectImpactData2.PlayerBox2DPosition;
							num2 = Math.Max(num2, objectImpactData2.PlayerDamage);
						}
					}
				}
			}
			if (num2 > 0f)
			{
				vector /= (float)num;
				this.RegisterFallDamageAmongExistingImpacts(num2, vector, list);
			}
		}

		// Token: 0x060039B8 RID: 14776 RVA: 0x000ECD74 File Offset: 0x000EAF74
		private bool CheckObjectImpactProximityValid(ObjectData objectData)
		{
			if (objectData.IsPlayer)
			{
				Player player = (Player)objectData.InternalData;
				Microsoft.Xna.Framework.Vector2 x = player.PreBox2DPosition - this.PreBox2DPosition;
				if (x.CalcSafeLength() > 2.3999999f)
				{
					return false;
				}
			}
			else
			{
				Microsoft.Xna.Framework.Vector2 x2 = objectData.GetBox2DCenterPosition() - this.PreBox2DPosition;
				if (x2.CalcSafeLength() > 4.7999997f)
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x060039B9 RID: 14777 RVA: 0x0002F70B File Offset: 0x0002D90B
		public void RegisterPlayerImpact(Player otherPlayer, float playerDamage, Microsoft.Xna.Framework.Vector2 otherPlrLinearVelocityAfter, Microsoft.Xna.Framework.Vector2 plrLinearVelocityAfter, Microsoft.Xna.Framework.Vector2 plrBox2DPosition)
		{
			this.RegisterObjectImpact(otherPlayer.ObjectData, 0f, otherPlrLinearVelocityAfter.X, otherPlrLinearVelocityAfter.Y, playerDamage, plrLinearVelocityAfter, plrBox2DPosition);
		}

		// Token: 0x060039BA RID: 14778 RVA: 0x000ECDD8 File Offset: 0x000EAFD8
		public void RegisterObjectImpact(ObjectData otherObject, float objectDamage, float objectHealthBeforeImpact, float objectHealthAfterImpact, float playerDamage, Microsoft.Xna.Framework.Vector2 plrLinearVelocityAfter, Microsoft.Xna.Framework.Vector2 plrBox2DPosition)
		{
			if (this.GetObjectImpact(otherObject.ObjectID) == null)
			{
				Player.ObjectImpactData objectImpactData = new Player.ObjectImpactData();
				objectImpactData.IsNew = true;
				objectImpactData.LifeTimeLeft = Math.Min(this.GetAverageRoundtripTime() * 2f + 200f, 500f);
				objectImpactData.ObjectID = otherObject.ObjectID;
				objectImpactData.PlayerID = this.ObjectID;
				objectImpactData.ObjectData = otherObject;
				objectImpactData.ObjectHealthAfter = objectHealthAfterImpact;
				objectImpactData.ObjectHealthBefore = objectHealthBeforeImpact;
				objectImpactData.ObjectDamage = objectDamage;
				objectImpactData.PlayerDamage = playerDamage;
				objectImpactData.PlayerVelocityAfter = plrLinearVelocityAfter;
				objectImpactData.PlayerBox2DPosition = plrBox2DPosition;
				this.m_registeredObjectImpacts.Add(objectImpactData);
			}
		}

		// Token: 0x060039BB RID: 14779 RVA: 0x000ECE80 File Offset: 0x000EB080
		public Player.ObjectImpactData GetObjectImpact(int objectID)
		{
			if (this.m_registeredObjectImpacts.Count > 0)
			{
				for (int i = 0; i < this.m_registeredObjectImpacts.Count; i++)
				{
					if (this.m_registeredObjectImpacts[i].ObjectID == objectID)
					{
						return this.m_registeredObjectImpacts[i];
					}
				}
			}
			return null;
		}

		// Token: 0x17000955 RID: 2389
		// (get) Token: 0x060039BC RID: 14780 RVA: 0x0002F731 File Offset: 0x0002D931
		public bool IsAIControlled
		{
			get
			{
				return this.m_isBot & this.m_botBehavior.Active & this.IsInputEnabled;
			}
		}

		// Token: 0x17000956 RID: 2390
		// (get) Token: 0x060039BD RID: 14781 RVA: 0x0002F74C File Offset: 0x0002D94C
		public bool IsUserControlled
		{
			get
			{
				return !this.m_isBot & this.IsInputEnabled & this.UserIdentifier != 0;
			}
		}

		// Token: 0x17000957 RID: 2391
		// (get) Token: 0x060039BE RID: 14782 RVA: 0x0002F76B File Offset: 0x0002D96B
		// (set) Token: 0x060039BF RID: 14783 RVA: 0x0002F782 File Offset: 0x0002D982
		public bool IsValidBotEliminateTarget
		{
			get
			{
				return this.ObjectData != null && this.ObjectData.IsAITargetableObject;
			}
			set
			{
				if (this.ObjectData != null)
				{
					this.ObjectData.IsAITargetableObject = value;
				}
			}
		}

		// Token: 0x17000958 RID: 2392
		// (get) Token: 0x060039C0 RID: 14784 RVA: 0x0002F798 File Offset: 0x0002D998
		// (set) Token: 0x060039C1 RID: 14785 RVA: 0x0002F7B8 File Offset: 0x0002D9B8
		public ObjectAITargetData AITargetData
		{
			get
			{
				if (this.ObjectData != null)
				{
					return this.ObjectData.AITargetData;
				}
				return new ObjectAITargetData(0f);
			}
			set
			{
				if (this.ObjectData != null)
				{
					this.ObjectData.AITargetData = value;
				}
			}
		}

		// Token: 0x17000959 RID: 2393
		// (get) Token: 0x060039C2 RID: 14786 RVA: 0x0002F7CE File Offset: 0x0002D9CE
		public bool IsBot
		{
			get
			{
				return this.m_isBot;
			}
		}

		// Token: 0x060039C3 RID: 14787 RVA: 0x0002F7D6 File Offset: 0x0002D9D6
		public void SetIsBot(bool value)
		{
			if (this.m_isBot != value)
			{
				this.m_isBot = value;
				this.UpdateCanDoPlayerAction();
			}
		}

		// Token: 0x1700095A RID: 2394
		// (get) Token: 0x060039C4 RID: 14788 RVA: 0x0002F7EE File Offset: 0x0002D9EE
		internal BotBehaviorSet BotBehaviorSet
		{
			get
			{
				return this.m_botBehaviorSet;
			}
		}

		// Token: 0x060039C5 RID: 14789 RVA: 0x0002F7F6 File Offset: 0x0002D9F6
		internal void SetBotBehaviorSet(BotBehaviorSet value)
		{
			if (value != null)
			{
				this.m_botBehaviorSet = value;
			}
		}

		// Token: 0x1700095B RID: 2395
		// (get) Token: 0x060039C6 RID: 14790 RVA: 0x0002F802 File Offset: 0x0002DA02
		public bool BotBehaviorActive
		{
			get
			{
				return this.m_botBehavior.Active;
			}
		}

		// Token: 0x060039C7 RID: 14791 RVA: 0x0002F80F File Offset: 0x0002DA0F
		public void SetBotBehaviorActive(bool value)
		{
			if (this.BotBehaviorActive != value)
			{
				this.m_botBehavior.Active = value;
				this.MetaDataUpdated = true;
			}
		}

		// Token: 0x060039C8 RID: 14792 RVA: 0x0002F82D File Offset: 0x0002DA2D
		public BotBehavior GetBotBehavior()
		{
			return this.m_botBehavior;
		}

		// Token: 0x060039C9 RID: 14793 RVA: 0x000ECED8 File Offset: 0x000EB0D8
		public void SetBotBehavior(BotBehavior botBehavior)
		{
			if (botBehavior == null)
			{
				this.SetBotBehaviorActive(false);
				return;
			}
			if (!this.m_botBehavior.Equals(botBehavior))
			{
				this.m_botBehavior.Active = botBehavior.Active;
				this.m_botBehavior.PredefinedAI = botBehavior.PredefinedAI;
				this.m_botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(botBehavior.PredefinedAI);
				this.MetaDataUpdated = true;
			}
			else
			{
				this.m_botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(botBehavior.PredefinedAI);
			}
			if (botBehavior.PredefinedAI == PredefinedAIType.BotA || botBehavior.PredefinedAI == PredefinedAIType.BotB || botBehavior.PredefinedAI == PredefinedAIType.BotC || botBehavior.PredefinedAI == PredefinedAIType.BotD || botBehavior.PredefinedAI == PredefinedAIType.CompanionA || botBehavior.PredefinedAI == PredefinedAIType.CompanionB || botBehavior.PredefinedAI == PredefinedAIType.CompanionC || botBehavior.PredefinedAI == PredefinedAIType.CompanionD)
			{
				this.m_botBehaviorSet.MutateMeleeActions(0.15f, Constants.RANDOM);
			}
		}

		// Token: 0x060039CA RID: 14794 RVA: 0x000ECFB0 File Offset: 0x000EB1B0
		public void ActivatePredefinedAI(PredefinedAIType predefinedAI)
		{
			BotBehavior botBehavior = this.GetBotBehavior();
			botBehavior.PredefinedAI = predefinedAI;
			botBehavior.Active = true;
			this.SetBotBehavior(botBehavior);
		}

		// Token: 0x060039CB RID: 14795 RVA: 0x000ECFDC File Offset: 0x000EB1DC
		private void InitBotAI()
		{
			if (this.GameWorld != null && this.GameOwner != GameOwnerEnum.Client)
			{
				this.m_botAIShooting = new Player.BotAIShootingValues();
				this.m_botAIMeleeStatus = new Player.BotAIMeleeStatus();
				this.m_botAINavObstacleAboveCacheObject = new Player.BotAIObstacleResult();
				this.InitBotActionPhases();
				this.m_botAINav = new Player.BotAINavigation();
				this.m_botAITargetDataDestination = Player.BotAITargetData.Pool.GetFreeItem();
				this.m_botAITargetDataOpponent = Player.BotAITargetData.Pool.GetFreeItem();
				this.m_botAINavMoveData = Player.AIMoveData.NewMoveData(null, null);
				this.m_botAINavMeleeIgnoreCloseCheck = new Player.AINavMeleeIgnoreCloseCheck();
				this.m_botAIObstacleInfo = new Dictionary<int, Player.BotAIObstacleInfo>();
				this.InitPlayerAIPackagePathFinding();
			}
		}

		// Token: 0x060039CC RID: 14796 RVA: 0x000ED078 File Offset: 0x000EB278
		private void DisposeBotAI()
		{
			if (this.m_botAIPackages != null)
			{
				foreach (KeyValuePair<Type, GameWorld.PlayerAIPackage> keyValuePair in this.m_botAIPackages)
				{
					keyValuePair.Value.ClearData();
				}
				this.m_botAIPackages.Clear();
				this.m_botAIPackages = null;
			}
			this.m_botAISeekCoverObject = null;
			this.m_botAINavPathFinding = null;
			if (this.m_botAINav != null)
			{
				this.m_botAINav.Dispose();
				this.m_botAINav = null;
			}
			if (this.m_botAIDodgeProjectileHandledProjectiles != null)
			{
				this.m_botAIDodgeProjectileHandledProjectiles.Clear();
				this.m_botAIDodgeProjectileHandledProjectiles = null;
			}
			if (this.m_botAIDodgeProjectileCheckedDodge != null)
			{
				this.m_botAIDodgeProjectileCheckedDodge.Clear();
				this.m_botAIDodgeProjectileCheckedDodge = null;
			}
			if (this.m_botAITargetDataDestination != null)
			{
				this.m_botAITargetDataDestination.ReturnToPool();
				this.m_botAITargetDataDestination = null;
			}
			if (this.m_botAITargetDataOpponent != null)
			{
				this.m_botAITargetDataOpponent.ReturnToPool();
				this.m_botAITargetDataOpponent = null;
			}
			if (this.m_botAINavMoveData != null)
			{
				this.m_botAINavMoveData.ReturnToPool();
				this.m_botAINavMoveData = null;
			}
			if (this.m_botAINavObstacleAboveCacheObject != null)
			{
				this.m_botAINavObstacleAboveCacheObject.Object = null;
				this.m_botAINavObstacleAboveCacheObject = null;
			}
		}

		// Token: 0x060039CD RID: 14797 RVA: 0x0002F835 File Offset: 0x0002DA35
		public void SetDrawStatusInfoVisible(Player.DrawStatusInfoFlags value)
		{
			if (this.DrawStatusInfo != value)
			{
				this.DrawStatusInfo = value;
				this.MetaDataUpdated = true;
			}
		}

		// Token: 0x1700095C RID: 2396
		// (get) Token: 0x060039CE RID: 14798 RVA: 0x000ED1B0 File Offset: 0x000EB3B0
		internal bool BotAICheckOpponentTargetLockedToEachOther
		{
			get
			{
				return this.m_botAITargetDataOpponent != null && this.m_botAITargetDataOpponent.Player != null && this.m_botAITargetDataOpponent.Player.m_botAITargetDataOpponent != null && this.m_botAITargetDataOpponent.Player.m_botAITargetDataOpponent.Player == this;
			}
		}

		// Token: 0x1700095D RID: 2397
		// (get) Token: 0x060039CF RID: 14799 RVA: 0x0002F84E File Offset: 0x0002DA4E
		internal Player.BotAITargetData BotAITargetDestination
		{
			get
			{
				return this.m_botAITargetDataDestination;
			}
		}

		// Token: 0x1700095E RID: 2398
		// (get) Token: 0x060039D0 RID: 14800 RVA: 0x0002F856 File Offset: 0x0002DA56
		internal Player.BotAITargetData BotAITargetOpponent
		{
			get
			{
				return this.m_botAITargetDataOpponent;
			}
		}

		// Token: 0x1700095F RID: 2399
		// (get) Token: 0x060039D1 RID: 14801 RVA: 0x0002F85E File Offset: 0x0002DA5E
		// (set) Token: 0x060039D2 RID: 14802 RVA: 0x0002F866 File Offset: 0x0002DA66
		internal ObjectData BotAIForcedTarget { get; set; }

		// Token: 0x060039D3 RID: 14803 RVA: 0x000ED200 File Offset: 0x000EB400
		private void InitPlayerAIPackagePathFinding()
		{
			GameWorld.PlayerAIPackagePathFinding playerAIPackagePathFinding = new GameWorld.PlayerAIPackagePathFinding();
			playerAIPackagePathFinding.Owner = this;
			this.m_botAIPackages.Add(playerAIPackagePathFinding.GetType(), playerAIPackagePathFinding);
			this.m_botAINavPathFinding = playerAIPackagePathFinding;
			this.m_botAIUnavailableTargets = new HashSet<int>();
			this.m_botAIUnavailableTargetsAtNode = new Dictionary<int, HashSet<int>>();
			this.m_botAIUnavailableActivateablePathConnections = new HashSet<int>();
		}

		// Token: 0x060039D4 RID: 14804 RVA: 0x000ED254 File Offset: 0x000EB454
		internal T GetPlayerAIPackage<T>() where T : GameWorld.PlayerAIPackage
		{
			GameWorld.PlayerAIPackage playerAIPackage = null;
			if (this.m_botAIPackages.TryGetValue(typeof(T), out playerAIPackage))
			{
				return (T)((object)playerAIPackage);
			}
			T t = Activator.CreateInstance<T>();
			t.Owner = this;
			this.m_botAIPackages.Add(typeof(T), t);
			return t;
		}

		// Token: 0x060039D5 RID: 14805 RVA: 0x000ED2B4 File Offset: 0x000EB4B4
		internal bool TryGetPlayerAIPackage<T>(out T value) where T : GameWorld.PlayerAIPackage
		{
			GameWorld.PlayerAIPackage playerAIPackage = null;
			if (this.m_botAIPackages.TryGetValue(typeof(T), out playerAIPackage))
			{
				value = (T)((object)playerAIPackage);
				return true;
			}
			value = default(T);
			return false;
		}

		// Token: 0x060039D6 RID: 14806 RVA: 0x000ED2F4 File Offset: 0x000EB4F4
		internal void AddAIUnavailableTarget(PathNode pathNode, int objectID)
		{
			this.m_botAIUnavailableTargets.Add(objectID);
			if (pathNode != null)
			{
				int instanceID = pathNode.InstanceID;
				HashSet<int> hashSet;
				if (!this.m_botAIUnavailableTargetsAtNode.TryGetValue(instanceID, out hashSet))
				{
					hashSet = new HashSet<int>();
					this.m_botAIUnavailableTargetsAtNode.Add(instanceID, hashSet);
				}
				hashSet.Add(objectID);
			}
		}

		// Token: 0x060039D7 RID: 14807 RVA: 0x000ED344 File Offset: 0x000EB544
		internal void ClearAIUnavailableTargetsAtNode(int pathNodeInstanceID)
		{
			HashSet<int> hashSet;
			if (this.m_botAIUnavailableTargetsAtNode.Count > 0 && this.m_botAIUnavailableTargetsAtNode.TryGetValue(pathNodeInstanceID, out hashSet))
			{
				foreach (int item in hashSet)
				{
					this.m_botAIUnavailableTargets.Remove(item);
				}
				hashSet.Clear();
				this.m_botAIUnavailableTargetsAtNode.Remove(pathNodeInstanceID);
			}
		}

		// Token: 0x060039D8 RID: 14808 RVA: 0x000ED3CC File Offset: 0x000EB5CC
		private void BotAIUpdateTargetData()
		{
			if (DebugBotPathFinding.Enabled)
			{
				GameWorld.PlayerAIPackageTargetDebugPathFiniding playerAIPackage = this.GetPlayerAIPackage<GameWorld.PlayerAIPackageTargetDebugPathFiniding>();
				playerAIPackage.Requeue(500f);
				this.m_botAITargetDataDestination.SetTarget(playerAIPackage.ResultTarget, (this.m_botAINavPathFinding.ActivatorTarget == null || !this.m_botAINavPathFinding.HasConnectionWithActivatorsNotYetEnabled) ? null : this.m_botAINavPathFinding.ActivatorTarget, this);
				this.m_botAITargetDataOpponent.SetTarget(playerAIPackage.ResultTarget, this);
				return;
			}
			if (this.BotAIForcedTarget != null && this.BotAIForcedTarget.IsDisposed)
			{
				this.BotAIForcedTarget = null;
			}
			GameWorld.PlayerAIPackageSearchTargetObject playerAIPackage2 = this.GetPlayerAIPackage<GameWorld.PlayerAIPackageSearchTargetObject>();
			float delayTime = 500f;
			if (playerAIPackage2.ResultTarget != null && !playerAIPackage2.ResultTarget.IsDisposed)
			{
				if (this.m_botAIUnavailableTargets.Contains(playerAIPackage2.ResultTarget.ObjectID))
				{
					delayTime = 100f;
				}
			}
			else
			{
				delayTime = 100f;
			}
			playerAIPackage2.Requeue(delayTime);
			if (this.IsHoldingPlayerInGrab && this.HoldingPlayerInGrab != null)
			{
				this.m_botAITargetDataDestination.SetTarget(this.HoldingPlayerInGrab.ObjectData, this);
				this.m_botAITargetDataOpponent.SetTarget(this.HoldingPlayerInGrab.ObjectData, this);
				return;
			}
			if (this.IsHoldingPlayerInDive && this.HoldingPlayerInDive != null)
			{
				this.m_botAITargetDataDestination.SetTarget(this.HoldingPlayerInDive.ObjectData, this);
				this.m_botAITargetDataOpponent.SetTarget(this.HoldingPlayerInDive.ObjectData, this);
				return;
			}
			if ((this.IsPerformingGrabAction || (this.FireSequence.WeaponBurstMode && this.FireSequence.WeaponBurstRoundsToFireLeft > 0)) && this.m_botAITargetDataOpponent.FinalTarget != null && this.m_botAITargetDataOpponent.FinalTarget.IsPlayer && !this.m_botAITargetDataOpponent.FinalTarget.IsDisposed)
			{
				this.m_botAITargetDataDestination.SetTarget(this.m_botAITargetDataDestination.FinalTarget, this.m_botAITargetDataDestination.CurrentTarget, this);
				this.m_botAITargetDataOpponent.SetTarget(this.m_botAITargetDataOpponent.FinalTarget, this.m_botAITargetDataOpponent.CurrentTarget, this);
				return;
			}
			if (this.BotAIForcedTarget != null && this.BotAIForcedTarget != this.ObjectData)
			{
				this.m_botAITargetDataDestination.SetTarget(this.BotAIForcedTarget, (this.m_botAINavPathFinding.ActivatorTarget == null || !this.m_botAINavPathFinding.HasConnectionWithActivatorsNotYetEnabled) ? null : this.m_botAINavPathFinding.ActivatorTarget, this);
				this.m_botAITargetDataOpponent.SetTarget(this.BotAIForcedTarget, this);
				return;
			}
			this.m_botAITargetDataDestination.SetTarget(playerAIPackage2.ResultTarget, (this.m_botAINavPathFinding.ActivatorTarget == null || !this.m_botAINavPathFinding.HasConnectionWithActivatorsNotYetEnabled) ? null : this.m_botAINavPathFinding.ActivatorTarget, this);
			ObjectData finalTarget = (playerAIPackage2.PrimaryEnemy != null) ? playerAIPackage2.PrimaryEnemy : this.m_botAITargetDataDestination.CurrentTarget;
			if (playerAIPackage2.PrimaryEnemy == null)
			{
				finalTarget = null;
				if (this.BotAICanUseRangedAndHasAmmo())
				{
					GameWorld.PlayerAIPackageFindGuardingRangedTarget playerAIPackage3 = this.GetPlayerAIPackage<GameWorld.PlayerAIPackageFindGuardingRangedTarget>();
					playerAIPackage3.Requeue(250f);
					if (playerAIPackage3.LOSOpponent != null && playerAIPackage3.Status == GameWorld.PlayerAIPackageFindGuardingRangedTarget.StatusType.ClearLOS)
					{
						finalTarget = playerAIPackage3.LOSOpponent.ObjectData;
					}
				}
			}
			this.m_botAITargetDataOpponent.SetTarget(finalTarget, this);
		}

		// Token: 0x060039D9 RID: 14809 RVA: 0x000ED6D0 File Offset: 0x000EB8D0
		public void UpdateAI(float totalMs)
		{
			this.m_botAINavigationCodePath = Player.BotAINavCodePath.None;
			if (this.SpawnAnimation == Player.PlayerSpawnAnimation.Zombie)
			{
				return;
			}
			this.BotAICheckTeamLineUp(totalMs);
			if (this.UpdateAICommands(totalMs))
			{
				return;
			}
			if (this.IsBot & !this.IsDead & this.m_botBehavior.Active)
			{
				this.BotAIUpdatePhases();
				this.m_botAIKeysHandled = true;
				this.BotAIPrepareUpdate();
				int num = this.BotAIUpdateGoToCover(totalMs);
				this.BotAIUpdateTargetData();
				if (this.BotAITargetDestination.HasTarget)
				{
					this.BotAIUpdateTeamLineUps(totalMs, this.BotAITargetDestination);
					this.AIMeleeCheckCloseToTarget(this.BotAITargetDestination);
					this.AINavigationCheckStucknessPost();
					this.BotAICheckActivateables(totalMs, this.BotAITargetDestination);
					if (num == 0)
					{
						switch (this.m_botBehaviorSet.NavigationMode)
						{
						case BotBehaviorNavigationMode.None:
							this.AINavigationNone(totalMs, this.BotAITargetDestination);
							break;
						case BotBehaviorNavigationMode.PlainGround:
							this.AINavigationPlainGround(totalMs, this.BotAITargetDestination, true);
							break;
						case BotBehaviorNavigationMode.PathFinding:
							this.AINavigationPathFinding(totalMs, this.BotAITargetDestination);
							this.GameWorld.PathGrid.PathGridHasBeenRequestedByBot = true;
							break;
						}
					}
					this.BotAINavCheckTeamLineUpMoveCancel(totalMs, this.BotAITargetDestination);
				}
				this.UpdateAIBurning(totalMs);
				if (this.RocketRideProjectileWorldID != 0)
				{
					this.UpdateAIRocketRiding(totalMs, this.BotAITargetOpponent);
				}
				else if (!this.UpdateAIAvoidProjectiles(totalMs))
				{
					this.UpdateAIAttackRanged(totalMs, this.BotAITargetOpponent, this.BotAITargetDestination);
					if (this.UpdateAICheckWeaponStatus(totalMs, this.BotAITargetOpponent) && this.BotAITargetDestination.HasTarget)
					{
						this.UpdateAIMelee(totalMs, this.BotAITargetDestination);
					}
				}
				this.ActivateNewKeyActions(totalMs);
				this.ReleaseOldKeyActions();
				return;
			}
			if (this.m_botAIKeysHandled)
			{
				this.m_botAIKeysHandled = false;
				this.ReleaseAllVirtualKeys();
			}
		}

		// Token: 0x060039DA RID: 14810 RVA: 0x000ED878 File Offset: 0x000EBA78
		private void UpdateLedgeGrabPosition(bool allowSnapToPosition, Microsoft.Xna.Framework.Vector2 gravityLineNormal)
		{
			if (this.LedgeGrabbing && !this.IsRemoved)
			{
				if (!this.LedgeGrabData.ObjectData.IsDisposed && !this.StandingOnGround)
				{
					if (this.LedgeGrabData.ObjectData.BodyData.MoveSequence == this.LedgeGrabData.LastLedgeGrabBodyDataMoveSequence)
					{
						this.LedgeGrabData.LastLedgeGrabBody = this.LedgeGrabData.Body;
						this.LedgeGrabData.LastLedgeGrabPosition = this.LedgeGrabData.Body.GetWorldPoint(this.LedgeGrabData.LocalVertexPoint);
						this.LedgeGrabData.LastLedgeGrabLocalVertexPoint = this.LedgeGrabData.LocalVertexPoint;
						this.LedgeGrabData.LastLedgeGrabBodyDataMoveSequence = BodyData.Read(this.LedgeGrabData.Body).MoveSequence;
						if (this.GameOwner != GameOwnerEnum.Client || this.HasLocalControl)
						{
							Filter filter;
							this.m_playerFixtureCircle.GetFilterData(out filter);
							for (int i = 0; i < this.Contacts.ContactsCount; i++)
							{
								PlayerContact playerContact = this.Contacts.Contacts[i];
								int bodyID = playerContact.Fixture.GetBody().BodyID;
								if ((filter.bodyIDToIgnore == null || !filter.bodyIDToIgnore.ContainsKey(bodyID)) && playerContact.IsCircle && Microsoft.Xna.Framework.Vector2.Dot(gravityLineNormal, playerContact.N) > 0.73f)
								{
									this.ClearLedgeGrab();
									return;
								}
							}
						}
						this.CurrentSpeed.X = 0f;
						this.CurrentSpeed.Y = 0f;
						Microsoft.Xna.Framework.Vector2 vector = this.GetLedgeGrabOffset();
						vector = Converter.WorldToBox2D(vector);
						float ledgeGrabAngle = this.GetLedgeGrabAngle();
						SFDMath.RotatePosition(ref vector, ledgeGrabAngle, out vector);
						Microsoft.Xna.Framework.Vector2 linearVelocityFromLocalPoint = this.LedgeGrabData.Body.GetLinearVelocityFromLocalPoint(this.LedgeGrabData.LocalVertexPoint);
						Microsoft.Xna.Framework.Vector2 vector2 = this.LedgeGrabData.WorldVertexPoint + vector - this.WorldBody.GetPosition();
						float num = vector2.Length();
						if (this.Contacts.ContactsCount > 0 && num > Converter.WorldToBox2D(4f))
						{
							bool flag = false;
							Microsoft.Xna.Framework.Vector2 value = Microsoft.Xna.Framework.Vector2.Normalize(vector2);
							int j = 0;
							while (j < this.Contacts.ContactsCount)
							{
								if (Microsoft.Xna.Framework.Vector2.Dot(this.Contacts.Contacts[j].N, value) >= 0f)
								{
									j++;
								}
								else
								{
									flag = true;
									IL_255:
									if (!flag)
									{
										this.m_dropLedgeGrabFrames = 0;
										goto IL_288;
									}
									this.m_dropLedgeGrabFrames += 1;
									if (this.m_dropLedgeGrabFrames >= 8)
									{
										this.ClearLedgeGrab();
										return;
									}
									goto IL_288;
								}
							}
							goto IL_255;
						}
						this.m_dropLedgeGrabFrames = 0;
						IL_288:
						if (allowSnapToPosition && (double)num > 0.04)
						{
							this.WorldBody.SetTransform(this.WorldBody.GetPosition() + vector2, 0f);
							this.LedgeGrabData.LastLedgeGrabPosition = this.LedgeGrabData.Body.GetLocalPoint(this.WorldBody.GetPosition());
						}
						this.WorldBody.SetLinearVelocity(linearVelocityFromLocalPoint + vector2 * 10f);
						this.AirControlBaseVelocity = linearVelocityFromLocalPoint;
						Microsoft.Xna.Framework.Vector2 value2 = new Microsoft.Xna.Framework.Vector2((float)Math.Cos((double)ledgeGrabAngle), (float)Math.Sin((double)ledgeGrabAngle));
						float value3 = Microsoft.Xna.Framework.Vector2.Dot(gravityLineNormal, value2);
						if (Math.Abs(value3) <= 0.73f)
						{
							float scaleFactor = Math.Min(this.WorldBody.GetMass() * 10f, this.LedgeGrabData.Body.GetMass() * 10f);
							this.LedgeGrabData.Body.ApplyForce(gravityLineNormal * scaleFactor, this.WorldBody.GetPosition());
							return;
						}
						if (this.GameOwner != GameOwnerEnum.Client || this.HasLocalControl)
						{
							this.ClearLedgeGrab();
							return;
						}
						return;
					}
				}
				if (this.GameOwner != GameOwnerEnum.Client || this.HasLocalControl)
				{
					this.ClearLedgeGrab();
				}
				return;
			}
			if (this.LedgeGrabData.LastLedgeGrabBody != null)
			{
				this.LedgeGrabData.LastLedgeGrabPosition = this.LedgeGrabData.LastLedgeGrabBody.GetWorldPoint(this.LedgeGrabData.LastLedgeGrabLocalVertexPoint);
				Microsoft.Xna.Framework.Vector2 vector3 = this.PreBox2DPosition - this.LedgeGrabData.LastLedgeGrabPosition;
				if (Math.Abs(vector3.X) > 0.39999998f | Math.Abs(vector3.Y + 0.32f) > 0.39999998f)
				{
					this.LedgeGrabData.LastLedgeGrabBody = null;
				}
			}
		}

		// Token: 0x060039DB RID: 14811 RVA: 0x000EDCD0 File Offset: 0x000EBED0
		private float GetLedgeGrabAngle()
		{
			Microsoft.Xna.Framework.Vector2 vector = (this.LedgeGrabData.FixtureShape != null) ? this.LedgeGrabData.FixtureShape.GetNormalsForVertex((int)this.LedgeGrabData.VertexIndex)[(int)this.LedgeGrabData.VertexNormalIndex] : Microsoft.Xna.Framework.Vector2.UnitX;
			SFDMath.RotatePosition(ref vector, (this.LedgeGrabData.Body != null) ? this.LedgeGrabData.Body.GetAngle() : 0f, out vector);
			float num = (float)Math.Atan2((double)vector.Y, (double)vector.X);
			if (this.LastDirectionX == 1)
			{
				num -= 3.1415927f;
			}
			return num;
		}

		// Token: 0x060039DC RID: 14812 RVA: 0x0002F86F File Offset: 0x0002DA6F
		private Microsoft.Xna.Framework.Vector2 GetLedgeGrabOffset()
		{
			return new Microsoft.Xna.Framework.Vector2(-(float)this.LastDirectionX * 5f, -4f);
		}

		// Token: 0x060039DD RID: 14813 RVA: 0x000EDD78 File Offset: 0x000EBF78
		private bool CanLedgeGrab()
		{
			return this.InAir && !(this.Falling | this.LedgeGrabbing | this.ThrowCharging | this.RocketRideProjectileWorldID > 0) && (this.FullLanding || (!(this.Disabled | this.LedgeGrabbing | this.RocketRideProjectileWorldID > 0) && !(this.CurrentAction == PlayerAction.Disabled | this.CurrentAction == PlayerAction.Kick | this.CurrentAction == PlayerAction.ThrowThrowing | this.CurrentAction == PlayerAction.ManualAim) && !(this.CurrentAction == PlayerAction.HipFire & this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown) && !this.VirtualKeyboard.PressingKey(20, false)));
		}

		// Token: 0x060039DE RID: 14814 RVA: 0x0002F889 File Offset: 0x0002DA89
		public void LedgeGrabDisableGrabbingCurrentLedges()
		{
			this.m_disabledFixturesForLedgeGrab = this.ScanLedgeGrab(this.GetGravityLineNormal());
		}

		// Token: 0x060039DF RID: 14815 RVA: 0x0002F89D File Offset: 0x0002DA9D
		public void LedgeGrabClearDisabledGrabbingLedges()
		{
			if (this.m_disabledFixturesForLedgeGrab != null)
			{
				this.m_disabledFixturesForLedgeGrab.Clear();
				this.m_disabledFixturesForLedgeGrab = null;
			}
		}

		// Token: 0x060039E0 RID: 14816 RVA: 0x000EDE30 File Offset: 0x000EC030
		public void ClearLedgeGrab()
		{
			if (this.LedgeGrabData.Fixture != null)
			{
				this.m_havePerformedJumpAttack = false;
				this.LedgeGrabData.Clear();
				Filter filter;
				this.m_playerFixtureCircle.GetFilterData(out filter);
				if (filter.bodyIDToIgnore != null)
				{
					filter.bodyIDToIgnore.Clear();
					filter.bodyIDToIgnore = null;
					this.m_playerFixtureCircle.SetFilterData(ref filter);
				}
				this.ForceClientMovementState(15);
			}
		}

		// Token: 0x060039E1 RID: 14817 RVA: 0x000EDE9C File Offset: 0x000EC09C
		public void LedgeGrabUpdateBodyIdsToIgnore()
		{
			Fixture fixture = this.LedgeGrabData.Fixture;
			if (fixture != null)
			{
				Filter filter;
				this.m_playerFixtureCircle.GetFilterData(out filter);
				if (filter.bodyIDToIgnore == null)
				{
					filter.bodyIDToIgnore = new Dictionary<int, ushort>();
					filter.bodyIDToIgnore.Add(fixture.GetBody().BodyID, 1);
					for (JointEdge jointEdge = fixture.GetBody().GetJointList(); jointEdge != null; jointEdge = jointEdge.Next)
					{
						if (jointEdge.Other != null && !filter.bodyIDToIgnore.ContainsKey(jointEdge.Other.BodyID))
						{
							filter.bodyIDToIgnore.Add(jointEdge.Other.BodyID, 1);
						}
					}
					this.m_playerFixtureCircle.SetFilterData(ref filter);
				}
			}
		}

		// Token: 0x060039E2 RID: 14818 RVA: 0x000EDF58 File Offset: 0x000EC158
		private void CheckLedgeGrab(Microsoft.Xna.Framework.Vector2 gravityLineNormal, Microsoft.Xna.Framework.Vector2 worldCheckPosition, bool forceState = false)
		{
			if (!forceState && !this.CanLedgeGrab())
			{
				return;
			}
			if (this.VirtualKeyboardLastMovement == PlayerMovement.Right || this.VirtualKeyboardLastMovement == PlayerMovement.Left)
			{
				int directionX = (this.VirtualKeyboardLastMovement == PlayerMovement.Right) ? 1 : -1;
				ObjectData od = null;
				Box2D.XNA.RayCastInput rci = default(Box2D.XNA.RayCastInput);
				bool groundExist = false;
				rci.p1 = worldCheckPosition - gravityLineNormal * Converter.WorldToBox2D(4f);
				rci.p2 = rci.p1 + gravityLineNormal * Converter.WorldToBox2D(22f);
				rci.maxFraction = 1f;
				AABB aabb;
				AABB.Create(out aabb, rci.p1, rci.p2, 0.04f);
				RayCastOutput rco;
				this.WorldBody.GetWorld().QueryAABB(delegate(Fixture fixture)
				{
					if (fixture.GetUserData() != null && !fixture.IsSensor() && !((ObjectData)fixture.GetUserData()).IsPlayer && (fixture.TestPoint(rci.p1) || fixture.RayCast(out rco, ref rci)) && this.CheckCollisionFixture(fixture, out od, 1f, true))
					{
						groundExist = true;
						return false;
					}
					return true;
				}, ref aabb);
				if (groundExist)
				{
					return;
				}
				this.GetAABBLedgeGrab(out aabb, worldCheckPosition, directionX);
				this.m_ledgeGrabaabbFixtures.Clear();
				aabb.Grow(Converter.WorldToBox2D(4f));
				bool anyFixtures = false;
				this.WorldBody.GetWorld().QueryAABB(delegate(Fixture fixture)
				{
					if (fixture.GetUserData() != null && !fixture.IsSensor() && !fixture.IsCloud() && !((ObjectData)fixture.GetUserData()).IsPlayer)
					{
						anyFixtures = true;
						if (this.CheckCollisionFixture(fixture, out od, 0f, true) && od.MapObjectID != "LEDGEGRAB")
						{
							this.m_ledgeGrabaabbFixtures.Add(fixture);
						}
					}
					return true;
				}, ref aabb);
				if (!anyFixtures)
				{
					return;
				}
				aabb.Grow(-Converter.WorldToBox2D(4f));
				Microsoft.Xna.Framework.Vector2 gravityLineHNormal = gravityLineNormal;
				SFDMath.RotateVector90CW(ref gravityLineHNormal, out gravityLineHNormal);
				Microsoft.Xna.Framework.Vector2 currentVelocity = this.WorldBody.GetLinearVelocity();
				Microsoft.Xna.Framework.Vector2 relativeVelocity = Microsoft.Xna.Framework.Vector2.Zero;
				Fixture bestEdge = null;
				Microsoft.Xna.Framework.Vector2 bestEdgeWorldPoint = Microsoft.Xna.Framework.Vector2.Zero;
				float bestEdgeWorldPointXDist = 9999f;
				Microsoft.Xna.Framework.Vector2 localVertex = Microsoft.Xna.Framework.Vector2.Zero;
				byte vertexIndex = 0;
				byte vertexNormalIndex = 0;
				Microsoft.Xna.Framework.Vector2 worldPoint = Microsoft.Xna.Framework.Vector2.Zero;
				PolygonShape ps = null;
				Microsoft.Xna.Framework.Vector2[] vertices = null;
				od = null;
				this.WorldBody.GetWorld().QueryAABB(delegate(Fixture fixture)
				{
					if (fixture != null && !fixture.IsSensor() && fixture.GetShape().ShapeType == ShapeType.Polygon && !((ObjectData)fixture.GetUserData()).IsPlayer && (this.CurrentAction != PlayerAction.JumpKick || this.m_currentActionTimeBeforeBox2DAction > 200f || fixture.GetBody().GetType() == Box2D.XNA.BodyType.Static) && (this.m_disabledFixturesForLedgeGrab == null || !this.m_disabledFixturesForLedgeGrab.Contains(fixture)) && (this.CheckCollisionFixture(fixture, out od, 0f, true) || (od != null && od.MapObjectID == "LEDGEGRAB")))
					{
						ps = (PolygonShape)fixture.GetShape();
						vertices = ps.GetVerticesArray();
						for (int i = 0; i < vertices.Length; i++)
						{
							Microsoft.Xna.Framework.Vector2 localPoint = vertices[i];
							worldPoint = fixture.GetBody().GetWorldPoint(localPoint);
							if (this.LedgeGrabData.LastLedgeGrabBody != null)
							{
								Microsoft.Xna.Framework.Vector2 vector2 = worldPoint - this.LedgeGrabData.LastLedgeGrabPosition;
								if (Math.Abs(vector2.X) < 0.16f & Math.Abs(vector2.Y) < 0.16f)
								{
									return true;
								}
							}
							if (aabb.Contains(ref worldPoint))
							{
								int num2 = 0;
								bool flag = false;
								relativeVelocity = fixture.GetBody().GetLinearVelocityFromWorldPoint(worldPoint) - currentVelocity;
								SFDMath.ProjectUonV(ref relativeVelocity, ref gravityLineNormal, out relativeVelocity);
								if (relativeVelocity.Length() > 0.01f)
								{
									relativeVelocity.Normalize();
									if (relativeVelocity.IsValid())
									{
										if (Microsoft.Xna.Framework.Vector2.Dot(relativeVelocity, gravityLineNormal) < 0f)
										{
											flag = true;
										}
									}
									else
									{
										flag = true;
									}
								}
								else
								{
									flag = true;
								}
								if (flag)
								{
									if (bestEdge == null)
									{
										if (this.CheckFixtureLedgeGrabNormals(fixture, ps, i, gravityLineNormal, out num2) && (od.MapObjectID == "LEDGEGRAB" || !this.CheckFixtureLedgeGrabBlocked(this.m_ledgeGrabaabbFixtures, fixture, directionX, worldPoint, gravityLineNormal, gravityLineHNormal)))
										{
											bestEdge = fixture;
											bestEdgeWorldPoint = worldPoint;
											bestEdgeWorldPointXDist = Math.Abs(bestEdgeWorldPoint.X - worldCheckPosition.X);
											vertexIndex = (byte)i;
											vertexNormalIndex = (byte)num2;
											localVertex = vertices[i];
										}
									}
									else
									{
										float num3 = Math.Abs(worldPoint.X - worldCheckPosition.X);
										if (num3 <= bestEdgeWorldPointXDist + 0.004f && (num3 + 0.01f < bestEdgeWorldPointXDist || worldPoint.Y + 0.1f > bestEdgeWorldPoint.Y) && this.CheckFixtureLedgeGrabNormals(fixture, ps, i, gravityLineNormal, out num2) && (od.MapObjectID == "LEDGEGRAB" || !this.CheckFixtureLedgeGrabBlocked(this.m_ledgeGrabaabbFixtures, fixture, directionX, worldPoint, gravityLineNormal, gravityLineHNormal)))
										{
											bestEdge = fixture;
											bestEdgeWorldPoint = worldPoint;
											bestEdgeWorldPointXDist = num3;
											vertexIndex = (byte)i;
											vertexNormalIndex = (byte)num2;
											localVertex = vertices[i];
										}
									}
								}
							}
						}
					}
					return true;
				}, ref aabb);
				if (bestEdge != null)
				{
					ConsoleOutput.ShowMessage(ConsoleOutputType.Information, string.Format("Player {0} starting LedgeGrab on {1} ({2}, {3}, {4})", new object[]
					{
						this.ObjectID,
						bestEdge.GetBody().BodyID,
						bestEdge.ID,
						vertexIndex,
						vertexNormalIndex
					}));
					if (this.CurrentAction != PlayerAction.DrawWeapon)
					{
						this.CurrentAction = PlayerAction.Idle;
					}
					this.Sprinting = false;
					this.Climbing = false;
					this.Diving = false;
					this.Rolling = false;
					this.FullLanding = false;
					this.TimeSequence.TimeFullLanding = 0f;
					this.LedgeGrabData.Fixture = bestEdge;
					this.LedgeGrabData.FixtureIndex = bestEdge.TileFixtureIndex;
					this.LedgeGrabData.FixtureShape = (PolygonShape)bestEdge.GetShape();
					this.LedgeGrabData.Body = bestEdge.GetBody();
					BodyData bodyData = BodyData.Read(this.LedgeGrabData.Body);
					this.LedgeGrabData.LastLedgeGrabBodyDataMoveSequence = ((bodyData != null) ? bodyData.MoveSequence : 0);
					this.LedgeGrabData.LocalVertexPoint = localVertex;
					this.LedgeGrabData.VertexIndex = vertexIndex;
					this.LedgeGrabData.VertexNormalIndex = vertexNormalIndex;
					this.LedgeGrabData.ObjectData = ObjectData.Read(bestEdge);
					this.LedgeGrabData.GrabDirectionX = directionX;
					this.LedgeGrabData.LastLedgeGrabBody = this.LedgeGrabData.Body;
					this.LedgeGrabData.LastLedgeGrabLocalVertexPoint = this.LedgeGrabData.LocalVertexPoint;
					this.LedgeGrabData.LastLedgeGrabPosition = this.LedgeGrabData.Body.GetWorldPoint(localVertex);
					this.LedgeGrabUpdateBodyIdsToIgnore();
					if (forceState)
					{
						this.StandingOnGround = false;
						this.StandingOnBody = null;
						this.InAir = true;
						this.Falling = false;
						this.LayingOnGround = false;
						this.CurrentAction = PlayerAction.Idle;
						this.ForceClientMovementState(49);
					}
					Microsoft.Xna.Framework.Vector2 vector = this.WorldBody.GetLinearVelocity();
					float num = this.WorldBody.GetLinearVelocity().Length();
					vector.Normalize();
					if (!vector.IsValid())
					{
						vector = gravityLineNormal;
					}
					float scaleFactor = Math.Min(this.WorldBody.GetMass() * num, this.LedgeGrabData.Body.GetMass() * num);
					this.LedgeGrabData.Body.ApplyForce(vector * scaleFactor, worldCheckPosition);
					this.UpdateLedgeGrabPosition(true, gravityLineNormal);
					this.ImportantUpdate = true;
					this.ForceClientMovementState(15);
				}
			}
		}

		// Token: 0x060039E3 RID: 14819 RVA: 0x000EE4C4 File Offset: 0x000EC6C4
		private HashSet<Fixture> ScanLedgeGrab(Microsoft.Xna.Framework.Vector2 gravityLineNormal)
		{
			HashSet<Fixture> scanResult = new HashSet<Fixture>();
			AABB aabb;
			this.GetAABBLedgeGrab(out aabb, this.WorldBody.GetPosition(), this.LastDirectionX);
			Microsoft.Xna.Framework.Vector2 worldPoint;
			this.WorldBody.GetWorld().QueryAABB(delegate(Fixture fixture)
			{
				if (fixture.GetShape().ShapeType == ShapeType.Polygon)
				{
					PolygonShape polygonShape = (PolygonShape)fixture.GetShape();
					foreach (Microsoft.Xna.Framework.Vector2 localPoint in polygonShape.GetVerticesArray())
					{
						worldPoint = fixture.GetBody().GetWorldPoint(localPoint);
						if (aabb.Contains(ref worldPoint))
						{
							scanResult.Add(fixture);
							break;
						}
					}
				}
				return true;
			}, ref aabb);
			return scanResult;
		}

		// Token: 0x060039E4 RID: 14820 RVA: 0x000EE528 File Offset: 0x000EC728
		private bool CheckFixtureLedgeGrabBlocked(List<Fixture> fixturesToCheck, Fixture checkFixture, int directionX, Microsoft.Xna.Framework.Vector2 worldPoint, Microsoft.Xna.Framework.Vector2 gravityLineNormal, Microsoft.Xna.Framework.Vector2 gravityLineHNormal)
		{
			List<Body> connectedWeldedBodies = checkFixture.GetBody().GetConnectedWeldedBodies();
			float scaleFactor = Converter.WorldToBox2D(2f);
			Box2D.XNA.RayCastInput rayCastInput = default(Box2D.XNA.RayCastInput);
			Box2D.XNA.RayCastInput rayCastInput2 = default(Box2D.XNA.RayCastInput);
			Box2D.XNA.RayCastInput rayCastInput3 = default(Box2D.XNA.RayCastInput);
			Box2D.XNA.RayCastInput rayCastInput4 = default(Box2D.XNA.RayCastInput);
			Box2D.XNA.RayCastInput rayCastInput5 = default(Box2D.XNA.RayCastInput);
			Box2D.XNA.RayCastInput rayCastInput6 = default(Box2D.XNA.RayCastInput);
			float scaleFactor2 = 0.28f;
			rayCastInput.p1 = worldPoint;
			rayCastInput2.p1 = worldPoint;
			rayCastInput3.p1 = worldPoint;
			rayCastInput.p2 = worldPoint;
			rayCastInput2.p2 = worldPoint;
			rayCastInput3.p2 = worldPoint;
			if (directionX == 1)
			{
				rayCastInput.p1 += gravityLineHNormal * 0.08f;
				rayCastInput2.p1 += gravityLineHNormal * 0.08f;
				rayCastInput3.p1 += gravityLineHNormal * 0.08f;
				rayCastInput.p2 -= gravityLineHNormal * scaleFactor2;
				rayCastInput2.p2 -= gravityLineHNormal * scaleFactor2;
				rayCastInput3.p2 -= gravityLineHNormal * scaleFactor2;
			}
			else
			{
				rayCastInput.p1 -= gravityLineHNormal * 0.08f;
				rayCastInput2.p1 -= gravityLineHNormal * 0.08f;
				rayCastInput3.p1 -= gravityLineHNormal * 0.08f;
				rayCastInput.p2 += gravityLineHNormal * scaleFactor2;
				rayCastInput2.p2 += gravityLineHNormal * scaleFactor2;
				rayCastInput3.p2 += gravityLineHNormal * scaleFactor2;
			}
			rayCastInput.p2 -= gravityLineNormal * scaleFactor;
			rayCastInput3.p2 += gravityLineNormal * scaleFactor;
			rayCastInput.maxFraction = 1f;
			rayCastInput2.maxFraction = 1f;
			rayCastInput3.maxFraction = 1f;
			rayCastInput4 = rayCastInput;
			rayCastInput5 = rayCastInput2;
			rayCastInput6 = rayCastInput3;
			if (directionX == 1)
			{
				rayCastInput4.p1 -= gravityLineHNormal * 0.08f * 2f;
				rayCastInput5.p1 -= gravityLineHNormal * 0.08f * 2f;
				rayCastInput6.p1 -= gravityLineHNormal * 0.08f * 2f;
			}
			else
			{
				rayCastInput4.p1 += gravityLineHNormal * 0.08f * 2f;
				rayCastInput5.p1 += gravityLineHNormal * 0.08f * 2f;
				rayCastInput6.p1 += gravityLineHNormal * 0.08f * 2f;
			}
			foreach (Fixture fixture in fixturesToCheck)
			{
				if (fixture != checkFixture)
				{
					bool flag = connectedWeldedBodies != null && connectedWeldedBodies.Contains(fixture.GetBody());
					if (fixture.GetBody().GetType() == Box2D.XNA.BodyType.Static || connectedWeldedBodies == null || flag || fixture.GetBody() == checkFixture.GetBody())
					{
						if (fixture.GetBody().GetType() == Box2D.XNA.BodyType.Dynamic)
						{
							if (fixture.GetBody() != checkFixture.GetBody() && !flag)
							{
								RayCastOutput rayCastOutput;
								if (fixture.TestPoint(rayCastInput4.p1) || fixture.RayCast(out rayCastOutput, ref rayCastInput4))
								{
									return true;
								}
								if (!fixture.TestPoint(rayCastInput6.p1) && !fixture.RayCast(out rayCastOutput, ref rayCastInput6))
								{
									if (!fixture.TestPoint(rayCastInput5.p1))
									{
										if (!fixture.RayCast(out rayCastOutput, ref rayCastInput5))
										{
											continue;
										}
									}
									return true;
								}
								return true;
							}
							else
							{
								RayCastOutput rayCastOutput;
								if (fixture.TestPoint(rayCastInput4.p1) || fixture.RayCast(out rayCastOutput, ref rayCastInput4))
								{
									return true;
								}
								if (!fixture.TestPoint(rayCastInput6.p1) && !fixture.RayCast(out rayCastOutput, ref rayCastInput6))
								{
									if (!fixture.TestPoint(rayCastInput5.p1))
									{
										if (!fixture.RayCast(out rayCastOutput, ref rayCastInput5))
										{
											continue;
										}
									}
									return true;
								}
								return true;
							}
						}
						else
						{
							RayCastOutput rayCastOutput;
							if (fixture.TestPoint(rayCastInput.p1) || fixture.RayCast(out rayCastOutput, ref rayCastInput))
							{
								return true;
							}
							if (fixture.TestPoint(rayCastInput3.p1) || fixture.RayCast(out rayCastOutput, ref rayCastInput3))
							{
								return true;
							}
							if (fixture.TestPoint(rayCastInput2.p1) || fixture.RayCast(out rayCastOutput, ref rayCastInput2))
							{
								return true;
							}
						}
					}
				}
			}
			return false;
		}

		// Token: 0x060039E5 RID: 14821 RVA: 0x000EEA8C File Offset: 0x000ECC8C
		private bool CheckFixtureLedgeGrabNormals(Fixture fixture, PolygonShape ps, int vertexIndex, Microsoft.Xna.Framework.Vector2 gravityLineNormal, out int vertexNormalIndex)
		{
			vertexNormalIndex = -1;
			FixedArray2<Microsoft.Xna.Framework.Vector2> normalsForVertex = ps.GetNormalsForVertex(vertexIndex);
			if (Microsoft.Xna.Framework.Vector2.Dot(normalsForVertex[0], normalsForVertex[1]) < -0.73f)
			{
				return false;
			}
			Microsoft.Xna.Framework.Vector2 value = normalsForVertex[0];
			SFDMath.RotatePosition(ref value, fixture.GetBody().GetAngle(), out value);
			normalsForVertex[0] = value;
			value = normalsForVertex[1];
			SFDMath.RotatePosition(ref value, fixture.GetBody().GetAngle(), out value);
			normalsForVertex[1] = value;
			if (Microsoft.Xna.Framework.Vector2.Dot(gravityLineNormal, normalsForVertex[0]) > Microsoft.Xna.Framework.Vector2.Dot(gravityLineNormal, normalsForVertex[1]))
			{
				vertexNormalIndex = 0;
			}
			else
			{
				vertexNormalIndex = 1;
			}
			Microsoft.Xna.Framework.Vector2 value2 = gravityLineNormal;
			if (this.LastDirectionX == -1)
			{
				SFDMath.RotateVector90CW(ref value2, out value2);
			}
			else
			{
				SFDMath.RotateVector90CCW(ref value2, out value2);
			}
			return Microsoft.Xna.Framework.Vector2.Dot(value2, normalsForVertex[vertexNormalIndex]) >= 0.73f && (!fixture.IsCloud() || Microsoft.Xna.Framework.Vector2.Dot(fixture.GetCloudWorldNormal(), normalsForVertex[vertexNormalIndex]) >= 0.98f);
		}

		// Token: 0x060039E6 RID: 14822 RVA: 0x000EEB9C File Offset: 0x000ECD9C
		public void GetAABBSpecialKickFriendlyBox(out AABB aabb)
		{
			this.GetAABBWhole(out aabb);
			if (this.IsInCoverPosition())
			{
				aabb.upperBound.Y = aabb.upperBound.Y + Converter.ConvertWorldToBox2D(2f);
			}
			aabb.lowerBound.X = aabb.lowerBound.X + Converter.ConvertWorldToBox2D(1.5f);
			aabb.upperBound.X = aabb.upperBound.X - Converter.ConvertWorldToBox2D(1.5f);
		}

		// Token: 0x060039E7 RID: 14823 RVA: 0x0002F8B9 File Offset: 0x0002DAB9
		public void GetAABBWholeMeleeHitbox(out AABB aabb)
		{
			this.GetAABBWhole(out aabb);
			aabb.lowerBound.X = aabb.lowerBound.X + 0.04f;
			aabb.upperBound.X = aabb.upperBound.X - 0.04f;
		}

		// Token: 0x060039E8 RID: 14824 RVA: 0x000EEC0C File Offset: 0x000ECE0C
		public void GetAABBGrabHitbox(out AABB aabb)
		{
			this.GetAABBWholeMeleeHitbox(out aabb);
			if (this.IsDead & this.LayingOnGround)
			{
				aabb.upperBound.Y = aabb.upperBound.Y + 0.16f;
				return;
			}
			if (this.InAir & !this.Falling)
			{
				aabb.lowerBound.Y = aabb.lowerBound.Y + 0.24f;
			}
		}

		// Token: 0x060039E9 RID: 14825 RVA: 0x000EEC70 File Offset: 0x000ECE70
		public void GetAABBMissileHitbox(out AABB aabb)
		{
			this.GetAABBWhole(out aabb);
			if (!this.LayingOnGround)
			{
				aabb.upperBound.Y = aabb.upperBound.Y + 0.12f;
				aabb.upperBound.X = aabb.upperBound.X + 0.04f;
				aabb.lowerBound.X = aabb.lowerBound.X - 0.04f;
			}
		}

		// Token: 0x060039EA RID: 14826 RVA: 0x000EECD4 File Offset: 0x000ECED4
		public void GetAABBWhole(out AABB aabb)
		{
			Microsoft.Xna.Framework.Vector2 position = this.WorldBody.GetPosition();
			float x = 5f;
			float y = 15f;
			float y2 = 5f;
			if (this.RocketRideProjectileWorldID > 0)
			{
				x = 4f;
				y2 = 4f;
				y = 4f;
				aabb.lowerBound = position - Converter.WorldToBox2D(new Microsoft.Xna.Framework.Vector2(x, y2));
				aabb.upperBound = position + Converter.WorldToBox2D(new Microsoft.Xna.Framework.Vector2(x, y));
				return;
			}
			if (this.Crouching | this.Rolling | this.LedgeGrabbing)
			{
				y = 10f;
			}
			else if (this.Diving | this.LayingOnGround)
			{
				y = 4f;
				x = 7.5f;
			}
			else if (this.Falling | this.IsCaughtByPlayer | this.IsGrabbedByPlayer)
			{
				y2 = 7f;
				y = 7f;
				x = 6f;
			}
			else if (this.IsInCoverPosition())
			{
				y = 8f;
			}
			aabb.lowerBound = position - Converter.WorldToBox2D(new Microsoft.Xna.Framework.Vector2(x, y2));
			aabb.upperBound = position + Converter.WorldToBox2D(new Microsoft.Xna.Framework.Vector2(x, y));
		}

		// Token: 0x060039EB RID: 14827 RVA: 0x0002F8F0 File Offset: 0x0002DAF0
		public void GetAABBFeet(out AABB aabb)
		{
			Player.GetAABBFeet(out aabb, this.WorldBody.GetPosition());
		}

		// Token: 0x060039EC RID: 14828 RVA: 0x000EEDF0 File Offset: 0x000ECFF0
		public static void GetAABBFeet(out AABB aabb, Microsoft.Xna.Framework.Vector2 playerBodyPosition)
		{
			float num = Converter.WorldToBox2D(4f);
			aabb.lowerBound = playerBodyPosition - new Microsoft.Xna.Framework.Vector2(num * 0.6f, num * 0.3f);
			aabb.upperBound = playerBodyPosition + new Microsoft.Xna.Framework.Vector2(num * 0.6f, num * 0.3f);
			aabb.lowerBound.Y = aabb.lowerBound.Y - num;
			aabb.upperBound.Y = aabb.upperBound.Y - num;
		}

		// Token: 0x060039ED RID: 14829 RVA: 0x000EEE6C File Offset: 0x000ED06C
		public void GetAABBLedgeGrab(out AABB aabb, Microsoft.Xna.Framework.Vector2 worldBodyPosition, int direction)
		{
			float num = Converter.WorldToBox2D(6f);
			float num2 = Converter.WorldToBox2D(2.2f);
			float num3 = Converter.WorldToBox2D(5.2f);
			aabb.lowerBound = worldBodyPosition + new Microsoft.Xna.Framework.Vector2(num * (float)direction - num2, -num3);
			aabb.upperBound = worldBodyPosition + new Microsoft.Xna.Framework.Vector2(num * (float)direction + num2, num3);
			aabb.upperBound.Y = aabb.upperBound.Y + 0.32f;
			aabb.lowerBound.Y = aabb.lowerBound.Y + 0.32f;
		}

		// Token: 0x060039EE RID: 14830 RVA: 0x000EEEFC File Offset: 0x000ED0FC
		public void GetAABBChargeGrab(out AABB aabb, Microsoft.Xna.Framework.Vector2 worldBodyPosition, int direction)
		{
			float num = Converter.WorldToBox2D(8f);
			float num2 = Converter.WorldToBox2D(2.2f);
			float num3 = Converter.WorldToBox2D(5.2f);
			aabb.lowerBound = worldBodyPosition + new Microsoft.Xna.Framework.Vector2(((direction == -1) ? (num * (float)direction) : 0f) - num2, -num3);
			aabb.upperBound = worldBodyPosition + new Microsoft.Xna.Framework.Vector2(((direction == 1) ? (num * (float)direction) : 0f) + num2, num3);
			aabb.upperBound.Y = aabb.upperBound.Y + 0.32f;
			aabb.lowerBound.Y = aabb.lowerBound.Y + 0.32f;
		}

		// Token: 0x060039EF RID: 14831 RVA: 0x000EEFA0 File Offset: 0x000ED1A0
		public void GetAABBDirection(out AABB aabb, int direction)
		{
			float num = 0.65f;
			float num2 = 2.6f;
			float num3 = 1f;
			if (this.Crouching || this.Rolling)
			{
				num2 = 2f;
			}
			if (this.Diving || this.LayingOnGround)
			{
				num2 = 0.8f;
				num = 0.3f;
				num3 = 1.7f;
			}
			float num4 = Converter.WorldToBox2D(4.5f);
			aabb.lowerBound = this.WorldBody.GetPosition() - new Microsoft.Xna.Framework.Vector2(num4 * 0.6f, num4 * num);
			aabb.upperBound = this.WorldBody.GetPosition() + new Microsoft.Xna.Framework.Vector2(num4 * 0.6f, num4 * num2);
			aabb.lowerBound.X = aabb.lowerBound.X + num4 * (float)direction * num3;
			aabb.upperBound.X = aabb.upperBound.X + num4 * (float)direction * num3;
		}

		// Token: 0x060039F0 RID: 14832 RVA: 0x000EF07C File Offset: 0x000ED27C
		public void GetAABBBulletDeflect(out AABB aabb)
		{
			int lastDirectionX = this.LastDirectionX;
			float num = 14f;
			if (this.Crouching)
			{
				num = 9f;
			}
			aabb.lowerBound = this.WorldBody.GetPosition() - new Microsoft.Xna.Framework.Vector2(0.06f, 0.08f);
			aabb.upperBound = this.WorldBody.GetPosition() + new Microsoft.Xna.Framework.Vector2(0.06f, 0.04f * num);
			aabb.lowerBound.X = aabb.lowerBound.X + 0.04f * (float)lastDirectionX * 5f;
			aabb.upperBound.X = aabb.upperBound.X + 0.04f * (float)lastDirectionX * 5f;
		}

		// Token: 0x060039F1 RID: 14833 RVA: 0x000EF130 File Offset: 0x000ED330
		public void GetAABBBulletDeflectOnAttack(out AABB aabb)
		{
			int lastDirectionX = this.LastDirectionX;
			float num = Converter.WorldToBox2D(this.GetCurrentMeleeWeaponInUse(false).Properties.Range - 4f);
			float num2 = 14f;
			if (this.Crouching)
			{
				num2 = 9f;
			}
			aabb.lowerBound = this.WorldBody.GetPosition() - new Microsoft.Xna.Framework.Vector2(0.06f, 0.08f);
			aabb.upperBound = this.WorldBody.GetPosition() + new Microsoft.Xna.Framework.Vector2(0.06f, 0.04f * num2);
			aabb.lowerBound.X = aabb.lowerBound.X + 0.04f * (float)lastDirectionX * 5f;
			aabb.upperBound.X = aabb.upperBound.X + 0.04f * (float)lastDirectionX * 5f;
			if (lastDirectionX == -1)
			{
				aabb.lowerBound.X = aabb.lowerBound.X - num;
				return;
			}
			aabb.upperBound.X = aabb.upperBound.X + num;
		}

		// Token: 0x060039F2 RID: 14834 RVA: 0x000EF22C File Offset: 0x000ED42C
		public void GetAABBKick(out AABB aabb)
		{
			float num = Converter.WorldToBox2D(4f);
			Microsoft.Xna.Framework.Vector2 kickCenter = this.GetKickCenter();
			aabb.lowerBound = kickCenter - new Microsoft.Xna.Framework.Vector2((num + 0.07f) * 1.2f, num + 0.25f);
			aabb.upperBound = kickCenter + new Microsoft.Xna.Framework.Vector2((num + 0.07f) * 1.2f, num);
		}

		// Token: 0x060039F3 RID: 14835 RVA: 0x000EF290 File Offset: 0x000ED490
		public void GetAABBJumpAttack(out AABB aabb)
		{
			float num = Converter.WorldToBox2D(this.GetCurrentMeleeWeaponInUse(false).Properties.Range - 1.5f);
			float y = Converter.WorldToBox2D(12f);
			aabb.lowerBound = this.WorldBody.GetPosition() - new Microsoft.Xna.Framework.Vector2(num, y);
			aabb.upperBound = this.WorldBody.GetPosition() + new Microsoft.Xna.Framework.Vector2(num, y);
			aabb.lowerBound.X = aabb.lowerBound.X + num * (float)this.LastDirectionX;
			aabb.upperBound.X = aabb.upperBound.X + num * (float)this.LastDirectionX;
			float num2 = Converter.WorldToBox2D(5f);
			aabb.lowerBound.Y = aabb.lowerBound.Y + num2;
			aabb.upperBound.Y = aabb.upperBound.Y + num2;
		}

		// Token: 0x060039F4 RID: 14836 RVA: 0x000EF368 File Offset: 0x000ED568
		public void GetAABBMeleeAttack(out AABB aabb, bool forceFists = false)
		{
			if (this.CurrentAction == PlayerAction.JumpAttack)
			{
				this.GetAABBJumpAttack(out aabb);
				return;
			}
			if (this.CurrentAction != PlayerAction.JumpKick)
			{
				if (this.CurrentAction != PlayerAction.Kick)
				{
					MWeaponProperties mweaponProperties = forceFists ? this.CurrentMeleeFists.Properties : this.GetCurrentMeleeWeaponInUse(false).Properties;
					float num = mweaponProperties.Range;
					float hitboxHeightOffset = mweaponProperties.HitboxHeightOffset;
					num = Converter.WorldToBox2D(num);
					float y = 0.16f;
					aabb.lowerBound = this.WorldBody.GetPosition() - new Microsoft.Xna.Framework.Vector2(num, y);
					aabb.upperBound = this.WorldBody.GetPosition() + new Microsoft.Xna.Framework.Vector2(num, y);
					aabb.lowerBound.X = aabb.lowerBound.X + num * (float)this.LastDirectionX;
					aabb.upperBound.X = aabb.upperBound.X + num * (float)this.LastDirectionX;
					float num2 = 0.04f * (6f + ((!this.Crouching) ? 3f : 0f) + hitboxHeightOffset);
					aabb.lowerBound.Y = aabb.lowerBound.Y + num2;
					aabb.upperBound.Y = aabb.upperBound.Y + num2;
					return;
				}
			}
			this.GetAABBKick(out aabb);
		}

		// Token: 0x060039F5 RID: 14837 RVA: 0x000EF4A0 File Offset: 0x000ED6A0
		public Player.MeleeOverlapStatus CheckAABBMeleeOverlap(Player opponentPlayer, bool useFistRange, float weaponWidthShrink, float xAdjustment, out float meleeRange)
		{
			Player.MeleeOverlapStatus meleeOverlapStatus = Player.MeleeOverlapStatus.None;
			AABB aabb;
			opponentPlayer.GetAABBWholeMeleeHitbox(out aabb);
			AABB aabb2;
			this.GetAABBMeleeAttack(out aabb2, useFistRange);
			aabb2.lowerBound.X = aabb2.lowerBound.X + (xAdjustment + weaponWidthShrink);
			aabb2.upperBound.X = aabb2.upperBound.X + (xAdjustment - weaponWidthShrink);
			meleeRange = aabb2.upperBound.X - aabb2.lowerBound.X;
			bool flag = aabb2.Overlap(ref aabb);
			if (!this.Crouching)
			{
				if (flag)
				{
					meleeOverlapStatus |= Player.MeleeOverlapStatus.Standing;
				}
				aabb2.lowerBound.Y = aabb2.lowerBound.Y - 0.12f;
				aabb2.upperBound.Y = aabb2.upperBound.Y - 0.12f;
				if (aabb2.Overlap(ref aabb))
				{
					meleeOverlapStatus |= Player.MeleeOverlapStatus.Crouching;
				}
			}
			else
			{
				if (flag)
				{
					meleeOverlapStatus |= Player.MeleeOverlapStatus.Crouching;
				}
				aabb2.lowerBound.Y = aabb2.lowerBound.Y + 0.12f;
				aabb2.upperBound.Y = aabb2.upperBound.Y + 0.12f;
				if (aabb2.Overlap(ref aabb))
				{
					meleeOverlapStatus |= Player.MeleeOverlapStatus.Standing;
				}
			}
			return meleeOverlapStatus;
		}

		// Token: 0x060039F6 RID: 14838 RVA: 0x000EF5A8 File Offset: 0x000ED7A8
		public bool CheckAABBKickOverlap(Player opponentPlayer)
		{
			AABB aabb;
			opponentPlayer.GetAABBSpecialKickFriendlyBox(out aabb);
			AABB aabb2;
			this.GetAABBKick(out aabb2);
			return aabb2.Overlap(ref aabb);
		}

		// Token: 0x060039F7 RID: 14839 RVA: 0x0002F903 File Offset: 0x0002DB03
		public bool CanTurnInGrabbing()
		{
			return this.TimeSequence.TimeGrabTurnCooldown <= 0f && (!this.IsPerformingGrabAction | this.GrabTelegraphing | this.IsHoldingPlayerInGrab);
		}

		// Token: 0x060039F8 RID: 14840 RVA: 0x000EF5D4 File Offset: 0x000ED7D4
		public bool CanBeCaughtByDive()
		{
			return (this.CurrentAction != PlayerAction.Disabled || !this.Crouching) && (this.CaughtByPlayerID == 0 && !this.Diving && !this.LayingOnGround && !this.IsRemoved) && this.RocketRideProjectileWorldID <= 0;
		}

		// Token: 0x060039F9 RID: 14841 RVA: 0x000EF624 File Offset: 0x000ED824
		public bool CanBeCaughtByGrab(Player other)
		{
			if (this.CurrentAction == PlayerAction.Disabled && this.Crouching)
			{
				return false;
			}
			if (this.IsDead)
			{
				return this.CaughtByPlayerID == 0 && (!this.LayingOnGround || other.VirtualKeyboard.PressingKey(20, false)) && !this.IsRemoved && this.RocketRideProjectileWorldID <= 0 && !this.InSameTeam(other);
			}
			return !this.GrabImmunity && this.CaughtByPlayerID == 0 && !this.LayingOnGround && !this.IsRemoved && this.RocketRideProjectileWorldID <= 0 && !this.InSameTeam(other);
		}

		// Token: 0x060039FA RID: 14842 RVA: 0x000EF6C0 File Offset: 0x000ED8C0
		public bool CanFireWeapon()
		{
			return !(this.InThrowingMode | this.StrengthBoostPreparing | this.SpeedBoostPreparing) && ((this.FireSequence.WeaponReloadCooldown <= 0f && !this.FireSequence.WeaponOnCooldown && this.FireSequence.MinAutoFireTimer <= 0f) || (this.FireSequence.WeaponBurstMode && this.FireSequence.WeaponBurstCooldown < 0f)) && (!this.Reloading && this.CurrentAction != PlayerAction.DrawWeapon) && (!this.ManualAimStart || this.CurrentAction != PlayerAction.ManualAim);
		}

		// Token: 0x060039FB RID: 14843 RVA: 0x000EF760 File Offset: 0x000ED960
		public bool CanReload()
		{
			return !(this.InThrowingMode | this.StrengthBoostPreparing | this.SpeedBoostPreparing) && !this.FireSequence.WeaponBurstMode && ((this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Handgun || this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle) && !this.Reloading && this.CurrentAction != PlayerAction.Disabled && this.CurrentAction != PlayerAction.DrawWeapon && !this.FireSequence.PerformingPostFire && !this.LedgeGrabbing);
		}

		// Token: 0x060039FC RID: 14844 RVA: 0x000EF7DC File Offset: 0x000ED9DC
		public bool CanActivateSprint()
		{
			return !this.FireSequence.WeaponOnCooldown && this.FireSequence.HipFireEndTimer >= 300f && !(this.Reloading | this.Walking | this.StrengthBoostPreparing | this.SpeedBoostPreparing) && (this.CurrentAction == PlayerAction.Idle && (this.StandingOnGround & !this.Rolling & !this.Diving & !this.Dazed & !this.ForceKneel & !this.Climbing & !this.LedgeGrabbing & !this.ThrowCharging) && this.Energy.Fullness > 0.1f) && (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee || this.CurrentMeleeWeapon == null || this.CurrentMeleeWeapon.Properties.WeaponID != 59 || !this.ExtraMeleeStateChainsawActive);
		}

		// Token: 0x060039FD RID: 14845 RVA: 0x0002F930 File Offset: 0x0002DB30
		public bool CanAttack()
		{
			return !(this.Rolling | this.Diving | this.Climbing | this.LedgeGrabbing | this.ThrowingModeToggleQueued | this.ClimbingClient | this.StrengthBoostPreparing | this.SpeedBoostPreparing);
		}

		// Token: 0x060039FE RID: 14846 RVA: 0x000EF8D0 File Offset: 0x000EDAD0
		public bool CanKeepSprintingOnGround()
		{
			return this.Energy.Fullness > 0f && !this.Reloading && this.CurrentAction != PlayerAction.DrawWeapon && this.CurrentAction != PlayerAction.HipFire && this.CurrentAction != PlayerAction.ManualAim && !this.StrengthBoostPreparing && !this.SpeedBoostPreparing;
		}

		// Token: 0x060039FF RID: 14847 RVA: 0x0002F96E File Offset: 0x0002DB6E
		public bool CanDeathKneel()
		{
			return !(this.LayingOnGround | this.InAir);
		}

		// Token: 0x06003A00 RID: 14848 RVA: 0x0002F982 File Offset: 0x0002DB82
		public bool CanStagger()
		{
			return !(this.LayingOnGround | this.InAir | this.DeathKneeling);
		}

		// Token: 0x06003A01 RID: 14849 RVA: 0x000EF928 File Offset: 0x000EDB28
		public bool CanAim()
		{
			return !(!this.StandingOnGround | this.Diving | this.Rolling | this.Reloading | this.FireSequence.WeaponReloadCooldown > 0f | this.CurrentAction == PlayerAction.Kick) && (this.m_haveTouchedGroundSinceLastInAir && this.StandingOnGroundBox2DStep && !this.StrengthBoostPreparing && !this.SpeedBoostPreparing) && (((this.CurrentAction == PlayerAction.HipFire | this.CurrentAction == PlayerAction.Idle) && (this.InThrowingMode | this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle | this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Handgun)) || this.ThrowCharging || ((this.CurrentAction == PlayerAction.HipFire || this.CurrentAction == PlayerAction.Idle) && !this.TimeSequence.ThrowOnCooldown && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown && (this.CurrentThrownWeapon == null || this.CurrentThrownWeapon.Properties.CanEnterManualAim)));
		}

		// Token: 0x06003A02 RID: 14850 RVA: 0x000EFA28 File Offset: 0x000EDC28
		public bool CanRechargeEnergy()
		{
			return this.IsGrabbedByPlayer || !(this.Disabled | (this.InAir & !this.Climbing & !this.LedgeGrabbing) | this.Rolling | this.Diving | this.CurrentAction == PlayerAction.Block | this.TimeSequence.EnergyRechargeOnCooldown | this.Energy.IsFull | this.PerformingMelee | this.IsPerformingGrabAction | this.IsHoldingPlayerInGrab);
		}

		// Token: 0x06003A03 RID: 14851 RVA: 0x000EFAAC File Offset: 0x000EDCAC
		public float GetRechargeEnergyPerMs()
		{
			float num = 1700f;
			if (this.Movement != PlayerMovement.Idle || (this.Climbing | this.IsGrabbedByPlayer | this.LedgeGrabbing | this.Dazed | this.PerformingMelee | this.CurrentAction == PlayerAction.ManualAim | this.CurrentAction == PlayerAction.HipFire))
			{
				num = 3570f;
			}
			return 100f / num * this.m_modifiers.EnergyRechargeModifier;
		}

		// Token: 0x06003A04 RID: 14852 RVA: 0x000EFB18 File Offset: 0x000EDD18
		public bool CanStartThrowCharge()
		{
			return !this.ThrowableIsActivated && !this.Falling && (this.InThrowingMode || this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown) && !this.Diving && !this.Rolling && !this.TimeSequence.ThrowOnCooldown && !this.StrengthBoostPreparing && !this.SpeedBoostPreparing && (this.CurrentAction == PlayerAction.ManualAim || this.CurrentAction == PlayerAction.Idle);
		}

		// Token: 0x06003A05 RID: 14853 RVA: 0x000EFB8C File Offset: 0x000EDD8C
		public bool CanCrouch()
		{
			return !this.TakingCover && this.StandingOnGround && this.m_haveTouchedGroundSinceLastInAir && this.CurrentAction != PlayerAction.Disabled && !this.Staggering && this.Movement == PlayerMovement.Idle && (this.CurrentAction != PlayerAction.ManualAim && ((this.CurrentAction != PlayerAction.DrawWeapon && !this.Reloading) || !this.VirtualKeyboard.PressingKey(26, false)));
		}

		// Token: 0x06003A06 RID: 14854 RVA: 0x000EFBFC File Offset: 0x000EDDFC
		public bool CanBlock()
		{
			return !this.TimeSequence.BlockOnCooldown && !this.InThrowingMode && !this.StrengthBoostPreparing && !this.SpeedBoostPreparing && (this.CurrentAction == PlayerAction.Idle && !this.Diving && !this.Rolling && (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE || this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee) && !this.Climbing) && !this.ThrowCharging;
		}

		// Token: 0x06003A07 RID: 14855 RVA: 0x000EFC70 File Offset: 0x000EDE70
		public bool CanKick(float timeOffset = 0f)
		{
			return ((this.CurrentAction == PlayerAction.Idle || (this.CurrentAction == PlayerAction.HipFire && this.ThrowableIsActivated)) & !this.Diving & !this.Rolling & !this.Falling & !this.Climbing) && this.PreparingHipFire <= 0f && this.FireSequence.KickCooldownTimer <= 800f + timeOffset && !this.TimeSequence.PostDropClimbAttackCooldown && !this.StrengthBoostPreparing && !this.SpeedBoostPreparing;
		}

		// Token: 0x06003A08 RID: 14856 RVA: 0x000EFD08 File Offset: 0x000EDF08
		public bool CanClimb()
		{
			return !(this.MustStandStill | this.ForceKneel | this.Dazed | this.Diving | this.Rolling | this.Disabled | this.LedgeGrabbing | this.CurrentAction == PlayerAction.ManualAim) && this.CurrentAction != PlayerAction.ThrowThrowing && !this.ThrowCharging && !this.TimeSequence.PostDropClimbAttackCooldown && !this.IsHoldingPlayerInGrab && (!this.Reloading || !this.VirtualKeyboard.PressingKey(26, false));
		}

		// Token: 0x06003A09 RID: 14857 RVA: 0x0002F99D File Offset: 0x0002DB9D
		public bool CanClimbUp()
		{
			return this.m_climbLastLadderTop != null || (this.m_climbLastLadderCloud != null && this.m_climbLastLadderBot != null);
		}

		// Token: 0x06003A0A RID: 14858 RVA: 0x000EFD98 File Offset: 0x000EDF98
		public bool CanUseSyringe()
		{
			return !this.Disabled && (this.CurrentAction == PlayerAction.Idle || this.CurrentAction == PlayerAction.HipFire) && !this.FireSequence.WeaponBurstMode && !this.Diving && !this.Rolling && !this.Reloading && (this.CurrentAction != PlayerAction.HipFire || this.FireSequence.HipFireEndTimer >= 150f);
		}

		// Token: 0x06003A0B RID: 14859 RVA: 0x000EFE04 File Offset: 0x000EE004
		public bool CanJump()
		{
			if (!this.StandingOnGround & !this.Dazed)
			{
				return false;
			}
			if (!this.MustStandStill && !this.ForceKneel && !this.Dazed && !this.DisableJumpWhileHoldingUpKey)
			{
				if (this.CurrentAction != PlayerAction.Disabled)
				{
					return ((this.CurrentAction != PlayerAction.DrawWeapon && !this.Reloading) || !this.VirtualKeyboard.PressingKey(26, false)) && !this.TryingToAim && !(this.RecoveryRolling | this.IsHoldingPlayerInGrab | this.IsHoldingPlayerInDive) && (!this.Rolling || this.CurrentActionTime >= this.MinimumRollTimeBeforeJump) && this.m_haveTouchedGroundSinceLastInAir;
				}
			}
			return false;
		}

		// Token: 0x06003A0C RID: 14860 RVA: 0x000EFEC0 File Offset: 0x000EE0C0
		public bool CanRecoveryRoll()
		{
			return this.CanRecoverFromFall && this.LayingOnGround && !(this.Rolling | this.InAir | this.TimeSequence.RollDisabled | this.RocketRideProjectileWorldID != 0 | this.IsGrabbedByPlayer | this.TimeSequence.StuntOnCooldown) && (this.m_haveTouchedGroundSinceLastInAir & this.StandingOnGround);
		}

		// Token: 0x06003A0D RID: 14861 RVA: 0x000EFF2C File Offset: 0x000EE12C
		public bool CanRoll()
		{
			return !(this.InAir | this.TimeSequence.RollDisabled) && !(this.ThrowCharging | this.IsGrabbing | this.CurrentAction == PlayerAction.ThrowThrowing | this.CurrentAction == PlayerAction.Disabled | this.CurrentAction == PlayerAction.ManualAim | this.TimeSequence.StuntOnCooldown | this.LedgeGrabbing | this.IsGrabbedByPlayer) && ((this.CurrentAction != PlayerAction.MeleeAttack1 && this.CurrentAction != PlayerAction.MeleeAttack2 && this.CurrentAction != PlayerAction.MeleeAttack3 && this.CurrentAction != PlayerAction.Kick && this.CurrentAction != PlayerAction.JumpAttack && this.CurrentAction != PlayerAction.JumpKick) || this.PerformedMeleeHitFrame()) && (this.m_haveTouchedGroundSinceLastInAir & this.StandingOnGround & !this.Rolling & !this.Diving & !this.Sprinting & !this.Dazed & !this.Climbing & !this.FullLanding);
		}

		// Token: 0x06003A0E RID: 14862 RVA: 0x000F002C File Offset: 0x000EE22C
		public bool CanDive()
		{
			return !(this.InAir | this.TimeSequence.StuntOnCooldown | this.TimeSequence.WallDivingOnCooldown | this.LedgeGrabbing | this.IsGrabbedByPlayer) && (this.m_haveTouchedGroundSinceLastInAir & this.StandingOnGround & !this.Rolling & !this.Diving & this.Sprinting & !this.Dazed & !this.Climbing);
		}

		// Token: 0x06003A0F RID: 14863 RVA: 0x0002F9BF File Offset: 0x0002DBBF
		public bool CanQueueThrowingMode()
		{
			if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE)
			{
				return false;
			}
			if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Handgun && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Rifle)
			{
				if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Thrown)
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x06003A10 RID: 14864 RVA: 0x000F00A8 File Offset: 0x000EE2A8
		public bool CanEnterThrowingMode()
		{
			if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.NONE && !this.TimeSequence.ToggleThrowingModeCooldown && !this.Rolling && !this.Climbing && !this.LedgeGrabbing && !this.Diving && !this.ThrowCharging && !this.StrengthBoostPreparing && !this.SpeedBoostPreparing)
			{
				if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Handgun && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Rifle)
				{
					if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Thrown)
					{
						return false;
					}
				}
				return (this.CurrentAction == PlayerAction.Idle || this.CurrentAction == PlayerAction.ManualAim || (this.CurrentAction == PlayerAction.HipFire && this.FireSequence.CanShootInHipFire)) && !this.TimeSequence.DrawWeaponDisabled && !this.ThrowCharging;
			}
			return false;
		}

		// Token: 0x06003A11 RID: 14865 RVA: 0x000F0180 File Offset: 0x000EE380
		public bool CanExitThrowingMode()
		{
			return this.InThrowingMode && !this.TimeSequence.ToggleThrowingModeCooldown && !this.Rolling && !this.Climbing && !this.LedgeGrabbing && !this.Diving && !this.ThrowCharging && !this.StrengthBoostPreparing && !this.SpeedBoostPreparing && (this.CurrentAction == PlayerAction.Idle || this.CurrentAction == PlayerAction.ManualAim);
		}

		// Token: 0x06003A12 RID: 14866 RVA: 0x000F01F0 File Offset: 0x000EE3F0
		public bool CheckDiveVelocityReached()
		{
			if (this.StandingOnBody != null)
			{
				Microsoft.Xna.Framework.Vector2 vector = this.WorldBody.GetLinearVelocity() - this.StandingOnBody.GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition());
				return ((vector.X < 0f && this.LastDirectionX == -1) || (vector.X > 0f && this.LastDirectionX == 1)) && (vector.Length() > 3f || (Math.Abs(vector.X) > 2f & Math.Abs(vector.Y) > 0.5f));
			}
			return true;
		}

		// Token: 0x06003A13 RID: 14867 RVA: 0x000F029C File Offset: 0x000EE49C
		public bool CanDropWeaponItem()
		{
			return !(this.CurrentAction == PlayerAction.Block | this.CurrentAction == PlayerAction.ManualAim | this.CurrentAction == PlayerAction.MeleeAttack1 | this.CurrentAction == PlayerAction.MeleeAttack2 | this.CurrentAction == PlayerAction.MeleeAttack3 | this.CurrentAction == PlayerAction.Kick | this.CurrentAction == PlayerAction.JumpAttack | this.CurrentAction == PlayerAction.JumpKick | this.CurrentAction == PlayerAction.Disabled | this.ThrowCharging | this.CurrentAction == PlayerAction.ThrowThrowing | this.TimeSequence.TimeForceLayOnGroundTimer > 0f | this.TimeSequence.TimeForceCrouchDuringRiseTimer > 0f) && !(this.Staggering | this.MeleeHit | this.Climbing | this.DeathKneeling);
		}

		// Token: 0x06003A14 RID: 14868 RVA: 0x0002F9F5 File Offset: 0x0002DBF5
		public bool CanDropThrowCharge()
		{
			return this.ThrowCharging & this.CurrentAction != PlayerAction.ThrowThrowing;
		}

		// Token: 0x06003A15 RID: 14869 RVA: 0x000F0364 File Offset: 0x000EE564
		public bool CanGoDownThroughCloud()
		{
			return !(!this.StandingOnGround | this.CurrentAction == PlayerAction.Disabled | this.CurrentAction == PlayerAction.ManualAim | this.Climbing) && !(this.Staggering | this.MeleeHit | this.DeathKneeling);
		}

		// Token: 0x06003A16 RID: 14870 RVA: 0x000F03B4 File Offset: 0x000EE5B4
		public bool IsInCoverPosition()
		{
			if (this.TakingCover)
			{
				if (this.ThrowCharging && this.CurrentAction == PlayerAction.HipFire)
				{
					return true;
				}
				if (this.CurrentAction != PlayerAction.ThrowThrowing && this.CurrentAction != PlayerAction.HipFire && this.CurrentAction != PlayerAction.ManualAim)
				{
					return true;
				}
				if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown && this.CurrentThrownWeapon != null && this.CurrentThrownWeapon.Properties.WeaponID == 43)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06003A17 RID: 14871 RVA: 0x000F0424 File Offset: 0x000EE624
		public bool CheckCanTakeCover(int direction)
		{
			ObjectData coverObject = null;
			bool coverObjectCanShootThrough = false;
			bool result = this.CheckCanTakeCover(this.Position, direction, out coverObject, out coverObjectCanShootThrough);
			this.m_coverObject = coverObject;
			this.m_coverObjectCanShootThrough = coverObjectCanShootThrough;
			return result;
		}

		// Token: 0x06003A18 RID: 14872 RVA: 0x000F0458 File Offset: 0x000EE658
		public bool CheckCanTakeCover(Microsoft.Xna.Framework.Vector2 worldPosition, int direction, out ObjectData coverObjectData, out bool coverObjectCanShootThrough)
		{
			coverObjectData = null;
			coverObjectCanShootThrough = false;
			if (this.InAir || this.IsUsingChainsaw)
			{
				return false;
			}
			bool flag = this.CurrentAction == PlayerAction.Idle || this.CurrentAction == PlayerAction.HipFire || this.CurrentAction == PlayerAction.DrawWeapon || this.m_currentAction == PlayerAction.ManualAim;
			if (this.TakingCover)
			{
				flag = (flag || this.m_currentAction == PlayerAction.DrawWeapon || this.m_currentAction == PlayerAction.HipFire || this.CurrentAction == PlayerAction.ThrowThrowing);
			}
			if (!flag)
			{
				return false;
			}
			ObjectData coverObject = null;
			Microsoft.Xna.Framework.Vector2 worldCoordinate = worldPosition - this.Position;
			AABB aabb;
			this.GetAABBWhole(out aabb);
			aabb.Grow(Converter.ConvertWorldToBox2D(1f));
			aabb.Move(Converter.ConvertWorldToBox2D(worldCoordinate));
			bool coverExist = false;
			float coverFraction = 9f;
			this.m_rayCastInputs[0].p1 = Converter.WorldToBox2D(worldPosition + new Microsoft.Xna.Framework.Vector2(0f, 10f));
			this.m_rayCastInputs[0].p2 = Converter.WorldToBox2D(worldPosition + new Microsoft.Xna.Framework.Vector2((float)direction * 7f, 10f));
			bool freeAim = true;
			this.m_rayCastInputs[1].p1 = Converter.WorldToBox2D(worldPosition + new Microsoft.Xna.Framework.Vector2(0f, 18f));
			this.m_rayCastInputs[1].p2 = Converter.WorldToBox2D(worldPosition + new Microsoft.Xna.Framework.Vector2((float)direction * 9f, 18f));
			this.WorldBody.GetWorld().QueryAABB(delegate(Fixture fixture)
			{
				ObjectData objectData;
				if (this.CheckCollisionFixture(fixture, out objectData, 0f, true) || (objectData != null && objectData.BotAIForceRegisterCoverCollision))
				{
					RayCastOutput rayCastOutput;
					if (fixture.RayCast(out rayCastOutput, ref this.m_rayCastInputs[0]) && rayCastOutput.fraction < coverFraction)
					{
						coverFraction = rayCastOutput.fraction;
						coverObject = objectData;
						coverExist = true;
					}
					if ((fixture.TestPoint(this.m_rayCastInputs[1].p1) && fixture.TestPoint(this.m_rayCastInputs[1].p2)) || fixture.RayCast(out rayCastOutput, ref this.m_rayCastInputs[1]))
					{
						freeAim = false;
					}
				}
				return freeAim;
			}, ref aabb);
			if (!this.CheckCoverObjectValid(coverObject))
			{
				return false;
			}
			if (!freeAim)
			{
				return false;
			}
			coverObjectData = coverObject;
			coverObjectCanShootThrough = this.CheckCoverObjectCanShootThrough(coverObjectData);
			return coverExist && freeAim;
		}

		// Token: 0x06003A19 RID: 14873 RVA: 0x0002FA10 File Offset: 0x0002DC10
		private bool CheckCoverObjectValid(ObjectData coverObject)
		{
			return coverObject != null && !Player.m_invalidCovers.Contains(coverObject.MapObjectID);
		}

		// Token: 0x06003A1A RID: 14874 RVA: 0x000F064C File Offset: 0x000EE84C
		private bool CheckCoverObjectCanShootThrough(ObjectData coverObject)
		{
			if (coverObject == null)
			{
				return false;
			}
			if (Player.m_validCanShootThroughCovers.Contains(coverObject.MapObjectID))
			{
				return true;
			}
			AABB aabb = default(AABB);
			Transform transform = default(Transform);
			transform.SetIdentity();
			Fixture fixture5 = null;
			for (Fixture fixture2 = coverObject.Body.GetFixtureList(); fixture2 != null; fixture2 = fixture2.GetNext())
			{
				Shape shape = fixture2.GetShape();
				float radius = shape._radius;
				if (shape.ShapeType == ShapeType.Polygon)
				{
					shape._radius = 0f;
				}
				AABB aabb2;
				shape.ComputeAABB(out aabb2, ref transform);
				if (fixture5 == null)
				{
					aabb = aabb2;
				}
				else
				{
					aabb.Combine(ref aabb, ref aabb2);
				}
				shape._radius = radius;
				fixture5 = fixture2;
			}
			if (aabb.Width <= 0.79999995f && aabb.Height <= 0.79999995f)
			{
				if (coverObject.Body.GetType() == Box2D.XNA.BodyType.Static)
				{
					Box2D.XNA.RayCastInput rci;
					rci.maxFraction = 1f;
					rci.p2 = coverObject.Body.GetPosition();
					rci.p1 = rci.p2 + Microsoft.Xna.Framework.Vector2.UnitX * (float)this.LastDirectionX * 0.04f * 21f;
					float num = 1f;
					Microsoft.Xna.Framework.Vector2 zero = Microsoft.Xna.Framework.Vector2.Zero;
					RayCastOutput rco;
					for (Fixture fixture3 = coverObject.Body.GetFixtureList(); fixture3 != null; fixture3 = fixture3.GetNext())
					{
						if (fixture3.RayCast(out rco, ref rci) && rco.fraction < num)
						{
							num = rco.fraction;
						}
					}
					rci.p1 = rci.GetHitPosition(num) + Microsoft.Xna.Framework.Vector2.UnitX * -(float)this.LastDirectionX * 0.04f * 1f;
					rci.p2 = rci.p1 + Microsoft.Xna.Framework.Vector2.UnitX * (float)this.LastDirectionX * 0.04f * 2.5f;
					if (this.m_lastCoverObjectStaticNeighbour != null && !this.m_lastCoverObjectStaticNeighbour.IsDisposed && this.m_lastCoverObjectStaticNeighbour.Body.GetType() == Box2D.XNA.BodyType.Static)
					{
						for (Fixture fixture4 = this.m_lastCoverObjectStaticNeighbour.Body.GetFixtureList(); fixture4 != null; fixture4 = fixture4.GetNext())
						{
							Filter filter;
							fixture4.GetFilterData(out filter);
							if (Settings.b2ShouldCollide(ref this.m_playerFilterCollision, ref filter) && fixture4.RayCast(out rco, ref rci))
							{
								return false;
							}
						}
					}
					this.m_lastCoverObjectStaticNeighbour = null;
					bool freeSpace = true;
					AABB.Create(out aabb, rci.p1, rci.p2, 0.04f);
					this.WorldBody.GetWorld().QueryAABB(delegate(Fixture fixture)
					{
						ObjectData objectData;
						if (fixture != null && fixture.GetBody().GetType() == Box2D.XNA.BodyType.Static && this.CheckCollisionFixture(fixture, out objectData, 0f, true) && !objectData.Destructable && fixture.RayCast(out rco, ref rci))
						{
							freeSpace = false;
							this.m_lastCoverObjectStaticNeighbour = objectData;
							return false;
						}
						return true;
					}, ref aabb);
					if (!freeSpace)
					{
						return false;
					}
				}
				return true;
			}
			return false;
		}

		// Token: 0x17000960 RID: 2400
		// (get) Token: 0x06003A1B RID: 14875 RVA: 0x0002FA2C File Offset: 0x0002DC2C
		public ObjectData CoverObject
		{
			get
			{
				return this.m_coverObject;
			}
		}

		// Token: 0x17000961 RID: 2401
		// (get) Token: 0x06003A1C RID: 14876 RVA: 0x0002FA34 File Offset: 0x0002DC34
		public bool CoverObjectCanShootThrough
		{
			get
			{
				return this.m_coverObjectCanShootThrough;
			}
		}

		// Token: 0x06003A1D RID: 14877 RVA: 0x000F0964 File Offset: 0x000EEB64
		public void UpdateCoverObject(int objectID, byte checkCanShootThrough)
		{
			if (this.TakingCover)
			{
				if (objectID == 0)
				{
					this.m_coverObject = null;
					this.m_coverObjectCanShootThrough = false;
					return;
				}
				if (this.m_coverObject == null || this.m_coverObject.ObjectID != objectID)
				{
					this.m_coverObject = this.GameWorld.GetObjectDataByID(objectID);
					switch (checkCanShootThrough)
					{
					case 0:
						this.m_coverObjectCanShootThrough = false;
						return;
					case 1:
						this.m_coverObjectCanShootThrough = true;
						return;
					default:
						this.m_coverObjectCanShootThrough = this.CheckCoverObjectCanShootThrough(this.m_coverObject);
						return;
					}
				}
			}
			else
			{
				this.m_coverObject = null;
				this.m_coverObjectCanShootThrough = false;
			}
		}

		// Token: 0x06003A1E RID: 14878 RVA: 0x000F09F4 File Offset: 0x000EEBF4
		private void CheckInitiateGrabbing()
		{
			if (this.VirtualKeyboard.KeysPressed[24] && this.VirtualKeyboard.KeysPressed[5] && this.VirtualKeyboard.KeysPressed[4] && Math.Abs(this.VirtualKeyboard.KeysPressedTimes[4] - this.VirtualKeyboard.KeysPressedTimes[5]) <= 0.025f && this.CanInitiateGrab())
			{
				this.TimeSequence.GrabCheckInitiateTimer = 200f;
				this.TimeSequence.GrabCheckDirection = this.LastDirectionX;
			}
		}

		// Token: 0x17000962 RID: 2402
		// (get) Token: 0x06003A1F RID: 14879 RVA: 0x0002FA3C File Offset: 0x0002DC3C
		// (set) Token: 0x06003A20 RID: 14880 RVA: 0x0002FA76 File Offset: 0x0002DC76
		internal PlayerMovement VirtualKeyboardLastMovement
		{
			get
			{
				if (this.m_virtualKeyboardLastMovement == PlayerMovement.Right && this.VirtualKeyboard.MovementKeyFlipped == 3)
				{
					return PlayerMovement.Left;
				}
				if (this.m_virtualKeyboardLastMovement == PlayerMovement.Left && this.VirtualKeyboard.MovementKeyFlipped == 2)
				{
					return PlayerMovement.Right;
				}
				return this.m_virtualKeyboardLastMovement;
			}
			set
			{
				this.m_virtualKeyboardLastMovement = value;
			}
		}

		// Token: 0x17000963 RID: 2403
		// (get) Token: 0x06003A21 RID: 14881 RVA: 0x0002FA7F File Offset: 0x0002DC7F
		// (set) Token: 0x06003A22 RID: 14882 RVA: 0x0002FA87 File Offset: 0x0002DC87
		internal PlayerMovement VirtualKeyboardPreviouslyDirectionTriggerSprintMovement { get; set; }

		// Token: 0x06003A23 RID: 14883 RVA: 0x000F0A80 File Offset: 0x000EEC80
		internal void PressAllVirtualKeysCurrentlyPhysicallyPressed()
		{
			GameUser gameUser = this.GetGameUser();
			if (gameUser != null && gameUser.HasLocalControl)
			{
				VirtualKeyboard.VirtualKeyCollection keyCollection = SFD.GameKeyboard.VirtualKeyboard.GetKeyCollection(gameUser.LocalUserIndex + 1);
				if (keyCollection.InputType == 0)
				{
					foreach (int num in VIRTUAL_KEY.PLAYER_VIRTUAL_KEYS)
					{
						SFD.GameKeyboard.VirtualKey virtualKey = keyCollection.GetVirtualKey(num);
						Keys keys = (Keys)((virtualKey != null) ? virtualKey.PhysicalKeyValue : 0);
						if (keys != Keys.None && SFD.Input.Keyboard.IsKeyDown(keys))
						{
							this.HandlePlayerKeyUpdate(num, true, Player.PlayerInputType.Forced, false);
							if (this.GameOwner == GameOwnerEnum.Client)
							{
								this.m_game.Client.SendKeyEvent(this, num, VIRTUAL_KEY_EVENT.Pressed, this.VirtualKeyboard.KeysSuppressed[num]);
							}
						}
					}
				}
			}
			this.HandlePlayerKeyHoldingPreUpdateEvent();
			this.HandlePlayerKeyHoldingPostUpdateEvent();
		}

		// Token: 0x06003A24 RID: 14884 RVA: 0x000F0B40 File Offset: 0x000EED40
		internal void ReleaseAllVirtualKeys()
		{
			this.AimAngle = 0f;
			this.AimSpeed = 0f;
			this.m_keyActionsNew.Clear();
			this.m_keyActionsOld.Clear();
			if (this.GameOwner == GameOwnerEnum.Client && !this.HasLocalControl)
			{
				for (int i = 0; i < this.VirtualKeyboard.KeysPressed.Length; i++)
				{
					if (this.VirtualKeyboard.KeysPressed[i])
					{
						this.VirtualKeyboard.KeysPressed[i] = false;
						this.TimeSequence.DisableQueuedKey(i);
					}
				}
			}
			else
			{
				for (int j = 0; j < this.VirtualKeyboard.KeysPressed.Length; j++)
				{
					this.HandlePlayerKeyUpdate(j, false, Player.PlayerInputType.Forced, false);
					this.TimeSequence.DisableQueuedKey(j);
				}
			}
			this.HandlePlayerKeyHoldingPreUpdateEvent();
			this.HandlePlayerKeyHoldingPostUpdateEvent();
		}

		// Token: 0x06003A25 RID: 14885 RVA: 0x000F0C08 File Offset: 0x000EEE08
		private void UpdateVirtualKeyboardLastMovement()
		{
			if (this.GameOwner != GameOwnerEnum.Client || (this.HasLocalControl && this.IsInputEnabled))
			{
				if (!this.VirtualKeyboard.PressingKey(2, true) & !this.VirtualKeyboard.PressingKey(3, true))
				{
					this.VirtualKeyboardLastMovement = PlayerMovement.Idle;
					return;
				}
				if (this.VirtualKeyboard.PressingKey(2, true) & !this.VirtualKeyboard.PressingKey(3, true))
				{
					this.VirtualKeyboardLastMovement = PlayerMovement.Left;
					return;
				}
				if (!this.VirtualKeyboard.PressingKey(2, true) & this.VirtualKeyboard.PressingKey(3, true))
				{
					this.VirtualKeyboardLastMovement = PlayerMovement.Right;
				}
			}
		}

		// Token: 0x06003A26 RID: 14886 RVA: 0x000F0CAC File Offset: 0x000EEEAC
		internal List<SFD.GameKeyboard.VirtualKey> HandlePhysicalKeyEvent(Keys key, VIRTUAL_KEY_EVENT keyEvent, int playerIndex)
		{
			VirtualKeyboard.VirtualKeyCollection keyCollection = SFD.GameKeyboard.VirtualKeyboard.GetKeyCollection(playerIndex);
			if (keyCollection.InputType == 0)
			{
				if (playerIndex == 1 && key != Keys.Escape)
				{
					SFD.GameKeyboard.VirtualKeyboard.PLAYER_1_LAST_INPUT_MODE = 0;
				}
				if (this.IsInputEnabled)
				{
					List<SFD.GameKeyboard.VirtualKey> list = keyCollection.TranslateKey((int)key);
					if (list.Count > 0)
					{
						this.HandleVirtualKeyEvents(list, keyEvent, keyCollection.Key_DoubleTapSprintEnabled, keyCollection.Key_ADGrabEnabled, keyCollection.Key_JumpClimbSeparateActions);
					}
					return list;
				}
			}
			return null;
		}

		// Token: 0x06003A27 RID: 14887 RVA: 0x000F0D10 File Offset: 0x000EEF10
		internal List<SFD.GameKeyboard.VirtualKey> HandleGamePadCodeEvent(GamePadCode gamePadCode, VIRTUAL_KEY_EVENT keyEvent, int gamePadIndex, int playerIndex)
		{
			VirtualKeyboard.VirtualKeyCollection keyCollection = SFD.GameKeyboard.VirtualKeyboard.GetKeyCollection(playerIndex);
			if (keyCollection.InputType == gamePadIndex + 1)
			{
				if (playerIndex == 1)
				{
					SFD.GameKeyboard.VirtualKeyboard.PLAYER_1_LAST_INPUT_MODE = 1;
				}
				if (this.IsInputEnabled)
				{
					List<SFD.GameKeyboard.VirtualKey> list = keyCollection.TranslateGamePad(gamePadCode.ButtonNr);
					if (list.Count > 0)
					{
						this.HandleVirtualKeyEvents(list, keyEvent, keyCollection.GamePad_DoubleTapSprintEnabled, keyCollection.GamePad_ADGrabEnabled, keyCollection.GamePad_JumpClimbSeparateActions);
					}
					return list;
				}
			}
			else if (playerIndex == 1 && Constants.KB_REDIRECT_UNUSED_CONTROLLERS_TO_P1)
			{
				bool flag = false;
				for (int i = 0; i < this.GameWorld.LocalGameUsers.Length; i++)
				{
					GameUser gameUser = this.GameWorld.LocalGameUsers[i];
					if (gameUser != null && gameUser.LocalUserIndex + 1 != playerIndex)
					{
						VirtualKeyboard.VirtualKeyCollection keyCollection2 = SFD.GameKeyboard.VirtualKeyboard.GetKeyCollection(gameUser.LocalUserIndex + 1);
						if (keyCollection2 != null && keyCollection2.InputType - 1 == gamePadIndex)
						{
							flag = true;
							IL_D4:
							if (flag)
							{
								goto IL_120;
							}
							if (playerIndex == 1)
							{
								SFD.GameKeyboard.VirtualKeyboard.PLAYER_1_LAST_INPUT_MODE = 1;
							}
							if (this.IsInputEnabled)
							{
								List<SFD.GameKeyboard.VirtualKey> list2 = keyCollection.TranslateGamePad(gamePadCode.ButtonNr);
								if (list2.Count > 0)
								{
									this.HandleVirtualKeyEvents(list2, keyEvent, keyCollection.GamePad_DoubleTapSprintEnabled, keyCollection.GamePad_ADGrabEnabled, keyCollection.GamePad_JumpClimbSeparateActions);
								}
								return list2;
							}
							goto IL_120;
						}
					}
				}
				goto IL_D4;
			}
			IL_120:
			return null;
		}

		// Token: 0x06003A28 RID: 14888 RVA: 0x000F0E40 File Offset: 0x000EF040
		private void HandleVirtualKeyEvents(List<SFD.GameKeyboard.VirtualKey> virtualKeys, VIRTUAL_KEY_EVENT keyEvent, bool doubleTapSprintEnabled, bool adGrabEnabled, bool jumpClimbSeparateActions)
		{
			this.VirtualKeyboard.KeysPressed[23] = doubleTapSprintEnabled;
			this.VirtualKeyboard.KeysPressed[24] = adGrabEnabled;
			this.VirtualKeyboard.KeysPressed[25] = jumpClimbSeparateActions;
			foreach (SFD.GameKeyboard.VirtualKey virtualKey in virtualKeys)
			{
				this.HandlePlayerKeyUpdate(virtualKey.VirtualKeyValue, keyEvent != VIRTUAL_KEY_EVENT.Released, Player.PlayerInputType.ByRules, false);
			}
		}

		// Token: 0x06003A29 RID: 14889 RVA: 0x000F0ECC File Offset: 0x000EF0CC
		internal void HandlePlayerKeyUpdate(int virtualKey, bool keyIsPressed, Player.PlayerInputType playerInputType = Player.PlayerInputType.ByRules, bool keyIsSuppressed = false)
		{
			if (this.IsRemoved)
			{
				return;
			}
			if (playerInputType == Player.PlayerInputType.ByRules && !this.IsInputEnabled)
			{
				return;
			}
			bool flag = false;
			if (this.VirtualKeyboard.MovementFlipped && (virtualKey == 2 || virtualKey == 3))
			{
				flag = true;
			}
			flag = (flag || keyIsSuppressed);
			if (keyIsPressed & !this.IsDead)
			{
				GameUser gameUser = this.GetGameUser();
				if (gameUser != null)
				{
					gameUser.AFKWarningShown = false;
					gameUser.AFKHasMadeAction = true;
					gameUser.AFKTotalTime = -60000f;
				}
			}
			bool flag2 = this.VirtualKeyboard.PressingKey(virtualKey, false);
			this.VirtualKeyboard.KeysPressed[virtualKey] = keyIsPressed;
			this.VirtualKeyboard.KeysSuppressed[virtualKey] = keyIsSuppressed;
			if (!flag2 && keyIsPressed)
			{
				this.VirtualKeyboard.KeysPressedTimes[virtualKey] = (float)NetTime.Now;
				if (!flag)
				{
					if (((virtualKey == 5 && this.CurrentWeaponDrawnIsMeleeType) | (virtualKey == 26 && !this.CurrentWeaponDrawnIsMeleeType) | virtualKey == 4 | (virtualKey == 22 && this.CurrentWeaponDrawnIsMeleeType)) && !this.StartupInputDisabled)
					{
						this.TimeSequence.QueueKeyTime(virtualKey, 150f);
						if ((virtualKey == 5 | virtualKey == 26) && (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee || this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE))
						{
							this.TimeSequence.DisableQueuedKey(new int[]
							{
								4,
								22
							});
						}
					}
					this.HandlePlayerKeyEvent(virtualKey, VIRTUAL_KEY_EVENT.Pressed, playerInputType, true);
					return;
				}
			}
			else if ((flag2 & !keyIsPressed) && !flag)
			{
				this.HandlePlayerKeyEvent(virtualKey, VIRTUAL_KEY_EVENT.Released, playerInputType, true);
			}
		}

		// Token: 0x06003A2A RID: 14890 RVA: 0x0002FA90 File Offset: 0x0002DC90
		internal bool CheckInputEnabled(Player.PlayerInputType playerInputType)
		{
			return !this.StartupInputDisabled && (playerInputType != Player.PlayerInputType.ByRules || (this.InputMode != PlayerInputMode.Disabled && this.InputMode != PlayerInputMode.ReadOnly)) && (this.GameWorld.SetLocalPlayerVirtualInput <= 0 || !this.IsLocal);
		}

		// Token: 0x17000964 RID: 2404
		// (get) Token: 0x06003A2B RID: 14891 RVA: 0x0002FACB File Offset: 0x0002DCCB
		internal bool StartupInputDisabled
		{
			get
			{
				return !this.GameWorld.StartupSequenceOver;
			}
		}

		// Token: 0x06003A2C RID: 14892 RVA: 0x000F103C File Offset: 0x000EF23C
		internal void HandlePlayerKeyEvent(int virtualKey, VIRTUAL_KEY_EVENT keyEvent, Player.PlayerInputType playerInputType, bool registerToScriptAPIInputEvents = true)
		{
			if ((this.GameOwner == GameOwnerEnum.Client && !this.HasLocalControl) || this.IsRemoved)
			{
				return;
			}
			if (this.GameOwner != GameOwnerEnum.Client && this.GameWorld.ScriptCallbackExists_PlayerKeyInput && registerToScriptAPIInputEvents && (keyEvent == VIRTUAL_KEY_EVENT.Pressed || keyEvent == VIRTUAL_KEY_EVENT.Released))
			{
				if (this.PlayerKeyInputEvents == null)
				{
					this.PlayerKeyInputEvents = new List<VirtualKeyInfo>();
				}
				this.PlayerKeyInputEvents.Add(new VirtualKeyInfo((SFDGameScriptInterface.VirtualKey)virtualKey, (VirtualKeyEvent)keyEvent));
			}
			if (!this.CheckInputEnabled(playerInputType))
			{
				return;
			}
			if (keyEvent == VIRTUAL_KEY_EVENT.Pressed)
			{
				this.HandlePlayerKeyPressedEvent(virtualKey, keyEvent);
			}
			if (keyEvent == VIRTUAL_KEY_EVENT.Holding)
			{
				this.HandlePlayerKeyHoldingPreUpdateEvent();
			}
			if (keyEvent == VIRTUAL_KEY_EVENT.Released)
			{
				this.HandlePlayerKeyReleasedEvent(virtualKey, keyEvent);
			}
		}

		// Token: 0x06003A2D RID: 14893 RVA: 0x000F10D8 File Offset: 0x000EF2D8
		internal void HandlePlayerKeyReleasedEvent(int virtualKey, VIRTUAL_KEY_EVENT keyEvent)
		{
			if (this.GameOwner == GameOwnerEnum.Client && !this.HasLocalControl)
			{
				this.UpdateVirtualKeyboardLastMovement();
				return;
			}
			if (this.CurrentAction == PlayerAction.Disabled)
			{
				return;
			}
			if (this.IsRemoved)
			{
				return;
			}
			bool flag;
			bool flag2;
			this.GetPlayerKeyActions(out flag, out flag2);
			if (!flag && !flag2)
			{
				return;
			}
			if (keyEvent == VIRTUAL_KEY_EVENT.Released)
			{
				switch (virtualKey)
				{
				case 2:
				case 3:
					if (flag)
					{
						if (this.Movement != PlayerMovement.Idle)
						{
							this.TimeSequence.TimeTriggerSprint = 180f;
						}
						this.UpdateVirtualKeyboardLastMovement();
						return;
					}
					break;
				case 4:
					if (flag2)
					{
						if (!this.DisableFireWhileHoldingAttackKey && this.AutoReloadWeapon)
						{
							this.StartReloadWeapon();
						}
						this.DisableFireWhileHoldingAttackKey = false;
						if (this.ThrowCharging & !this.LedgeGrabbing)
						{
							this.BeginThrow();
							return;
						}
					}
					break;
				default:
					switch (virtualKey)
					{
					case 17:
						if (flag2)
						{
							float num = (float)((NetTime.Now - this.m_pressTimeKeyInput_K_DROP) * 1000.0);
							if (num < 400f)
							{
								this.HandlePlayerKeyDropTapped();
							}
						}
						break;
					case 18:
						if (flag)
						{
							this.TimeSequence.TimeTriggerSprint = 0f;
							this.Sprinting = false;
							return;
						}
						break;
					default:
						return;
					}
					break;
				}
			}
		}

		// Token: 0x06003A2E RID: 14894 RVA: 0x000F11FC File Offset: 0x000EF3FC
		private bool HandlePlayerKeyDropHold()
		{
			if (this.CanDropWeaponItem())
			{
				this.DropWeaponItemShort(this.CurrentWeaponDrawn, false);
				this.InThrowingMode = false;
			}
			else if (this.CanDropThrowCharge())
			{
				this.DropThrowable(this.AirControlBaseVelocity + new Microsoft.Xna.Framework.Vector2((float)this.LastDirectionX * 3f, 3f));
			}
			return true;
		}

		// Token: 0x06003A2F RID: 14895 RVA: 0x000F125C File Offset: 0x000EF45C
		private bool HandlePlayerKeyDropTapped()
		{
			if (!this.InThrowingMode)
			{
				if (this.CanEnterThrowingMode())
				{
					this.EnterThrowingMode();
					return true;
				}
				if (this.CanQueueThrowingMode())
				{
					this.ThrowingModeToggleQueued = true;
				}
			}
			else
			{
				if (this.CanExitThrowingMode())
				{
					this.ExitThrowingMode();
					return true;
				}
				if (this.CanQueueThrowingMode())
				{
					this.ThrowingModeToggleQueued = true;
				}
			}
			return false;
		}

		// Token: 0x06003A30 RID: 14896 RVA: 0x000F12B4 File Offset: 0x000EF4B4
		internal void HandlePlayerKeyHoldingPreUpdateEvent()
		{
			this.UpdateVirtualKeyboardLastMovement();
			if (this.IsRemoved)
			{
				return;
			}
			if (!this.StartupInputDisabled)
			{
				if (this.InputMode != PlayerInputMode.ReadOnly)
				{
					bool flag;
					bool flag2;
					this.GetPlayerKeyActions(out flag, out flag2);
					if (!flag & !flag2)
					{
						return;
					}
					this.CurrentTargetSpeed.Y = 0f;
					if (this.RollLockMovement && ((this.CurrentAction == PlayerAction.Disabled | this.CurrentAction == PlayerAction.Grabbing) || !this.VirtualKeyboard.PressingKey(20, true) || (!this.VirtualKeyboard.PressingKey(2, true) && !this.VirtualKeyboard.PressingKey(3, true))))
					{
						this.RollLockMovement = false;
					}
					if (this.GameOwner == GameOwnerEnum.Client && !this.HasLocalControl)
					{
						this.UpdateVirtualKeyboardLastMovement();
						return;
					}
					if (!this.Rolling & this.RollLockMovement)
					{
						this.Movement = PlayerMovement.Idle;
						this.VirtualKeyboardLastMovement = PlayerMovement.Idle;
					}
					if (flag2)
					{
						for (int i = 0; i < this.TimeSequence.QueuedKeyTimes.Length; i++)
						{
							if (this.TimeSequence.IsKeyQueued(i))
							{
								this.HandlePlayerKeyEvent(i, VIRTUAL_KEY_EVENT.Pressed, Player.PlayerInputType.ByRules, false);
							}
						}
						if (this.m_trackTimeKeyInput_K_DROP)
						{
							if (this.VirtualKeyboard.PressingKey(17, true))
							{
								float num = (float)((NetTime.Now - this.m_pressTimeKeyInput_K_DROP) * 1000.0);
								if (num >= 400f && this.HandlePlayerKeyDropHold())
								{
									this.m_trackTimeKeyInput_K_DROP = false;
								}
							}
							else
							{
								this.m_trackTimeKeyInput_K_DROP = false;
							}
						}
					}
					if (this.VirtualKeyboard.PressingKey(21, true))
					{
						this.Walking = true;
						this.Sprinting = false;
					}
					else
					{
						this.Walking = false;
					}
					if (this.LedgeGrabbing && this.VirtualKeyboard.PressingKey(20, true))
					{
						this.LedgeGrabDisableGrabbingCurrentLedges();
						this.ClearLedgeGrab();
					}
					if (this.CurrentAction == PlayerAction.Disabled || this.CurrentAction == PlayerAction.Grabbing)
					{
						if (this.Falling)
						{
							this.Movement = PlayerMovement.Idle;
							return;
						}
						switch (this.Movement)
						{
						case PlayerMovement.Left:
							this.CurrentTargetSpeed.X = -this.GetTopSpeed();
							break;
						case PlayerMovement.Idle:
							this.CurrentTargetSpeed.X = 0f;
							break;
						case PlayerMovement.Right:
							this.CurrentTargetSpeed.X = this.GetTopSpeed();
							break;
						}
						if (this.CurrentAction != PlayerAction.Grabbing || this.HoldingPlayerInGrab == null || !this.CanWalkDuringGrab || this.IsPerformingGrabAction)
						{
							return;
						}
					}
					this.Crouching = (this.ForceKneel && this.CurrentAction != PlayerAction.ManualAim);
					this.CheckAimingKeyHolding(this);
					if (flag | (flag2 & (!this.m_clientMustInitiateMovement | this.Movement != PlayerMovement.Idle | this.Climbing | this.IsHoldingPlayerInGrab)) | !this.IsInputEnabled)
					{
						this.m_clientMustInitiateMovement = false;
						bool flag3 = false;
						if (this.VirtualKeyboard.PressingKey(19, true) && this.CanJump())
						{
							if (flag)
							{
								this.Jump();
							}
						}
						else if ((this.Rolling & this.StandingOnGround) | this.Diving)
						{
							flag3 = true;
							this.Movement = ((this.LastDirectionX == 1) ? PlayerMovement.Right : PlayerMovement.Left);
						}
						if ((!flag3 & this.VirtualKeyboardLastMovement != PlayerMovement.Idle & !this.TakingCover & !this.Diving) && !this.LedgeGrabbing)
						{
							if (!this.MustStandStill & !this.ForceKneel)
							{
								flag3 = true;
							}
							if (this.VirtualKeyboardLastMovement == PlayerMovement.Left)
							{
								this.LastDirectionX = -1;
							}
							else
							{
								this.LastDirectionX = 1;
							}
						}
						float x = 0f;
						if (this.VirtualKeyboard.PressingKey(0, true) ^ this.VirtualKeyboard.PressingKey(1, true))
						{
							if (this.VirtualKeyboard.PressingKey(0, true))
							{
								this.WantedClimbingDirection = 1;
							}
							else if (!this.Climbing && this.VirtualKeyboard.PressingKey(21, true))
							{
								this.WantedClimbingDirection = 0;
							}
							else
							{
								this.WantedClimbingDirection = -1;
							}
						}
						else
						{
							this.WantedClimbingDirection = 0;
						}
						if (this.Climbing && this.ClimbingDirection == -1)
						{
							flag3 = false;
							x = this.WorldBody.GetLinearVelocity().X;
						}
						if (flag3)
						{
							int num2;
							if (this.LastDirectionX == -1)
							{
								num2 = this.Contacts.LeftCollisionContactsCount;
								PlayerContact[] leftCollisionContacts = this.Contacts.LeftCollisionContacts;
							}
							else
							{
								num2 = this.Contacts.RightCollisionContactsCount;
								PlayerContact[] rightCollisionContacts = this.Contacts.RightCollisionContacts;
							}
							if (num2 > 0 || this.HoldingPlayerInGrabCollision())
							{
								flag3 = false;
							}
						}
						if (!flag3)
						{
							if (this.TimeSequence.MeleeMovement && !this.InAir)
							{
								x = this.GetTopSpeed() * (float)this.LastDirectionX;
							}
							this.CurrentTargetSpeed.X = x;
							if (this.Movement != PlayerMovement.Idle)
							{
								this.ImportantUpdate = true;
							}
							this.Movement = PlayerMovement.Idle;
							if (this.VirtualKeyboard.PressingKey(20, true) && this.CanCrouch())
							{
								this.Crouching = true;
							}
							if (flag)
							{
								this.CheckTakeCover(this);
							}
						}
						else
						{
							if (this.Movement != this.VirtualKeyboardLastMovement)
							{
								this.ImportantUpdate = true;
							}
							this.Movement = this.VirtualKeyboardLastMovement;
							this.TimeSequence.TimeTriggerStopSprint = 100f;
							if (flag && this.VirtualKeyboard.PressingKey(18, true) && this.CanActivateSprint())
							{
								this.Sprinting = true;
							}
							this.CurrentTargetSpeed.X = this.GetTopSpeed() * (float)this.LastDirectionX;
							if (flag)
							{
								this.CheckTakeCover(this);
							}
						}
					}
					else if (this.VirtualKeyboard.PressingKey(20, true) && this.CanCrouch())
					{
						this.Crouching = true;
					}
					if (this.CurrentAction == PlayerAction.ManualAim)
					{
						bool flag4 = this.VirtualKeyboard.PressingKey(0, true);
						bool flag5 = this.VirtualKeyboard.PressingKey(1, true);
						if (flag4 ^ flag5)
						{
							if (flag4)
							{
								this.DisableJumpWhileHoldingUpKey = true;
								this.AimUp();
							}
							else
							{
								this.AimDown();
							}
						}
						else
						{
							this.AimStop();
						}
					}
					if (!this.DisableFireWhileHoldingAttackKey && this.VirtualKeyboard.PressingKey(4, true))
					{
						this.CheckAttackKey(false);
					}
					if (flag2 && this.ThrowCharging && !this.LedgeGrabbing && !this.VirtualKeyboard.PressingKey(4, true))
					{
						this.DisableFireWhileHoldingAttackKey = false;
						if (this.ThrowCharging)
						{
							this.BeginThrow();
						}
					}
					if (this.DisableJumpWhileHoldingUpKey && !this.VirtualKeyboard.PressingKey(19, true))
					{
						this.DisableJumpWhileHoldingUpKey = false;
					}
					return;
				}
			}
			this.CurrentTargetSpeed.X = 0f;
		}

		// Token: 0x06003A31 RID: 14897 RVA: 0x000F1904 File Offset: 0x000EFB04
		private void CheckTakeCover(Player player)
		{
			if (((player.Rolling && this.VirtualKeyboardLastMovement != PlayerMovement.Idle) || (!player.TakingCover && (player.CurrentAction == PlayerAction.Idle || player.CurrentAction == PlayerAction.DrawWeapon) && this.VirtualKeyboard.PressingKey(20, true))) && ((player.LastDirectionX == 1 && this.VirtualKeyboardLastMovement == PlayerMovement.Right) || (player.LastDirectionX == -1 && this.VirtualKeyboardLastMovement == PlayerMovement.Left)) && player.CheckCanTakeCover(player.LastDirectionX))
			{
				player.TakeCover();
			}
		}

		// Token: 0x06003A32 RID: 14898 RVA: 0x000F1984 File Offset: 0x000EFB84
		internal void HandlePlayerKeyHoldingPostUpdateEvent()
		{
			if (this.IsRemoved)
			{
				return;
			}
			if (!this.StartupInputDisabled)
			{
				if (this.InputMode != PlayerInputMode.ReadOnly)
				{
					bool flag;
					bool flag2;
					this.GetPlayerKeyActions(out flag, out flag2);
					if (!flag && !flag2)
					{
						return;
					}
					this.CheckAimingKeyHolding(this);
					if (flag)
					{
						this.CheckRollInput(this);
						if (this.CurrentAction == PlayerAction.Disabled && !this.IsDead && this.VirtualKeyboard.PressingKey(20, true) && (this.VirtualKeyboard.PressingKey(2, true) || this.VirtualKeyboard.PressingKey(3, true)) && this.CanRecoveryRoll())
						{
							if (this.VirtualKeyboard.PressingKey(2, true))
							{
								this.LastDirectionX = -1;
							}
							else
							{
								this.LastDirectionX = 1;
							}
							this.RecoveryRoll();
						}
					}
					return;
				}
			}
		}

		// Token: 0x06003A33 RID: 14899 RVA: 0x000F1A48 File Offset: 0x000EFC48
		private void CheckRollInput(Player player)
		{
			if (player.VirtualKeyboard.PressingKey(20, true) && (player.VirtualKeyboard.PressingKey(2, true) || player.VirtualKeyboard.PressingKey(3, true)) && player.CanRoll())
			{
				if (player.VirtualKeyboard.PressingKey(2, true))
				{
					player.LastDirectionX = -1;
				}
				else
				{
					player.LastDirectionX = 1;
				}
				if (!player.CheckCanTakeCover(player.LastDirectionX))
				{
					player.Roll(false);
				}
			}
		}

		// Token: 0x06003A34 RID: 14900 RVA: 0x000F1AC0 File Offset: 0x000EFCC0
		private void CheckAimingKeyHolding(Player player)
		{
			if (!player.VirtualKeyboard.PressingKey(26, true))
			{
				if (player.FireSequence.MinimumManualAimTime <= 0f)
				{
					player.ResetAimAngle = true;
				}
				if (player.CurrentAction == PlayerAction.ManualAim && player.FireSequence.MinimumManualAimTime <= 0f)
				{
					if (!player.VirtualKeyboard.PressingKey(4, true) && !player.FireSequence.WeaponBurstMode)
					{
						player.CurrentAction = PlayerAction.Idle;
						player.ForceClientMovementState(1);
						return;
					}
					player.CurrentAction = PlayerAction.HipFire;
					player.ForceClientMovementState(1);
					return;
				}
			}
			else
			{
				if (player.CurrentAction != PlayerAction.ManualAim && player.CanAim())
				{
					player.EnterManualAim(false);
					return;
				}
				if (player.TimeSequence.TimeInAir > 250f && player.CurrentAction == PlayerAction.ManualAim && !player.CanAim())
				{
					if (player.VirtualKeyboard.PressingKey(4, true) || player.FireSequence.WeaponBurstMode)
					{
						player.CurrentAction = PlayerAction.HipFire;
						player.ForceClientMovementState(1);
						player.ResetAimAngle = true;
						return;
					}
					if (player.FireSequence.MinimumManualAimTime <= 0f)
					{
						player.CurrentAction = PlayerAction.Idle;
						player.ForceClientMovementState(1);
						player.ResetAimAngle = true;
					}
				}
			}
		}

		// Token: 0x06003A35 RID: 14901 RVA: 0x000F1BE8 File Offset: 0x000EFDE8
		internal void HandlePlayerKeyPressedEvent(int virtualKey, VIRTUAL_KEY_EVENT keyEvent)
		{
			bool flag;
			bool flag2;
			this.GetPlayerKeyActions(out flag, out flag2);
			if (!flag && !flag2)
			{
				return;
			}
			if (flag2 && keyEvent == VIRTUAL_KEY_EVENT.Pressed)
			{
				if (virtualKey == 22 && this.CanInitiateGrab())
				{
					this.TimeSequence.GrabCheckInitiateTimer = 200f;
					this.TimeSequence.GrabCheckDirection = this.LastDirectionX;
				}
				this.CheckInitiateGrabbing();
				if (this.InThrowingMode)
				{
					switch (virtualKey)
					{
					case 8:
						if (this.CurrentMeleeWeapon != null)
						{
							if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee && !this.GetCurrentMeleeWeaponInUse(false).Properties.IsMakeshift)
							{
								this.RedrawWeaponItem(SFD.Weapons.WeaponItemType.Melee, false, true);
							}
							else
							{
								this.ActivateWeaponItem(SFD.Weapons.WeaponItemType.Melee, true, true);
							}
						}
						break;
					case 9:
						if (this.CurrentHandgunWeapon != null)
						{
							if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Handgun)
							{
								this.RedrawWeaponItem(SFD.Weapons.WeaponItemType.Handgun, false, true);
							}
							else
							{
								this.ActivateWeaponItem(SFD.Weapons.WeaponItemType.Handgun, true, true);
							}
						}
						break;
					case 10:
						if (this.CurrentRifleWeapon != null)
						{
							if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle)
							{
								this.RedrawWeaponItem(SFD.Weapons.WeaponItemType.Rifle, false, true);
							}
							else
							{
								this.ActivateWeaponItem(SFD.Weapons.WeaponItemType.Rifle, true, true);
							}
						}
						break;
					case 11:
						if (this.CurrentThrownWeapon != null)
						{
							if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown)
							{
								this.RedrawWeaponItem(SFD.Weapons.WeaponItemType.Thrown, false, true);
							}
							else
							{
								this.ActivateWeaponItem(SFD.Weapons.WeaponItemType.Thrown, true, true);
							}
						}
						break;
					case 12:
						this.ActivatePowerup();
						break;
					case 13:
						this.SheatheCurrentWeapon(false);
						break;
					}
				}
				else
				{
					switch (virtualKey)
					{
					case 8:
						this.ActivateWeaponItem(SFD.Weapons.WeaponItemType.Melee, true, true);
						break;
					case 9:
						this.ActivateWeaponItem(SFD.Weapons.WeaponItemType.Handgun, true, true);
						break;
					case 10:
						this.ActivateWeaponItem(SFD.Weapons.WeaponItemType.Rifle, true, true);
						break;
					case 11:
						this.ActivateWeaponItem(SFD.Weapons.WeaponItemType.Thrown, true, true);
						break;
					case 12:
						this.ActivatePowerup();
						break;
					case 13:
						this.CurrentWeaponQueued = SFD.Weapons.WeaponItemType.NONE;
						this.SheatheCurrentWeapon(false);
						break;
					}
				}
			}
			if (this.CurrentAction == PlayerAction.Grabbing)
			{
				if (flag2)
				{
					switch (virtualKey)
					{
					case 2:
						if (this.CanTurnInGrabbing())
						{
							this.TimeSequence.TimeGrabTurnCooldown = 50f;
							this.VirtualKeyboardLastMovement = PlayerMovement.Left;
							this.LastDirectionX = -1;
						}
						break;
					case 3:
						if (this.CanTurnInGrabbing())
						{
							this.TimeSequence.TimeGrabTurnCooldown = 50f;
							this.VirtualKeyboardLastMovement = PlayerMovement.Right;
							this.LastDirectionX = 1;
							return;
						}
						break;
					case 4:
						this.BeginGrabAttack();
						return;
					case 5:
						this.BeginGrabThrow();
						return;
					default:
						if (virtualKey != 17)
						{
							return;
						}
						if (this.IsHoldingPlayerInGrab)
						{
							this.DropGrab();
							return;
						}
						this.m_pressTimeKeyInput_K_DROP = NetTime.Now;
						this.m_trackTimeKeyInput_K_DROP = true;
						return;
					}
				}
				return;
			}
			if (this.CurrentAction == PlayerAction.Disabled)
			{
				if (flag && !this.IsDead && this.VirtualKeyboard.PressingKey(20, true) && (this.VirtualKeyboard.PressingKey(2, true) || this.VirtualKeyboard.PressingKey(3, true)) && this.CanRecoveryRoll())
				{
					if (this.VirtualKeyboard.PressingKey(2, true))
					{
						this.LastDirectionX = -1;
					}
					else
					{
						this.LastDirectionX = 1;
					}
					this.RecoveryRoll();
				}
				return;
			}
			if (keyEvent == VIRTUAL_KEY_EVENT.Pressed)
			{
				switch (virtualKey)
				{
				case 0:
					if (flag)
					{
						this.CheckClimbJump();
						return;
					}
					break;
				case 1:
					if (flag)
					{
						this.CheckClimbDown();
						return;
					}
					break;
				case 2:
				case 3:
					if (!this.LedgeGrabbing && (!this.Diving & !this.Rolling) && ((this.Climbing & this.ClimbingDirection != -1) || !this.Climbing))
					{
						if (virtualKey == 3)
						{
							this.VirtualKeyboardLastMovement = PlayerMovement.Right;
							this.LastDirectionX = 1;
							if (flag)
							{
								if (this.Movement == PlayerMovement.Idle && this.CheckCanTakeCover(this.LastDirectionX))
								{
									this.TakeCover();
								}
								else
								{
									this.TakingCover = false;
								}
								if (this.VirtualKeyboard.PressingKey(20, true) && this.CurrentAction != PlayerAction.ManualAim && this.CanRoll())
								{
									this.Roll(false);
								}
							}
						}
						else
						{
							this.VirtualKeyboardLastMovement = PlayerMovement.Left;
							this.LastDirectionX = -1;
							if (flag)
							{
								if (this.Movement == PlayerMovement.Idle && this.CheckCanTakeCover(this.LastDirectionX))
								{
									this.TakeCover();
								}
								else
								{
									this.TakingCover = false;
								}
								if (this.VirtualKeyboard.PressingKey(20, true) && this.CurrentAction != PlayerAction.ManualAim && this.CanRoll())
								{
									this.Roll(false);
								}
							}
						}
					}
					if (flag)
					{
						if (!this.TakingCover)
						{
							if (this.Crouching && this.CanRoll())
							{
								this.Roll(false);
							}
							if (this.VirtualKeyboard.KeysPressed[23])
							{
								if (this.TimeSequence.TimeTriggerSprint > 0f && this.CanActivateSprint() && this.VirtualKeyboardPreviouslyDirectionTriggerSprintMovement == this.VirtualKeyboardLastMovement)
								{
									this.TimeSequence.TimeTriggerStopSprint = 100f;
									this.Sprinting = true;
								}
								this.TimeSequence.TimeTriggerSprint = 180f;
							}
						}
						else if (this.CurrentAction == PlayerAction.Idle && this.VirtualKeyboard.PressingKey(1, true) && this.CanRoll() && !this.CheckCanTakeCover(this.LastDirectionX))
						{
							this.Roll(false);
						}
						this.VirtualKeyboardPreviouslyDirectionTriggerSprintMovement = ((virtualKey == 3) ? PlayerMovement.Right : PlayerMovement.Left);
						return;
					}
					break;
				case 4:
					if (this.Climbing || this.LedgeGrabbing)
					{
						if (flag && !this.TimeSequence.ClimbJumpOnCooldown)
						{
							this.Jump();
							this.VirtualKeyboard.SuppressKey(4);
						}
						this.DisableFireWhileHoldingAttackKey = true;
						this.TimeSequence.DisableQueuedKey(new int[]
						{
							15,
							4,
							5,
							26
						});
						return;
					}
					this.DisableFireWhileHoldingAttackKey = false;
					this.FireSequence.MinAutoFireTimer = 0f;
					if (this.CheckAttackKey(true))
					{
						this.TimeSequence.DisableQueuedKey(4);
						return;
					}
					break;
				case 5:
					if (!this.Climbing && !this.LedgeGrabbing)
					{
						if (this.CanBlock())
						{
							this.Block();
							return;
						}
					}
					else if (flag)
					{
						if (!this.TimeSequence.ClimbJumpOnCooldown)
						{
							this.DropLadderAndLedge();
							this.VirtualKeyboard.SuppressKey(5);
						}
						this.TimeSequence.DisableQueuedKey(5);
						return;
					}
					break;
				case 6:
				case 7:
				case 8:
				case 9:
				case 10:
				case 11:
				case 12:
				case 13:
				case 21:
				case 22:
				case 23:
				case 24:
				case 25:
					break;
				case 14:
					if (flag2)
					{
						this.StartReloadWeapon();
						return;
					}
					break;
				case 15:
					if (this.Climbing || this.LedgeGrabbing)
					{
						if (flag && !this.TimeSequence.ClimbJumpOnCooldown)
						{
							this.Jump();
							this.VirtualKeyboard.SuppressKey(15);
						}
						this.TimeSequence.DisableQueuedKey(new int[]
						{
							15,
							4,
							5,
							26
						});
						return;
					}
					if (this.CanKick(0f))
					{
						this.Kick();
						return;
					}
					break;
				case 16:
					if (flag2)
					{
						this.ActivateObject();
						return;
					}
					break;
				case 17:
					this.m_pressTimeKeyInput_K_DROP = NetTime.Now;
					this.m_trackTimeKeyInput_K_DROP = true;
					break;
				case 18:
					if (flag && this.Movement != PlayerMovement.Idle && this.CanActivateSprint())
					{
						this.TimeSequence.TimeTriggerStopSprint = 100f;
						this.Sprinting = true;
						return;
					}
					break;
				case 19:
					if (flag)
					{
						this.DisableJumpWhileHoldingUpKey = false;
						if (this.LedgeGrabbing || this.CanJump())
						{
							this.Jump();
							return;
						}
						if (this.Climbing && !this.TimeSequence.ClimbJumpOnCooldown && this.VirtualKeyboard.PressingKey(25, false))
						{
							this.Jump();
							return;
						}
					}
					break;
				case 20:
					if (flag)
					{
						if (this.VirtualKeyboardLastMovement != PlayerMovement.Idle)
						{
							if (this.CanDive())
							{
								if (this.CheckDiveVelocityReached())
								{
									this.Dive();
									return;
								}
							}
							else if (this.CanRoll())
							{
								this.Roll(false);
								return;
							}
						}
						else
						{
							if (this.LedgeGrabbing)
							{
								this.LedgeGrabDisableGrabbingCurrentLedges();
								this.ClearLedgeGrab();
								this.ImportantUpdate = true;
							}
							if (this.CanGoDownThroughCloud())
							{
								if (this.TimeSequence.TimeTriggerDownThroughCloudsDelay > 0f)
								{
									this.Jump(0.5f, true);
									this.TimeSequence.TimeDisableDownThroughCloud = 250f;
									this.TimeSequence.TimeTriggerDownThroughCloudsDelay = 0f;
									this.TimeSequence.TimeTriggerJump = 0f;
									this.CloudsDisabled = true;
									this.ImportantUpdate = true;
								}
								else
								{
									this.TimeSequence.TimeTriggerDownThroughCloudsDelay = 200f;
									if (this.CanCrouch() && !this.Crouching)
									{
										this.Crouching = true;
										int num = 0;
										if (this.VirtualKeyboard.PressingKey(2, true) && !this.VirtualKeyboard.PressingKey(3, true))
										{
											num = -1;
										}
										else if (!this.VirtualKeyboard.PressingKey(2, true) && this.VirtualKeyboard.PressingKey(3, true))
										{
											num = 1;
										}
										if (num != 0 && this.CheckCanTakeCover(num))
										{
											this.LastDirectionX = num;
											this.TakeCover();
										}
										this.ImportantUpdate = true;
									}
								}
							}
							if ((this.VirtualKeyboard.PressingKey(2, true) ^ this.VirtualKeyboard.PressingKey(3, true)) && this.PerformingMelee && this.CanRoll())
							{
								if (this.VirtualKeyboard.PressingKey(2, true))
								{
									this.LastDirectionX = -1;
									this.Movement = PlayerMovement.Left;
								}
								else
								{
									this.LastDirectionX = 1;
									this.Movement = PlayerMovement.Right;
								}
								this.Roll(false);
								this.ImportantUpdate = true;
								return;
							}
						}
					}
					break;
				case 26:
					if (this.CanAim())
					{
						this.EnterManualAim(true);
						return;
					}
					if (this.Reloading && flag2)
					{
						switch (this.CurrentWeaponDrawn)
						{
						case SFD.Weapons.WeaponItemType.Handgun:
						case SFD.Weapons.WeaponItemType.Rifle:
							this.StopReloadWeapon();
							return;
						default:
							return;
						}
					}
					break;
				default:
					return;
				}
			}
		}

		// Token: 0x06003A36 RID: 14902 RVA: 0x000F2570 File Offset: 0x000F0770
		internal bool CheckAttackKey(bool onKeyEvent)
		{
			if (!this.CanAttack())
			{
				return false;
			}
			bool flag;
			bool flag2;
			this.GetPlayerKeyActions(out flag, out flag2);
			if (this.InThrowingMode)
			{
				if (flag2)
				{
					if (this.CanStartThrowCharge())
					{
						this.DisableFireWhileHoldingAttackKey = true;
						this.BeginChargeThrow();
						this.TimeSequence.DisableQueuedKey(4);
						return true;
					}
					if (this.ThrowableIsActivated)
					{
						return true;
					}
				}
				else
				{
					if (this.CanStartThrowCharge())
					{
						this.DisableFireWhileHoldingAttackKey = true;
						this.TimeSequence.DisableQueuedKey(4);
						PlayerAction currentAction = this.CurrentAction;
						if (currentAction != PlayerAction.Idle)
						{
							if (currentAction == PlayerAction.ManualAim)
							{
								if (!this.InAir)
								{
									this.Sprinting = false;
								}
							}
						}
						else if (!this.InAir)
						{
							this.Sprinting = false;
						}
						return true;
					}
					if (this.ThrowableIsActivated)
					{
						return true;
					}
				}
			}
			else
			{
				if (flag)
				{
					switch (this.CurrentWeaponDrawn)
					{
					case SFD.Weapons.WeaponItemType.Handgun:
					case SFD.Weapons.WeaponItemType.Rifle:
						if (!this.Reloading)
						{
							PlayerAction currentAction2 = this.CurrentAction;
							if (currentAction2 == PlayerAction.Idle)
							{
								this.PreparingHipFire = this.GetAverageLatencyTime() + 50f;
							}
						}
						break;
					}
				}
				if (flag2)
				{
					switch (this.CurrentWeaponDrawn)
					{
					case SFD.Weapons.WeaponItemType.NONE:
					case SFD.Weapons.WeaponItemType.Melee:
					{
						MWeapon currentMeleeWeaponInUse = this.GetCurrentMeleeWeaponInUse(false);
						if (currentMeleeWeaponInUse != null && currentMeleeWeaponInUse.Properties.Handling == MeleeHandlingType.Custom && currentMeleeWeaponInUse.CustomHandlingOnAttackKey(this, onKeyEvent))
						{
							return true;
						}
						if (!onKeyEvent)
						{
							return false;
						}
						PlayerAction currentAction3 = this.CurrentAction;
						if (currentAction3 != PlayerAction.Idle)
						{
							switch (currentAction3)
							{
							case PlayerAction.MeleeAttack1:
								if (this.GetSubAnimations()[1].IsLastFrame() && this.GetSubAnimations()[1].GetFrameActiveTime() > this.MinimumMeleeHitFrameTime)
								{
									this.Sprinting = false;
									this.CurrentAction = PlayerAction.MeleeAttack2;
									this.MinimumMeleeHitFrameTime = 85f;
									this.Movement = PlayerMovement.Idle;
									this.CurrentTargetSpeed.X = 0f;
									this.ImportantUpdate = true;
									this.ClientMustInitiateMovement(false);
									return true;
								}
								break;
							case PlayerAction.MeleeAttack2:
								if (this.GetSubAnimations()[1].IsLastFrame() && this.GetSubAnimations()[1].GetFrameActiveTime() > this.MinimumMeleeHitFrameTime)
								{
									this.Sprinting = false;
									this.CurrentAction = PlayerAction.MeleeAttack3;
									this.MinimumMeleeHitFrameTime = 85f;
									this.Movement = PlayerMovement.Idle;
									this.CurrentTargetSpeed.X = 0f;
									this.ImportantUpdate = true;
									this.ClientMustInitiateMovement(false);
									return true;
								}
								break;
							}
							return false;
						}
						if (this.InAir)
						{
							if (!this.TimeSequence.PostDropClimbAttackCooldown)
							{
								this.JumpAttack(false);
							}
						}
						else
						{
							this.MeleeAttack1();
							this.Movement = PlayerMovement.Idle;
							this.CurrentTargetSpeed.X = 0f;
							this.ImportantUpdate = true;
						}
						return true;
					}
					case SFD.Weapons.WeaponItemType.Handgun:
					case SFD.Weapons.WeaponItemType.Rifle:
						if (this.Reloading)
						{
							this.StopReloadWeapon();
							return false;
						}
						if (!this.Reloading)
						{
							switch (this.CurrentAction)
							{
							case PlayerAction.Idle:
								if (!this.InAir)
								{
									this.Sprinting = false;
								}
								this.CurrentAction = PlayerAction.HipFire;
								return true;
							case PlayerAction.HipFire:
							case PlayerAction.ManualAim:
								if (!this.InAir)
								{
									this.Sprinting = false;
								}
								if (this.FireSequence.CanShootInHipFire && this.CanFireWeapon())
								{
									this.FireWeapon();
								}
								else
								{
									this.FireSequence.HipFireAimTime = 250f;
								}
								return true;
							}
						}
						break;
					case SFD.Weapons.WeaponItemType.Thrown:
						if (this.CanStartThrowCharge())
						{
							this.DisableFireWhileHoldingAttackKey = true;
							this.BeginChargeThrow();
							this.TimeSequence.DisableQueuedKey(4);
							return true;
						}
						if (this.ThrowableIsActivated)
						{
							return true;
						}
						break;
					}
				}
				else
				{
					switch (this.CurrentWeaponDrawn)
					{
					case SFD.Weapons.WeaponItemType.NONE:
					case SFD.Weapons.WeaponItemType.Melee:
					{
						MWeapon currentMeleeWeaponInUse2 = this.GetCurrentMeleeWeaponInUse(false);
						if (currentMeleeWeaponInUse2 != null && currentMeleeWeaponInUse2.Properties.Handling == MeleeHandlingType.Custom)
						{
							currentMeleeWeaponInUse2.CustomHandlingOnAttackKey(this, onKeyEvent);
							return true;
						}
						if (!onKeyEvent)
						{
							return false;
						}
						PlayerAction currentAction4 = this.CurrentAction;
						if (currentAction4 == PlayerAction.Idle)
						{
							if (this.InAir)
							{
								if (!this.TimeSequence.PostDropClimbAttackCooldown)
								{
									this.JumpAttack(false);
								}
							}
							else
							{
								this.MeleeAttack1();
							}
							return true;
						}
						return false;
					}
					case SFD.Weapons.WeaponItemType.Handgun:
					case SFD.Weapons.WeaponItemType.Rifle:
						if (!this.Reloading)
						{
							switch (this.CurrentAction)
							{
							case PlayerAction.Idle:
								if (!this.InAir)
								{
									this.Sprinting = false;
								}
								return true;
							case PlayerAction.HipFire:
							case PlayerAction.ManualAim:
								if (!this.InAir)
								{
									this.Sprinting = false;
								}
								return true;
							}
						}
						break;
					case SFD.Weapons.WeaponItemType.Thrown:
						if (this.CanStartThrowCharge())
						{
							this.DisableFireWhileHoldingAttackKey = true;
							this.TimeSequence.DisableQueuedKey(4);
							PlayerAction currentAction5 = this.CurrentAction;
							if (currentAction5 != PlayerAction.Idle)
							{
								if (currentAction5 == PlayerAction.ManualAim)
								{
									if (!this.InAir)
									{
										this.Sprinting = false;
									}
								}
							}
							else if (!this.InAir)
							{
								this.Sprinting = false;
							}
							this.TimeSequence.DisableQueuedKey(4);
							return true;
						}
						if (this.ThrowableIsActivated)
						{
							return true;
						}
						break;
					}
				}
			}
			return false;
		}

		// Token: 0x06003A37 RID: 14903 RVA: 0x0002FADB File Offset: 0x0002DCDB
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetPlayerKeyActions(out bool playerAction, out bool serverAction)
		{
			serverAction = this.CanDoServerAction;
			playerAction = this.CanDoPlayerAction;
		}

		// Token: 0x17000965 RID: 2405
		// (get) Token: 0x06003A38 RID: 14904 RVA: 0x0002FAED File Offset: 0x0002DCED
		internal bool CanCommandPlayer
		{
			get
			{
				return !this.IsInputEnabled || (this.IsBot && !this.m_botBehavior.Active);
			}
		}

		// Token: 0x17000966 RID: 2406
		// (get) Token: 0x06003A39 RID: 14905 RVA: 0x0002FB11 File Offset: 0x0002DD11
		// (set) Token: 0x06003A3A RID: 14906 RVA: 0x0002FB19 File Offset: 0x0002DD19
		internal bool CanCommandPlayerPrevUpdate { get; private set; }

		// Token: 0x17000967 RID: 2407
		// (get) Token: 0x06003A3B RID: 14907 RVA: 0x0002FB22 File Offset: 0x0002DD22
		// (set) Token: 0x06003A3C RID: 14908 RVA: 0x0002FB2A File Offset: 0x0002DD2A
		internal bool CanDoServerAction { get; private set; }

		// Token: 0x17000968 RID: 2408
		// (get) Token: 0x06003A3D RID: 14909 RVA: 0x0002FB33 File Offset: 0x0002DD33
		// (set) Token: 0x06003A3E RID: 14910 RVA: 0x0002FB3B File Offset: 0x0002DD3B
		internal bool CanDoPlayerAction { get; private set; }

		// Token: 0x06003A3F RID: 14911 RVA: 0x000F2A20 File Offset: 0x000F0C20
		internal void UpdateCanDoPlayerAction()
		{
			GameUser gameUser = this.GetGameUser();
			if (gameUser != null && gameUser.UsingServerMovement)
			{
				if (this.GameOwner == GameOwnerEnum.Client)
				{
					this.CanDoServerAction = false;
					this.CanDoPlayerAction = false;
				}
				else
				{
					this.CanDoServerAction = true;
					this.CanDoPlayerAction = true;
					this.ForceServerMovementState(1);
				}
			}
			else
			{
				this.CanDoServerAction = (this.GameOwner != GameOwnerEnum.Client);
				this.CanDoPlayerAction = ((this.GameOwner != GameOwnerEnum.Server & this.IsLocal) || (this.GameOwner != GameOwnerEnum.Client & (!this.IsInputEnabled | this.IsBot)));
			}
			this.ClimbingClient = false;
		}

		// Token: 0x06003A40 RID: 14912 RVA: 0x0002FB44 File Offset: 0x0002DD44
		internal static float CalculateFallDamage(float relativeVelocityLength)
		{
			return Math.Max((float)Math.Pow((double)relativeVelocityLength, 2.0) * 0.12f, 0f);
		}

		// Token: 0x06003A41 RID: 14913 RVA: 0x000F2AC4 File Offset: 0x000F0CC4
		internal void SetNewHealth(float value)
		{
			if (!this.IsDead)
			{
				this.Health.CurrentValue = value;
				if (this.Health.IsEmpty)
				{
					this.Kill(true, true);
					return;
				}
				if (this.Health.CurrentValue >= 1f)
				{
					this.OverHealth.Fullness = 1f;
				}
			}
		}

		// Token: 0x06003A42 RID: 14914 RVA: 0x0002FB67 File Offset: 0x0002DD67
		internal void SetOverkillHealth(float value)
		{
			this.OverkillDamage.CurrentValue = value;
		}

		// Token: 0x06003A43 RID: 14915 RVA: 0x0002FB75 File Offset: 0x0002DD75
		internal void HealAmount(float value)
		{
			if (value > 0f)
			{
				this.Health.CurrentValue += value;
				if (this.Health.CurrentValue >= 1f)
				{
					this.OverHealth.Fullness = 1f;
				}
			}
		}

		// Token: 0x06003A44 RID: 14916 RVA: 0x000F2B20 File Offset: 0x000F0D20
		internal void DoTakeDamage(float damage)
		{
			if (!this.IsRemoved && damage > 0f)
			{
				switch (this.GetCurrentHealthMode())
				{
				case Player.HealthMode.OverkillDamage:
					this.OverkillDamage.CurrentValue -= damage;
					if (this.OverkillDamage.IsEmpty && this.GameOwner != GameOwnerEnum.Client)
					{
						this.Gib();
					}
					break;
				case Player.HealthMode.StrengthBoostOverHealth:
				case Player.HealthMode.RocketRideOverHealth:
					this.OverHealth.CurrentValue -= damage;
					if (this.OverHealth.IsEmpty && this.GameOwner != GameOwnerEnum.Client)
					{
						this.Health.CurrentValue = 0f;
						return;
					}
					break;
				case Player.HealthMode.OrdinaryHealth:
					if (!this.StrengthBoostActive && this.RocketRideProjectileWorldID <= 0)
					{
						this.Health.CurrentValue -= damage;
						return;
					}
					if (this.Health.CurrentValue >= 1f)
					{
						float num = this.Health.CurrentValue - damage;
						if (num < 1f)
						{
							num = 0.1f;
						}
						this.Health.CurrentValue = num;
						return;
					}
					this.OverHealth.CurrentValue -= damage;
					if (this.OverHealth.IsEmpty && this.GameOwner != GameOwnerEnum.Client)
					{
						this.Health.CurrentValue = 0f;
						return;
					}
					break;
				default:
					return;
				}
				return;
			}
		}

		// Token: 0x06003A45 RID: 14917 RVA: 0x000F2C78 File Offset: 0x000F0E78
		internal Player.HealthMode GetCurrentHealthMode()
		{
			if (this.IsDead)
			{
				return Player.HealthMode.OverkillDamage;
			}
			if (this.StrengthBoostActive && this.Health.CurrentValue < 1f)
			{
				return Player.HealthMode.StrengthBoostOverHealth;
			}
			if (this.RocketRideProjectileWorldID > 0 && this.Health.CurrentValue < 1f)
			{
				return Player.HealthMode.RocketRideOverHealth;
			}
			return Player.HealthMode.OrdinaryHealth;
		}

		// Token: 0x06003A46 RID: 14918 RVA: 0x0002FBB4 File Offset: 0x0002DDB4
		internal float GetMaxSprintJumpDistance(bool precise = false)
		{
			if (precise && this.m_modifiers.SprintSpeedModifier >= 1f)
			{
				return 56.5f * this.m_modifiers.SprintSpeedModifier;
			}
			return 52f * this.m_modifiers.SprintSpeedModifier;
		}

		// Token: 0x06003A47 RID: 14919 RVA: 0x0002FBEE File Offset: 0x0002DDEE
		internal float GetMaxRunJumpDistance()
		{
			return 33.42857f * this.m_modifiers.RunSpeedModifier;
		}

		// Token: 0x17000969 RID: 2409
		// (get) Token: 0x06003A48 RID: 14920 RVA: 0x0002FC01 File Offset: 0x0002DE01
		// (set) Token: 0x06003A49 RID: 14921 RVA: 0x0002FC09 File Offset: 0x0002DE09
		internal bool RollLockMovement { get; set; }

		// Token: 0x1700096A RID: 2410
		// (get) Token: 0x06003A4A RID: 14922 RVA: 0x0002FC12 File Offset: 0x0002DE12
		// (set) Token: 0x06003A4B RID: 14923 RVA: 0x0002FC1A File Offset: 0x0002DE1A
		internal CameraFocusMode CameraSecondaryFocusMode
		{
			get
			{
				return this.m_cameraSecondaryFocusMode;
			}
			set
			{
				if (this.m_cameraSecondaryFocusMode != value)
				{
					this.m_cameraSecondaryFocusMode = value;
					this.MetaDataUpdated = true;
				}
			}
		}

		// Token: 0x06003A4C RID: 14924 RVA: 0x000F2CCC File Offset: 0x000F0ECC
		internal float GetNetworkJitter()
		{
			if (this.GameOwner == GameOwnerEnum.Local)
			{
				return 0f;
			}
			float averageRoundtripTime = this.GetAverageRoundtripTime();
			return Math.Max(10f, Math.Min(50f, averageRoundtripTime * 0.3f));
		}

		// Token: 0x1700096B RID: 2411
		// (get) Token: 0x06003A4D RID: 14925 RVA: 0x0002FC33 File Offset: 0x0002DE33
		// (set) Token: 0x06003A4E RID: 14926 RVA: 0x0002FC3B File Offset: 0x0002DE3B
		internal Player.ManualAimTargetPosition ManualAimBox2DTargetPosition { get; set; }

		// Token: 0x1700096C RID: 2412
		// (get) Token: 0x06003A4F RID: 14927 RVA: 0x0002FC44 File Offset: 0x0002DE44
		// (set) Token: 0x06003A50 RID: 14928 RVA: 0x0002FC4C File Offset: 0x0002DE4C
		internal float DeadTime { get; private set; }

		// Token: 0x1700096D RID: 2413
		// (get) Token: 0x06003A51 RID: 14929 RVA: 0x0002FC55 File Offset: 0x0002DE55
		// (set) Token: 0x06003A52 RID: 14930 RVA: 0x0002FC5D File Offset: 0x0002DE5D
		internal float CreateTime { get; private set; }

		// Token: 0x1700096E RID: 2414
		// (get) Token: 0x06003A53 RID: 14931 RVA: 0x0002FC66 File Offset: 0x0002DE66
		// (set) Token: 0x06003A54 RID: 14932 RVA: 0x0002FC6E File Offset: 0x0002DE6E
		internal Microsoft.Xna.Framework.Vector2 LastServerPosition { get; set; }

		// Token: 0x06003A55 RID: 14933 RVA: 0x0002FC77 File Offset: 0x0002DE77
		internal Microsoft.Xna.Framework.Vector2 CalcServerPositionDifference()
		{
			if (this.HasLocalControl && !this.IsRemoved && this.GameOwner == GameOwnerEnum.Client)
			{
				return this.WorldBody.GetPosition() - this.LastServerPosition;
			}
			return Microsoft.Xna.Framework.Vector2.Zero;
		}

		// Token: 0x1700096F RID: 2415
		// (get) Token: 0x06003A56 RID: 14934 RVA: 0x0002FCAE File Offset: 0x0002DEAE
		// (set) Token: 0x06003A57 RID: 14935 RVA: 0x0002FCB6 File Offset: 0x0002DEB6
		internal PlayerStatistics Statisticts { get; private set; }

		// Token: 0x17000970 RID: 2416
		// (get) Token: 0x06003A58 RID: 14936 RVA: 0x0002FCBF File Offset: 0x0002DEBF
		// (set) Token: 0x06003A59 RID: 14937 RVA: 0x0002FCC7 File Offset: 0x0002DEC7
		internal PlayerVirtualKeyboard VirtualKeyboard { get; set; }

		// Token: 0x17000971 RID: 2417
		// (get) Token: 0x06003A5A RID: 14938 RVA: 0x0002FCD0 File Offset: 0x0002DED0
		// (set) Token: 0x06003A5B RID: 14939 RVA: 0x0002FCD8 File Offset: 0x0002DED8
		internal Body WorldBody { get; set; }

		// Token: 0x17000972 RID: 2418
		// (get) Token: 0x06003A5C RID: 14940 RVA: 0x0002FCE1 File Offset: 0x0002DEE1
		// (set) Token: 0x06003A5D RID: 14941 RVA: 0x0002FCE9 File Offset: 0x0002DEE9
		internal ObjectData ObjectData { get; set; }

		// Token: 0x17000973 RID: 2419
		// (get) Token: 0x06003A5E RID: 14942 RVA: 0x0002FCF2 File Offset: 0x0002DEF2
		// (set) Token: 0x06003A5F RID: 14943 RVA: 0x0002FCFA File Offset: 0x0002DEFA
		internal Body StandingOnBody { get; set; }

		// Token: 0x17000974 RID: 2420
		// (get) Token: 0x06003A60 RID: 14944 RVA: 0x0002FD03 File Offset: 0x0002DF03
		internal Team CurrentTeam
		{
			get
			{
				return this.m_currentTeam;
			}
		}

		// Token: 0x06003A61 RID: 14945 RVA: 0x000F2D0C File Offset: 0x000F0F0C
		internal void SetCurrentTeam(Team value)
		{
			if (this.m_currentTeam != value)
			{
				this.m_currentTeam = value;
				this.CurrentTeamColor = Constants.COLORS.GetTeamColor(value, Constants.COLORS.TeamColorType.Default);
				this.MetaDataUpdated = true;
				if (this.GameOwner != GameOwnerEnum.Client)
				{
					GameSlot gameSlot = this.GetGameSlot();
					if (gameSlot != null && gameSlot.CurrentTeam != value)
					{
						gameSlot.CurrentTeam = value;
						if (this.GameOwner == GameOwnerEnum.Server && this.m_game.Server != null)
						{
							this.m_game.Server.SyncGameSlotInfo(gameSlot, null);
						}
					}
				}
			}
		}

		// Token: 0x06003A62 RID: 14946 RVA: 0x0002FD0B File Offset: 0x0002DF0B
		internal void InitCurrentTeam(Team value)
		{
			this.m_currentTeam = value;
			this.CurrentTeamColor = Constants.COLORS.GetTeamColor(value, Constants.COLORS.TeamColorType.Default);
		}

		// Token: 0x17000975 RID: 2421
		// (get) Token: 0x06003A63 RID: 14947 RVA: 0x0002FD21 File Offset: 0x0002DF21
		// (set) Token: 0x06003A64 RID: 14948 RVA: 0x0002FD29 File Offset: 0x0002DF29
		internal Microsoft.Xna.Framework.Color CurrentTeamColor
		{
			get
			{
				return this.m_currentTeamColor;
			}
			private set
			{
				this.m_currentTeamColor = value;
			}
		}

		// Token: 0x06003A65 RID: 14949 RVA: 0x000F2D88 File Offset: 0x000F0F88
		internal Microsoft.Xna.Framework.Color GetTeamTextColor()
		{
			if (Constants.TEAM_DISPLAY_MODE != TeamDisplayMode.TeamColors && GameInfo.LocalPlayerCount < 2)
			{
				if (GameSFD.Handle.CurrentState != SFD.States.State.MainMenu)
				{
					bool flag = this.GameWorld.GUI_TeamDisplay_LocalGameUserIdentifier != this.m_userIdentifier && Constants.IsEnemyTeams(this.GameWorld.GUI_TeamDisplay_LocalGameUserTeam, this.CurrentTeam);
					switch (Constants.TEAM_DISPLAY_MODE)
					{
					case TeamDisplayMode.GreenRed:
						if (!flag)
						{
							return Constants.COLORS.TEAM_ALLY_GREEN;
						}
						return Constants.COLORS.TEAM_ENEMY_RED;
					case TeamDisplayMode.BlueRed:
						if (!flag)
						{
							return Constants.COLORS.TEAM_ALLY_BLUE;
						}
						return Constants.COLORS.TEAM_ENEMY_RED;
					default:
						return this.m_currentTeamColor;
					}
				}
			}
			return this.m_currentTeamColor;
		}

		// Token: 0x06003A66 RID: 14950 RVA: 0x0002FD32 File Offset: 0x0002DF32
		internal bool IsEnemyOf(Player player)
		{
			return this != player && (this.m_currentTeam != player.CurrentTeam | this.m_currentTeam == Team.Independent);
		}

		// Token: 0x17000976 RID: 2422
		// (get) Token: 0x06003A67 RID: 14951 RVA: 0x0002FD55 File Offset: 0x0002DF55
		internal float VelocityNetworkFactor
		{
			get
			{
				if (!this.IsRemoved)
				{
					return this.WorldBody.VelocityNetworkFactor;
				}
				return 1f;
			}
		}

		// Token: 0x17000977 RID: 2423
		// (get) Token: 0x06003A68 RID: 14952 RVA: 0x0002FD70 File Offset: 0x0002DF70
		// (set) Token: 0x06003A69 RID: 14953 RVA: 0x0002FD78 File Offset: 0x0002DF78
		internal byte AimSequence { get; set; }

		// Token: 0x17000978 RID: 2424
		// (get) Token: 0x06003A6A RID: 14954 RVA: 0x0002FD81 File Offset: 0x0002DF81
		// (set) Token: 0x06003A6B RID: 14955 RVA: 0x0002FD89 File Offset: 0x0002DF89
		internal float AimAngle { get; set; }

		// Token: 0x06003A6C RID: 14956 RVA: 0x000F2E24 File Offset: 0x000F1024
		internal void UpdateAimAngle(byte aimSequence, float dataAimAngle, float dataAimSpeed)
		{
			if (this.CurrentAction == PlayerAction.ManualAim && this.AimSequence == aimSequence)
			{
				bool flag = Math.Abs(dataAimSpeed) > 0.00495f;
				bool flag2 = Math.Abs(dataAimAngle - this.AimAngle) > 0.001f || dataAimAngle == 0f;
				if (dataAimAngle != 0f && ((dataAimSpeed > 0f && dataAimAngle < this.AimAngle) || (dataAimSpeed < 0f && dataAimAngle > this.AimAngle)))
				{
					flag2 = false;
				}
				if (flag2)
				{
					this.AimAngle = dataAimAngle;
				}
				this.AimSpeed = (flag ? dataAimSpeed : 0f);
				if (flag || flag2)
				{
					this.ImportantUpdate = true;
				}
			}
		}

		// Token: 0x06003A6D RID: 14957 RVA: 0x0002FD92 File Offset: 0x0002DF92
		internal Microsoft.Xna.Framework.Vector2 AimVector()
		{
			return new Microsoft.Xna.Framework.Vector2((float)Math.Cos((double)this.AimAngle) * (float)this.LastDirectionX, -(float)Math.Sin((double)this.AimAngle));
		}

		// Token: 0x17000979 RID: 2425
		// (get) Token: 0x06003A6E RID: 14958 RVA: 0x0002FDBC File Offset: 0x0002DFBC
		// (set) Token: 0x06003A6F RID: 14959 RVA: 0x0002FDC4 File Offset: 0x0002DFC4
		internal bool ResetAimAngle { get; set; }

		// Token: 0x1700097A RID: 2426
		// (get) Token: 0x06003A70 RID: 14960 RVA: 0x0002FDCD File Offset: 0x0002DFCD
		// (set) Token: 0x06003A71 RID: 14961 RVA: 0x0002FDD5 File Offset: 0x0002DFD5
		internal float AimSpeed { get; set; }

		// Token: 0x1700097B RID: 2427
		// (get) Token: 0x06003A72 RID: 14962 RVA: 0x0002FDDE File Offset: 0x0002DFDE
		// (set) Token: 0x06003A73 RID: 14963 RVA: 0x0002FDE6 File Offset: 0x0002DFE6
		internal NetMessageCount AimMessageCount { get; set; }

		// Token: 0x1700097C RID: 2428
		// (get) Token: 0x06003A74 RID: 14964 RVA: 0x0002FDEF File Offset: 0x0002DFEF
		// (set) Token: 0x06003A75 RID: 14965 RVA: 0x0002FDF7 File Offset: 0x0002DFF7
		internal NetMessageCount ClientDataNetMessageCount { get; set; }

		// Token: 0x1700097D RID: 2429
		// (get) Token: 0x06003A76 RID: 14966 RVA: 0x0002FE00 File Offset: 0x0002E000
		internal short ClientPositionDataMoveSequence
		{
			get
			{
				return (short)this.ObjectData.BodyData.MoveSequence;
			}
		}

		// Token: 0x1700097E RID: 2430
		// (get) Token: 0x06003A77 RID: 14967 RVA: 0x0002FE12 File Offset: 0x0002E012
		// (set) Token: 0x06003A78 RID: 14968 RVA: 0x0002FE1A File Offset: 0x0002E01A
		internal bool FlashOnUserIdentifierChange { get; set; }

		// Token: 0x1700097F RID: 2431
		// (get) Token: 0x06003A79 RID: 14969 RVA: 0x0002FE23 File Offset: 0x0002E023
		// (set) Token: 0x06003A7A RID: 14970 RVA: 0x000F2ECC File Offset: 0x000F10CC
		internal int UserIdentifier
		{
			get
			{
				return this.m_userIdentifier;
			}
			set
			{
				if (this.m_userIdentifier != value)
				{
					this.m_userIdentifier = value;
					this.UpdateCanDoPlayerAction();
					if (this.GameOwner != GameOwnerEnum.Server)
					{
						if (this.IsLocal && this.FlashOnUserIdentifierChange)
						{
							this.BeginFlash(1250f);
							return;
						}
						this.StopFlash();
					}
				}
			}
		}

		// Token: 0x17000980 RID: 2432
		// (get) Token: 0x06003A7B RID: 14971 RVA: 0x000F2F1C File Offset: 0x000F111C
		internal bool IsLocal
		{
			get
			{
				GameUser gameUser = this.GetGameUser();
				return gameUser != null && gameUser.IsLocal;
			}
		}

		// Token: 0x17000981 RID: 2433
		// (get) Token: 0x06003A7C RID: 14972 RVA: 0x000F2F3C File Offset: 0x000F113C
		internal bool HasLocalControl
		{
			get
			{
				GameUser gameUser = this.GetGameUser();
				return gameUser != null && gameUser.HasLocalControl;
			}
		}

		// Token: 0x17000982 RID: 2434
		// (get) Token: 0x06003A7D RID: 14973 RVA: 0x000F2F5C File Offset: 0x000F115C
		internal bool IsServerSideControls
		{
			get
			{
				if (!this.IsBot)
				{
					if (this.GameOwner != GameOwnerEnum.Local)
					{
						GameUser gameUser = this.GetGameUser();
						return gameUser != null && gameUser.UsingServerMovement;
					}
				}
				return true;
			}
		}

		// Token: 0x17000983 RID: 2435
		// (get) Token: 0x06003A7E RID: 14974 RVA: 0x0002FE2B File Offset: 0x0002E02B
		// (set) Token: 0x06003A7F RID: 14975 RVA: 0x0002FE33 File Offset: 0x0002E033
		internal GameOwnerEnum GameOwner { get; private set; }

		// Token: 0x17000984 RID: 2436
		// (get) Token: 0x06003A80 RID: 14976 RVA: 0x0002FE3C File Offset: 0x0002E03C
		internal GameWorld GameWorld
		{
			get
			{
				return this.m_gameWorld;
			}
		}

		// Token: 0x17000985 RID: 2437
		// (get) Token: 0x06003A81 RID: 14977 RVA: 0x0002FE44 File Offset: 0x0002E044
		// (set) Token: 0x06003A82 RID: 14978 RVA: 0x0002FE4C File Offset: 0x0002E04C
		internal PlayerScriptBridge ScriptBridge { get; set; }

		// Token: 0x17000986 RID: 2438
		// (get) Token: 0x06003A83 RID: 14979 RVA: 0x00005CBD File Offset: 0x00003EBD
		private SpriteBatch m_spriteBatch
		{
			get
			{
				return GameSFD.Handle.m_spriteBatch;
			}
		}

		// Token: 0x17000987 RID: 2439
		// (get) Token: 0x06003A84 RID: 14980 RVA: 0x0002FE55 File Offset: 0x0002E055
		internal Filter CollisionFilter
		{
			get
			{
				return this.m_playerFilterCollision;
			}
		}

		// Token: 0x17000988 RID: 2440
		// (get) Token: 0x06003A85 RID: 14981 RVA: 0x0002FE5D File Offset: 0x0002E05D
		// (set) Token: 0x06003A86 RID: 14982 RVA: 0x0002FE65 File Offset: 0x0002E065
		internal PlayerContacts Contacts { get; private set; }

		// Token: 0x06003A87 RID: 14983 RVA: 0x0002FE6E File Offset: 0x0002E06E
		internal Fixture GetFixtureCircle()
		{
			return this.m_playerFixtureCircle;
		}

		// Token: 0x06003A88 RID: 14984 RVA: 0x0002FE76 File Offset: 0x0002E076
		internal Fixture GetFixturePolygon()
		{
			return this.m_playerFixturePolygon;
		}

		// Token: 0x06003A89 RID: 14985 RVA: 0x0002FE7E File Offset: 0x0002E07E
		internal bool GetFixturePolygonEnabled()
		{
			return this.m_polygonFixtureEnabled;
		}

		// Token: 0x17000989 RID: 2441
		// (get) Token: 0x06003A8A RID: 14986 RVA: 0x0002FE86 File Offset: 0x0002E086
		// (set) Token: 0x06003A8B RID: 14987 RVA: 0x0002FE8D File Offset: 0x0002E08D
		internal static TWeaponVisuals ThrowingModeVisuals { get; set; }

		// Token: 0x1700098A RID: 2442
		// (get) Token: 0x06003A8C RID: 14988 RVA: 0x0002FE95 File Offset: 0x0002E095
		// (set) Token: 0x06003A8D RID: 14989 RVA: 0x0002FE9D File Offset: 0x0002E09D
		internal bool FirstUpdateRun { get; private set; }

		// Token: 0x1700098B RID: 2443
		// (get) Token: 0x06003A8E RID: 14990 RVA: 0x0002FEA6 File Offset: 0x0002E0A6
		// (set) Token: 0x06003A8F RID: 14991 RVA: 0x0002FEAE File Offset: 0x0002E0AE
		internal Player.RunNextUpdate FunctionRunNextUpdate { get; private set; }

		// Token: 0x1700098C RID: 2444
		// (get) Token: 0x06003A90 RID: 14992 RVA: 0x0002FEB7 File Offset: 0x0002E0B7
		// (set) Token: 0x06003A91 RID: 14993 RVA: 0x0002FEBF File Offset: 0x0002E0BF
		internal PlayerHitEffect PlayerHitEffect { get; set; }

		// Token: 0x06003A92 RID: 14994 RVA: 0x0002FEC8 File Offset: 0x0002E0C8
		internal void SetFunctionToRunNextUpdate(Player.RunNextUpdate update)
		{
			if (!this.IsRemoved && !this.m_removalRunning && this.FunctionRunNextUpdate < update)
			{
				this.FunctionRunNextUpdate = update;
			}
		}

		// Token: 0x06003A93 RID: 14995 RVA: 0x000F2F90 File Offset: 0x000F1190
		internal static void SetupPlayerCollisionFilter()
		{
			Tile tile = TileDatabase.Get("s_plr");
			if (tile != null && tile.TileFixtures.Count > 0)
			{
				Player.m_playerCollisionFilter = tile.TileFixtures[0].Filter.box2DFilter;
				return;
			}
			Player.m_playerCollisionFilter = default(Filter);
			Player.m_playerCollisionFilter.categoryBits = 4;
			Player.m_playerCollisionFilter.maskBits = 11;
			Player.m_playerCollisionFilter.aboveBits = 0;
			Player.m_playerCollisionFilter.blockFire = false;
		}

		// Token: 0x06003A94 RID: 14996 RVA: 0x0002FEEA File Offset: 0x0002E0EA
		internal static Filter GetPlayerCollisionFilter()
		{
			return Player.m_playerCollisionFilter;
		}

		// Token: 0x06003A95 RID: 14997 RVA: 0x000F3010 File Offset: 0x000F1210
		internal Player(GameSFD game, Body worldBody, GameWorld gameWorld, GameOwnerEnum gameOwner)
		{
			this.m_states = new bool[46];
			this.m_prevStatesOnUpdate = new bool[46];
			for (int i = 0; i < this.m_states.Length; i++)
			{
				this.m_states[i] = false;
				this.m_prevStatesOnUpdate[i] = false;
			}
			this.FirstUpdateRun = false;
			this.FunctionRunNextUpdate = Player.RunNextUpdate.None;
			this.PlayerHitEffect = PlayerHitEffect.Default;
			this.m_grabbedByPlayerValue = new CachedPlayerKey(gameWorld, false);
			this.m_caughtByPlayerValue = new CachedPlayerKey(gameWorld, false);
			this.m_holdingPlayerInDiveValue = new CachedPlayerKey(gameWorld, false);
			this.m_holdingPlayerInGrabValue = new CachedPlayerKey(gameWorld, false);
			this.VirtualKeyboard = new PlayerVirtualKeyboard();
			this.Shake = new Player.ShakeValues();
			this.Statisticts = new PlayerStatistics();
			this.m_isBot = true;
			this.m_botBehavior = new BotBehavior(false, PredefinedAIType.None);
			this.m_botBehavior.Active = false;
			this.m_flashTimer = 0f;
			this.SetInputEnabled(true);
			this.m_font = Constants.Font1;
			this.m_game = game;
			this.DrawStatusInfo = Player.DrawStatusInfoFlags.All;
			this.m_diveCollisionCheckResult = new Player.DiveCollisionCheckResult();
			this.m_barHealth = new BarMeter(100f, 100f);
			this.m_barEnergy = new BarMeter(100f, 100f);
			this.m_barOverHealth = new BarMeter(100f, 100f);
			this.m_barOverkillDamage = new BarMeter(150f, 150f);
			this.InitPlayerPresentation(this.m_game);
			this.InitModifiers();
			this.DeadTime = 0f;
			this.ManualAimBox2DTargetPosition = new Player.ManualAimTargetPosition();
			this.ManualAimBox2DTargetPosition.PositionEnabled = false;
			this.GameOwner = gameOwner;
			this.m_gameWorld = gameWorld;
			this.CurrentHandgunWeapon = null;
			this.CurrentRifleWeapon = null;
			this.CurrentThrownWeapon = null;
			this.CurrentMeleeWeapon = null;
			this.CurrentPowerupItem = null;
			if (gameWorld != null)
			{
				this.CreateTime = gameWorld.ElapsedTotalRealTime;
			}
			if (worldBody != null)
			{
				this.WorldBody = worldBody;
				this.ObjectData = ObjectData.Read(worldBody.GetFixtureList());
				this.ObjectData.InternalData = this;
				this.ScriptBridge = new PlayerScriptBridge(this, (ObjectPlayer)this.ObjectData);
				this.ObjectData.ScriptBridge = this.ScriptBridge;
			}
			this.FireSequence = new Player.FireSequenceValues(this);
			this.TimeSequence = new Player.TimeSequenceValues(this);
			this.Movement = PlayerMovement.Idle;
			this.CurrentAction = PlayerAction.Idle;
			this.IsValidBotEliminateTarget = true;
			this.AITargetData = new ObjectAITargetData(0f, PlayerTeam.Independent, ObjectAITargetMode.Default, 1f);
			this.LastObjectsHitInMelee = new HashSet<ObjectData>();
			this.m_botAIPackages = new Dictionary<Type, GameWorld.PlayerAIPackage>();
			this.m_botBehaviorSet = BotBehaviorSet.GetBotBehaviorPredefinedSet(PredefinedAIType.None);
			this.m_botAIDodgeProjectileHandledProjectiles = new HashSet<int>();
			this.m_botAIDodgeProjectileCheckedDodge = new HashSet<int>();
			this.InitCurrentTeam(Team.Independent);
			this.StandingOnGround = false;
			this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.NONE;
			this.CurrentWeaponQueued = SFD.Weapons.WeaponItemType.NONE;
			this.m_autoDropWeapon = SFD.Weapons.WeaponItemType.NONE;
			this.StandingOnBody = null;
			this.AimAngle = 0f;
			this.AimSpeed = 0f;
			this.AimMessageCount = new NetMessageCount();
			this.ClientDataNetMessageCount = new NetMessageCount();
			if (Player.m_meleeFists == null)
			{
				Player.m_meleeFists = WeaponDatabase.GetWeapon(7).MWeaponData;
			}
			if (Player.m_meleeFeet == null)
			{
				Player.m_meleeFeet = WeaponDatabase.GetWeapon(22).MWeaponData;
			}
			this.SecondSubAnimationFrameEvent += this.Player_SecondSubAnimationFrameEvent;
			this.m_rayCastInputs = new Box2D.XNA.RayCastInput[6];
			for (int j = 0; j < this.m_rayCastInputs.Length; j++)
			{
				this.m_rayCastInputs[j].maxFraction = 1f;
			}
			this.m_currentCollisionPlayerPlayerOverlappings = new Dictionary<Player, float>();
			this.m_keyActionsNew = new HashSet<int>();
			this.m_keyActionsOld = new HashSet<int>();
			this.m_keyActionsQueued = new List<Player.BotAIKeyPressAction>();
			this.m_keyActionsQueuedLookup = new Dictionary<int, Player.BotAIKeyPressAction>();
			if (this.WorldBody != null)
			{
				this.m_worldContactListener = (WorldContactListener)this.WorldBody.GetWorld().ContactListener;
				this.m_playerFixturePolygon = this.WorldBody.GetFixtureList();
				this.m_playerFixtureCircle = this.WorldBody.GetFixtureList();
				while (this.m_playerFixturePolygon.ShapeType != ShapeType.Polygon)
				{
					this.m_playerFixturePolygon = this.m_playerFixturePolygon.GetNext();
				}
				while (this.m_playerFixtureCircle.ShapeType != ShapeType.Circle || this.m_playerFixtureCircle.IsSensor())
				{
					this.m_playerFixtureCircle = this.m_playerFixtureCircle.GetNext();
				}
				this.m_playerFixturePolygon.GetFilterData(out this.m_playerFilterCollision);
				this.m_playerFilterNoCollision = this.m_playerFilterCollision;
				this.m_playerFilterNoCollision.categoryBits = 0;
				this.m_playerFilterNoCollision.maskBits = 0;
				this.m_projectileMissed = new List<Projectile>();
			}
			if (Player.m_textureCrosshair == null)
			{
				Player.m_textureCrosshair = Textures.GetTexture("CROSSHAIR");
			}
			this.CaughtByPlayerID = 0;
			this.HoldingPlayerInDiveID = 0;
			this.GrabbedByPlayerID = 0;
			this.HoldingPlayerInGrabID = 0;
			this.StandingOnGround = true;
			this.DisableJumpWhileHoldingUpKey = false;
			this.DisableFireWhileHoldingAttackKey = false;
			this.Contacts = new PlayerContacts(this);
			this.SlowmotionFactor = 1f;
			this.SlowmotionProjectileFactor = 1f;
			this.InitCommandActions();
			this.SpawnAnimation = Player.PlayerSpawnAnimation.None;
			this.UpdateCanDoPlayerAction();
			this.InitBotAI();
			this.InitTeamLineUp();
		}

		// Token: 0x06003A96 RID: 14998 RVA: 0x000F36DC File Offset: 0x000F18DC
		public override string ToString()
		{
			return string.Format("{0}, {1}, {2} {3}", new object[]
			{
				this.ObjectID,
				this.UserIdentifier,
				this.Name,
				this.IsBot ? "(IsBot)" : ""
			});
		}

		// Token: 0x06003A97 RID: 14999 RVA: 0x000F3738 File Offset: 0x000F1938
		internal GameSlot GetGameSlot()
		{
			GameUser gameUser = this.GetGameUser();
			if (gameUser == null)
			{
				return null;
			}
			return gameUser.GameSlot;
		}

		// Token: 0x06003A98 RID: 15000 RVA: 0x000F3758 File Offset: 0x000F1958
		internal GameConnectionTag GetGameConnectionTag()
		{
			GameUser gameUser = this.GetGameUser();
			if (gameUser == null)
			{
				return null;
			}
			return gameUser.GetGameConnectionTag();
		}

		// Token: 0x06003A99 RID: 15001 RVA: 0x000F3778 File Offset: 0x000F1978
		internal GameUser GetGameUser()
		{
			if (this.UserIdentifier == 0)
			{
				return null;
			}
			if (this.m_gameUserCache != null && !this.m_gameUserCache.IsDisposed && this.m_gameUserCache.UserIdentifier == this.UserIdentifier)
			{
				return this.m_gameUserCache;
			}
			if (this.GameWorld != null && this.GameWorld.GameInfo != null)
			{
				this.m_gameUserCache = this.GameWorld.GameInfo.GetGameUserByUserIdentifier(this.UserIdentifier);
			}
			else
			{
				this.m_gameUserCache = null;
			}
			return this.m_gameUserCache;
		}

		// Token: 0x1700098D RID: 2445
		// (get) Token: 0x06003A9A RID: 15002 RVA: 0x0002FEF1 File Offset: 0x0002E0F1
		internal bool IsDisposed
		{
			get
			{
				return this.m_isDisposed;
			}
		}

		// Token: 0x06003A9B RID: 15003 RVA: 0x000F3800 File Offset: 0x000F1A00
		internal void Dispose()
		{
			if (this.m_isDisposed)
			{
				return;
			}
			this.m_isDisposed = true;
			ConsoleOutput.ShowMessage(ConsoleOutputType.Information, string.Format("Disposing player " + this.ObjectID, new object[0]));
			if (this.GameOwner != GameOwnerEnum.Client)
			{
				this.CheckRocketRideDeath(false);
			}
			this.CommandData.EndContinousCommandActions();
			this.EndGrabbedPlayerPositionJoint();
			this.IsValidBotEliminateTarget = false;
			if (this.ObjectData != null)
			{
				this.ObjectData.Dispose();
				this.ObjectData = null;
			}
			if (this.WorldBody != null && this.WorldBody.GetWorld() != null)
			{
				this.WorldBody.GetWorld().DestroyBody(this.WorldBody);
				this.WorldBody = null;
			}
			this.ScriptBridge = null;
			this.m_worldContactListener = null;
			this.m_playerFixturePolygon = null;
			this.m_playerFixtureCircle = null;
			this.DisposeCommandActions();
			foreach (KeyValuePair<Type, GameWorld.PlayerAIPackage> keyValuePair in this.m_botAIPackages)
			{
				keyValuePair.Value.ClearData();
				keyValuePair.Value.Owner = null;
			}
			this.DisposeBotAI();
			this.AnimationUpperOverride = null;
			this.m_game = null;
			this.CurrentHandgunWeapon = null;
			this.CurrentRifleWeapon = null;
			this.CurrentMeleeWeapon = null;
			this.CurrentPowerupItem = null;
			this.BotAIForcedTarget = null;
			this.RemovePlayerPresentation();
			this.m_states = null;
			this.m_gameWorld = null;
			this.m_gameUserCache = null;
			if (this.m_diveCollisionCheckResult != null)
			{
				this.m_diveCollisionCheckResult.Dispose();
				this.m_diveCollisionCheckResult = null;
			}
			this.DisposeTeamLineUp();
			if (this.m_projectileMissed != null)
			{
				this.m_projectileMissed.Clear();
				this.m_projectileMissed = null;
			}
			if (this.PlayerKeyInputEvents != null)
			{
				this.PlayerKeyInputEvents.Clear();
				this.PlayerKeyInputEvents = null;
			}
			if (this.m_disabledFixturesForLedgeGrab != null)
			{
				this.m_disabledFixturesForLedgeGrab.Clear();
				this.m_disabledFixturesForLedgeGrab = null;
			}
			if (this.m_writeProjUpdateDataPool != null)
			{
				this.m_writeProjUpdateDataPool.Clear();
				this.m_writeProjUpdateDataPool = null;
			}
			if (this.LastObjectsHitInMelee != null)
			{
				this.LastObjectsHitInMelee.Clear();
				this.LastObjectsHitInMelee = null;
			}
			if (this.m_removedAddedWeaponCallbacks != null)
			{
				this.m_removedAddedWeaponCallbacks.Clear();
				this.m_removedAddedWeaponCallbacks = null;
			}
			this.DisposeModifiers();
			this.m_keyActionsNew.Clear();
			this.m_keyActionsNew = null;
			this.m_keyActionsOld.Clear();
			this.m_keyActionsOld = null;
			foreach (Player.BotAIKeyPressAction botAIKeyPressAction in this.m_keyActionsQueued)
			{
				botAIKeyPressAction.FlagFree();
			}
			this.m_keyActionsQueued.Clear();
			this.m_keyActionsQueued = null;
			this.m_keyActionsQueuedLookup.Clear();
			this.m_keyActionsQueuedLookup = null;
			if (this.m_botAIUnavailableTargets != null)
			{
				this.m_botAIUnavailableTargets.Clear();
				this.m_botAIUnavailableTargets = null;
			}
			if (this.m_botAIUnavailableTargetsAtNode != null)
			{
				foreach (KeyValuePair<int, HashSet<int>> keyValuePair2 in this.m_botAIUnavailableTargetsAtNode)
				{
					keyValuePair2.Value.Clear();
				}
				this.m_botAIUnavailableTargetsAtNode.Clear();
				this.m_botAIUnavailableTargetsAtNode = null;
			}
			if (this.m_botAIUnavailableActivateablePathConnections != null)
			{
				this.m_botAIUnavailableActivateablePathConnections.Clear();
				this.m_botAIUnavailableActivateablePathConnections = null;
			}
			this.SourceGuardTarget = null;
			this.m_botBehavior = null;
			this.VirtualKeyboard = null;
			this.FireSequence.Dispose();
			this.FireSequence = null;
			this.TimeSequence.Dispose();
			this.TimeSequence = null;
			this.StandingOnBody = null;
			this.AimMessageCount = null;
			this.SecondSubAnimationFrameEvent -= this.Player_SecondSubAnimationFrameEvent;
			this.m_rayCastInputs = null;
			if (this.m_grabbedByPlayerValue != null)
			{
				this.m_grabbedByPlayerValue.Dispose();
				this.m_grabbedByPlayerValue = null;
			}
			if (this.m_caughtByPlayerValue != null)
			{
				this.m_caughtByPlayerValue.Dispose();
				this.m_caughtByPlayerValue = null;
			}
			if (this.m_holdingPlayerInDiveValue != null)
			{
				this.m_holdingPlayerInDiveValue.Dispose();
				this.m_holdingPlayerInDiveValue = null;
			}
			if (this.m_holdingPlayerInGrabValue != null)
			{
				this.m_holdingPlayerInGrabValue.Dispose();
				this.m_holdingPlayerInGrabValue = null;
			}
		}

		// Token: 0x06003A9C RID: 15004 RVA: 0x0002FEF9 File Offset: 0x0002E0F9
		internal Microsoft.Xna.Framework.Vector2 GetPlayerCollisionTriggerVelocity()
		{
			if (!this.Disabled)
			{
				return new Microsoft.Xna.Framework.Vector2(10f, 15f);
			}
			if (this.GrabImmunity)
			{
				return new Microsoft.Xna.Framework.Vector2(5f);
			}
			return new Microsoft.Xna.Framework.Vector2(10f);
		}

		// Token: 0x06003A9D RID: 15005 RVA: 0x0002FF30 File Offset: 0x0002E130
		internal void SetCollisionPlayerPlayerOverlapping(Player other, float minimumTime)
		{
			this.m_currentCollisionPlayerPlayerOverlappings[other] = this.GameWorld.ElapsedTotalGameTime + minimumTime;
			other.m_currentCollisionPlayerPlayerOverlappings[this] = this.GameWorld.ElapsedTotalGameTime + minimumTime;
		}

		// Token: 0x06003A9E RID: 15006 RVA: 0x0002FF64 File Offset: 0x0002E164
		internal bool CheckCollisionPlayerPlayerOverlapping(Player other)
		{
			return this.m_currentCollisionPlayerPlayerOverlappings.ContainsKey(other);
		}

		// Token: 0x06003A9F RID: 15007 RVA: 0x0002FF72 File Offset: 0x0002E172
		internal void RemoveCollisionPlayerPlayerOverlapping(Player other)
		{
			this.m_currentCollisionPlayerPlayerOverlappings.Remove(other);
			other.m_currentCollisionPlayerPlayerOverlappings.Remove(this);
		}

		// Token: 0x06003AA0 RID: 15008 RVA: 0x000F3C34 File Offset: 0x000F1E34
		internal void ClearCollisionPlayerPlayerOverlappings()
		{
			foreach (KeyValuePair<Player, float> keyValuePair in this.m_currentCollisionPlayerPlayerOverlappings)
			{
				keyValuePair.Key.m_currentCollisionPlayerPlayerOverlappings.Remove(this);
			}
			this.m_currentCollisionPlayerPlayerOverlappings.Clear();
		}

		// Token: 0x06003AA1 RID: 15009 RVA: 0x000F3CA0 File Offset: 0x000F1EA0
		internal void UpdateCollisionPlayerPlayerOverlappings()
		{
			if (this.m_currentCollisionPlayerPlayerOverlappings.Count > 0)
			{
				List<Player> list = null;
				foreach (KeyValuePair<Player, float> keyValuePair in this.m_currentCollisionPlayerPlayerOverlappings)
				{
					if (keyValuePair.Value < this.GameWorld.ElapsedTotalGameTime)
					{
						Player key = keyValuePair.Key;
						if (((this.StandingOnGround & !this.Disabled) && (key.StandingOnGround & !key.Disabled)) || Math.Abs(this.PreBox2DPosition.X - key.PreBox2DPosition.X) > 0.44f || Math.Abs(this.PreBox2DPosition.Y - key.PreBox2DPosition.Y) > 0.76f)
						{
							if (list == null)
							{
								list = new List<Player>();
							}
							list.Add(key);
						}
					}
				}
				if (list != null)
				{
					foreach (Player other in list)
					{
						this.RemoveCollisionPlayerPlayerOverlapping(other);
					}
					list.Clear();
				}
			}
		}

		// Token: 0x06003AA2 RID: 15010 RVA: 0x000F3DE8 File Offset: 0x000F1FE8
		internal void SyncPlayerMetaData(NetConnection singleRecipient = null)
		{
			if (this.GameOwner == GameOwnerEnum.Server)
			{
				if (this.m_game.Server != null)
				{
					NetMessage.PlayerUpdateMetaData.Data data = new NetMessage.PlayerUpdateMetaData.Data(this, this.m_game.Server.NextInvariantSequenceNr());
					NetOutgoingMessage msg = NetMessage.PlayerUpdateMetaData.Write(ref data, GameSFD.Handle.Server.NetServer.CreateMessage());
					if (singleRecipient == null)
					{
						GameSFD.Handle.Server.NetServer.SendToAll(msg, null, NetMessage.PlayerUpdateMetaData.Delivery.Method, NetMessage.PlayerUpdateMetaData.Delivery.Channel);
						return;
					}
					GameSFD.Handle.Server.NetServer.SendMessage(msg, singleRecipient, NetMessage.PlayerUpdateMetaData.Delivery.Method, NetMessage.PlayerUpdateMetaData.Delivery.Channel);
					return;
				}
				else
				{
					ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "Player.SyncPlayerMetaData - Server is null");
				}
			}
		}

		// Token: 0x06003AA3 RID: 15011 RVA: 0x000F3EB0 File Offset: 0x000F20B0
		internal void UpdatePlayerMetaData(NetMessage.PlayerUpdateMetaData.Data data)
		{
			GameInfo gameInfo = (this.GameWorld != null) ? this.GameWorld.GameInfo : null;
			GameUser gameUser = (gameInfo != null) ? gameInfo.GetGameUserByUserIdentifier(this.UserIdentifier) : null;
			GameUser gameUser2 = (gameInfo != null) ? gameInfo.GetGameUserByUserIdentifier(data.UserIdentifier) : null;
			this.InitCurrentTeam(data.Team);
			this.m_isBot = data.IsBot;
			this.m_botBehavior.Active = data.BotBehaviorActive;
			this.FlashOnUserIdentifierChange = data.FlashOnUserIdentifierChange;
			this.UserIdentifier = data.UserIdentifier;
			this.ApplyProfile(data.Profile, false);
			this.SetName(data.Name);
			this.DrawStatusInfo = data.DrawStatusInfo;
			this.CameraSecondaryFocusMode = data.CameraSecondaryFocusMode;
			if (gameUser != null && gameUser.LastPlayerID == this.ObjectID)
			{
				gameUser.LastPlayerID = 0;
			}
			if (gameUser2 != null)
			{
				gameUser2.LastPlayerID = this.ObjectID;
			}
		}

		// Token: 0x06003AA4 RID: 15012 RVA: 0x000F3FA0 File Offset: 0x000F21A0
		internal void SetUser(int newUserIdentifier, bool flash = true)
		{
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				throw new Exception("Client musn't call Player.SetUser()");
			}
			this.FlashOnUserIdentifierChange = flash;
			if (newUserIdentifier == 0)
			{
				if (this.UserIdentifier != 0)
				{
					bool flag = true;
					GameUser gameUserByUserIdentifier = this.GameWorld.GameInfo.GetGameUserByUserIdentifier(this.UserIdentifier);
					if (gameUserByUserIdentifier != null)
					{
						gameUserByUserIdentifier.LastPlayerID = 0;
						if (gameUserByUserIdentifier.IsBot)
						{
							flag = false;
						}
					}
					this.UserIdentifier = 0;
					if (flag)
					{
						this.SetName("COM");
					}
					this.SetIsBot(true);
					this.ReleaseAllVirtualKeys();
					this.MetaDataUpdated = true;
					this.ClientDataNetMessageCount.ResetMessageCountSendReceive();
					this.ForceServerMovementState(30);
					this.ForceServerPositionState();
					return;
				}
			}
			else if (this.UserIdentifier != newUserIdentifier)
			{
				Player playerByUserIdentifier = this.GameWorld.GetPlayerByUserIdentifier(newUserIdentifier);
				if (playerByUserIdentifier != null)
				{
					playerByUserIdentifier.SetUser(0, true);
				}
				GameUser gameUserByUserIdentifier2 = this.GameWorld.GameInfo.GetGameUserByUserIdentifier(newUserIdentifier);
				if (gameUserByUserIdentifier2 != null)
				{
					this.UserIdentifier = newUserIdentifier;
					this.SetName(gameUserByUserIdentifier2.GetProfileName());
					this.SetIsBot(gameUserByUserIdentifier2.IsBot);
					gameUserByUserIdentifier2.LastPlayerID = this.ObjectID;
					if (gameUserByUserIdentifier2.SpectatingWhileWaitingToPlay)
					{
						gameUserByUserIdentifier2.SpectatingWhileWaitingToPlay = false;
						if (this.GameOwner == GameOwnerEnum.Server && this.m_game.Server != null)
						{
							this.m_game.Server.SyncGameUserInfo(gameUserByUserIdentifier2, null);
						}
					}
					this.ReleaseAllVirtualKeys();
					this.MetaDataUpdated = true;
					if (this.GameOwner != GameOwnerEnum.Client)
					{
						GameSlot gameSlot = this.GetGameSlot();
						if (gameSlot != null && gameSlot.CurrentTeam != this.m_currentTeam)
						{
							gameSlot.CurrentTeam = this.m_currentTeam;
							if (this.GameOwner == GameOwnerEnum.Server && this.m_game.Server != null)
							{
								this.m_game.Server.SyncGameSlotInfo(gameSlot, null);
							}
						}
					}
					this.ClientDataNetMessageCount.ResetMessageCountSendReceive();
					this.ForceServerMovementState(30);
					this.ForceServerPositionState();
					return;
				}
				ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "SetUser() didn't find GameUser with ID " + newUserIdentifier.ToString());
				this.SetUser(0, true);
			}
		}

		// Token: 0x06003AA5 RID: 15013 RVA: 0x000F4188 File Offset: 0x000F2388
		private void HandleAnimationMainEven(AnimationEvent animationEvent, int subAnimation)
		{
			if (this.GameWorld != null && !this.GameWorld.EditMode)
			{
				bool flag;
				bool flag2;
				this.GetPlayerKeyActions(out flag, out flag2);
				if (subAnimation == 1)
				{
					switch (this.CurrentWeaponDrawn)
					{
					case SFD.Weapons.WeaponItemType.Handgun:
					case SFD.Weapons.WeaponItemType.Rifle:
					{
						RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
						if (currentRangedWeaponInUse != null)
						{
							currentRangedWeaponInUse.OnSubAnimationEvent(this, animationEvent, this.m_subAnimations[1].GetAnimation(), this.m_subAnimations[1].GetCurrentFrameIndex());
						}
						break;
					}
					case SFD.Weapons.WeaponItemType.Thrown:
					{
						TWeapon currentThrownWeaponInUse = this.GetCurrentThrownWeaponInUse();
						if (currentThrownWeaponInUse != null)
						{
							currentThrownWeaponInUse.OnSubAnimationEvent(this, animationEvent, this.m_subAnimations[1].GetAnimation(), this.m_subAnimations[1].GetCurrentFrameIndex());
						}
						break;
					}
					case SFD.Weapons.WeaponItemType.Melee:
					{
						MWeapon currentMeleeWeaponInUse = this.GetCurrentMeleeWeaponInUse(false);
						if (currentMeleeWeaponInUse != null)
						{
							currentMeleeWeaponInUse.OnSubAnimationEvent(this, animationEvent, this.m_subAnimations[1].GetAnimation(), this.m_subAnimations[1].GetCurrentFrameIndex());
						}
						break;
					}
					}
				}
				if (animationEvent == AnimationEvent.AnimationRestart && this.ManualAimStart && this.CurrentAction == PlayerAction.ManualAim && subAnimation == 1)
				{
					this.ManualAimStart = false;
					this.ForceHardAnimationReset(false);
				}
				IPlayerUpperAnimationOverride animationUpperOverride = this.AnimationUpperOverride;
				if (animationUpperOverride != null)
				{
					SubAnimationPlayer subAnimationPlayer = this.GetSubAnimations()[subAnimation];
					if (subAnimationPlayer.GetAnimation().Name == animationUpperOverride.OverrideUpperAnimation())
					{
						animationUpperOverride.OverrideUpperAnimationEnterFrame(this, animationEvent, subAnimationPlayer);
						if (animationEvent == AnimationEvent.AnimationRestart)
						{
							this.AnimationUpperOverride = null;
							IPlayerUpperAnimFinishedArgs playerUpperAnimFinishedArgs;
							playerUpperAnimFinishedArgs.KeepOverrideAnimationAlive = false;
							animationUpperOverride.OverrideUpperAnimationFinished(this, ref playerUpperAnimFinishedArgs);
							if (playerUpperAnimFinishedArgs.KeepOverrideAnimationAlive)
							{
								this.AnimationUpperOverride = animationUpperOverride;
							}
						}
					}
				}
				if (animationEvent == AnimationEvent.Throw)
				{
					this.ReleaseThrow();
				}
				if (this.GameOwner != GameOwnerEnum.Server)
				{
					switch (animationEvent)
					{
					case AnimationEvent.MeleeHit:
					case AnimationEvent.KickHit:
						if (this.GameWorld != null)
						{
							this.GameWorld.BringPlayerToFront.Add(this);
						}
						break;
					case AnimationEvent.Step:
					{
						Body standingOnBody = this.StandingOnBody;
						if (standingOnBody != null)
						{
							ObjectData objectData = ObjectData.Read(standingOnBody.GetFixtureList());
							Material tileFixtureMaterial = objectData.Tile.GetTileFixtureMaterial(0);
							if (tileFixtureMaterial != null && !string.IsNullOrEmpty(tileFixtureMaterial.StepSound))
							{
								SoundHandler.PlaySound(tileFixtureMaterial.StepSound, this.Position, 1f, this.GameWorld);
							}
						}
						if (this.Sprinting)
						{
							EffectHandler.PlayEffect("F_S", this.Position, this.GameWorld, new object[]
							{
								Converter.Box2DToWorld(this.WorldBody.GetLinearVelocity())
							});
						}
						break;
					}
					case AnimationEvent.Swing:
						if (this.CurrentAction != PlayerAction.Kick)
						{
							if (this.CurrentAction != PlayerAction.JumpKick)
							{
								SoundHandler.PlaySound(this.GetCurrentMeleeWeaponInUse(false).Properties.SwingSoundID, this.Position, this.GameWorld);
								break;
							}
						}
						SoundHandler.PlaySound("MeleeSwing", this.Position, this.GameWorld);
						break;
					case AnimationEvent.Dig:
						SoundHandler.PlaySound("Dig", this.Position, 1f, this.GameWorld);
						EffectHandler.PlayEffect("DIG", this.Position, this.GameWorld);
						break;
					}
				}
				if (flag && animationEvent == AnimationEvent.AnimationRestart && this.GetAnimation() == Animation.Roll && subAnimation == 0)
				{
					this.Crouching = true;
				}
				if (animationEvent == AnimationEvent.MeleeHit && (this.LastMeleeAction != PlayerAction.JumpAttack || !this.m_havePerformedJumpAttack))
				{
					this.PerformMeleeHit();
				}
				if (animationEvent == AnimationEvent.KickHit)
				{
					this.PerformKickHit();
				}
				if (animationEvent == AnimationEvent.GrabAttackHit)
				{
					this.PerformGrabAttackHit();
				}
				if (animationEvent == AnimationEvent.GrabThrow)
				{
					this.PerformGrabThrow();
				}
				if (flag2 && animationEvent == AnimationEvent.AnimationRestart)
				{
					if (this.DeathKneeling)
					{
						if (this.CanCommandPlayer && this.CommandData.ContinousDeathKneel)
						{
							this.StopAnimation();
						}
						else
						{
							this.OnDeathKneelOver();
						}
					}
					if (this.CurrentAction == PlayerAction.DrawWeapon && subAnimation == 1)
					{
						this.CurrentAction = PlayerAction.Idle;
						this.UpdateAnimation();
						this.ImportantUpdate = true;
					}
					if ((this.CurrentAction == PlayerAction.MeleeAttack1 || this.CurrentAction == PlayerAction.MeleeAttack2 || this.CurrentAction == PlayerAction.MeleeAttack3) && subAnimation == 1)
					{
						this.CurrentAction = PlayerAction.Idle;
						this.UpdateAnimation();
						this.ImportantUpdate = true;
					}
					if (this.CurrentAction == PlayerAction.ThrowThrowing && subAnimation == 1)
					{
						this.ThrowCharging = false;
						this.CurrentAction = PlayerAction.Idle;
						this.UpdateAnimation();
						this.ImportantUpdate = true;
					}
					if (this.CurrentAction == PlayerAction.Kick && subAnimation == 0)
					{
						this.CurrentActionToIdle();
						this.UpdateAnimation();
						this.ImportantUpdate = true;
					}
					if (this.CurrentAction == PlayerAction.Grabbing && (this.GrabAttacking | this.GrabThrowing) && subAnimation == 0)
					{
						this.DisableGrabbing(true);
						this.ForceClientMovementState(10);
						this.ImportantUpdate = true;
					}
				}
				if (animationEvent == AnimationEvent.AnimationRestart)
				{
					if (this.GetAnimation() == Animation.Roll && subAnimation == 0)
					{
						this.Rolling = false;
						this.UpdateAnimation();
						this.Crouching = true;
						this.ForceClientMovementState(2);
						this.ForceServerMovementState(2);
						this.ImportantUpdate = true;
					}
					if (this.SpawnAnimation != Player.PlayerSpawnAnimation.None && this.GetAnimation() == Animation.Idle && subAnimation == 0)
					{
						this.SpawnAnimation = Player.PlayerSpawnAnimation.None;
					}
				}
				return;
			}
		}

		// Token: 0x06003AA6 RID: 15014 RVA: 0x000F4650 File Offset: 0x000F2850
		internal void Kill(bool forceDeathKneelIfStandingOnGround = false, bool checkRocketRideDeath = true)
		{
			if (!this.IsDead)
			{
				if (!this.FirstUpdateRun)
				{
					this.SetFunctionToRunNextUpdate(Player.RunNextUpdate.Kill);
					return;
				}
				this.IsDead = true;
				this.Health.CurrentValue = 0f;
				if (this.OnDeath(Player.OnDeathScream.Standard, true, false))
				{
					if (forceDeathKneelIfStandingOnGround && this.StandingOnGround)
					{
						this.StartDeathKneel();
					}
					else
					{
						this.Fall();
					}
					this.ForceServerMovementState(40);
					this.ForceServerPositionState();
					if (checkRocketRideDeath)
					{
						this.CheckRocketRideDeath(true);
					}
				}
			}
		}

		// Token: 0x06003AA7 RID: 15015 RVA: 0x000F46CC File Offset: 0x000F28CC
		internal bool DeleteAndKick(Player.DeleteAndKickReason kickReason = Player.DeleteAndKickReason.ByUser)
		{
			GameUser gameUser = this.GetGameUser();
			if (gameUser != null)
			{
				this.GameWorld.GameInfo.StorePlayerStats(gameUser);
				gameUser.SpawnIndex = -1;
			}
			this.Remove(true);
			if (this.GameOwner != GameOwnerEnum.Server)
			{
				ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "TODO: Player.Delete() on GameOwners other than Server.");
				return false;
			}
			GameConnectionTag gameConnectionTag = this.GetGameConnectionTag();
			NetConnection netConnection = (gameConnectionTag != null) ? gameConnectionTag.NetConnection : null;
			if (netConnection != null)
			{
				KickList.Add(netConnection, gameConnectionTag.GetFirstGameUserProfileName(), Constants.HOST_GAME_DEFAULT_KICK_DURATION_MINUTES);
				string byeMessage = "connection.failed.kicked";
				switch (kickReason)
				{
				case Player.DeleteAndKickReason.ByUser:
					byeMessage = "connection.failed.kicked";
					break;
				case Player.DeleteAndKickReason.AutoHighPing:
					byeMessage = "connection.failed.highping";
					break;
				case Player.DeleteAndKickReason.AutoAFKTime:
					byeMessage = "connection.failed.afktime";
					break;
				}
				netConnection.Disconnect(byeMessage);
				return true;
			}
			return false;
		}

		// Token: 0x06003AA8 RID: 15016 RVA: 0x000F4780 File Offset: 0x000F2980
		private void DropAllWeapons()
		{
			GameUser gameUser = this.GetGameUser();
			if (!this.IsBot && (this.IsRemoved || (gameUser != null && !gameUser.AFKHasMadeAction)))
			{
				return;
			}
			Microsoft.Xna.Framework.Vector2 dropOffset = Converter.ConvertBox2DToWorld(this.WorldBody.GetPosition()) - this.Position;
			SFD.Weapons.WeaponItemType[] array = new SFD.Weapons.WeaponItemType[]
			{
				SFD.Weapons.WeaponItemType.Melee,
				SFD.Weapons.WeaponItemType.Melee,
				SFD.Weapons.WeaponItemType.Handgun,
				SFD.Weapons.WeaponItemType.Rifle,
				SFD.Weapons.WeaponItemType.Thrown,
				SFD.Weapons.WeaponItemType.Powerup
			};
			foreach (SFD.Weapons.WeaponItemType weaponItemType in array)
			{
				int directionToDrop = (Constants.RANDOM.NextDouble() < 0.5) ? 1 : -1;
				this.DropWeaponItem(weaponItemType, directionToDrop, new Microsoft.Xna.Framework.Vector2(Constants.RANDOM.NextFloat(0.5f, 0.95f), Constants.RANDOM.NextFloat(0.6f, 1.3f)), this.CurrentWeaponDrawn == weaponItemType, dropOffset, false, Player.DropWeaponItemSource.Other);
			}
		}

		// Token: 0x06003AA9 RID: 15017 RVA: 0x000F4870 File Offset: 0x000F2A70
		internal void Gib()
		{
			if (!this.IsRemoved && !this.m_removalRunning)
			{
				this.DropAllWeapons();
				if (this.PlayerHitEffect == PlayerHitEffect.Default)
				{
					SoundHandler.PlaySound("PlayerGib", this.Position, this.GameWorld);
					EffectHandler.PlayEffect("GIB", this.Position, this.GameWorld);
					for (int i = 0; i < 5; i++)
					{
						Microsoft.Xna.Framework.Vector2 value = Converter.ConvertBox2DToWorld(this.WorldBody.GetPosition());
						Microsoft.Xna.Framework.Vector2 zero = Microsoft.Xna.Framework.Vector2.Zero;
						SpawnObjectInformation spawnObjectInformation = new SpawnObjectInformation(this.GameWorld.IDCounter.NextObjectData("Giblet0" + i), value + zero * 4f, 1f, 1, new Microsoft.Xna.Framework.Vector2(Constants.RANDOM.NextFloat(-4.5f, 4.5f), Constants.RANDOM.NextFloat(4f, 4f)), Constants.RANDOM.NextFloat(-0.3f, 0.3f));
						spawnObjectInformation.FireBurning = this.ObjectData.Fire.IsBurning;
						spawnObjectInformation.FireSmoking = this.ObjectData.Fire.IsSmoking;
						this.GameWorld.CreateTile(spawnObjectInformation);
					}
				}
				else if (this.PlayerHitEffect == PlayerHitEffect.Metal)
				{
					SoundHandler.PlaySound("Break", this.Position, this.GameWorld);
					EffectHandler.PlayEffect("DestroyMetal", this.Position, this.GameWorld);
				}
				this.Remove(true);
			}
		}

		// Token: 0x06003AAA RID: 15018 RVA: 0x0002FF8E File Offset: 0x0002E18E
		private void OnDamage(PlayerDamageEventType type, float damage, bool overkillDamage, int sourceID)
		{
			if (damage > 0f)
			{
				this.RunOnDamagePlayerTriggers(type, damage, overkillDamage, sourceID);
			}
		}

		// Token: 0x06003AAB RID: 15019 RVA: 0x000F49F0 File Offset: 0x000F2BF0
		private bool OnDeath(Player.OnDeathScream deathScream = Player.OnDeathScream.Standard, bool wasAlive = true, bool onRemove = false)
		{
			PlayerDeathEventType playerDeathEventType = wasAlive ? PlayerDeathEventType.Killed : PlayerDeathEventType.Removed;
			if (onRemove)
			{
				playerDeathEventType |= PlayerDeathEventType.Removed;
			}
			this.RunOnDeathPlayerTriggers(playerDeathEventType);
			if (!this.Health.IsEmpty && !this.IsRemoved)
			{
				this.IsDead = false;
				this.IsRemoved = false;
				this.CancelDeathKneel();
				this.TimeSequence.TimeStagger = 0f;
				return false;
			}
			if (deathScream == Player.OnDeathScream.Standard && Constants.RANDOM.NextDouble() <= 0.009999999776482582)
			{
				this.PlayScream();
			}
			return true;
		}

		// Token: 0x1700098E RID: 2446
		// (get) Token: 0x06003AAC RID: 15020 RVA: 0x0002FFA3 File Offset: 0x0002E1A3
		// (set) Token: 0x06003AAD RID: 15021 RVA: 0x0002FFAB File Offset: 0x0002E1AB
		internal bool RunOnDamagePlayerTriggersActive { get; private set; }

		// Token: 0x06003AAE RID: 15022 RVA: 0x000F4A70 File Offset: 0x000F2C70
		private void RunOnDamagePlayerTriggers(PlayerDamageEventType damageType, float damage, bool overkillDamage, int sourceID)
		{
			this.RunOnDamagePlayerTriggersActive = true;
			try
			{
				this.GameWorld.RunScriptOnPlayerDamageCallbacks(this, damageType, damage, overkillDamage, sourceID);
				if (!overkillDamage)
				{
					List<ObjectOnPlayerDamageTrigger> list = null;
					foreach (ObjectOnPlayerDamageTrigger objectOnPlayerDamageTrigger in this.GameWorld.OnPlayerDamageTriggers)
					{
						if (!objectOnPlayerDamageTrigger.IsPlayerCommandSourceSet() || objectOnPlayerDamageTrigger.GetPlayerCommandSourcePlayer() == this)
						{
							if (list == null)
							{
								list = new List<ObjectOnPlayerDamageTrigger>();
							}
							list.Add(objectOnPlayerDamageTrigger);
						}
					}
					if (list != null)
					{
						foreach (ObjectOnPlayerDamageTrigger objectOnPlayerDamageTrigger2 in list)
						{
							if (!objectOnPlayerDamageTrigger2.IsDisposed)
							{
								objectOnPlayerDamageTrigger2.TriggerNodeOnPlayerDamage(this.ScriptBridge, damage);
							}
						}
					}
				}
			}
			finally
			{
				this.RunOnDamagePlayerTriggersActive = false;
			}
		}

		// Token: 0x06003AAF RID: 15023 RVA: 0x000F4B6C File Offset: 0x000F2D6C
		private void RunOnDeathPlayerTriggers(PlayerDeathEventType deathType)
		{
			this.GameWorld.RunScriptOnPlayerDeathCallbacks(this, deathType);
			List<ObjectOnPlayerDeathTrigger> list = null;
			foreach (ObjectOnPlayerDeathTrigger objectOnPlayerDeathTrigger in this.GameWorld.OnPlayerDeathTriggers)
			{
				if (!objectOnPlayerDeathTrigger.IsPlayerCommandSourceSet() || objectOnPlayerDeathTrigger.GetPlayerCommandSourcePlayer() == this)
				{
					if (list == null)
					{
						list = new List<ObjectOnPlayerDeathTrigger>();
					}
					list.Add(objectOnPlayerDeathTrigger);
				}
			}
			if (list != null)
			{
				foreach (ObjectOnPlayerDeathTrigger objectOnPlayerDeathTrigger2 in list)
				{
					if (!objectOnPlayerDeathTrigger2.IsDisposed)
					{
						objectOnPlayerDeathTrigger2.TriggerNodeOnPlayerDeath(this.ScriptBridge);
					}
				}
			}
		}

		// Token: 0x06003AB0 RID: 15024 RVA: 0x000F4C40 File Offset: 0x000F2E40
		internal void Remove(bool runOnDeathScripts = true)
		{
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				throw new Exception("Error: Client musn't call Player.Remove()");
			}
			if (!this.FirstUpdateRun)
			{
				this.SetFunctionToRunNextUpdate(Player.RunNextUpdate.Remove);
				return;
			}
			if (this.m_removalRunning)
			{
				return;
			}
			this.m_removalRunning = true;
			this.DropGrabbedPlayer(null, false, true, true);
			this.DropCaughtByPlayer();
			this.m_coverObject = null;
			bool wasAlive = !this.IsDead;
			this.Health.CurrentValue = 0f;
			this.IsDead = true;
			this.ForceServerMovementState(40);
			this.ForceServerPositionState();
			this.CheckRocketRideDeath(false);
			if (runOnDeathScripts)
			{
				this.OnDeath(Player.OnDeathScream.Ignore, wasAlive, true);
			}
			this.IsRemoved = true;
			this.IsDead = true;
			this.Health.CurrentValue = 0f;
			if (this.ObjectData != null)
			{
				this.ObjectData.Remove();
			}
			this.m_removalRunning = false;
		}

		// Token: 0x06003AB1 RID: 15025 RVA: 0x0002FFB4 File Offset: 0x0002E1B4
		internal Microsoft.Xna.Framework.Vector2 GetGravityLineNormal()
		{
			return -Microsoft.Xna.Framework.Vector2.UnitY;
		}

		// Token: 0x06003AB2 RID: 15026 RVA: 0x000F4D1C File Offset: 0x000F2F1C
		private void CheckQueuedDive()
		{
			if (this.Sprinting && this.CanDoPlayerAction && this.CurrentAction == PlayerAction.Idle && this.VirtualKeyboard.PressingKey(20, false) && this.CanDive() && this.CheckDiveVelocityReached())
			{
				this.Dive();
			}
		}

		// Token: 0x06003AB3 RID: 15027 RVA: 0x0002FFC0 File Offset: 0x0002E1C0
		internal bool CheckIgnoreStandingOnBodyVelocity(ObjectData objectData)
		{
			return this.CurrentAction == PlayerAction.Kick || (this.m_ignoreStandingOnBodyVelocityTimer > 0f && this.Movement == PlayerMovement.Idle) || (objectData != null && objectData.IgnoreKickVelocityForPlayerID == this.ObjectID && this.Movement == PlayerMovement.Idle);
		}

		// Token: 0x1700098F RID: 2447
		// (get) Token: 0x06003AB4 RID: 15028 RVA: 0x0002FFFF File Offset: 0x0002E1FF
		// (set) Token: 0x06003AB5 RID: 15029 RVA: 0x00030007 File Offset: 0x0002E207
		internal Microsoft.Xna.Framework.Vector2 PreBox2DLinearVelocity
		{
			get
			{
				return this.m_preBox2DLinearVelocity;
			}
			set
			{
				this.m_preBox2DLinearVelocity = value;
			}
		}

		// Token: 0x17000990 RID: 2448
		// (get) Token: 0x06003AB6 RID: 15030 RVA: 0x00030010 File Offset: 0x0002E210
		// (set) Token: 0x06003AB7 RID: 15031 RVA: 0x00030018 File Offset: 0x0002E218
		internal Microsoft.Xna.Framework.Vector2 PreBox2DPosition
		{
			get
			{
				return this.m_preBox2DPosition;
			}
			set
			{
				this.m_preBox2DPosition = value;
			}
		}

		// Token: 0x17000991 RID: 2449
		// (get) Token: 0x06003AB8 RID: 15032 RVA: 0x00030021 File Offset: 0x0002E221
		internal Microsoft.Xna.Framework.Vector2 LastBox2DPositionGround
		{
			get
			{
				return this.m_lastBox2DPositionOnGround;
			}
		}

		// Token: 0x17000992 RID: 2450
		// (get) Token: 0x06003AB9 RID: 15033 RVA: 0x00030029 File Offset: 0x0002E229
		internal Microsoft.Xna.Framework.Vector2 PreWorld2DPosition
		{
			get
			{
				return Converter.ConvertBox2DToWorld(this.m_preBox2DPosition);
			}
		}

		// Token: 0x06003ABA RID: 15034 RVA: 0x000F4D68 File Offset: 0x000F2F68
		private void CheckLedgeGrabFixtures()
		{
			if (this.m_checkLedgeGrabFixtures.Count > 0)
			{
				if ((this.GameOwner != GameOwnerEnum.Client || this.HasLocalControl) && this.m_canLedgeGrabBeforeBox2DStep)
				{
					float num = (this.VirtualKeyboardLastMovement == PlayerMovement.Right) ? 1f : ((this.VirtualKeyboardLastMovement == PlayerMovement.Left) ? -1f : 0f);
					if (num != 0f)
					{
						Microsoft.Xna.Framework.Vector2 verticeWorldPoint = this.m_checkLedgeGrabFixtures[0].VerticeWorldPoint;
						for (int i = 1; i < this.m_checkLedgeGrabFixtures.Count; i++)
						{
							Player.LedgeGrabFixtureCheck ledgeGrabFixtureCheck = this.m_checkLedgeGrabFixtures[i];
							if ((num < 0f & ledgeGrabFixtureCheck.VerticeWorldPoint.X < verticeWorldPoint.X) || (num > 0f & ledgeGrabFixtureCheck.VerticeWorldPoint.X > verticeWorldPoint.X))
							{
								verticeWorldPoint = ledgeGrabFixtureCheck.VerticeWorldPoint;
							}
						}
						verticeWorldPoint.X -= num * 0.16f * 1.2f;
						verticeWorldPoint.Y -= 0.16f;
						this.CheckLedgeGrab(this.GetGravityLineNormal(), verticeWorldPoint, true);
						if (this.LedgeGrabbing)
						{
							this.Contacts.ClearBounceContacts();
							this.ClearNewRegisteredObjectImpacts(false);
						}
					}
				}
				this.m_checkLedgeGrabFixtures.Clear();
			}
		}

		// Token: 0x06003ABB RID: 15035 RVA: 0x000F4EB4 File Offset: 0x000F30B4
		private bool HoldingPlayerInGrabCollision()
		{
			Player holdingPlayerInGrab = this.HoldingPlayerInGrab;
			return holdingPlayerInGrab != null && holdingPlayerInGrab.IsDead && (holdingPlayerInGrab.Contacts.LeftCollisionContactsCount > 0 || holdingPlayerInGrab.Contacts.RightCollisionContactsCount > 0 || holdingPlayerInGrab.Contacts.LeftMostWalkContact != null || holdingPlayerInGrab.Contacts.RightMostWalkContact != null);
		}

		// Token: 0x06003ABC RID: 15036 RVA: 0x00030036 File Offset: 0x0002E236
		internal void AddLedgeGrabFixtureCheck(Fixture fixture, int verticeIndex, Microsoft.Xna.Framework.Vector2 verticeWorldPoint)
		{
			this.m_checkLedgeGrabFixtures.Add(new Player.LedgeGrabFixtureCheck(fixture, verticeIndex, verticeWorldPoint));
		}

		// Token: 0x06003ABD RID: 15037 RVA: 0x000F4F0C File Offset: 0x000F310C
		internal void StepPlayerPreBox2DAction(float box2Dtimestep)
		{
			if (!this.IsRemoved)
			{
				this.UpdateStickyFeet();
				if (!this.IsHoldingPlayerInGrab & this.m_grabMouseJointTarget != 0)
				{
					this.EndGrabbedPlayerPositionJoint();
				}
				this.m_currentActionTimeBeforeBox2DAction = this.CurrentActionTime;
				this.CheckRepositionToCloud();
				this.m_canLedgeGrabBeforeBox2DStep = this.CanLedgeGrab();
				Microsoft.Xna.Framework.Vector2 preBox2DLinearVelocity = this.m_preBox2DLinearVelocity;
				this.m_preBox2DLinearVelocity = this.WorldBody.GetLinearVelocity();
				this.m_preBox2DPosition = this.WorldBody.GetPosition();
				Microsoft.Xna.Framework.Vector2 gravityLineNormal = this.GetGravityLineNormal();
				this.CheckForceKneel(gravityLineNormal);
				this.UpdateEnableDisableRect();
				this.UpdateContactNormals(gravityLineNormal, box2Dtimestep);
				Body standingOnBody = this.StandingOnBody;
				bool flag = this.m_states[1];
				bool flag2 = this.m_states[0];
				this.UpdateStandingOnBody();
				this.UpdateStandingOnGround();
				this.UpdateAirControlVelocity();
				this.CheckLandingSequence();
				this.UpdateInAir();
				if (this.GameOwner == GameOwnerEnum.Client && (!this.HasLocalControl & this.LayingOnGround & !this.StandingOnGround))
				{
					Microsoft.Xna.Framework.Vector2 x = this.LastOnGroundPosition - this.WorldBody.GetPosition();
					if (x.CalcSafeLength() > 0.08f)
					{
						this.SimulateFall();
					}
				}
				if (this.InAir)
				{
					this.m_playerFixtureCircle.SetFriction(0f);
				}
				else
				{
					this.m_playerFixtureCircle.SetFriction(0.1f);
					this.m_lastBox2DPositionOnGround = this.m_preBox2DPosition;
				}
				if (this.GameOwner != GameOwnerEnum.Client || this.HasLocalControl)
				{
					this.CheckLedgeGrab(gravityLineNormal, this.WorldBody.GetPosition(), false);
				}
				this.UpdateLedgeGrabPosition(false, gravityLineNormal);
				bool flag3 = false;
				bool disableRectTemporarily = false;
				bool flag4;
				if (flag4 = this.CheckTouchingGround(out flag3, out disableRectTemporarily))
				{
					this.m_haveTouchedGroundSinceLastInAir = true;
					if (this.Diving && (this.GameOwner != GameOwnerEnum.Client || this.HasLocalControl))
					{
						this.DropGrabbedPlayer(new Microsoft.Xna.Framework.Vector2?(preBox2DLinearVelocity), false, false, true);
						this.Roll(false);
					}
				}
				else if (!this.InAir & this.m_haveTouchedGroundSinceLastInAir & this.Movement != PlayerMovement.Idle & !this.Falling)
				{
					flag4 = true;
				}
				else if (this.Diving && this.HoldingPlayerInDiveID != 0)
				{
					this.UpdateCaughtPlayerPosition(this.HoldingPlayerInDive, false);
				}
				this.m_disableRectTemporarily = disableRectTemporarily;
				Microsoft.Xna.Framework.Vector2 vector = this.CurrentSpeed;
				if ((vector.X < 0f && this.Contacts.LeftCollisionContactsCount > 0) || (vector.X > 0f && this.Contacts.RightCollisionContactsCount > 0))
				{
					vector = Microsoft.Xna.Framework.Vector2.Zero;
				}
				else if (this.HoldingPlayerInGrabCollision())
				{
					vector = Microsoft.Xna.Framework.Vector2.Zero;
				}
				if ((this.StandingOnGround && flag4) || this.Climbing || this.RocketRideProjectileWorldID > 0 || this.LedgeGrabbing)
				{
					this.WorldBody.ApplyForce(-this.WorldBody.GetWorld().Gravity * this.WorldBody.GetMass(), this.WorldBody.GetWorldCenter());
				}
				if (this.StandingOnBody != null && this.StandingOnGround && this.m_haveTouchedGroundSinceLastInAir)
				{
					Microsoft.Xna.Framework.Vector2 value = vector;
					ObjectData objectData = ObjectData.Read(this.StandingOnBody);
					Microsoft.Xna.Framework.Vector2 vector2;
					if (this.CheckIgnoreStandingOnBodyVelocity(objectData))
					{
						vector2 = this.AirControlBaseVelocity;
					}
					else
					{
						vector2 = this.StandingOnBody.GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition());
						Microsoft.Xna.Framework.Vector2 value2;
						Fixture fixture;
						if (this.Contacts.GetWalkNormal(ref this.CurrentSpeed, out value2, out fixture))
						{
							if (fixture.ShapeType == ShapeType.Circle)
							{
								vector2 = this.StandingOnBody.GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition() - value2 * 0.16f);
							}
							SFDMath.RotatePosition(ref value, (float)Math.Atan2((double)value2.Y, (double)value2.X) - 1.5707964f, out value);
							vector2 += value;
							if (this.IsDead && fixture.IsCloud() && this.PreventFallThroughCloudsActive)
							{
								this.TimeSequence.TimeDisableDownThroughCloud = 250f;
								this.TimeSequence.TimeTriggerDownThroughCloudsDelay = 0f;
								this.TimeSequence.TimeTriggerJump = 0f;
								this.CloudsDisabled = true;
								vector2.X = this.WorldBody.GetLinearVelocity().X * 0.9f;
								vector2.Y -= 0.1f;
							}
						}
					}
					vector2 - this.WorldBody.GetLinearVelocity();
					if (this.WorldBody.GetLinearVelocity().Y > 0.01f)
					{
						float scaleFactor = (float)Math.Sign(this.WorldBody.GetLinearVelocity().Y);
						Microsoft.Xna.Framework.Vector2 value3 = gravityLineNormal * this.WorldBody.GetMass() * 1.4f * scaleFactor;
						if (vector2.Length() > value3.Length())
						{
							vector2 += value3;
						}
						else
						{
							Microsoft.Xna.Framework.Vector2 vector3;
							SFDMath.ProjectUonV(ref vector2, ref gravityLineNormal, out vector3);
							vector3 *= value3.Length();
							vector2 -= vector3;
						}
					}
					if (flag4)
					{
						this.WorldBody.SetLinearVelocity(vector2);
						this.m_setLinearVelocity = vector2;
					}
					else if (!this.m_haveTouchedGroundSinceLastInAir)
					{
						Microsoft.Xna.Framework.Vector2 linearVelocity = this.WorldBody.GetLinearVelocity();
						linearVelocity.X = vector2.X;
						this.WorldBody.SetLinearVelocity(linearVelocity);
						this.m_setLinearVelocity = linearVelocity;
					}
					else
					{
						this.WorldBody.SetLinearVelocity(vector2);
						this.m_setLinearVelocity = vector2;
					}
				}
				if (this.InAir && !this.LedgeGrabbing && this.CurrentAction != PlayerAction.Disabled && flag3)
				{
					Microsoft.Xna.Framework.Vector2 vector4 = this.WorldBody.GetLinearVelocity();
					vector4 = new Microsoft.Xna.Framework.Vector2(this.AirControlBaseVelocity.X, vector4.Y) + vector;
					this.WorldBody.SetLinearVelocity(vector4);
					this.m_setLinearVelocity = vector4;
				}
				if (this.GameOwner == GameOwnerEnum.Client && !this.HasLocalControl)
				{
					this.StandingOnBody = standingOnBody;
					this.m_states[1] = flag;
					this.m_states[0] = flag2;
				}
			}
		}

		// Token: 0x06003ABE RID: 15038 RVA: 0x00002B52 File Offset: 0x00000D52
		[Conditional("DEBUG")]
		internal void OutputNewPlayerLinearVelocity(Microsoft.Xna.Framework.Vector2 newLinearVelocity)
		{
		}

		// Token: 0x06003ABF RID: 15039 RVA: 0x000F54EC File Offset: 0x000F36EC
		internal void StepPlayerPostBox2DAction()
		{
			if (this.CaughtByPlayerID == 0)
			{
				this.CheckLedgeGrabFixtures();
				this.Contacts.CheckBounceContacts();
				this.CheckThrowableDisarmQueued();
			}
			this.HandleRegisteredObjectImpacts();
			if (!this.InAir)
			{
				this.WorldBody.SetAverageLinearVelocity(this.m_setLinearVelocity);
			}
			this.UpdateStickyFeet();
			this.StandingOnGroundBox2DStep = this.StandingOnGround;
		}

		// Token: 0x06003AC0 RID: 15040 RVA: 0x000F554C File Offset: 0x000F374C
		private void UpdateStickyFeet()
		{
			if (this.m_haveTouchedGroundSinceLastInAir & this.StandingOnBody != null & !this.IsRemoved)
			{
				ObjectData objectData = ObjectData.Read(this.StandingOnBody);
				Microsoft.Xna.Framework.Vector2 vector;
				Fixture fixture;
				if (objectData.StickyFeet && !objectData.IsDisposed && this.Contacts.GetWalkNormal(ref this.CurrentSpeed, out vector, out fixture))
				{
					Microsoft.Xna.Framework.Vector2 linearVelocityFromWorldPoint = this.StandingOnBody.GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition());
					Microsoft.Xna.Framework.Vector2 value = this.m_standingOnBodyVelocity - linearVelocityFromWorldPoint;
					bool flag = Math.Abs(value.X) > 0.2f || Math.Abs(value.Y) > 0.2f;
					bool flag2 = false;
					if (!this.InAir & !flag)
					{
						Fixture fixtureCircle = this.GetFixtureCircle();
						DistanceInput distanceInput = default(DistanceInput);
						SimplexCache simplexCache = default(SimplexCache);
						simplexCache.count = 0;
						if (fixtureCircle.GetShape() == null | fixture.GetShape() == null)
						{
							return;
						}
						Transform transform;
						fixtureCircle.GetBody().GetTransform(out transform);
						distanceInput.transformA = transform;
						distanceInput.proxyA.Set(fixtureCircle.GetShape());
						fixture.GetBody().GetTransform(out transform);
						distanceInput.proxyA.Set(fixtureCircle.GetShape());
						distanceInput.transformB = transform;
						distanceInput.proxyB.Set(fixture.GetShape());
						DistanceOutput distanceOutput;
						Distance.ComputeDistance(out distanceOutput, out simplexCache, ref distanceInput);
						distanceOutput.AddForCircle(fixture);
						if (distanceOutput.distance > 0.22f)
						{
							flag2 = true;
						}
					}
					if (flag || flag2)
					{
						Microsoft.Xna.Framework.Vector2 vector2 = Microsoft.Xna.Framework.Vector2.Normalize(value);
						Microsoft.Xna.Framework.Vector2 worldPoint = this.StandingOnBody.GetWorldPoint(this.m_standingOnBodyRelativePosition);
						if (!flag2)
						{
							Microsoft.Xna.Framework.Vector2 value2 = worldPoint - this.WorldBody.GetPosition();
							SFDMath.ProjectUonV(ref value2, ref vector2, out value2);
							this.WorldBody.SetTransform(this.WorldBody.GetPosition() + value2, 0f);
						}
						else
						{
							Box2D.XNA.RayCastInput rayCastInput = default(Box2D.XNA.RayCastInput);
							rayCastInput.maxFraction = 1f;
							rayCastInput.p1 = this.WorldBody.GetPosition();
							rayCastInput.p2 = this.WorldBody.GetPosition() + new Microsoft.Xna.Framework.Vector2(0f, -0.32f);
							RayCastOutput rayCastOutput;
							if (fixture.RayCast(out rayCastOutput, ref rayCastInput))
							{
								this.WorldBody.SetTransform(rayCastInput.GetHitPosition(rayCastOutput.fraction) + new Microsoft.Xna.Framework.Vector2(0f, 0.16f), 0f);
							}
						}
						Microsoft.Xna.Framework.Vector2 vector3 = this.CurrentSpeed;
						if ((vector3.X < 0f && this.Contacts.LeftCollisionContactsCount > 0) || (vector3.X > 0f && this.Contacts.RightCollisionContactsCount > 0))
						{
							vector3 = Microsoft.Xna.Framework.Vector2.Zero;
						}
						Microsoft.Xna.Framework.Vector2 value3 = vector3;
						SFDMath.RotatePosition(ref value3, (float)Math.Atan2((double)vector.Y, (double)vector.X) - 1.5707964f, out value3);
						this.WorldBody.SetLinearVelocity(linearVelocityFromWorldPoint + value3);
						this.m_standingOnBodyVelocity = linearVelocityFromWorldPoint;
					}
				}
			}
		}

		// Token: 0x06003AC1 RID: 15041 RVA: 0x000F5864 File Offset: 0x000F3A64
		private void CheckRepositionToCloud()
		{
			if (this.m_repositionToCloudCounter > 1 && this.StandingOnBody != null && this.Movement != PlayerMovement.Idle)
			{
				for (Fixture fixture = this.StandingOnBody.GetFixtureList(); fixture != null; fixture = fixture.GetNext())
				{
					if (fixture.IsCloud())
					{
						Microsoft.Xna.Framework.Vector2 unitY = Microsoft.Xna.Framework.Vector2.UnitY;
						this.WorldBody.SetTransform(this.WorldBody.GetPosition() + unitY * Converter.ConvertWorldToBox2D(1f), this.WorldBody.GetAngle());
						IL_77:
						this.m_repositionToCloudCounter = 0;
						goto IL_7E;
					}
				}
				goto IL_77;
			}
			IL_7E:
			if (this.StandingOnBody == null || this.m_repositionToCloudCounter == this.m_repositionToCloudCounterOldCounter)
			{
				this.m_repositionToCloudCounter = 0;
			}
			this.m_repositionToCloudCounterOldCounter = this.m_repositionToCloudCounter;
		}

		// Token: 0x06003AC2 RID: 15042 RVA: 0x000F5918 File Offset: 0x000F3B18
		internal void UpdateEnableDisableRect()
		{
			if (!(this.m_disableRectTemporarily | this.LayingOnGround | this.Diving | this.Falling | this.Crouching | this.Rolling | this.ForceKneel) && !this.LedgeGrabbing && this.CaughtByPlayerID == 0 && this.GrabbedByPlayerID == 0 && this.RocketRideProjectileWorldID == 0)
			{
				this.EnableRectFixture();
				return;
			}
			this.DisableRectFixture();
		}

		// Token: 0x06003AC3 RID: 15043 RVA: 0x0003004B File Offset: 0x0002E24B
		internal void UpdateContactNormals(Microsoft.Xna.Framework.Vector2 gravityLine, float box2Dtimestep)
		{
			if (this.IsRemoved)
			{
				return;
			}
			this.Contacts.Update(gravityLine, box2Dtimestep);
		}

		// Token: 0x06003AC4 RID: 15044 RVA: 0x00030063 File Offset: 0x0002E263
		private void EnableRectFixture()
		{
			if (!this.m_polygonFixtureEnabled)
			{
				this.m_playerFixturePolygon.SetFilterData(ref this.m_playerFilterCollision);
				this.m_polygonFixtureEnabled = true;
			}
		}

		// Token: 0x06003AC5 RID: 15045 RVA: 0x00030085 File Offset: 0x0002E285
		private void DisableRectFixture()
		{
			if (this.m_polygonFixtureEnabled)
			{
				this.m_playerFixturePolygon.SetFilterData(ref this.m_playerFilterNoCollision);
				this.m_polygonFixtureEnabled = false;
			}
		}

		// Token: 0x06003AC6 RID: 15046 RVA: 0x000300A7 File Offset: 0x0002E2A7
		private void Player_SecondSubAnimationFrameEvent(AnimationEvent animationEvent, int subAnimation)
		{
			this.HandleAnimationMainEven(animationEvent, subAnimation);
		}

		// Token: 0x06003AC7 RID: 15047 RVA: 0x000F5984 File Offset: 0x000F3B84
		internal int DirectionFaceAt(ObjectData od)
		{
			if (od == null || od.Body == null || this.WorldBody == null)
			{
				return this.LastDirectionX;
			}
			float value = od.Body.Position.X - this.WorldBody.Position.X;
			if (Math.Abs(value) > 0.1f)
			{
				return Math.Sign(value);
			}
			return this.LastDirectionX;
		}

		// Token: 0x06003AC8 RID: 15048 RVA: 0x000300B1 File Offset: 0x0002E2B1
		internal bool TestMissileHit(ObjectData od)
		{
			return od.MissileData == null || od.MissileData.Status != ObjectMissileStatus.Debris || (!this.Rolling && !this.Diving);
		}

		// Token: 0x06003AC9 RID: 15049 RVA: 0x000300DB File Offset: 0x0002E2DB
		internal void ResetProjectileHitTest(Projectile projectile)
		{
			this.m_projectileMissed.Remove(projectile);
		}

		// Token: 0x06003ACA RID: 15050 RVA: 0x000300EA File Offset: 0x0002E2EA
		internal bool CheckProjectileMissed(Projectile projectile)
		{
			return this.m_projectileMissed.Contains(projectile);
		}

		// Token: 0x06003ACB RID: 15051 RVA: 0x000F59E8 File Offset: 0x000F3BE8
		internal bool TestProjectileHit(Projectile projectile)
		{
			if (this.IsDead)
			{
				return true;
			}
			bool flag = false;
			for (int i = this.m_projectileMissed.Count - 1; i >= 0; i--)
			{
				if (this.m_projectileMissed[i] == projectile)
				{
					flag = true;
				}
				else if (this.m_projectileMissed[i].RemovedFlag)
				{
					this.m_projectileMissed.RemoveAt(i);
				}
			}
			if (flag)
			{
				return false;
			}
			if (!this.Rolling && !this.Diving)
			{
				return true;
			}
			if (Constants.RANDOM.NextDouble() > (double)projectile.Properties.DodgeChance)
			{
				return true;
			}
			this.m_projectileMissed.Add(projectile);
			return false;
		}

		// Token: 0x06003ACC RID: 15052 RVA: 0x000300F8 File Offset: 0x0002E2F8
		internal void StopReloadWeapon()
		{
			this.m_abortReloading = true;
		}

		// Token: 0x06003ACD RID: 15053 RVA: 0x000F5A8C File Offset: 0x000F3C8C
		internal void StartReloadWeapon()
		{
			if (this.CanReload())
			{
				RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
				if (currentRangedWeaponInUse != null)
				{
					if (this.AutoReloadWeapon)
					{
						this.m_reloadCooldown = 500f;
					}
					this.AutoReloadWeapon = false;
					this.m_reloadPrepared = true;
					this.m_abortReloading = false;
					if (this.m_reloadCooldown <= 0f)
					{
						this.m_reloadCooldown = 1f;
					}
					this.UpdateReloading(1f);
				}
			}
		}

		// Token: 0x06003ACE RID: 15054 RVA: 0x000F5AF8 File Offset: 0x000F3CF8
		internal void ReloadAnimationDone()
		{
			RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
			if (currentRangedWeaponInUse == null)
			{
				this.m_reloadPrepared = false;
				this.Reloading = false;
				return;
			}
			this.Statisticts.m_TotalReloads++;
			if (!currentRangedWeaponInUse.CanBeReloaded(this))
			{
				this.m_reloadPrepared = false;
				this.Reloading = false;
				this.ReloadingToggle = !this.ReloadingToggle;
				currentRangedWeaponInUse.OnReloadAnimationFinished(this);
				this.FireSequence.WeaponReloadCooldown = currentRangedWeaponInUse.Properties.ReloadPostCooldown;
				return;
			}
			currentRangedWeaponInUse.Reload(this);
			this.m_reloadCooldown = 500f;
			if (this.GameOwner == GameOwnerEnum.Server)
			{
				NetMessage.PlayerReceiveItem.Data data = new NetMessage.PlayerReceiveItem.Data(this.ObjectID, currentRangedWeaponInUse, NetMessage.PlayerReceiveItem.ReceiveSourceType.Reload);
				this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, data);
			}
			if (!this.m_abortReloading && currentRangedWeaponInUse.CanBeReloaded(this))
			{
				this.m_reloadPrepared = true;
				if (!string.IsNullOrEmpty(currentRangedWeaponInUse.Visuals.AnimReloadUpper))
				{
					this.m_reloadCooldown = 1f;
					this.ReloadingToggle = !this.ReloadingToggle;
					this.AnimationUpperOverride = new PlayerReloadingAnimation(this, currentRangedWeaponInUse);
				}
				else
				{
					this.Reloading = false;
				}
			}
			else
			{
				this.m_reloadPrepared = false;
				this.Reloading = false;
				this.ReloadingToggle = !this.ReloadingToggle;
				currentRangedWeaponInUse.OnReloadAnimationFinished(this);
				this.FireSequence.WeaponReloadCooldown = currentRangedWeaponInUse.Properties.ReloadPostCooldown;
			}
			this.FireSequence.WeaponReloadCooldown = currentRangedWeaponInUse.Properties.ReloadPostCooldown;
		}

		// Token: 0x06003ACF RID: 15055 RVA: 0x000F5C68 File Offset: 0x000F3E68
		private void UpdateReloading(float ms)
		{
			if (this.m_reloadCooldown > 0f)
			{
				this.m_reloadCooldown -= ms;
				if (this.m_reloadCooldown <= 0f && this.m_reloadPrepared && !this.Reloading)
				{
					RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
					if (currentRangedWeaponInUse != null && currentRangedWeaponInUse.CanBeReloaded(this))
					{
						if (currentRangedWeaponInUse.Properties.ClearRoundsOnReloadStart)
						{
							currentRangedWeaponInUse.ClearRoundsOnReloadStart();
						}
						if (this.GameOwner == GameOwnerEnum.Server)
						{
							NetMessage.PlayerReceiveItem.Data data = new NetMessage.PlayerReceiveItem.Data(this.ObjectID, currentRangedWeaponInUse, NetMessage.PlayerReceiveItem.ReceiveSourceType.ReloadStart);
							this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, data);
						}
						this.AllowInstantCoverFromHipFire();
						if (string.IsNullOrEmpty(currentRangedWeaponInUse.Visuals.AnimReloadUpper))
						{
							this.ReloadAnimationDone();
							this.FireSequence.WeaponReloadCooldown = ((currentRangedWeaponInUse.Properties.ReloadPostCooldown != 0f) ? currentRangedWeaponInUse.Properties.ReloadPostCooldown : 1000f);
							this.m_reloadPrepared = currentRangedWeaponInUse.CanBeReloaded(this);
							this.m_reloadCooldown = 500f;
							return;
						}
						this.Reloading = true;
						if (this.CurrentAction == PlayerAction.ManualAim || this.CurrentAction == PlayerAction.HipFire)
						{
							this.CurrentAction = PlayerAction.Idle;
						}
						this.ReloadingToggle = !this.ReloadingToggle;
						this.AnimationUpperOverride = new PlayerReloadingAnimation(this, currentRangedWeaponInUse);
					}
					this.m_reloadPrepared = false;
				}
			}
		}

		// Token: 0x06003AD0 RID: 15056 RVA: 0x000F5DC0 File Offset: 0x000F3FC0
		private void WeaponAbortBurstMode()
		{
			if (this.FireSequence.WeaponBurstMode)
			{
				RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
				if (currentRangedWeaponInUse == null)
				{
					this.FireSequence.WeaponBurstMode = false;
					this.FireSequence.WeaponBurstCooldown = 0f;
					this.FireSequence.WeaponBurstRoundsToFireLeft = 0;
					return;
				}
				while (this.FireSequence.WeaponBurstRoundsToFireLeft > 0 && currentRangedWeaponInUse.RoundReady)
				{
					currentRangedWeaponInUse.ConsumeAmmoFromFire(this);
					this.FireSequence.WeaponBurstRoundsToFireLeft--;
				}
				if (this.GameOwner == GameOwnerEnum.Server)
				{
					NetMessage.PlayerReceiveItem.Data data = new NetMessage.PlayerReceiveItem.Data(this.ObjectID, currentRangedWeaponInUse, NetMessage.PlayerReceiveItem.ReceiveSourceType.ConsumeAmmo);
					this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, data);
				}
				this.FireSequence.WeaponBurstMode = false;
				this.FireSequence.WeaponBurstCooldown = 0f;
				this.FireSequence.WeaponBurstRoundsToFireLeft = 0;
			}
		}

		// Token: 0x06003AD1 RID: 15057 RVA: 0x00030101 File Offset: 0x0002E301
		internal void CheckBurstFireWeapon()
		{
			if (this.FireSequence.WeaponBurstMode && this.CanFireWeapon())
			{
				this.FireWeapon();
			}
		}

		// Token: 0x06003AD2 RID: 15058 RVA: 0x000F5E98 File Offset: 0x000F4098
		internal void SetRangedWeaponAmmo(SFD.Weapons.WeaponItemType wpnType, int ammo, int mags, ProjectilePowerup ammoType = ProjectilePowerup.None)
		{
			RWeapon rweapon = null;
			if (wpnType == SFD.Weapons.WeaponItemType.Handgun)
			{
				rweapon = this.CurrentHandgunWeapon;
			}
			else if (wpnType == SFD.Weapons.WeaponItemType.Rifle)
			{
				rweapon = this.CurrentRifleWeapon;
			}
			if (rweapon == null)
			{
				return;
			}
			if (ammo < 0)
			{
				ammo = 0;
			}
			if (mags < 0)
			{
				mags = 0;
			}
			int totalAmmo = ammo + mags * (int)rweapon.Properties.MaxRoundsInMag;
			this.SetRangedWeaponAmmo(wpnType, totalAmmo, delegate(RWeapon rwpn)
			{
				if (ammo < (int)rwpn.CurrentRoundsInWeapon)
				{
					if (rwpn.CurrentSpareMags < rwpn.Properties.MaxCarriedSpareMags && rwpn.CurrentRoundsInActiveMag == rwpn.Properties.MaxRoundsInMag && (ammo == 0 || rwpn.Properties.MaxMagsInWeapon > 1))
					{
						rwpn.CurrentSpareMags += 1;
						rwpn.CurrentRoundsInActiveMag = 0;
					}
					while (rwpn.CurrentSpareMags < rwpn.Properties.MaxCarriedSpareMags && (int)rwpn.CurrentMagsInWeapon > ammo)
					{
						rwpn.CurrentSpareMags += 1;
						rwpn.CurrentMagsInWeapon -= 1;
					}
				}
			}, ammoType);
		}

		// Token: 0x06003AD3 RID: 15059 RVA: 0x0003011F File Offset: 0x0002E31F
		internal void SetRangedWeaponAmmo(SFD.Weapons.WeaponItemType wpnType, int totalAmmo, ProjectilePowerup ammoType = ProjectilePowerup.None)
		{
			this.SetRangedWeaponAmmo(wpnType, totalAmmo, null, ammoType);
		}

		// Token: 0x06003AD4 RID: 15060 RVA: 0x000F5F14 File Offset: 0x000F4114
		internal void SetRangedWeaponAmmo(SFD.Weapons.WeaponItemType wpnType, int totalAmmo, Action<RWeapon> postAmmoAdjust, ProjectilePowerup ammoType)
		{
			RWeapon rweapon = null;
			if (wpnType == SFD.Weapons.WeaponItemType.Handgun)
			{
				rweapon = this.CurrentHandgunWeapon;
			}
			else if (wpnType == SFD.Weapons.WeaponItemType.Rifle)
			{
				rweapon = this.CurrentRifleWeapon;
			}
			if (rweapon == null)
			{
				return;
			}
			if (totalAmmo > (int)rweapon.Properties.MaxRoundsTotal)
			{
				totalAmmo = (int)rweapon.Properties.MaxRoundsTotal;
			}
			if (totalAmmo < 0)
			{
				totalAmmo = 0;
			}
			int currentSpareMags = (int)rweapon.CurrentSpareMags;
			int totalRoundsLeft = rweapon.TotalRoundsLeft;
			int powerupBouncingRounds = (int)rweapon.PowerupBouncingRounds;
			int powerupFireRounds = (int)rweapon.PowerupFireRounds;
			bool flag = true;
			if (ammoType != ProjectilePowerup.None)
			{
				rweapon.PowerupBouncingRounds = (ushort)((ammoType == ProjectilePowerup.Bouncing) ? totalAmmo : 0);
				rweapon.PowerupFireRounds = (ushort)((ammoType == ProjectilePowerup.Fire) ? totalAmmo : 0);
				flag = (rweapon.TotalRoundsLeft < totalAmmo);
			}
			if (flag)
			{
				rweapon.SetAmmo(totalAmmo);
				if (postAmmoAdjust != null)
				{
					postAmmoAdjust(rweapon);
				}
			}
			if (this.GameOwner == GameOwnerEnum.Server && (currentSpareMags != (int)rweapon.CurrentSpareMags || totalRoundsLeft != rweapon.TotalRoundsLeft || powerupBouncingRounds != (int)rweapon.PowerupBouncingRounds || powerupFireRounds != (int)rweapon.PowerupFireRounds))
			{
				this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, new NetMessage.PlayerReceiveItem.Data(this.ObjectID, new SFD.Weapons.WeaponItem(wpnType, rweapon), NetMessage.PlayerReceiveItem.ReceiveSourceType.GrabWeaponAmmo));
			}
		}

		// Token: 0x06003AD5 RID: 15061 RVA: 0x000F6020 File Offset: 0x000F4220
		internal bool FireWeapon()
		{
			bool flag = true;
			RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
			if (currentRangedWeaponInUse == null)
			{
				this.WeaponAbortBurstMode();
				return false;
			}
			this.FireSequence.HipFireEndTimer = 0f;
			this.FireSequence.HipFireAimTime = 250f;
			if (!currentRangedWeaponInUse.RoundReady && flag)
			{
				this.FireSequence.PerformPostFireAction = false;
				this.FireSequence.WeaponBeforePostFireCooldown = 300f;
				this.FireSequence.MinAutoFireTimer = (float)((currentRangedWeaponInUse.Properties.ExtraAutomaticCooldown >= 300) ? currentRangedWeaponInUse.Properties.ExtraAutomaticCooldown : 300);
				this.WeaponAbortBurstMode();
				EffectHandler.PlayEffect("OOAC", this.Position, this.GameWorld, new object[]
				{
					this.ObjectID
				});
				if (!currentRangedWeaponInUse.IsEmpty)
				{
					this.AutoReloadWeapon = true;
				}
				this.Statisticts.m_TotalEmptyGunsFireAttempts++;
				return false;
			}
			bool sprinting = this.Sprinting;
			this.m_states[3] = sprinting;
			this.AbortAnimationOverride();
			this.UpdateAnimation();
			Microsoft.Xna.Framework.Vector2 vector;
			Microsoft.Xna.Framework.Vector2 vector2;
			if (!this.GetWeaponInformation(Player.WeaponInformationType.MuzzlePosition, out vector, out vector2))
			{
				this.m_states[3] = sprinting;
				this.UpdateAnimation();
				return false;
			}
			this.m_states[3] = sprinting;
			this.UpdateAnimation();
			this.ShowRangedWeaponFireRecoil();
			this.TimeSequence.TimeDisableDrawWeapon = 150f;
			this.TimeSequence.TimeDisableSheatheWeapon = 150f;
			this.FireSequence.PerformPostFireAction = true;
			this.FireSequence.WeaponBeforePostFireCooldown = (float)currentRangedWeaponInUse.Properties.CooldownBeforePostAction;
			this.FireSequence.WeaponBeforePostFireCooldownID = currentRangedWeaponInUse.Properties.WeaponID;
			this.FireSequence.WeaponAfterPostFireCooldown = (float)currentRangedWeaponInUse.Properties.CooldownAfterPostAction;
			this.FireSequence.MinAutoFireTimer = (float)currentRangedWeaponInUse.Properties.ExtraAutomaticCooldown;
			float scaleFactor = 0f;
			if (!this.FireSequence.WeaponBurstMode)
			{
				if (currentRangedWeaponInUse.Properties.BurstRoundsToFire > 1)
				{
					this.FireSequence.WeaponBurstMode = true;
					this.FireSequence.WeaponBurstRoundsToFireLeft = (int)(currentRangedWeaponInUse.Properties.BurstRoundsToFire - 1);
					this.FireSequence.WeaponBurstCooldown = (float)currentRangedWeaponInUse.Properties.BurstCooldown;
				}
			}
			else
			{
				this.FireSequence.WeaponBurstRoundsToFireLeft--;
				this.FireSequence.WeaponBurstCooldown = (float)currentRangedWeaponInUse.Properties.BurstCooldown;
				if (this.FireSequence.WeaponBurstRoundsToFireLeft <= 0)
				{
					this.FireSequence.WeaponBurstMode = false;
					this.FireSequence.WeaponBurstCooldown = 0f;
					scaleFactor = Math.Min(Math.Max(this.GameWorld.ElapsedTotalGameTime - (this.FireSequence.LastGameElapsedTimeFired + (float)currentRangedWeaponInUse.Properties.BurstCooldown), 0f), 100f) * 0.001f;
				}
			}
			if (this.FireSequence.WeaponBurstMode)
			{
				this.TimeSequence.TimeDisableDrawWeapon = Math.Max((float)currentRangedWeaponInUse.Properties.BurstCooldown + 50f, this.TimeSequence.TimeDisableDrawWeapon);
				this.TimeSequence.TimeDisableSheatheWeapon = Math.Max((float)currentRangedWeaponInUse.Properties.BurstCooldown + 50f, this.TimeSequence.TimeDisableSheatheWeapon);
			}
			this.FireSequence.LastGameElapsedTimeFired = this.GameWorld.ElapsedTotalGameTime;
			bool flag2 = currentRangedWeaponInUse.PowerupBouncingRounds > 0;
			bool flag3 = currentRangedWeaponInUse.PowerupFireRounds > 0;
			if (flag)
			{
				currentRangedWeaponInUse.ConsumeAmmoFromFire(this);
			}
			this.m_reloadPrepared = false;
			this.Statisticts.m_TotalShotsFired++;
			if (this.m_BeforeCreateProjectileArgs == null)
			{
				this.m_BeforeCreateProjectileArgs = new RWeapon.BeforeCreateProjectileArgs(this.m_gameWorld);
			}
			this.m_BeforeCreateProjectileArgs.FireResult = true;
			this.m_BeforeCreateProjectileArgs.Handled = false;
			this.m_BeforeCreateProjectileArgs.WorldPosition = vector + vector2 * scaleFactor * ((currentRangedWeaponInUse.Properties.Projectile != null) ? currentRangedWeaponInUse.Properties.Projectile.GetSpeed() : 0f);
			this.m_BeforeCreateProjectileArgs.Direction = vector2;
			this.m_BeforeCreateProjectileArgs.TunnelingWorldPosition = vector - vector2 * (currentRangedWeaponInUse.Properties.MuzzlePosition.X + this.GetRangedFireArmLength());
			this.m_BeforeCreateProjectileArgs.Player = this;
			this.m_BeforeCreateProjectileArgs.BouncingPowerup = flag2;
			this.m_BeforeCreateProjectileArgs.FirePowerup = flag3;
			currentRangedWeaponInUse.BeforeCreateProjectile(this.m_BeforeCreateProjectileArgs);
			if (this.m_BeforeCreateProjectileArgs.Handled)
			{
				bool fireResult = this.m_BeforeCreateProjectileArgs.FireResult;
				if (this.GameOwner == GameOwnerEnum.Server)
				{
					NetMessage.PlayerReceiveItem.Data data = new NetMessage.PlayerReceiveItem.Data(this.ObjectID, currentRangedWeaponInUse, flag ? NetMessage.PlayerReceiveItem.ReceiveSourceType.ConsumeAmmo : NetMessage.PlayerReceiveItem.ReceiveSourceType.ConsumeAmmoInfinite);
					this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, data);
				}
				return fireResult;
			}
			if (this.m_writeProjUpdateDataPool == null)
			{
				this.m_writeProjUpdateDataPool = new GenericClassPool<NetMessage.ProjectileUpdate.Data>(() => new NetMessage.ProjectileUpdate.Data(), 1, 0);
			}
			NetMessage.ProjectileUpdate.Data[] array = new NetMessage.ProjectileUpdate.Data[(int)currentRangedWeaponInUse.Properties.ProjectilesEachBlast];
			for (int i = 0; i < (int)currentRangedWeaponInUse.Properties.ProjectilesEachBlast; i++)
			{
				Microsoft.Xna.Framework.Vector2 direction = vector2;
				float num = currentRangedWeaponInUse.Properties.AccuracyDeflection * 0.5f;
				if (currentRangedWeaponInUse.LazerUpgrade > 0)
				{
					num *= 0.5f;
				}
				SFDMath.RotatePosition(ref direction, Constants.RANDOM.NextFloat(-num, num), out direction);
				Projectile projectile = this.GameWorld.CreateProjectile(currentRangedWeaponInUse.Properties.Projectile, currentRangedWeaponInUse, vector, direction, this.ObjectID);
				if (this.CoverObject != null && this.CoverObjectCanShootThrough)
				{
					projectile.ObjectIDToIgnore = this.CoverObject.ObjectID;
				}
				projectile.CheckTunneling = true;
				projectile.TunnelingPosition = vector - vector2 * (currentRangedWeaponInUse.Properties.MuzzlePosition.X + this.GetRangedFireArmLength());
				projectile.CheckPlayerTunneling = true;
				projectile.PlayerOriginalPosition = this.PreWorld2DPosition;
				projectile.PowerupFireActive = flag3;
				projectile.PowerupBounceActive = flag2;
				array[i] = this.m_writeProjUpdateDataPool.GetFreeItem();
				array[i].SetData(projectile, projectile.MessageCountSend);
			}
			if (this.GameOwner == GameOwnerEnum.Server)
			{
				NetMessage.ProjectileUpdate.Write(ref array, (int)currentRangedWeaponInUse.Properties.ProjectilesEachBlast, this.GameWorld.GetMultiPacket());
				NetMessage.PlayerReceiveItem.Data data2 = new NetMessage.PlayerReceiveItem.Data(this.ObjectID, currentRangedWeaponInUse, flag ? NetMessage.PlayerReceiveItem.ReceiveSourceType.ConsumeAmmo : NetMessage.PlayerReceiveItem.ReceiveSourceType.Other);
				this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, data2);
			}
			foreach (NetMessage.ProjectileUpdate.Data item in array)
			{
				this.m_writeProjUpdateDataPool.FlagFreeItem(item);
			}
			return true;
		}

		// Token: 0x06003AD6 RID: 15062 RVA: 0x000F66BC File Offset: 0x000F48BC
		internal void ShowRangedWeaponOutOfAmmoRecoil()
		{
			if (this.GetAnimationPlayerMode() == PlayerAction.HipFire || this.GetAnimationPlayerMode() == PlayerAction.ManualAim)
			{
				this.PlayAnimation(1, 1);
			}
			RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
			if (currentRangedWeaponInUse != null)
			{
				SoundHandler.PlaySound(currentRangedWeaponInUse.Properties.OutOfAmmoSoundID, this.Position, this.GameWorld);
			}
		}

		// Token: 0x06003AD7 RID: 15063 RVA: 0x0003012B File Offset: 0x0002E32B
		private void AbortAnimationOverride()
		{
			if (this.AnimationUpperOverride != null && this.AnimationUpperOverride.OverrideUpperAnimationType() == IPlayerUpperAnimationTypeEnum.AbortOnInterrupt)
			{
				this.AnimationUpperOverride.OverrideUpperAnimationAborted(this, Animation.None);
				this.AnimationUpperOverride = null;
			}
		}

		// Token: 0x06003AD8 RID: 15064 RVA: 0x000F670C File Offset: 0x000F490C
		internal void ShowRangedWeaponFireRecoil()
		{
			this.AbortAnimationOverride();
			if (this.GetAnimationPlayerMode() == PlayerAction.HipFire || this.GetAnimationPlayerMode() == PlayerAction.ManualAim)
			{
				this.PlayAnimation(1, 1);
			}
			this.UpdateAnimation();
			RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
			if (currentRangedWeaponInUse != null)
			{
				this.FireSequence.PerformPostFireAction = true;
				this.FireSequence.WeaponBeforePostFireCooldown = (float)currentRangedWeaponInUse.Properties.CooldownBeforePostAction;
				this.FireSequence.WeaponBeforePostFireCooldownID = currentRangedWeaponInUse.Properties.WeaponID;
				this.FireSequence.WeaponAfterPostFireCooldown = (float)currentRangedWeaponInUse.Properties.CooldownAfterPostAction;
				this.FireSequence.MinAutoFireTimer = (float)currentRangedWeaponInUse.Properties.ExtraAutomaticCooldown;
				currentRangedWeaponInUse.OnRecoilEvent(this);
			}
		}

		// Token: 0x06003AD9 RID: 15065 RVA: 0x000F67B8 File Offset: 0x000F49B8
		internal void AimAdjust(float value)
		{
			float num = this.AimAngle + value;
			if (num > 1.5707964f)
			{
				num = 1.5707964f;
			}
			if (num < -1.5707964f)
			{
				num = -1.5707964f;
			}
			this.AimAngle = num;
		}

		// Token: 0x06003ADA RID: 15066 RVA: 0x00030156 File Offset: 0x0002E356
		internal void AimUp()
		{
			if (this.AimSpeed >= 0f)
			{
				if (this.VirtualKeyboard.PressingKey(21, false))
				{
					this.AimSpeed = -0.00275f;
				}
				else
				{
					this.AimSpeed = -0.0055f;
				}
				this.ImportantUpdate = true;
			}
		}

		// Token: 0x06003ADB RID: 15067 RVA: 0x00030194 File Offset: 0x0002E394
		internal void AimDown()
		{
			if (this.AimSpeed <= 0f)
			{
				if (this.VirtualKeyboard.PressingKey(21, false))
				{
					this.AimSpeed = 0.00275f;
				}
				else
				{
					this.AimSpeed = 0.0055f;
				}
				this.ImportantUpdate = true;
			}
		}

		// Token: 0x06003ADC RID: 15068 RVA: 0x000301D2 File Offset: 0x0002E3D2
		internal void AimStop()
		{
			if (this.AimSpeed != 0f)
			{
				this.AimSpeed = 0f;
				this.ImportantUpdate = true;
			}
		}

		// Token: 0x06003ADD RID: 15069 RVA: 0x000F67F4 File Offset: 0x000F49F4
		private void UpdateAimAngle(double ms)
		{
			if (this.CurrentAction == PlayerAction.ManualAim && this.AimSpeed != 0f)
			{
				if (this.VirtualKeyboard.PressingKey(21, false))
				{
					ms *= 0.5;
				}
				this.AimSpeed += (float)Math.Sign(this.AimSpeed) * (0.00034f * (float)ms);
				if (this.AimSpeed > 0.136f)
				{
					this.AimSpeed = 0.136f;
				}
				if (this.AimSpeed < -0.136f)
				{
					this.AimSpeed = -0.136f;
				}
				this.AimAdjust(this.AimSpeed * (float)(ms / 15.0));
			}
		}

		// Token: 0x06003ADE RID: 15070 RVA: 0x000F68A8 File Offset: 0x000F4AA8
		internal void PostUpdate(float totalMs)
		{
			if (!this.IsRemoved)
			{
				if (this.RocketRideProjectileWorldID > 0)
				{
					Projectile rocketRideProjectile = this.RocketRideProjectile;
					if (rocketRideProjectile != null && !rocketRideProjectile.HitFlag)
					{
						Microsoft.Xna.Framework.Vector2 position = Converter.ConvertWorldToBox2D(rocketRideProjectile.Position);
						if (this.WorldBody != null)
						{
							this.WorldBody.SetTransform(position, 0f);
							this.WorldBody.SetLinearVelocity(rocketRideProjectile.Direction * Converter.ConvertWorldToBox2D(rocketRideProjectile.GetSpeed()) * this.GameWorld.SlowmotionHandler.SlowmotionModifier);
						}
						if (rocketRideProjectile.LastDirectionX == 1)
						{
							this.LastDirectionX = -1;
							this.LastDirectionXAnimation = -1;
						}
						else
						{
							this.LastDirectionX = 1;
							this.LastDirectionXAnimation = 1;
						}
						this.Position = rocketRideProjectile.Position;
					}
				}
				MWeapon currentMeleeWeaponInUse = this.GetCurrentMeleeWeaponInUse(false);
				if (currentMeleeWeaponInUse != null && currentMeleeWeaponInUse.Properties.Handling == MeleeHandlingType.Custom)
				{
					currentMeleeWeaponInUse.CustomHandlingPostUpdate(this, totalMs);
				}
				if (this.ExtraMeleeStateChainsawActive && !(this.CurrentVisualMeleeWeapon is WpnChainsaw))
				{
					this.ExtraMeleeStateChainsawActive = false;
				}
			}
		}

		// Token: 0x06003ADF RID: 15071 RVA: 0x000F69B0 File Offset: 0x000F4BB0
		private void UpdateAcceleration(float ms)
		{
			if (this.Diving)
			{
				return;
			}
			if ((this.FullLanding & this.StandingOnGround) | this.LayingOnGround | (this.Disabled & this.GrabImmunity))
			{
				this.CurrentSpeed.X = 0f;
				return;
			}
			ms *= this.SlowmotionFactor;
			float num = this.CurrentTargetSpeed.X - this.CurrentSpeed.X;
			if (num != 0f)
			{
				if (num > 0f)
				{
					if (this.CurrentSpeed.X < 0f)
					{
						this.CurrentSpeed.X = this.CurrentSpeed.X + 0.02805f * ms * 2f;
					}
					else
					{
						this.CurrentSpeed.X = this.CurrentSpeed.X + 0.02805f * ms;
					}
					if (this.CurrentSpeed.X > this.CurrentTargetSpeed.X)
					{
						this.CurrentSpeed.X = this.CurrentTargetSpeed.X;
						return;
					}
				}
				else
				{
					if (this.CurrentSpeed.X > 0f)
					{
						this.CurrentSpeed.X = this.CurrentSpeed.X - 0.02805f * ms * 2f;
					}
					else
					{
						this.CurrentSpeed.X = this.CurrentSpeed.X - 0.02805f * ms;
					}
					if (this.CurrentSpeed.X < this.CurrentTargetSpeed.X)
					{
						this.CurrentSpeed.X = this.CurrentTargetSpeed.X;
					}
				}
			}
		}

		// Token: 0x06003AE0 RID: 15072 RVA: 0x000F6B28 File Offset: 0x000F4D28
		internal void PerformFullLand()
		{
			bool flag = !this.FullLandingOnGround;
			this.FullLanding = true;
			if (this.GameOwner != GameOwnerEnum.Client && this.ThrowableIsActivated)
			{
				this.CheckThrowableDisarm();
			}
			if (this.CurrentAction == PlayerAction.JumpAttack & !this.m_havePerformedJumpAttack)
			{
				this.PerformMeleeHit();
			}
			if (this.CurrentAction == PlayerAction.JumpKick & !this.m_havePerformedJumpAttack)
			{
				this.PerformKickHit();
			}
			if (this.CurrentAction == PlayerAction.JumpKick)
			{
				this.TimeSequence.TimeFullLanding = 600f;
			}
			else
			{
				this.TimeSequence.TimeFullLanding = 350f;
			}
			this.CurrentAction = PlayerAction.Disabled;
			this.ImportantUpdate = true;
			if (flag)
			{
				this.ForceServerMovementState(4);
				this.ForceClientMovementState(4);
			}
		}

		// Token: 0x06003AE1 RID: 15073 RVA: 0x000F6BE0 File Offset: 0x000F4DE0
		internal void PerformFullLandKnockdown()
		{
			bool flag = !this.LayingOnGround;
			if (this.GameOwner != GameOwnerEnum.Client && this.ThrowableIsActivated)
			{
				this.CheckThrowableDisarm();
			}
			this.FullLanding = false;
			this.TimeSequence.TimeFullLanding = 0f;
			this.CurrentAction = PlayerAction.Disabled;
			this.ImportantUpdate = true;
			if (!this.LayingOnGround)
			{
				this.TimeSequence.TimeForceLayOnGroundTimer = 250f;
			}
			this.LayingOnGround = true;
			this.Falling = false;
			this.InAir = false;
			this.StandingOnGround = true;
			if (flag)
			{
				this.ForceServerMovementState(10);
				this.ForceClientMovementState(10);
			}
			if (this.GameOwner != GameOwnerEnum.Client)
			{
				this.LowerFireRank();
			}
			if (this.IsDead)
			{
				this.TimeSequence.TimeDisableDownThroughCloud = 250f;
				this.TimeSequence.TimeTriggerDownThroughCloudsDelay = 0f;
				this.TimeSequence.TimeTriggerJump = 0f;
			}
			this.Shake.Start(150f);
			this.Movement = PlayerMovement.Idle;
			this.m_checkDeathLedgeAfterBounce = true;
		}

		// Token: 0x06003AE2 RID: 15074 RVA: 0x000F6CE4 File Offset: 0x000F4EE4
		internal void CheckDeathLedgeAfterBounce()
		{
			if (this.IsRemoved)
			{
				return;
			}
			float y = this.m_checkDeathLedgeLastBox2DVelocity.Y;
			this.m_checkDeathLedgeLastBox2DVelocity = this.PreBox2DLinearVelocity;
			if (!this.m_checkDeathLedgeAfterBounce)
			{
				return;
			}
			this.m_checkDeathLedgeAfterBounce = false;
			if (this.InAir || !this.Health.IsEmpty || !this.IsDead || y > -5f || this.GameWorld.ElapsedTotalRealTime - this.m_checkDeathLedgeLastTimestamp < 300f)
			{
				return;
			}
			this.m_checkDeathLedgeLastTimestamp = this.GameWorld.ElapsedTotalRealTime;
			Microsoft.Xna.Framework.Vector2 vector;
			Fixture fixture;
			if (this.Contacts.GetWalkNormal(ref this.CurrentSpeed, out vector, out fixture) && fixture.IsCloud())
			{
				return;
			}
			float num = (float)this.LastDirectionX;
			float num2 = this.CheckDeathLedge(num, 28f, Player.DeathType.Fall);
			if (num2 == -1f)
			{
				num *= -1f;
				num2 = this.CheckDeathLedge(num, 28f, Player.DeathType.Fall);
			}
			if (num2 > 0f)
			{
				this.ListenForEffects();
				Microsoft.Xna.Framework.Vector2 addVelocity = new Microsoft.Xna.Framework.Vector2(num, 3.5f);
				if (num2 < 2f)
				{
					addVelocity.X = num;
				}
				else
				{
					addVelocity.X = num * (1f + num2 / 16f * 2f);
				}
				if (this.GameOwner == GameOwnerEnum.Client && !this.HasLocalControl)
				{
					this.SimulateFall(addVelocity);
					return;
				}
				this.Fall(addVelocity);
			}
		}

		// Token: 0x06003AE3 RID: 15075 RVA: 0x000301F3 File Offset: 0x0002E3F3
		internal void CheckPlayerPlayerFullLandCollision()
		{
			if (!this.IsRemoved)
			{
				this.GameWorld.CheckPlayerPlayerCollisions(this, true);
			}
		}

		// Token: 0x06003AE4 RID: 15076 RVA: 0x000F6E48 File Offset: 0x000F5048
		internal void CheckLandingSequence()
		{
			if (this.GameOwner == GameOwnerEnum.Client && !this.HasLocalControl)
			{
				return;
			}
			if (this.StandingOnGround && this.HaveTouchedGroundSinceLastInAir)
			{
				this.LedgeGrabClearDisabledGrabbingLedges();
				if (this.Diving)
				{
					this.Roll(false);
					return;
				}
				if (this.Rolling)
				{
					return;
				}
				if (this.Falling)
				{
					if (this.Contacts.CheckMinimumContactTimeExceeds(0.5f))
					{
						this.PerformFullLandKnockdown();
					}
					else
					{
						this.RefilterContacts = true;
						bool flag = true;
						Microsoft.Xna.Framework.Vector2 value = Microsoft.Xna.Framework.Vector2.UnitY;
						Microsoft.Xna.Framework.Vector2 vector;
						Fixture fixture;
						if (this.Contacts.GetWalkNormal(ref this.CurrentSpeed, out vector, out fixture))
						{
							if (Microsoft.Xna.Framework.Vector2.Dot(vector, this.GetGravityLineNormal()) < -0.98f)
							{
								this.PerformFullLandKnockdown();
								flag = false;
							}
							else
							{
								value = vector;
							}
						}
						if (flag)
						{
							this.WorldBody.SetTransform(this.WorldBody.GetPosition() + value * 0.04f * this.GameWorld.SlowmotionHandler.SlowmotionModifier, this.WorldBody.GetAngle());
							value.Y = 0f;
							this.WorldBody.ApplyForce(value * 0.2f * this.GameWorld.SlowmotionHandler.SlowmotionModifier, this.WorldBody.GetPosition());
						}
					}
				}
				else if (this.Sprinting && !this.CanKeepSprintingOnGround())
				{
					this.Sprinting = false;
				}
			}
			if (this.StandingOnGround & this.InAir & this.FullLanding & !this.LayingOnGround)
			{
				bool flag2 = true;
				if (this.StandingOnBody != null)
				{
					flag2 = false;
					if (this.CurrentAction == PlayerAction.Disabled)
					{
						flag2 = true;
					}
					else
					{
						Microsoft.Xna.Framework.Vector2 value2 = this.StandingOnBody.GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition());
						value2 -= this.WorldBody.GetAverageLinearVelocity();
						Microsoft.Xna.Framework.Vector2 gravityLineNormal = this.GetGravityLineNormal();
						SFDMath.ProjectUonV(ref value2, ref gravityLineNormal, out value2);
						if (value2.Length() > 5.5f)
						{
							flag2 = true;
						}
					}
				}
				if (this.Falling)
				{
					this.PerformFullLandKnockdown();
					return;
				}
				if (flag2)
				{
					this.PerformFullLand();
					return;
				}
				this.FullLanding = false;
				this.ImportantUpdate = true;
				if (this.CurrentAction == PlayerAction.JumpAttack || this.CurrentAction == PlayerAction.JumpKick || this.CurrentAction == PlayerAction.Disabled)
				{
					this.CurrentActionToIdle();
				}
				this.ForceClientMovementState(1);
			}
		}

		// Token: 0x06003AE5 RID: 15077 RVA: 0x0003020A File Offset: 0x0002E40A
		internal void ForceClientMovementState(ushort increaseCount = 1)
		{
			if (this.GameOwner == GameOwnerEnum.Client && this.HasLocalControl && this.ForceClientMovementStateIgnored == 0)
			{
				this.ClientDataNetMessageCount.IncreaseMessageCountReceive(increaseCount);
				this.ImportantUpdate = true;
			}
		}

		// Token: 0x06003AE6 RID: 15078 RVA: 0x00030238 File Offset: 0x0002E438
		internal void ForceServerMovementState(ushort increaseCount = 1)
		{
			if (this.GameOwner == GameOwnerEnum.Server && this.ForceServerMovementStateIgnored == 0)
			{
				GameSFD.Handle.Server.ClientMovementMasterCounts.IncreaseSequenceCount(this.UserIdentifier, increaseCount);
				this.ImportantUpdate = true;
			}
		}

		// Token: 0x06003AE7 RID: 15079 RVA: 0x000F7094 File Offset: 0x000F5294
		internal void ForceServerPositionState()
		{
			if (this.GameOwner == GameOwnerEnum.Server && this.ObjectData != null && !this.ObjectData.IsDisposed)
			{
				this.ObjectData.BodyData.IncreaseMoveSequence();
			}
			if (!this.IsRemoved)
			{
				this.WorldBody.VelocityNetworkFactor = 1f;
			}
		}

		// Token: 0x06003AE8 RID: 15080 RVA: 0x000F70E8 File Offset: 0x000F52E8
		internal void SetNewWorldPosition(Microsoft.Xna.Framework.Vector2 worldPosition)
		{
			this.CorrectSpawnPosition = false;
			Microsoft.Xna.Framework.Vector2 vector = Converter.ConvertWorldToBox2D(worldPosition);
			if (this.WorldBody != null)
			{
				this.WorldBody.SetTransform(vector, this.WorldBody.GetAngle());
				this.m_preBox2DPosition = vector;
				this.GameWorld.RemovePositionUpdate(this.WorldBody);
			}
			this.ForceServerPositionState();
			this.MarkTeleported();
		}

		// Token: 0x06003AE9 RID: 15081 RVA: 0x0003026D File Offset: 0x0002E46D
		internal void SetNewLinearVelocity(Microsoft.Xna.Framework.Vector2 linearVelocity)
		{
			if (this.WorldBody != null)
			{
				this.WorldBody.SetLinearVelocity(linearVelocity);
				this.m_preBox2DLinearVelocity = linearVelocity;
				this.AirControlBaseVelocity = linearVelocity;
			}
			this.ForceServerMovementState(10);
			this.ForceServerPositionState();
		}

		// Token: 0x06003AEA RID: 15082 RVA: 0x0003029F File Offset: 0x0002E49F
		internal void MarkTeleported()
		{
			this.TeleportCounter++;
		}

		// Token: 0x17000993 RID: 2451
		// (get) Token: 0x06003AEB RID: 15083 RVA: 0x000302AF File Offset: 0x0002E4AF
		// (set) Token: 0x06003AEC RID: 15084 RVA: 0x000302B7 File Offset: 0x0002E4B7
		internal int TeleportCounter { get; private set; }

		// Token: 0x06003AED RID: 15085 RVA: 0x000F7148 File Offset: 0x000F5348
		private void ListenForEffects()
		{
			if (!this.m_prevStatesOnUpdate[8] & this.m_states[8])
			{
				EffectHandler.PlayEffect("H_T", this.PreWorld2DPosition, this.GameWorld);
				EffectHandler.PlayEffect("Smack", this.PreWorld2DPosition, this.GameWorld);
				SoundHandler.PlaySound("PlayerLandKnockdown", this.PreWorld2DPosition, 1f, this.GameWorld);
			}
			this.m_prevStatesOnUpdate[8] = this.m_states[8];
			if (!this.m_prevStateFullLandingOnGround & this.FullLandingOnGround)
			{
				EffectHandler.PlayEffect("H_T", this.PreWorld2DPosition, this.GameWorld);
				SoundHandler.PlaySound("", this.PreWorld2DPosition, 1f, this.GameWorld);
			}
			this.m_prevStateFullLandingOnGround = this.FullLandingOnGround;
		}

		// Token: 0x06003AEE RID: 15086 RVA: 0x000F7214 File Offset: 0x000F5414
		private void CheckResolveStuckInFalling(float ms)
		{
			if (this.Falling && Microsoft.Xna.Framework.Vector2.DistanceSquared(this.m_lastStuckInFallingPos, this.Position) < 0.001f)
			{
				this.m_lastStuckInFallingTime += ms;
				if (this.m_lastStuckInFallingTime > 250f)
				{
					ConsoleOutput.ShowMessage(ConsoleOutputType.PlayerAction, "Player stuck in Falling resolved");
					this.DeathKneeling = false;
					this.Staggering = false;
					this.Climbing = false;
					this.Rolling = false;
					this.Diving = false;
					this.DisableGrabbing(false);
					this.Crouching = false;
					this.LayingOnGround = false;
					this.StandingOnGround = false;
					this.DeathKneeling = false;
					this.Falling = false;
					this.InAir = true;
					this.TimeSequence.TimeMeleeHit = 0f;
					this.MeleeHit = false;
					this.Staggering = false;
					this.m_haveTouchedGroundSinceLastInAir = false;
					this.RefilterContacts = true;
					this.CurrentAction = PlayerAction.Idle;
					this.SetNewWorldPosition(this.Position + new Microsoft.Xna.Framework.Vector2(0f, 8f));
					this.ForceServerMovementState(25);
					this.m_lastStuckInFallingTime = 0f;
					return;
				}
			}
			else
			{
				this.m_lastStuckInFallingPos = this.Position;
				if (this.m_lastStuckInFallingTime > 0f)
				{
					this.m_lastStuckInFallingTime = Math.Max(this.m_lastStuckInFallingTime - ms * 0.5f, 0f);
				}
			}
		}

		// Token: 0x06003AEF RID: 15087 RVA: 0x000F7364 File Offset: 0x000F5564
		internal void Update(float ms, float realMs)
		{
			try
			{
				this.FirstUpdateRun = true;
				this.m_timeSinceLastJump += realMs;
				this.PreparingHipFire -= ms;
				ms *= this.SlowmotionFactor;
				this.Shake.UpdateTotalTime(realMs);
				this.CurrentActionTime += ms;
				this.DiveAttackFrameWindowTime -= ms;
				if (this.GameOwner != GameOwnerEnum.Client & this.m_dropGrabbedPlayersNextUpdate)
				{
					this.m_dropGrabbedPlayersNextUpdate = false;
					this.DropGrabbedPlayer(null, false, false, true);
					if (this.GrabbedByPlayerID != 0)
					{
						this.DropCaughtByPlayer();
					}
				}
				if (!this.IsHoldingPlayerInGrab & this.m_grabMouseJointTarget != 0)
				{
					this.EndGrabbedPlayerPositionJoint();
				}
				if (this.GameOwner != GameOwnerEnum.Client)
				{
					this.CheckResolveStuckInFalling(ms);
				}
				if (this.ThrowCharging && !this.InAir)
				{
					this.Sprinting = false;
				}
				if (this.Flash)
				{
					this.m_flashTimer -= realMs;
					if (this.m_flashTimer <= 0f)
					{
						this.m_flashTimer = 0f;
					}
				}
				if (this.IsDead)
				{
					if (this.RocketRideProjectileWorldID <= 0)
					{
						this.DeadTime += ms;
					}
					if (this.CurrentAction != PlayerAction.Disabled)
					{
						if (this.GameOwner != GameOwnerEnum.Client)
						{
							this.Fall();
						}
						else
						{
							this.SimulateFall();
						}
					}
				}
				if (!this.IsRemoved)
				{
					if (this.FunctionRunNextUpdate != Player.RunNextUpdate.None)
					{
						switch (this.FunctionRunNextUpdate)
						{
						case Player.RunNextUpdate.Kill:
							this.Kill(false, true);
							break;
						case Player.RunNextUpdate.Gib:
							this.Gib();
							break;
						case Player.RunNextUpdate.Explode:
							this.GameWorld.TriggerExplosion(this.Position, 100f, true);
							this.Gib();
							break;
						case Player.RunNextUpdate.Remove:
							this.Remove(true);
							break;
						}
						this.FunctionRunNextUpdate = Player.RunNextUpdate.None;
						if (this.IsRemoved)
						{
							return;
						}
					}
					this.UpdateAntiKicking();
					if (this.StrengthBoostPreparing)
					{
						if (!this.CanUseSyringe())
						{
							this.StrengthBoostPreparing = false;
						}
						else if (this.m_strengthBoostPreparingAnimIndex != this.m_strengthBoostPreparingIndex)
						{
							this.m_strengthBoostPreparingAnimIndex = this.m_strengthBoostPreparingIndex;
							this.AnimationUpperOverride = new PlayerUpperUseSyringeAnimation(this, this.CurrentPowerupItem, 62);
						}
						else if (!(this.AnimationUpperOverride is PlayerUpperUseSyringeAnimation))
						{
							this.StrengthBoostPreparing = false;
						}
						else if (this.Sprinting && this.StandingOnGround)
						{
							this.Sprinting = false;
						}
					}
					else if (this.SpeedBoostPreparing)
					{
						if (!this.CanUseSyringe())
						{
							this.SpeedBoostPreparing = false;
						}
						else if (this.m_speedBoostPreparingAnimIndex != this.m_speedBoostPreparingIndex)
						{
							this.m_speedBoostPreparingAnimIndex = this.m_speedBoostPreparingIndex;
							this.AnimationUpperOverride = new PlayerUpperUseSyringeAnimation(this, this.CurrentPowerupItem, 63);
						}
						else if (!(this.AnimationUpperOverride is PlayerUpperUseSyringeAnimation))
						{
							this.SpeedBoostPreparing = false;
						}
						else if (this.Sprinting && this.StandingOnGround)
						{
							this.Sprinting = false;
						}
					}
					if (this.AnimationUpperOverride != null)
					{
						this.AnimationUpperOverride.Update(this, ms);
					}
					else if (this.Reloading)
					{
						this.CancelReloading();
					}
					if (this.GameOwner != GameOwnerEnum.Server)
					{
						this.ListenForEffects();
					}
					else if (!this.IsDead && this.IsInputEnabled && !this.IsBot)
					{
						GameUser gameUser = this.GetGameUser();
						if (gameUser != null && gameUser.CheckAFK(realMs))
						{
							return;
						}
					}
					if (this.Rolling)
					{
						this.m_rollTime += ms;
					}
					this.UpdateRegisteredObjectImpacts(ms);
					this.UpdateIgnoredBodyIDs(ms);
					this.CheckDeathLedgeAfterBounce();
					this.m_ignoreStandingOnBodyVelocityTimer -= ms;
					if (this.RocketRideProjectileWorldID > 0)
					{
						if (!this.m_polygonFixtureDisabledDuringRocketRiding)
						{
							this.m_playerFilterNoCollision.disableCloudCollision = true;
							this.m_playerFixtureCircle.SetFilterData(ref this.m_playerFilterNoCollision);
							this.m_playerFixturePolygon.SetFilterData(ref this.m_playerFilterNoCollision);
							this.m_polygonFixtureDisabledDuringRocketRiding = true;
						}
						this.UpdateAnimation();
						this.ProgressAnimation(ms);
						this.TimeSequence.Update(ms, realMs);
						this.CheckSyncData();
						if (this.GameOwner != GameOwnerEnum.Client && (this.RocketRideProjectile == null || this.RocketRideProjectile.IsDisposed))
						{
							this.EndRocketRide();
						}
						this.ProcessRemovedAddedWeaponsCallback();
					}
					else
					{
						if (this.m_polygonFixtureDisabledDuringRocketRiding)
						{
							this.m_polygonFixtureDisabledDuringRocketRiding = false;
							this.m_playerFilterCollision.disableCloudCollision = false;
							this.m_playerFixtureCircle.SetFilterData(ref this.m_playerFilterCollision);
							this.m_playerFixturePolygon.SetFilterData(ref this.m_playerFilterCollision);
						}
						if (this.IsCaughtByPlayer)
						{
							this.CanRecoverFromFall = false;
						}
						else if (!this.CanRecoverFromFall && (!this.LayingOnGround & !this.Falling & this.CurrentAction != PlayerAction.Disabled))
						{
							this.CanRecoverFromFall = true;
						}
						this.UpdateIgnoreObjectsImpacts(ms);
						this.CheckQueuedDive();
						this.UpdateBars(ms);
						if (this.Flash)
						{
							this.UpdateFlash(ms);
						}
						this.m_chatActiveTime += ms;
						if (this.IsHoldingPlayerInDive)
						{
							this.m_gameWorld.BringPlayerToFront.Add(this);
						}
						if (this.IsHoldingPlayerInGrab)
						{
							this.m_gameWorld.BringPlayerToFront.Add(this);
						}
						this.FireSequence.Update(ms, realMs);
						this.TimeSequence.Update(ms, realMs);
						this.UpdateAcceleration(ms);
						this.Running = (this.Movement != PlayerMovement.Idle && this.StandingOnGround && !this.Sprinting && !this.Walking && this.CurrentAction != PlayerAction.Disabled);
						if (this.GameOwner == GameOwnerEnum.Client)
						{
							this.CloudsDisabled = this.TimeSequence.DisableCloudCollision;
						}
						this.UpdateMDelay(ms);
						this.UpdateAimAngle((double)((this.CurrentAction == PlayerAction.ManualAim) ? (ms * 0.5f + ms * 0.5f / this.GameWorld.SlowmotionHandler.SlowmotionModifier) : 0f));
						this.UpdateClimbVelocity(ms);
						if (this.GameOwner != GameOwnerEnum.Client)
						{
							this.UpdatePlayerPositionToBox2DPosition(0f);
						}
						this.CheckFireBigEffect();
						this.CheckMeleeGroundToAir(false);
						if (this.GameOwner == GameOwnerEnum.Client)
						{
							this.UpdateSnapManualAimToPositionClient();
							if (this.HasLocalControl)
							{
								if ((this.LedgeGrabData.GrabDirectionX == 1 && this.VirtualKeyboard.PressingKey(2, false)) || (this.LedgeGrabData.GrabDirectionX == -1 && this.VirtualKeyboard.PressingKey(3, false)))
								{
									this.LedgeGrabbingTurn = true;
								}
								else
								{
									this.LedgeGrabbingTurn = false;
								}
								if (this.StandingOnBody != null)
								{
									this.StandingOnBody.ApplyForce(this.GetGravityLineNormal() * this.WorldBody.GetMass(), this.WorldBody.GetPosition());
								}
								this.CloudsDisabled = this.TimeSequence.DisableCloudCollision;
								if (!this.InAir)
								{
									this.TimeSequence.TimeManualAimAirDelay = 500f;
								}
								this.CheckClimbing(this.WantedClimbingDirection);
								if (this.CurrentAction == PlayerAction.Disabled && this.Staggering)
								{
									this.UpdateStaggering();
								}
								if (this.IsGrabbing)
								{
									this.UpdateGrabbing();
								}
								else if ((this.CurrentAction != PlayerAction.Idle || !this.LayingOnGround) && (!this.InAir || this.Diving) && this.Diving && this.CheckDiveCollision())
								{
									this.DropGrabbedPlayer(null, true, false, true);
									this.Diving = false;
									this.InAir = true;
									this.WorldBody.SetLinearVelocity(new Microsoft.Xna.Framework.Vector2(this.WorldBody.GetLinearVelocity().X, 1f));
								}
								if (this.CurrentAction == PlayerAction.Block && this.TimeSequence.TimeBlock <= 0f)
								{
									this.CurrentAction = PlayerAction.Idle;
									this.ForceClientMovementState(3);
								}
								if (this.TakingCover && (this.CoverObject == null || this.TimeSequence.TimeTriggerCoverCheck <= 0f))
								{
									this.TakingCover = this.CheckCanTakeCover(this.LastDirectionX);
									this.TimeSequence.TimeTriggerCoverCheck = 100f;
								}
							}
							else if (!this.IsDead)
							{
								if (this.IsGrabbing)
								{
									this.UpdateGrabbing();
								}
								else if (this.Staggering)
								{
									this.Staggering = this.TimeSequence.Staggering;
									if (!this.Staggering)
									{
										this.Movement = PlayerMovement.Idle;
										this.CurrentAction = PlayerAction.Idle;
										this.CurrentTargetSpeed.X = 0f;
										this.CurrentSpeed.X = 0f;
									}
									else
									{
										this.Movement = ((this.LastDirectionX == 1) ? PlayerMovement.Left : PlayerMovement.Right);
									}
								}
							}
						}
						if (this.GameOwner != GameOwnerEnum.Server)
						{
							this.CheckSpawnMolotovEffect(ms);
						}
						if (this.GameOwner != GameOwnerEnum.Client)
						{
							this.CheckBurstFireWeapon();
							if (this.BurningInferno)
							{
								this.TakeFireDamage(0.01f * ms * 2f);
							}
							if ((this.LedgeGrabData.GrabDirectionX == 1 && this.VirtualKeyboard.PressingKey(2, false)) || (this.LedgeGrabData.GrabDirectionX == -1 && this.VirtualKeyboard.PressingKey(3, false)))
							{
								this.LedgeGrabbingTurn = true;
							}
							else
							{
								this.LedgeGrabbingTurn = false;
							}
							if (this.StandingOnBody != null)
							{
								this.StandingOnBody.ApplyForce(this.GetGravityLineNormal() * this.WorldBody.GetMass(), this.WorldBody.GetPosition());
							}
							if (this.CurrentWeaponSheatheQueued)
							{
								this.SheatheCurrentWeapon(false);
							}
							if (this.AutoReloadWeapon)
							{
								this.StartReloadWeapon();
							}
							if (this.CurrentWeaponQueued != SFD.Weapons.WeaponItemType.NONE)
							{
								this.ActivateWeaponItem(this.CurrentWeaponQueued, this.CurrentWeaponQueued != SFD.Weapons.WeaponItemType.Melee, true);
							}
							else if (this.ThrowingModeToggleQueued)
							{
								if (this.InThrowingMode && this.CanExitThrowingMode())
								{
									this.ExitThrowingMode();
								}
								else if (!this.InThrowingMode && this.CanEnterThrowingMode())
								{
									this.EnterThrowingMode();
								}
								else if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE)
								{
									this.ThrowingModeToggleQueued = false;
								}
							}
							this.CloudsDisabled = this.TimeSequence.DisableCloudCollision;
							this.UpdateReloading(ms);
							this.Dazed = this.TimeSequence.Dazed;
							this.CheckClimbing(this.WantedClimbingDirection);
							if (this.Burning && this.Climbing && this.ClimbingDirection == -1 && this.BurningInferno && this.GameWorld.ElapsedTotalGameTime - this.ClimbingSlideDownTimeStamp >= 250f)
							{
								this.BurningInferno = false;
								this.ObjectData.Fire.IgnitionValue = 36f;
								ConsoleOutput.ShowMessage(ConsoleOutputType.PlayerAction, "Player lower fire rank to 1 while sliding down ladder");
							}
							if (this.CurrentAction != PlayerAction.Disabled && this.TimeSequence.TimeAutomaticGrabItemDelay <= 0f)
							{
								this.AutomaticGrabWeaponItems();
								this.TimeSequence.TimeAutomaticGrabItemDelay = 60f;
							}
							if (!this.InAir)
							{
								this.TimeSequence.TimeManualAimAirDelay = 500f;
							}
							if (this.CurrentAction == PlayerAction.Disabled)
							{
								this.CheckDisabledState(false);
							}
							if (this.IsGrabbing)
							{
								this.UpdateGrabbing();
							}
							else if (this.CurrentAction == PlayerAction.Idle && this.LayingOnGround)
							{
								ConsoleOutput.ShowMessage(ConsoleOutputType.PlayerAction, "Resolving invalid player Idle+LayingOnGround combination");
								this.TimeSequence.TimeForceLayOnGroundTimer = 0f;
								this.LayingOnGround = false;
							}
							else if ((!this.InAir || this.Diving) && this.Diving)
							{
								if (this.CurrentAction == PlayerAction.Disabled)
								{
									this.Diving = false;
								}
								else if (this.CheckDiveCollision())
								{
									this.DropGrabbedPlayer(null, true, false, true);
									this.Diving = false;
									this.InAir = true;
									this.WorldBody.SetLinearVelocity(new Microsoft.Xna.Framework.Vector2(this.WorldBody.GetLinearVelocity().X, 1f));
								}
							}
							if (this.CurrentAction == PlayerAction.Block && this.TimeSequence.TimeBlock <= 0f)
							{
								this.CurrentAction = PlayerAction.Idle;
							}
							if (this.TakingCover && this.TimeSequence.TimeTriggerCoverCheck <= 0f)
							{
								this.TakingCover = this.CheckCanTakeCover(this.LastDirectionX);
								this.TimeSequence.TimeTriggerCoverCheck = 100f;
							}
						}
						this.CheckSyncData();
						this.UpdateAnimation();
						this.ProgressAnimation(ms);
						this.ProcessRemovedAddedWeaponsCallback();
					}
				}
			}
			catch (Exception ex)
			{
				throw new Exception("Error: Failed to update player \r\n" + ex.ToString());
			}
		}

		// Token: 0x06003AF0 RID: 15088 RVA: 0x000302C0 File Offset: 0x0002E4C0
		private void CheckSyncData()
		{
			if (this.ModifiersUpdated)
			{
				this.ModifiersUpdated = false;
				if (this.GameOwner == GameOwnerEnum.Server)
				{
					this.SyncPlayerModifierData(null);
				}
			}
			if (this.MetaDataUpdated)
			{
				this.MetaDataUpdated = false;
				if (this.GameOwner == GameOwnerEnum.Server)
				{
					this.SyncPlayerMetaData(null);
				}
			}
		}

		// Token: 0x06003AF1 RID: 15089 RVA: 0x000F7F30 File Offset: 0x000F6130
		private void CheckDisabledState(bool secondCheck = false)
		{
			if (this.Staggering)
			{
				this.UpdateStaggering();
				return;
			}
			if (this.MeleeHit)
			{
				if (!this.TimeSequence.MeleeHit)
				{
					this.MeleeHit = false;
					this.CheckDisabledState(true);
					return;
				}
			}
			else if (this.Crouching)
			{
				if (this.InAir)
				{
					this.LastDirectionX = ((this.LastDirectionX == 1) ? -1 : 1);
					this.Fall();
					return;
				}
				if (!this.TimeSequence.ForceCrouchDuringRise)
				{
					this.Crouching = false;
					this.CheckDisabledState(true);
					return;
				}
			}
			else if (this.LayingOnGround)
			{
				if (this.InAir)
				{
					this.LastDirectionX = ((this.LastDirectionX == 1) ? -1 : 1);
					this.Fall();
					return;
				}
				if (this.IsDead)
				{
					if (this.m_dropAllWeaponsUpdateDelay > 0)
					{
						this.m_dropAllWeaponsUpdateDelay--;
						if (this.m_dropAllWeaponsUpdateDelay <= 0)
						{
							this.DropAllWeapons();
							return;
						}
					}
				}
				else if (!this.TimeSequence.ForceLayOnGround)
				{
					this.TimeSequence.TimeForceCrouchDuringRiseTimer = 100f;
					this.Crouching = true;
					this.LayingOnGround = false;
					return;
				}
			}
			else
			{
				if (this.Falling)
				{
					return;
				}
				if (this.CaughtByPlayerID != 0)
				{
					this.Falling = false;
					return;
				}
				if (this.GrabbedByPlayerID != 0)
				{
					this.Falling = false;
					return;
				}
				if (this.FullLanding)
				{
					return;
				}
				if (this.DeathKneeling)
				{
					if (this.InAir)
					{
						this.Fall();
						return;
					}
				}
				else
				{
					if (!secondCheck)
					{
						ConsoleOutput.ShowMessage(ConsoleOutputType.Warning, "Player disabled but not in any disabled state: status (" + this.m_states.ToString() + ")");
					}
					this.CurrentAction = PlayerAction.Idle;
				}
			}
		}

		// Token: 0x06003AF2 RID: 15090 RVA: 0x000F80C0 File Offset: 0x000F62C0
		internal void CheckMeleeGroundToAir(bool force = false)
		{
			if ((this.GameOwner != GameOwnerEnum.Client || this.HasLocalControl) && !this.IsDead)
			{
				if ((this.CurrentAction == PlayerAction.MeleeAttack1 || this.CurrentAction == PlayerAction.MeleeAttack2 || this.CurrentAction == PlayerAction.MeleeAttack3) && this.InAir && (force || this.TimeSequence.TimeInAir > 250f || this.m_timeSinceLastJump < 200f || this.Movement != PlayerMovement.Idle || (this.CloudsDisabled && this.TimeSequence.TimeInAir > 50f)))
				{
					bool flag = this.PerformedMeleeHitFrame();
					this.JumpAttack(true);
					this.InAir = true;
					this.StandingOnGround = false;
					if (flag)
					{
						if (!this.GameWorld.MeleePendingPlayerHit(this))
						{
							this.m_havePerformedJumpAttack = true;
						}
						this.SetMeleeHitFrame(false);
					}
					else
					{
						this.m_havePerformedJumpAttack = false;
					}
					this.m_haveTouchedGroundSinceLastInAir = false;
					this.ImportantUpdate = true;
				}
				if (this.CurrentAction == PlayerAction.Kick && this.InAir && (force || this.TimeSequence.TimeInAir > 250f || this.m_timeSinceLastJump < 200f || this.Movement != PlayerMovement.Idle || (this.CloudsDisabled && this.TimeSequence.TimeInAir > 50f)))
				{
					bool flag2 = this.PerformedKickHitFrame();
					this.JumpKick();
					this.InAir = true;
					this.StandingOnGround = false;
					if (flag2)
					{
						if (!this.GameWorld.KickPendingPlayerHit(this))
						{
							this.m_havePerformedJumpAttack = true;
						}
						this.SetKickHitFrame(false);
					}
					else
					{
						this.m_havePerformedJumpAttack = false;
					}
					this.m_haveTouchedGroundSinceLastInAir = false;
					this.ImportantUpdate = true;
				}
			}
		}

		// Token: 0x06003AF3 RID: 15091 RVA: 0x000F8258 File Offset: 0x000F6458
		private void UpdateMDelay(float ms)
		{
			float num = ms;
			if (this.m_meleeHit1Delay > 0f)
			{
				this.m_meleeHit1Delay -= num;
				if (this.m_meleeHit1Delay <= 0f)
				{
					num = -this.m_meleeHit1Delay;
					this.m_meleeHit1Delay = 0f;
					this.m_meleeHit1Cooldown = 450f;
					if (this.CurrentAction == PlayerAction.MeleeAttack1)
					{
						this.UnfreezeAnimationOnAction();
					}
				}
				else
				{
					num = 0f;
				}
			}
			if (this.m_meleeHit1Cooldown > 0f)
			{
				this.m_meleeHit1Cooldown -= num;
				if (this.m_meleeHit1Cooldown <= 0f)
				{
					this.m_meleeHit1Cooldown = 0f;
				}
			}
		}

		// Token: 0x06003AF4 RID: 15092 RVA: 0x000F82F8 File Offset: 0x000F64F8
		private void UpdateStaggering()
		{
			if ((this.LastDirectionX == 1 && this.Contacts.LeftCollisionContactsCount > 0) || (this.LastDirectionX == -1 && this.Contacts.RightCollisionContactsCount > 0))
			{
				bool flag = false;
				PlayerContact[] array;
				int num;
				if (this.LastDirectionX == 1)
				{
					array = this.Contacts.LeftCollisionContacts;
					num = this.Contacts.LeftCollisionContactsCount;
				}
				else
				{
					array = this.Contacts.RightCollisionContacts;
					num = this.Contacts.RightCollisionContactsCount;
				}
				for (int i = 0; i < num; i++)
				{
					PlayerContact playerContact = array[i];
					if (playerContact.Fixture != null)
					{
						if (playerContact.Fixture.GetUserData() == null)
						{
							flag = true;
						}
						else
						{
							ObjectData objectData = ObjectData.Read(playerContact.Fixture);
							if (objectData.BreakOnStagger)
							{
								objectData.Destroy();
								flag = true;
							}
						}
					}
				}
				if (!flag)
				{
					if (!this.IsDead)
					{
						if (this.CurrentActionTime >= 100f)
						{
							this.TimeSequence.TimeStagger = 0f;
						}
					}
					else if (this.GameOwner != GameOwnerEnum.Client)
					{
						this.StartDeathKneel();
						return;
					}
				}
			}
			if (this.GameOwner != GameOwnerEnum.Client || !this.IsDead)
			{
				this.Staggering = this.TimeSequence.Staggering;
			}
			if (this.LayingOnGround && this.GameOwner != GameOwnerEnum.Client)
			{
				ConsoleOutput.ShowMessage(ConsoleOutputType.PlayerAction, "Resolving invalid player Stagger+LayingOnGround combination");
				this.TimeSequence.TimeStagger = 0f;
				this.Staggering = false;
				this.ImportantUpdate = true;
				return;
			}
			if (!this.Staggering)
			{
				if (!this.IsDead)
				{
					if (this.GameOwner == GameOwnerEnum.Client)
					{
						this.ForceClientMovementState(20);
					}
					this.Movement = PlayerMovement.Idle;
					this.CurrentAction = PlayerAction.Idle;
					this.ImportantUpdate = true;
					return;
				}
				float num2 = 0f;
				if (!this.m_staggeringExtendedCheckPerformed)
				{
					this.m_staggeringExtendedCheckPerformed = true;
					num2 = this.CheckDeathLedge(-(float)this.LastDirectionX, 52f, Player.DeathType.Stagger);
				}
				if (num2 > 0f)
				{
					this.StartStaggering(Math.Max(num2 * 0.03125f * 1000f - 350f, 250f));
					this.m_staggeringExtendedCheckPerformed = true;
					return;
				}
				this.Movement = PlayerMovement.Idle;
				this.CurrentAction = PlayerAction.Idle;
				this.ImportantUpdate = true;
				this.Fall(new Microsoft.Xna.Framework.Vector2(-(float)this.LastDirectionX, 3f));
				return;
			}
			else
			{
				if (this.InAir)
				{
					this.Fall(new Microsoft.Xna.Framework.Vector2(0f, 3f));
					return;
				}
				this.Movement = ((this.LastDirectionX == 1) ? PlayerMovement.Left : PlayerMovement.Right);
				return;
			}
		}

		// Token: 0x06003AF5 RID: 15093 RVA: 0x000F8560 File Offset: 0x000F6760
		private void CheckSpawnMolotovEffect(float ms)
		{
			if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown && !this.InThrowingMode)
			{
				if (this.CurrentThrownWeapon != null && this.CurrentThrownWeapon.Properties.WeaponID == 25 && this.ThrowableIsActivated)
				{
					this.m_nextMolotovSpawnTime += ms;
					if (this.m_nextMolotovSpawnTime > 150f)
					{
						EffectHandler.PlayEffect("FNDTRA", this.Position + new Microsoft.Xna.Framework.Vector2(-(float)this.LastDirectionXVisual * 10f + Constants.RANDOM.NextFloat(-1f, 1f), 13f + Constants.RANDOM.NextFloat(-1f, 1f)), this.GameWorld);
						this.m_nextMolotovSpawnTime = 0f;
						return;
					}
				}
				else
				{
					this.m_nextMolotovSpawnTime = 150f;
				}
			}
		}

		// Token: 0x06003AF6 RID: 15094 RVA: 0x000F8640 File Offset: 0x000F6840
		private void CheckFireBigEffect()
		{
			if (this.GameOwner != GameOwnerEnum.Server)
			{
				if (this.m_fireBigEffect != null && this.m_fireBigEffect.Finished)
				{
					this.m_fireBigEffect = null;
				}
				if (this.BurningInferno && this.m_fireBigEffect == null)
				{
					BaseEffect[] array = EffectHandler.CreateEffect("FBG", Microsoft.Xna.Framework.Vector2.Zero, this.GameWorld, new object[]
					{
						this.ObjectID
					});
					if (array != null && array.Length > 0)
					{
						this.m_fireBigEffect = array[0];
						this.GameWorld.GameEffects.Add(this.m_fireBigEffect);
					}
				}
			}
		}

		// Token: 0x06003AF7 RID: 15095 RVA: 0x000F86DC File Offset: 0x000F68DC
		private short UnequipWeaponItem(SFD.Weapons.WeaponItemType weaponToRemove, bool removeMakeshift = true)
		{
			short result = 0;
			ConsoleOutput.ShowMessage(ConsoleOutputType.Information, string.Concat(new string[]
			{
				this.GameOwner.ToString(),
				": Player '",
				this.Name,
				"' unequipped weapon of type '",
				weaponToRemove.ToString(),
				"'"
			}));
			switch (weaponToRemove)
			{
			case SFD.Weapons.WeaponItemType.NONE:
				break;
			default:
				ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "TODO: Player.UnequipWeaponItem of type" + weaponToRemove.ToString());
				return result;
			case SFD.Weapons.WeaponItemType.Handgun:
				if (this.CurrentHandgunWeapon != null)
				{
					result = this.CurrentHandgunWeapon.Properties.WeaponID;
					this.CurrentHandgunWeapon = null;
				}
				break;
			case SFD.Weapons.WeaponItemType.Rifle:
				if (this.CurrentRifleWeapon != null)
				{
					result = this.CurrentRifleWeapon.Properties.WeaponID;
					this.CurrentRifleWeapon = null;
				}
				break;
			case SFD.Weapons.WeaponItemType.Thrown:
				if (this.CurrentThrownWeapon != null)
				{
					result = this.CurrentThrownWeapon.Properties.WeaponID;
					this.CurrentThrownWeapon = null;
				}
				break;
			case SFD.Weapons.WeaponItemType.Melee:
				if (this.CurrentMeleeMakeshiftWeapon != null && removeMakeshift)
				{
					result = this.CurrentMeleeMakeshiftWeapon.Properties.WeaponID;
					this.CurrentMeleeMakeshiftWeapon = null;
				}
				else
				{
					if (this.CurrentMeleeWeapon != null)
					{
						result = this.CurrentMeleeWeapon.Properties.WeaponID;
						this.CurrentMeleeWeapon = null;
					}
					if (this.CurrentMeleeMakeshiftWeapon != null)
					{
						this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.Melee;
					}
				}
				break;
			case SFD.Weapons.WeaponItemType.Powerup:
				if (this.CurrentPowerupItem != null)
				{
					result = this.CurrentPowerupItem.Properties.WeaponID;
					this.CurrentPowerupItem = null;
				}
				break;
			}
			return result;
		}

		// Token: 0x06003AF8 RID: 15096 RVA: 0x000F8870 File Offset: 0x000F6A70
		internal bool HaveWeaponItem(SFD.Weapons.WeaponItem weaponItem)
		{
			switch (weaponItem.Type)
			{
			case SFD.Weapons.WeaponItemType.Handgun:
				return this.CurrentHandgunWeapon != null && this.CurrentHandgunWeapon.Properties.WeaponID == weaponItem.RWeaponData.Properties.WeaponID;
			case SFD.Weapons.WeaponItemType.Rifle:
				return this.CurrentRifleWeapon != null && this.CurrentRifleWeapon.Properties.WeaponID == weaponItem.RWeaponData.Properties.WeaponID;
			case SFD.Weapons.WeaponItemType.Thrown:
				return this.CurrentThrownWeapon != null && this.CurrentThrownWeapon.Properties.Stackable && this.CurrentThrownWeapon.Properties.WeaponID == weaponItem.TWeaponData.Properties.WeaponID;
			case SFD.Weapons.WeaponItemType.Melee:
				if (weaponItem.BaseProperties.IsMakeshift)
				{
					return this.CurrentMeleeMakeshiftWeapon != null && this.CurrentMeleeMakeshiftWeapon.Properties.WeaponID == weaponItem.MWeaponData.Properties.WeaponID;
				}
				return this.CurrentMeleeWeapon != null && this.CurrentMeleeWeapon.Properties.WeaponID == weaponItem.MWeaponData.Properties.WeaponID;
			case SFD.Weapons.WeaponItemType.Powerup:
				return this.CurrentPowerupItem != null && this.CurrentPowerupItem.Properties.WeaponID == weaponItem.PItemData.Properties.WeaponID;
			case SFD.Weapons.WeaponItemType.InstantPickup:
				return weaponItem.HItemData.CheckDoPickup(this, weaponItem.HItemData);
			default:
				ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "TODO: Player.HaveWeaponItem." + weaponItem.Type.ToString());
				return false;
			}
		}

		// Token: 0x06003AF9 RID: 15097 RVA: 0x000F8A08 File Offset: 0x000F6C08
		internal void ReceiveItem(NetMessage.PlayerReceiveItem.Data itemData)
		{
			if (itemData.WeaponToRemove == SFD.Weapons.WeaponItemType.NONE)
			{
				SFD.Weapons.WeaponItem weapon = WeaponDatabase.GetWeapon(itemData.WeaponItemId);
				if (weapon == null)
				{
					return;
				}
				if (!this.HaveWeaponItem(weapon))
				{
					this.GrabWeaponItem(weapon, 0);
				}
				switch (weapon.Type)
				{
				case SFD.Weapons.WeaponItemType.Handgun:
				{
					RWeapon rweapon = this.CurrentHandgunWeapon;
					rweapon.CurrentMagsInWeapon = itemData.Fields[0];
					rweapon.CurrentRoundsInActiveMag = itemData.Fields[1];
					rweapon.CurrentSpareMags = itemData.Fields[2];
					rweapon.LazerUpgrade = ((itemData.Fields.Count > 3) ? itemData.Fields[3] : 0);
					rweapon.PowerupBouncingRounds = ((itemData.Fields.Count > 4) ? itemData.Fields[4] : 0);
					rweapon.PowerupFireRounds = ((itemData.Fields.Count > 5) ? itemData.Fields[5] : 0);
					switch (itemData.SourceType)
					{
					case NetMessage.PlayerReceiveItem.ReceiveSourceType.Reload:
						rweapon.Reload(this);
						return;
					case NetMessage.PlayerReceiveItem.ReceiveSourceType.ConsumeAmmo:
					case NetMessage.PlayerReceiveItem.ReceiveSourceType.ConsumeAmmoInfinite:
						if (itemData.SourceType == NetMessage.PlayerReceiveItem.ReceiveSourceType.ConsumeAmmo)
						{
							rweapon.ConsumeAmmoFromFire(this);
							return;
						}
						break;
					case NetMessage.PlayerReceiveItem.ReceiveSourceType.GrabWeaponAmmo:
						rweapon.GrabAmmo(this);
						return;
					default:
						return;
					}
					break;
				}
				case SFD.Weapons.WeaponItemType.Rifle:
				{
					RWeapon rweapon = this.CurrentRifleWeapon;
					rweapon.CurrentMagsInWeapon = itemData.Fields[0];
					rweapon.CurrentRoundsInActiveMag = itemData.Fields[1];
					rweapon.CurrentSpareMags = itemData.Fields[2];
					rweapon.LazerUpgrade = ((itemData.Fields.Count > 3) ? itemData.Fields[3] : 0);
					rweapon.PowerupBouncingRounds = ((itemData.Fields.Count > 4) ? itemData.Fields[4] : 0);
					rweapon.PowerupFireRounds = ((itemData.Fields.Count > 5) ? itemData.Fields[5] : 0);
					switch (itemData.SourceType)
					{
					case NetMessage.PlayerReceiveItem.ReceiveSourceType.Reload:
						rweapon.Reload(this);
						return;
					case NetMessage.PlayerReceiveItem.ReceiveSourceType.ConsumeAmmo:
					case NetMessage.PlayerReceiveItem.ReceiveSourceType.ConsumeAmmoInfinite:
						if (itemData.SourceType == NetMessage.PlayerReceiveItem.ReceiveSourceType.ConsumeAmmo)
						{
							rweapon.ConsumeAmmoFromFire(this);
							return;
						}
						break;
					case NetMessage.PlayerReceiveItem.ReceiveSourceType.GrabWeaponAmmo:
						rweapon.GrabAmmo(this);
						return;
					default:
						return;
					}
					break;
				}
				case SFD.Weapons.WeaponItemType.Thrown:
				{
					TWeapon currentThrownWeapon = this.CurrentThrownWeapon;
					currentThrownWeapon.NumberOfThrowablesLeft = itemData.Fields[0];
					return;
				}
				case SFD.Weapons.WeaponItemType.Melee:
				{
					MWeapon mweapon;
					if (weapon.BaseProperties.IsMakeshift)
					{
						mweapon = this.CurrentMeleeMakeshiftWeapon;
					}
					else
					{
						mweapon = this.CurrentMeleeWeapon;
					}
					if (mweapon == null)
					{
						ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "Player.ReceiveItem- null melee weapon when updating " + weapon.BaseProperties.WeaponNameID);
						return;
					}
					if (mweapon.Properties.WeaponID == itemData.WeaponItemId)
					{
						mweapon.Durability.CurrentValue = itemData.MeleeDurability;
						mweapon.SetExtraDataFields(itemData.Fields);
						return;
					}
					break;
				}
				default:
					return;
				}
			}
			else if (itemData.WeaponToRemove == SFD.Weapons.WeaponItemType.Melee)
			{
				if (itemData.WeaponToRemoveIsMakeshift)
				{
					if (this.CurrentMeleeMakeshiftWeapon != null)
					{
						this.MeleeWeaponBroken = itemData.MeleeWeaponBroken;
						this.RemoveWeaponItem(itemData.WeaponToRemove, itemData.WeaponToRemoveIsMakeshift, true);
						return;
					}
					ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "Client.HandleDataMessages.PlayerReceiveItem - RemoveWeaponItem makeshift but client doesn't have a makeshift weapon yet");
					return;
				}
				else
				{
					if (this.CurrentMeleeWeapon != null)
					{
						this.MeleeWeaponBroken = itemData.MeleeWeaponBroken;
						this.RemoveWeaponItem(itemData.WeaponToRemove, itemData.WeaponToRemoveIsMakeshift, true);
						return;
					}
					ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "Client.HandleDataMessages.PlayerReceiveItem - RemoveWeaponItem but client doesn't have a weapon yet");
					return;
				}
			}
			else
			{
				this.RemoveWeaponItem(itemData.WeaponToRemove, true, true);
			}
		}

		// Token: 0x06003AFA RID: 15098 RVA: 0x000F8D80 File Offset: 0x000F6F80
		internal void EquipWeaponItem(SFD.Weapons.WeaponItem weaponToEquip)
		{
			try
			{
				if (this.CurrentAction == PlayerAction.DrawWeapon && weaponToEquip.Type == this.CurrentWeaponDrawn)
				{
					this.ForceHardAnimationReset(true);
				}
				if (weaponToEquip.BaseProperties.IsMakeshift)
				{
					SFD.Weapons.WeaponItemType type = weaponToEquip.Type;
					if (type == SFD.Weapons.WeaponItemType.Melee)
					{
						this.CurrentMeleeMakeshiftWeapon = weaponToEquip.MWeaponData.Copy();
						this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.NONE;
						if (this.MeleeWeaponBroken)
						{
							this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.Melee;
						}
					}
					else
					{
						ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "TODO: Player.EquipWeaponItem." + weaponToEquip.Type.ToString() + " MAKESHIFT");
					}
				}
				else
				{
					switch (weaponToEquip.Type)
					{
					case SFD.Weapons.WeaponItemType.Handgun:
						this.CurrentHandgunWeapon = weaponToEquip.RWeaponData.Copy();
						this.CheckWeaponUpgradeQueued(this.CurrentHandgunWeapon);
						break;
					case SFD.Weapons.WeaponItemType.Rifle:
						this.CurrentRifleWeapon = weaponToEquip.RWeaponData.Copy();
						this.CheckWeaponUpgradeQueued(this.CurrentRifleWeapon);
						break;
					case SFD.Weapons.WeaponItemType.Thrown:
						this.CurrentThrownWeapon = weaponToEquip.TWeaponData.Copy();
						break;
					case SFD.Weapons.WeaponItemType.Melee:
						this.CurrentMeleeWeapon = weaponToEquip.MWeaponData.Copy();
						if (this.MeleeWeaponBroken)
						{
							this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.Melee;
						}
						break;
					case SFD.Weapons.WeaponItemType.Powerup:
						this.CurrentPowerupItem = weaponToEquip.PItemData.Copy();
						break;
					case SFD.Weapons.WeaponItemType.InstantPickup:
						if (weaponToEquip.HItemData != null)
						{
							weaponToEquip.HItemData.OnPickup(this, weaponToEquip.HItemData);
						}
						break;
					default:
						ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "TODO: Player.EquipWeaponItem." + weaponToEquip.Type.ToString());
						break;
					}
				}
			}
			catch (Exception ex)
			{
				throw new Exception("Error: Player.EquipWeaponItem failed\r\n" + ex.ToString());
			}
		}

		// Token: 0x06003AFB RID: 15099 RVA: 0x000F8F44 File Offset: 0x000F7144
		private void UpdatePlayerPositionToBox2DPosition(float msf)
		{
			if (this.RocketRideProjectileWorldID > 0)
			{
				return;
			}
			this.Position = Converter.Box2DToWorld(this.WorldBody.GetPosition() + this.GameWorld.DrawingBox2DSimulationTimestepOver * this.WorldBody.GetAverageLinearVelocity());
			if (this.IsCaughtByPlayer && this.CaughtByPlayer != null)
			{
				Player caughtByPlayer = this.CaughtByPlayer;
				this.Position = Converter.Box2DToWorld(caughtByPlayer.WorldBody.GetPosition() + this.GameWorld.DrawingBox2DSimulationTimestepOver * this.WorldBody.GetAverageLinearVelocity());
				Microsoft.Xna.Framework.Vector2 value = new Microsoft.Xna.Framework.Vector2((float)caughtByPlayer.LastDirectionX * 10f, 1f);
				SFDMath.RotatePosition(ref value, -caughtByPlayer.DiveRotation, out value);
				this.Position += value;
				this.Rotation = caughtByPlayer.DiveRotation;
				return;
			}
			if (this.IsGrabbedByPlayer)
			{
				if (this.GrabbedByPlayer != null)
				{
					this.Position = this.GrabbedByPlayer.GetGrabWorldPosition();
					this.Rotation = 0f;
					return;
				}
			}
			else if (this.StandingOnGround)
			{
				if (this.StandingOnBody != null & Constants.EFFECT_LEVEL_FULL)
				{
					Box2D.XNA.RayCastInput rayCastInput = default(Box2D.XNA.RayCastInput);
					float num = 1f;
					rayCastInput.maxFraction = 1f;
					rayCastInput.p1 = this.WorldBody.GetPosition() + new Microsoft.Xna.Framework.Vector2(0f, 0.176f);
					rayCastInput.p2 = this.WorldBody.GetPosition() - new Microsoft.Xna.Framework.Vector2(0f, 0.176f);
					for (Fixture fixture = this.StandingOnBody.GetFixtureList(); fixture != null; fixture = fixture.GetNext())
					{
						Filter filter;
						fixture.GetFilterData(out filter);
						RayCastOutput rayCastOutput;
						if (Settings.b2ShouldCollide(ref this.m_playerFilterCollision, ref filter) && fixture.RayCast(out rayCastOutput, ref rayCastInput) && rayCastOutput.fraction < num)
						{
							num = rayCastOutput.fraction;
						}
					}
					if (num < 1f)
					{
						this.Position = Converter.Box2DToWorld(rayCastInput.GetHitPosition(num));
					}
					else
					{
						this.Position -= new Microsoft.Xna.Framework.Vector2(0f, 4f);
					}
				}
				else
				{
					this.Position -= new Microsoft.Xna.Framework.Vector2(0f, 4f);
				}
				if (this.m_currentAnimation != Animation.Falling)
				{
					this.Rotation = 0f;
					return;
				}
			}
			else
			{
				if (this.Falling & this.CaughtByPlayerID == 0)
				{
					this.UpdateRotationDirection(0);
					this.Rotation += msf * this.RotationDirection * 0.01f;
					this.LastFallingRotation = this.Rotation;
					return;
				}
				if (this.LedgeGrabbing)
				{
					if (this.LedgeGrabData.CheckMoveSequenceStillValid())
					{
						Microsoft.Xna.Framework.Vector2 ledgeGrabOffset = this.GetLedgeGrabOffset();
						float ledgeGrabAngle = this.GetLedgeGrabAngle();
						SFDMath.RotatePosition(ref ledgeGrabOffset, ledgeGrabAngle, out ledgeGrabOffset);
						this.Position = Converter.Box2DToWorld(this.LedgeGrabData.WorldVertexPoint) + ledgeGrabOffset;
						this.Rotation = -ledgeGrabAngle;
						this.LastFallingRotation = this.Rotation;
						return;
					}
				}
				else
				{
					this.Position -= new Microsoft.Xna.Framework.Vector2(0f, 4f);
					if (this.m_currentAnimation != Animation.Falling)
					{
						this.Rotation = 0f;
					}
				}
			}
		}

		// Token: 0x06003AFC RID: 15100 RVA: 0x000F929C File Offset: 0x000F749C
		private void UpdateSnapManualAimToPositionClient()
		{
			if (this.ManualAimBox2DTargetPosition.PositionEnabled)
			{
				if (this.CurrentAction == PlayerAction.ManualAim)
				{
					Microsoft.Xna.Framework.Vector2 value = this.ManualAimBox2DTargetPosition.TargetPosition - this.WorldBody.GetPosition();
					if (Microsoft.Xna.Framework.Vector2.Dot(this.ManualAimBox2DTargetPosition.MovementDirection, value) <= 0f)
					{
						this.WorldBody.SetTransform(this.ManualAimBox2DTargetPosition.TargetPosition + new Microsoft.Xna.Framework.Vector2(0f, 1f), 0f);
						this.WorldBody.SetTransform(this.ManualAimBox2DTargetPosition.TargetPosition, 0f);
						this.WorldBody.SetAwake(true);
						this.WorldBody.SetLinearVelocity(Microsoft.Xna.Framework.Vector2.Zero);
						this.ManualAimBox2DTargetPosition.PositionEnabled = false;
						return;
					}
				}
				else
				{
					this.ManualAimBox2DTargetPosition.PositionEnabled = false;
				}
			}
		}

		// Token: 0x06003AFD RID: 15101 RVA: 0x000F9378 File Offset: 0x000F7578
		internal void UpdateResyncBox2DContacts()
		{
			this.RefilterContacts = true;
			if (!this.WorldBody.IsDestroyed)
			{
				Microsoft.Xna.Framework.Vector2 position = this.WorldBody.GetPosition();
				this.WorldBody.SetTransform(position + new Microsoft.Xna.Framework.Vector2(0f, 1f), 0f);
				this.WorldBody.SetTransform(position, 0f);
			}
		}

		// Token: 0x06003AFE RID: 15102 RVA: 0x000F93DC File Offset: 0x000F75DC
		private void UpdateBars(float msf)
		{
			if (this.Sprinting)
			{
				if (!this.InAir && this.Movement != PlayerMovement.Idle)
				{
					float num = this.Energy.MaxValue / 3400f;
					this.DrainEnergy(num * msf);
					if (this.Energy.CurrentValue <= 0f)
					{
						this.Sprinting = false;
						return;
					}
				}
			}
			else if (!this.Energy.IsFull && this.CanRechargeEnergy())
			{
				this.Energy.CurrentValue += this.GetRechargeEnergyPerMs() * msf;
			}
		}

		// Token: 0x06003AFF RID: 15103 RVA: 0x00030300 File Offset: 0x0002E500
		internal Microsoft.Xna.Framework.Vector2 GetLinearVelocityFromStandinOnBody()
		{
			if (this.StandingOnBody == null)
			{
				return Microsoft.Xna.Framework.Vector2.Zero;
			}
			return this.StandingOnBody.GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition());
		}

		// Token: 0x06003B00 RID: 15104 RVA: 0x000F9468 File Offset: 0x000F7668
		internal bool GetWeaponInformation(Player.WeaponInformationType weaponInformation, out Microsoft.Xna.Framework.Vector2 worldPosition, out Microsoft.Xna.Framework.Vector2 direction)
		{
			bool result;
			try
			{
				float drawScale = this.DrawScale;
				float num = (float)this.LastDirectionXVisual;
				if (this.InThrowingMode || (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Handgun && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Rifle))
				{
					if (!this.InThrowingMode)
					{
						if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Thrown)
						{
							goto IL_29E;
						}
					}
					worldPosition = ((this.WorldBody != null) ? Converter.Box2DToWorld(this.WorldBody.GetPosition()) : this.Position) + new Microsoft.Xna.Framework.Vector2(num * -1f, 10f) * drawScale;
					direction = Microsoft.Xna.Framework.Vector2.UnitX;
					direction.X *= num;
					if (this.LastDirectionX == 1)
					{
						SFDMath.RotatePosition(ref direction, -this.AimAngle, out direction);
					}
					else
					{
						SFDMath.RotatePosition(ref direction, this.AimAngle, out direction);
					}
					return true;
				}
				Microsoft.Xna.Framework.Vector2 value = Microsoft.Xna.Framework.Vector2.Zero;
				RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
				if (currentRangedWeaponInUse == null)
				{
					worldPosition = ((this.WorldBody != null) ? Converter.Box2DToWorld(this.WorldBody.GetPosition()) : this.Position) + new Microsoft.Xna.Framework.Vector2(num * 7f, 6f) * drawScale;
					direction = new Microsoft.Xna.Framework.Vector2(num, 0f);
					return false;
				}
				switch (weaponInformation)
				{
				case Player.WeaponInformationType.MuzzlePosition:
					value = currentRangedWeaponInUse.Properties.MuzzlePosition;
					break;
				case Player.WeaponInformationType.LazerPosition:
					value = currentRangedWeaponInUse.Properties.LazerPosition;
					break;
				}
				List<AnimationPartData> subItemMarkerInfo = this.GetSubItemMarkerInfo(6);
				if (subItemMarkerInfo.Count > 1)
				{
					Microsoft.Xna.Framework.Vector2 vector = Microsoft.Xna.Framework.Vector2.Zero;
					bool flag;
					if (flag = (subItemMarkerInfo[0].Flip == SpriteEffects.FlipHorizontally))
					{
						num *= -1f;
					}
					vector = new Microsoft.Xna.Framework.Vector2(subItemMarkerInfo[0].X, subItemMarkerInfo[0].Y);
					SFDMath.RotatePosition(ref vector, this.m_subAnimations[1].Rotation * num + (flag ? 3.1415927f : 0f), out vector);
					vector += new Microsoft.Xna.Framework.Vector2(subItemMarkerInfo[1].X, subItemMarkerInfo[1].Y * (flag ? -1f : 1f));
					float num2 = this.Rotation + this.m_subAnimations[1].Rotation + subItemMarkerInfo[0].Rotation * num;
					vector.X *= num;
					if (!flag)
					{
						vector.Y *= -1f;
					}
					worldPosition = this.Position + vector * drawScale;
					float num3 = num2;
					if (this.LastDirectionXVisual == -1)
					{
						num3 += 3.1415927f;
					}
					direction = new Microsoft.Xna.Framework.Vector2((float)Math.Cos((double)num3), -(float)Math.Sin((double)num3));
					SFDMath.RotatePosition(ref value, num2 * num + (flag ? 3.1415927f : 0f), out value);
					value.X *= num;
					value.Y *= -1f;
					worldPosition += value * drawScale;
					return true;
				}
				IL_29E:
				worldPosition = ((this.WorldBody != null) ? Converter.Box2DToWorld(this.WorldBody.GetPosition()) : this.Position) + new Microsoft.Xna.Framework.Vector2(num * 7f, 6f) * drawScale;
				direction = new Microsoft.Xna.Framework.Vector2(num, 0f);
				result = false;
			}
			catch (Exception ex)
			{
				throw new Exception("Error: GetWeaponMuzzleInformation failed\r\n" + ex.ToString());
			}
			return result;
		}

		// Token: 0x06003B01 RID: 15105 RVA: 0x000F982C File Offset: 0x000F7A2C
		private void UpdateCaughtPlayerPosition(Player caughtPlayer, bool finalUpdate = false)
		{
			if (caughtPlayer == null)
			{
				return;
			}
			if (caughtPlayer.WorldBody != null && this.WorldBody != null)
			{
				this.m_diveCollisionCheckResult.Prepare(this.DiveVector(), this.WorldBody.GetPosition(), Converter.WorldToBox2D(15f));
				this.WorldBody.SetAngularVelocity((float)(-(float)this.LastDirectionX) * 1f);
				bool flag;
				if (!finalUpdate)
				{
					Microsoft.Xna.Framework.Vector2 playerProgressPosition = this.m_diveCollisionCheckResult.GetPlayerProgressPosition();
					Microsoft.Xna.Framework.Vector2 linearVelocityFromWorldPoint = this.WorldBody.GetLinearVelocityFromWorldPoint(playerProgressPosition);
					Microsoft.Xna.Framework.Vector2 vector = playerProgressPosition - caughtPlayer.WorldBody.GetPosition();
					flag = (Math.Abs(vector.X) > 0.04f || Math.Abs(vector.Y) > 0.04f);
					caughtPlayer.WorldBody.SetLinearVelocity(linearVelocityFromWorldPoint);
				}
				else
				{
					flag = true;
				}
				if (flag)
				{
					ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "Updating player dive position");
					this.PerformDiveCollision(this.m_diveCollisionCheckResult);
					Microsoft.Xna.Framework.Vector2 playerProgressPosition2 = this.m_diveCollisionCheckResult.GetPlayerProgressPosition();
					Microsoft.Xna.Framework.Vector2 linearVelocityFromWorldPoint2 = this.WorldBody.GetLinearVelocityFromWorldPoint(playerProgressPosition2);
					caughtPlayer.WorldBody.SetTransform(playerProgressPosition2, 0f);
					caughtPlayer.WorldBody.SetLinearVelocity(linearVelocityFromWorldPoint2);
				}
				else
				{
					ConsoleOutput.ShowMessage(ConsoleOutputType.PlayerAction, "Dive update player position not needed");
				}
				this.WorldBody.SetAngularVelocity(0f);
				if (finalUpdate)
				{
					Microsoft.Xna.Framework.Vector2 offset = new Microsoft.Xna.Framework.Vector2((float)this.LastDirectionX * Converter.WorldToBox2D(10f), -Converter.WorldToBox2D(1.25f));
					SFDMath.RotatePosition(ref offset, -this.DiveRotation, out offset);
					float extent = Converter.ConvertWorldToBox2D(5f);
					Microsoft.Xna.Framework.Vector2[] offsets = new Microsoft.Xna.Framework.Vector2[6];
					offsets[0] = offset * 1f;
					offsets[1] = offset * 0.8f;
					offsets[2] = offset * 0.6f;
					offsets[3] = offset * 0.4f;
					offsets[4] = offset * 0.2f;
					offsets[5] = offset * 0f;
					Microsoft.Xna.Framework.Vector2[] noffsets = new Microsoft.Xna.Framework.Vector2[3];
					noffsets[0] = offset * -0.6f;
					noffsets[1] = offset * -0.4f;
					noffsets[2] = offset * -0.2f;
					AABB aabb;
					AABB.Create(out aabb, this.WorldBody.GetPosition(), this.WorldBody.GetPosition(), extent);
					AABB aabb2;
					AABB.Create(out aabb2, caughtPlayer.WorldBody.GetPosition(), caughtPlayer.WorldBody.GetPosition(), extent);
					aabb2.lowerBound.Y = aabb2.lowerBound.Y + 0.3f;
					aabb.Combine(ref aabb, ref aabb2);
					bool foundPrimary = false;
					bool foundBackup = false;
					int backupOffsetToUse = 2;
					int lowestOffsetToUse = 5;
					ObjectData od;
					this.GameWorld.GetActiveWorld.QueryAABB(delegate(Fixture fixture)
					{
						if (this.CheckCollisionFixture(fixture, out od, 0f, true))
						{
							for (int i = lowestOffsetToUse; i >= 0; i--)
							{
								this.m_rayCastInputs[0].p1 = this.WorldBody.GetPosition() + offsets[i];
								this.m_rayCastInputs[0].p2 = this.m_rayCastInputs[0].p1 - new Microsoft.Xna.Framework.Vector2(0f, 0.7f);
								this.m_rayCastInputs[0].maxFraction = 1f;
								RayCastOutput rayCastOutput;
								if (fixture.RayCast(out rayCastOutput, ref this.m_rayCastInputs[0]) || fixture.TestPoint(this.m_rayCastInputs[0].p1))
								{
									foundPrimary = true;
									lowestOffsetToUse = i;
									if (lowestOffsetToUse == 0)
									{
										return false;
									}
								}
							}
							if (backupOffsetToUse > 0)
							{
								for (int j = backupOffsetToUse; j >= 0; j--)
								{
									this.m_rayCastInputs[0].p1 = this.WorldBody.GetPosition() + noffsets[j];
									this.m_rayCastInputs[0].p2 = this.m_rayCastInputs[0].p1 - new Microsoft.Xna.Framework.Vector2(0f, 0.7f);
									this.m_rayCastInputs[0].maxFraction = 1f;
									RayCastOutput rayCastOutput2;
									if (fixture.RayCast(out rayCastOutput2, ref this.m_rayCastInputs[0]) || fixture.TestPoint(this.m_rayCastInputs[0].p1))
									{
										foundBackup = true;
										backupOffsetToUse = j;
									}
								}
							}
						}
						return true;
					}, ref aabb);
					if (foundPrimary)
					{
						offset = offsets[lowestOffsetToUse];
					}
					else if (foundBackup)
					{
						offset = noffsets[backupOffsetToUse];
					}
					else
					{
						offset = offsets[lowestOffsetToUse];
					}
					float minFraction = 1f;
					this.m_rayCastInputs[0].p1 = this.WorldBody.GetPosition();
					this.m_rayCastInputs[0].p2 = caughtPlayer.WorldBody.GetPosition();
					this.m_rayCastInputs[0].maxFraction = 1f;
					AABB.Create(out aabb, this.m_rayCastInputs[0].p1, this.m_rayCastInputs[0].p2, 0.1f);
					Filter filterB;
					this.GameWorld.GetActiveWorld.QueryAABB(delegate(Fixture fixture)
					{
						fixture.GetFilterData(out filterB);
						if (Settings.b2ShouldCollide(ref this.m_playerFilterCollision, ref filterB))
						{
							if (fixture.TestPoint(this.m_rayCastInputs[0].p1))
							{
								minFraction = 0f;
								offset = Microsoft.Xna.Framework.Vector2.Zero;
								return false;
							}
							RayCastOutput rayCastOutput;
							if (fixture.RayCast(out rayCastOutput, ref this.m_rayCastInputs[0]) && rayCastOutput.fraction < minFraction)
							{
								minFraction = rayCastOutput.fraction;
								offset = this.m_rayCastInputs[0].GetHitPosition(rayCastOutput.fraction) - this.WorldBody.GetPosition();
							}
						}
						return true;
					}, ref aabb);
					Microsoft.Xna.Framework.Vector2 vector2 = this.WorldBody.GetPosition() + offset;
					Microsoft.Xna.Framework.Vector2 vector3 = vector2 - caughtPlayer.WorldBody.GetPosition();
					Microsoft.Xna.Framework.Vector2 vector4 = caughtPlayer.WorldBody.GetPosition() - this.WorldBody.GetPosition();
					float num = vector3.Length();
					float num2 = vector4.Length();
					if (this.LastDirectionX == 1)
					{
						if (vector4.X < 0f)
						{
							num2 = -num2;
						}
						if (vector3.X < 0f)
						{
							num = -num;
						}
					}
					else
					{
						if (vector4.X > 0f)
						{
							num2 = -num2;
						}
						if (vector3.X > 0f)
						{
							num = -num;
						}
					}
					if (num < num2)
					{
						caughtPlayer.WorldBody.SetTransform(vector2, 0f);
						caughtPlayer.WorldBody.SetLinearVelocity(this.WorldBody.GetLinearVelocity());
					}
				}
				return;
			}
			caughtPlayer.CaughtByPlayerID = 0;
			this.HoldingPlayerInDiveID = 0;
		}

		// Token: 0x06003B02 RID: 15106 RVA: 0x000F9DD8 File Offset: 0x000F7FD8
		private void PerformDiveCollision(Player.DiveCollisionCheckResult result)
		{
			Player.<>c__DisplayClass30 CS$<>8__locals1 = new Player.<>c__DisplayClass30();
			CS$<>8__locals1.<>4__this = this;
			CS$<>8__locals1.rco = default(RayCastOutput);
			CS$<>8__locals1.rciMid.maxFraction = 1f;
			CS$<>8__locals1.rciMid.p1 = result.OriginPosition;
			CS$<>8__locals1.rciMid.p2 = result.OriginPosition + result.Direction * result.ScanDistance;
			CS$<>8__locals1.rciLeft = CS$<>8__locals1.rciMid;
			CS$<>8__locals1.rciRight = CS$<>8__locals1.rciMid;
			Player.<>c__DisplayClass30 CS$<>8__locals2 = CS$<>8__locals1;
			CS$<>8__locals2.rciLeft.p2 = CS$<>8__locals2.rciLeft.p2 - result.Direction * 0.16f;
			Player.<>c__DisplayClass30 CS$<>8__locals3 = CS$<>8__locals1;
			CS$<>8__locals3.rciRight.p2 = CS$<>8__locals3.rciRight.p2 - result.Direction * 0.16f;
			Microsoft.Xna.Framework.Vector2 direction = result.Direction;
			SFDMath.RotateVector90CW(ref direction, out direction);
			Player.<>c__DisplayClass30 CS$<>8__locals4 = CS$<>8__locals1;
			CS$<>8__locals4.rciLeft.p1 = CS$<>8__locals4.rciLeft.p1 - direction * 0.16f;
			Player.<>c__DisplayClass30 CS$<>8__locals5 = CS$<>8__locals1;
			CS$<>8__locals5.rciLeft.p2 = CS$<>8__locals5.rciLeft.p2 - direction * 0.16f;
			Player.<>c__DisplayClass30 CS$<>8__locals6 = CS$<>8__locals1;
			CS$<>8__locals6.rciRight.p1 = CS$<>8__locals6.rciRight.p1 + direction * 0.16f;
			Player.<>c__DisplayClass30 CS$<>8__locals7 = CS$<>8__locals1;
			CS$<>8__locals7.rciRight.p2 = CS$<>8__locals7.rciRight.p2 + direction * 0.16f;
			CS$<>8__locals1.midCollision = null;
			CS$<>8__locals1.midFraction = 1f;
			CS$<>8__locals1.leftCollision = null;
			CS$<>8__locals1.leftFraction = 1f;
			CS$<>8__locals1.rightCollision = null;
			CS$<>8__locals1.rightFraction = 1f;
			AABB aabb;
			AABB.Create(out aabb, CS$<>8__locals1.rciMid.p1, CS$<>8__locals1.rciMid.p2, 0.04f);
			AABB aabb2;
			AABB.Create(out aabb2, CS$<>8__locals1.rciLeft.p1, CS$<>8__locals1.rciLeft.p2, 0.04f);
			AABB aabb3;
			AABB.Create(out aabb3, CS$<>8__locals1.rciRight.p1, CS$<>8__locals1.rciRight.p2, 0.04f);
			aabb.Combine(ref aabb, ref aabb2);
			aabb.Combine(ref aabb, ref aabb3);
			aabb.Grow(0.04f);
			this.WorldBody.GetWorld().QueryAABB(delegate(Fixture fixture)
			{
				ObjectData objectData;
				if (CS$<>8__locals1.<>4__this.CheckCollisionFixture(fixture, out objectData, 0f, true))
				{
					if (fixture.RayCast(out CS$<>8__locals1.rco, ref CS$<>8__locals1.rciMid) && (CS$<>8__locals1.midCollision == null || CS$<>8__locals1.rco.fraction < CS$<>8__locals1.midFraction))
					{
						CS$<>8__locals1.midCollision = objectData;
						CS$<>8__locals1.midFraction = CS$<>8__locals1.rco.fraction;
					}
					if (fixture.RayCast(out CS$<>8__locals1.rco, ref CS$<>8__locals1.rciLeft) && (CS$<>8__locals1.leftCollision == null || CS$<>8__locals1.rco.fraction < CS$<>8__locals1.leftFraction))
					{
						CS$<>8__locals1.leftCollision = objectData;
						CS$<>8__locals1.leftFraction = CS$<>8__locals1.rco.fraction;
					}
					if (fixture.RayCast(out CS$<>8__locals1.rco, ref CS$<>8__locals1.rciRight) && (CS$<>8__locals1.rightCollision == null || CS$<>8__locals1.rco.fraction < CS$<>8__locals1.rightFraction))
					{
						CS$<>8__locals1.rightCollision = objectData;
						CS$<>8__locals1.rightFraction = CS$<>8__locals1.rco.fraction;
					}
				}
				return true;
			}, ref aabb);
			float val = 1f;
			if (CS$<>8__locals1.midCollision != null)
			{
				result.MidCollision = CS$<>8__locals1.midCollision;
				result.MidFraction = CS$<>8__locals1.midFraction;
			}
			if (CS$<>8__locals1.leftCollision != null)
			{
				result.LeftCollision = CS$<>8__locals1.leftCollision;
				result.LeftFraction = CS$<>8__locals1.leftFraction;
				val = (CS$<>8__locals1.rciLeft.p2 - CS$<>8__locals1.rciLeft.p1).Length() / result.ScanDistance * CS$<>8__locals1.leftFraction;
			}
			if (CS$<>8__locals1.rightCollision != null)
			{
				result.RightCollision = CS$<>8__locals1.rightCollision;
				result.RightFraction = CS$<>8__locals1.rightFraction;
				float val2 = (CS$<>8__locals1.rciRight.p2 - CS$<>8__locals1.rciRight.p1).Length() / result.ScanDistance * CS$<>8__locals1.rightFraction;
				val = Math.Min(val2, val);
			}
			result.HasCollision = (CS$<>8__locals1.midCollision != null || CS$<>8__locals1.leftCollision != null || CS$<>8__locals1.rightCollision != null);
			result.MainFraction = Math.Min(CS$<>8__locals1.midFraction, val);
		}

		// Token: 0x06003B03 RID: 15107 RVA: 0x000FA15C File Offset: 0x000F835C
		internal bool PlayerWithinDiveReach(Player player)
		{
			if (player == this)
			{
				return false;
			}
			float num = player.WorldBody.GetPosition().X - this.WorldBody.GetPosition().X;
			if (this.Diving && player.Diving && player.LastDirectionX == this.LastDirectionX && Math.Abs(num) > Converter.ConvertWorldToBox2D(6f))
			{
				return false;
			}
			AABB aabb;
			this.GetAABBDirection(out aabb, this.LastDirectionX);
			AABB aabb2;
			player.GetAABBWhole(out aabb2);
			if (AABB.TestOverlap(ref aabb, ref aabb2))
			{
				return true;
			}
			num += (float)this.LastDirectionX * 0.15f;
			if ((this.LastDirectionX == 1 && num > 0f) || (this.LastDirectionX == -1 && num < 0f))
			{
				AABB aabb3;
				this.GetAABBWhole(out aabb3);
				return AABB.TestOverlap(ref aabb2, ref aabb3);
			}
			return false;
		}

		// Token: 0x06003B04 RID: 15108 RVA: 0x000FA22C File Offset: 0x000F842C
		internal bool CheckDiveCollision()
		{
			if (this.HoldingPlayerInDiveID == 0 && this.GameOwner != GameOwnerEnum.Client && this.CurrentAction == PlayerAction.Idle)
			{
				for (int i = 0; i < this.m_gameWorld.Players.Count; i++)
				{
					Player player = this.m_gameWorld.Players[i];
					if (player != this && player.ObjectID != this.LastCaughtPlayerID)
					{
						if (player.CanBeCaughtByDive())
						{
							if (this.PlayerWithinDiveReach(player))
							{
								if (!this.HasMeleeStunImmunity && player.HasMeleeStunImmunity)
								{
									Microsoft.Xna.Framework.Vector2 worldPosition = player.Position + (this.Position - player.Position) * 0.5f;
									worldPosition.Y += 10f;
									EffectHandler.PlayEffect("Smack", worldPosition, this.GameWorld);
									SoundHandler.PlaySound("PlayerDiveCatch", this.Position, this.GameWorld);
									this.Fall();
									break;
								}
								if (player.IsInDiveAttackFrameWindow && player.LastDirectionX != this.LastDirectionX && player.CanBeHitByMelee(this))
								{
									if (!this.HasMeleeStunImmunity)
									{
										this.HitByMelee(player);
										break;
									}
									break;
								}
								else
								{
									if (player.GrabCharging && player.LastDirectionX != this.LastDirectionX)
									{
										Microsoft.Xna.Framework.Vector2 worldPosition2 = player.Position + (this.Position - player.Position) * 0.5f;
										worldPosition2.Y += 10f;
										EffectHandler.PlayEffect("Smack", worldPosition2, this.GameWorld);
										SoundHandler.PlaySound("PlayerDiveCatch", this.Position, this.GameWorld);
										player.StopGrabbingChargeSequence(false);
										player.Fall();
										this.Fall();
										break;
									}
									SoundHandler.PlaySound("PlayerDiveCatch", this.Position, this.GameWorld);
									player.CheckThrowableDisarm();
									player.StopGrabbingChargeSequence(false);
									player.DropGrabbedPlayer(null, false, false, true);
									player.DropCaughtByPlayer();
									player.CurrentAction = PlayerAction.Disabled;
									player.LastDirectionX = -this.LastDirectionX;
									player.CaughtByPlayerID = this.ObjectID;
									player.Falling = false;
									player.FullLanding = false;
									player.DeathKneeling = false;
									player.TimeSequence.TimeJumpTimeout = 0f;
									player.TimeSequence.TimeTriggerJump = 0f;
									player.Rolling = false;
									player.Crouching = false;
									player.LayingOnGround = false;
									player.Climbing = false;
									player.Staggering = false;
									player.TimeSequence.TimeStagger = 0f;
									player.TimeSequence.TimeFullLanding = 0f;
									this.HoldingPlayerInDiveID = player.ObjectID;
									this.UpdateCaughtPlayerPosition(player, false);
									player.UpdateResyncBox2DContacts();
									this.ImportantUpdate = true;
									player.ImportantUpdate = true;
									break;
								}
							}
						}
						else if (player.Diving && (this.HasMeleeStunImmunity || !player.HasMeleeStunImmunity) && this.PlayerWithinDiveReach(player))
						{
							Microsoft.Xna.Framework.Vector2 worldPosition3 = player.Position + (this.Position - player.Position) * 0.5f;
							worldPosition3.Y += 10f;
							EffectHandler.PlayEffect("Smack", worldPosition3, this.GameWorld);
							SoundHandler.PlaySound("PlayerDiveCatch", this.Position, this.GameWorld);
							player.Fall();
							this.Fall();
							break;
						}
					}
				}
			}
			bool flag = false;
			Microsoft.Xna.Framework.Vector2 value = (this.LastDirectionX == 1) ? (-Microsoft.Xna.Framework.Vector2.UnitX) : Microsoft.Xna.Framework.Vector2.UnitX;
			for (int j = 0; j < this.Contacts.ContactsCount; j++)
			{
				PlayerContact playerContact = this.Contacts.Contacts[j];
				float num = Microsoft.Xna.Framework.Vector2.Dot(value, playerContact.N);
				if (num > 0.1f)
				{
					num = Microsoft.Xna.Framework.Vector2.Dot(-Microsoft.Xna.Framework.Vector2.UnitY, playerContact.N);
					if (num < 0.7f)
					{
						flag = true;
						IL_3D9:
						if (flag)
						{
							Player.<>c__DisplayClass33 CS$<>8__locals1 = new Player.<>c__DisplayClass33();
							CS$<>8__locals1.<>4__this = this;
							CS$<>8__locals1.rciL.p1 = this.WorldBody.GetPosition();
							CS$<>8__locals1.rciL.p2 = CS$<>8__locals1.rciL.p1 - Microsoft.Xna.Framework.Vector2.UnitY * 0.8f;
							CS$<>8__locals1.rciL.maxFraction = 1f;
							CS$<>8__locals1.rciR = CS$<>8__locals1.rciL;
							Player.<>c__DisplayClass33 CS$<>8__locals2 = CS$<>8__locals1;
							CS$<>8__locals2.rciL.p1.X = CS$<>8__locals2.rciL.p1.X - 0.04f;
							Player.<>c__DisplayClass33 CS$<>8__locals3 = CS$<>8__locals1;
							CS$<>8__locals3.rciL.p2.X = CS$<>8__locals3.rciL.p2.X - 0.04f;
							Player.<>c__DisplayClass33 CS$<>8__locals4 = CS$<>8__locals1;
							CS$<>8__locals4.rciR.p1.X = CS$<>8__locals4.rciR.p1.X + 0.04f;
							Player.<>c__DisplayClass33 CS$<>8__locals5 = CS$<>8__locals1;
							CS$<>8__locals5.rciR.p2.X = CS$<>8__locals5.rciR.p2.X + 0.04f;
							AABB aabb;
							AABB.Create(out aabb, CS$<>8__locals1.rciL.p1, CS$<>8__locals1.rciR.p2, 0.04f);
							CS$<>8__locals1.groundFound = false;
							this.WorldBody.GetWorld().QueryAABB(delegate(Fixture fixture)
							{
								ObjectData objectData;
								if (CS$<>8__locals1.<>4__this.CheckCollisionFixture(fixture, out objectData, 0f, true) && (fixture.RayCast(out CS$<>8__locals1.rco, ref CS$<>8__locals1.rciL) || fixture.RayCast(out CS$<>8__locals1.rco, ref CS$<>8__locals1.rciR)))
								{
									float num2 = Microsoft.Xna.Framework.Vector2.Dot(CS$<>8__locals1.rco.normal, Microsoft.Xna.Framework.Vector2.UnitY);
									if (num2 > 0.1f)
									{
										CS$<>8__locals1.groundFound = true;
										return false;
									}
								}
								return true;
							}, ref aabb);
							return !CS$<>8__locals1.groundFound;
						}
						return false;
					}
				}
			}
			goto IL_3D9;
		}

		// Token: 0x06003B05 RID: 15109 RVA: 0x000FA758 File Offset: 0x000F8958
		internal bool CheckCollisionSimpleShouldCollide(Fixture fixture, out ObjectData objectData, bool dynamicOnly = false)
		{
			objectData = null;
			if (fixture == null || fixture.GetUserData() == null || fixture.IsSensor())
			{
				return false;
			}
			if (dynamicOnly && fixture.GetBody().GetType() != Box2D.XNA.BodyType.Dynamic)
			{
				return false;
			}
			objectData = ObjectData.Read(fixture);
			if (objectData.IsPlayer)
			{
				return false;
			}
			Filter filter;
			fixture.GetFilterData(out filter);
			return Settings.b2ShouldCollide(ref this.m_playerFilterCollision, ref filter);
		}

		// Token: 0x06003B06 RID: 15110 RVA: 0x000FA7B8 File Offset: 0x000F89B8
		internal bool CheckCollisionFixture(Fixture fixture, out ObjectData objectData, float compensationDistance = 0f, bool cloudRelativeVelocityCheck = true)
		{
			objectData = null;
			if (fixture == null || fixture.GetUserData() == null || fixture.IsSensor())
			{
				return false;
			}
			objectData = (ObjectData)fixture.GetUserData();
			if (objectData.IsPlayer)
			{
				return false;
			}
			Filter filter;
			fixture.GetFilterData(out filter);
			bool result;
			if (!(result = Settings.b2ShouldCollide(ref this.m_playerFilterCollision, ref filter)))
			{
				return false;
			}
			if (!fixture.IsCloud())
			{
				if (this.Falling && this.InAir && objectData is ObjectGlass)
				{
					result = false;
				}
				if ((this.Diving & objectData.BreakOnDive) && (this.GameOwner != GameOwnerEnum.Client || this.HasLocalControl))
				{
					Microsoft.Xna.Framework.Vector2 vector = this.WorldBody.GetLinearVelocity() - objectData.Body.GetLinearVelocity();
					vector.Normalize();
					if (vector.IsValid())
					{
						Microsoft.Xna.Framework.Vector2 vector2 = objectData.Body.GetPosition() - (this.WorldBody.GetPosition() - vector * 0.16f * 2f);
						vector2.Normalize();
						if (vector2.IsValid() && Microsoft.Xna.Framework.Vector2.Dot(vector2, vector) > 0.1f)
						{
							if (!this.ScanningRelativeBody)
							{
								if (this.GameOwner != GameOwnerEnum.Client)
								{
									objectData.Destroy();
								}
								this.StartIgnoreBodyID(fixture.GetBody().BodyID, 250f);
							}
							return false;
						}
					}
				}
				return result;
			}
			Microsoft.Xna.Framework.Vector2 cloudWorldNormal = fixture.GetCloudWorldNormal();
			bool flag = false;
			for (ContactEdge contactEdge = this.WorldBody.GetContactList(); contactEdge != null; contactEdge = contactEdge.Next)
			{
				if (contactEdge.Other == fixture.GetBody())
				{
					flag = true;
				}
				if (!contactEdge.Contact.BeginFlag && (contactEdge.Other == fixture.GetBody() || this.m_worldContactListener.CheckCloudNeighbours(fixture, contactEdge.Other.GetFixtureList())))
				{
					if (!contactEdge.Contact.IsTouching())
					{
						if (this.CheckCollisionFixtureCloudPosition(fixture, cloudWorldNormal, compensationDistance, cloudRelativeVelocityCheck))
						{
							this.m_repositionToCloudCounter = 0;
							return true;
						}
					}
					else if (contactEdge.Contact.LastContactEnabledFlag && cloudRelativeVelocityCheck)
					{
						Microsoft.Xna.Framework.Vector2 value = this.WorldBody.GetLinearVelocity() - fixture.GetBody().GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition());
						SFDMath.ProjectUonV(ref value, ref cloudWorldNormal, out value);
						if (value.Length() <= 1f)
						{
							this.m_repositionToCloudCounter = 0;
							return true;
						}
						value.Normalize();
						float num = Microsoft.Xna.Framework.Vector2.Dot(cloudWorldNormal, value);
						if (num < 0.1f)
						{
							this.m_repositionToCloudCounter = 0;
							return true;
						}
					}
				}
			}
			if (!flag && this.CheckCollisionFixtureCloudPosition(fixture, cloudWorldNormal, compensationDistance, cloudRelativeVelocityCheck))
			{
				this.m_repositionToCloudCounter = 0;
				return true;
			}
			if (this.StandingOnBody != null)
			{
				Fixture fixture2 = null;
				if (fixture.GetBody() == this.StandingOnBody)
				{
					fixture2 = fixture;
				}
				else
				{
					for (Fixture fixture3 = this.StandingOnBody.GetFixtureList(); fixture3 != null; fixture3 = fixture3.GetNext())
					{
						if (fixture3.IsCloud())
						{
							fixture2 = fixture3;
							break;
						}
					}
				}
				if (fixture2 != null && (fixture2 == fixture || this.m_worldContactListener.CheckCloudNeighbours(fixture, fixture2)))
				{
					this.m_repositionToCloudCounter++;
					return true;
				}
			}
			else
			{
				Microsoft.Xna.Framework.Vector2 value2 = this.WorldBody.GetLinearVelocity() - fixture.GetBody().GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition());
				SFDMath.ProjectUonV(ref value2, ref cloudWorldNormal, out value2);
				if (value2.Length() > 6f)
				{
					value2.Normalize();
					float num2 = Microsoft.Xna.Framework.Vector2.Dot(cloudWorldNormal, value2);
					if (num2 < 0.1f)
					{
						this.m_repositionToCloudCounter = 0;
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06003B07 RID: 15111 RVA: 0x000FAB40 File Offset: 0x000F8D40
		internal bool CheckRelativeVelocitySpeedOnFixturePositive(Fixture fixture, Microsoft.Xna.Framework.Vector2 worldNormal, float speedTreshold = 2f)
		{
			Microsoft.Xna.Framework.Vector2 value = this.WorldBody.GetLinearVelocity() - fixture.GetBody().GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition());
			SFDMath.ProjectUonV(ref value, ref worldNormal, out value);
			if (value.Length() > speedTreshold)
			{
				value.Normalize();
				float num = Microsoft.Xna.Framework.Vector2.Dot(worldNormal, value);
				return num < 0.1f;
			}
			return true;
		}

		// Token: 0x06003B08 RID: 15112 RVA: 0x00030326 File Offset: 0x0002E526
		private bool CheckCollisionFixtureCloudPosition(Fixture fixture, Microsoft.Xna.Framework.Vector2 cloudWorldNormal, float compensationDistance, bool checkRelativeVelocity = true)
		{
			return this.WorldBody.CheckCollisionFixtureCloudPosition(fixture, cloudWorldNormal, Converter.WorldToBox2D(4f - compensationDistance), checkRelativeVelocity);
		}

		// Token: 0x06003B09 RID: 15113 RVA: 0x000FABA8 File Offset: 0x000F8DA8
		internal void CheckClimbJump()
		{
			if (this.Climbing)
			{
				this.CheckClimbing(1);
				if (this.Climbing && !this.CanClimbUp() && Math.Abs(this.m_climbTopNormal.Y) > this.m_climbTopNormal.X)
				{
					this.Jump();
				}
			}
		}

		// Token: 0x06003B0A RID: 15114 RVA: 0x00030343 File Offset: 0x0002E543
		internal void CheckClimbDown()
		{
			if ((this.Movement == PlayerMovement.Idle || this.InAir) && !this.VirtualKeyboard.PressingKey(21, false))
			{
				this.CheckClimbing(-1, true);
			}
		}

		// Token: 0x06003B0B RID: 15115 RVA: 0x0003036D File Offset: 0x0002E56D
		internal void CheckClimbing(int climbDirection)
		{
			this.CheckClimbing(climbDirection, climbDirection != -1 || this.InAir);
		}

		// Token: 0x06003B0C RID: 15116 RVA: 0x000FABF8 File Offset: 0x000F8DF8
		internal void CheckClimbing(int climbDirection, bool allowedToEnterClimb)
		{
			this.m_climbLastLadderTop = null;
			this.m_climbLastLadderBot = null;
			this.m_climbLastLadderCloud = null;
			if (!this.Climbing)
			{
				if (!allowedToEnterClimb)
				{
					return;
				}
				if (climbDirection == 0)
				{
					return;
				}
				if (this.TimeSequence.ClimbingOnCooldown)
				{
					return;
				}
			}
			if (!this.CanClimb())
			{
				this.Climbing = false;
				this.ClimbingDirection = 0;
				return;
			}
			if (!this.Climbing && this.WorldBody.GetLinearVelocity().Y > 2f)
			{
				return;
			}
			bool flag = !this.Climbing || this.ClimbingDirection != -1;
			Microsoft.Xna.Framework.Vector2 ptop = this.WorldBody.GetPosition() + Converter.ConvertWorldToBox2D(new Microsoft.Xna.Framework.Vector2(0f, 8f));
			Microsoft.Xna.Framework.Vector2 pbot = this.WorldBody.GetPosition();
			Microsoft.Xna.Framework.Vector2 pcloud = Microsoft.Xna.Framework.Vector2.Zero;
			float num = Converter.ConvertWorldToBox2D(4f);
			float num2 = Converter.ConvertWorldToBox2D(5f);
			Microsoft.Xna.Framework.Vector2 vector = ptop + new Microsoft.Xna.Framework.Vector2(-num, 0f);
			Microsoft.Xna.Framework.Vector2 p = ptop + new Microsoft.Xna.Framework.Vector2(num, 0f);
			Microsoft.Xna.Framework.Vector2 p2 = pbot + new Microsoft.Xna.Framework.Vector2(-num, -num2);
			pbot + new Microsoft.Xna.Framework.Vector2(num, -num2);
			Box2D.XNA.RayCastInput rcicl = default(Box2D.XNA.RayCastInput);
			rcicl.maxFraction = 1f;
			rcicl.p1 = vector;
			rcicl.p2 = p2;
			Box2D.XNA.RayCastInput rcicm = default(Box2D.XNA.RayCastInput);
			rcicm.maxFraction = 1f;
			rcicm.p1 = vector;
			rcicm.p2 = p2;
			Box2D.XNA.RayCastInput rcicr = default(Box2D.XNA.RayCastInput);
			rcicr.maxFraction = 1f;
			rcicr.p1 = p;
			rcicr.p2 = vector;
			float minFraction = 1f;
			Box2D.XNA.RayCastInput rci = default(Box2D.XNA.RayCastInput);
			rci.maxFraction = 1f;
			rci.p1 = ptop;
			rci.p2 = pbot;
			AABB aabb;
			this.GetAABBWhole(out aabb);
			aabb.Grow(Converter.ConvertWorldToBox2D(2f));
			this.GameWorld.GetActiveWorld.QueryAABB(delegate(Fixture fixture)
			{
				RayCastOutput rayCastOutput;
				if (fixture.GetUserData() != null && !fixture.IsSensor() && this.m_climbLastLadderCloud == null && fixture.IsCloud() && (fixture.RayCast(out rayCastOutput, ref rcicl) || fixture.RayCast(out rayCastOutput, ref rcicr) || fixture.RayCast(out rayCastOutput, ref rcicm)))
				{
					this.m_climbLastLadderCloud = fixture;
					float x = pbot.X;
					float num3 = rcicl.p1.Y + rayCastOutput.fraction * (rcicl.p2.Y - rcicl.p1.Y);
					num3 -= Converter.ConvertWorldToBox2D(1f);
					pcloud = new Microsoft.Xna.Framework.Vector2(x, num3);
					return false;
				}
				return true;
			}, ref aabb);
			if (this.m_climbLastLadderCloud != null && (!this.StandingOnGround || climbDirection != 1) && pbot.Y > pcloud.Y)
			{
				pbot.Y = pcloud.Y;
			}
			bool ladderOverlapCloud = false;
			this.GameWorld.GetActiveWorld.QueryAABB(delegate(Fixture fixture)
			{
				if (fixture.GetUserData() != null && !fixture.IsSensor())
				{
					ObjectData objectData = ObjectData.Read(fixture);
					if (objectData.Tile.IsLadder)
					{
						if (fixture.TestPoint(ptop))
						{
							this.m_climbLastLadderTop = fixture;
						}
						if (fixture.TestPoint(pbot))
						{
							this.m_climbLastLadderBot = fixture;
						}
						if (!ladderOverlapCloud && this.m_climbLastLadderCloud != null && fixture.TestPoint(pcloud))
						{
							ladderOverlapCloud = true;
						}
						RayCastOutput rayCastOutput;
						if (fixture.RayCast(out rayCastOutput, ref rci) && rayCastOutput.fraction <= minFraction)
						{
							minFraction = rayCastOutput.fraction;
							this.m_climbTopNormal = rayCastOutput.normal;
						}
					}
				}
				return true;
			}, ref aabb);
			if (!(this.m_climbLastLadderTop == null & this.m_climbLastLadderBot == null) && !(!this.Climbing & ladderOverlapCloud & this.TryingToAim) && !(!this.Climbing & this.m_climbLastLadderTop == null & climbDirection == 1 & this.WorldBody.GetLinearVelocity().Y < 0f) && !(this.StandingOnGround & climbDirection == -1 & this.m_climbLastLadderBot == null) && !(this.StandingOnGround & climbDirection != 1 & this.m_climbLastLadderBot != null & !ladderOverlapCloud) && !(this.StandingOnGround & climbDirection == -1 & this.Crouching) && !(this.InAir & ladderOverlapCloud & climbDirection == 1 & this.m_climbLastLadderBot != null & this.m_climbLastLadderTop == null & !this.Climbing))
			{
				if (!this.Climbing)
				{
					if (this.TimeSequence.TimeDisableDownThroughCloud > 0f & this.m_climbLastLadderBot == null)
					{
						return;
					}
					if (ladderOverlapCloud && this.m_climbLastLadderTop == null)
					{
						Microsoft.Xna.Framework.Vector2 value = this.WorldBody.GetLinearVelocity() * this.VelocityNetworkFactor;
						if (this.StandingOnBody != null)
						{
							value -= this.StandingOnBody.GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition());
						}
						if (value.Y <= -11f)
						{
							return;
						}
					}
					this.ImportantUpdate = true;
					if (this.StandingOnGround)
					{
						this.StandingOnGround = false;
						this.InAir = true;
						this.TakingCover = false;
					}
					if (!ladderOverlapCloud)
					{
						this.ClimbDownCurrentSpeed = ((-1.7f < this.WorldBody.GetLinearVelocity().Y) ? -1.7f : this.WorldBody.GetLinearVelocity().Y);
					}
					else
					{
						this.ClimbDownCurrentSpeed = -1.7f;
					}
					if (ladderOverlapCloud && climbDirection == -1)
					{
						this.TimeSequence.TimeDisableDownThroughCloudWhileClimbing = 250f;
					}
					this.AirControlBaseVelocity = Microsoft.Xna.Framework.Vector2.Zero;
					this.CurrentSpeed.X = 0f;
				}
				else if (this.m_climbLastLadderBot != null && ladderOverlapCloud && this.StandingOnGround && climbDirection == -1)
				{
					if (this.VirtualKeyboard.PressingKey(21, false))
					{
						this.Climbing = false;
						this.ClimbingDirection = 0;
						return;
					}
					this.TimeSequence.TimeDisableDownThroughCloudWhileClimbing = 250f;
				}
				this.WeaponAbortBurstMode();
				if (climbDirection == 0 && this.StandingOnGround && !this.InAir)
				{
					this.Sprinting = false;
					this.Climbing = false;
				}
				else
				{
					this.StandingOnGround = false;
					this.InAir = true;
					this.Sprinting = false;
					this.Climbing = true;
				}
				this.FireSequence.Reset();
				if (this.CurrentAction == PlayerAction.HipFire || this.CurrentAction == PlayerAction.ManualAim)
				{
					this.CurrentAction = PlayerAction.Idle;
				}
				if (this.ClimbingDirection != climbDirection)
				{
					if (!ladderOverlapCloud)
					{
						this.ClimbDownCurrentSpeed = ((-1.7f < this.WorldBody.GetLinearVelocity().Y) ? -1.7f : this.WorldBody.GetLinearVelocity().Y);
					}
					else
					{
						this.ClimbDownCurrentSpeed = -1.7f;
					}
					this.ImportantUpdate = true;
				}
				this.ClimbingDirection = climbDirection;
				if (this.ClimbingDirection == 1 && !this.CanClimbUp())
				{
					this.ClimbingDirection = 0;
				}
			}
			else
			{
				if (this.Climbing)
				{
					this.ImportantUpdate = true;
					if (climbDirection == 1 || (climbDirection == -1 & this.m_climbLastLadderBot != null & ladderOverlapCloud))
					{
						this.StandingOnGround = true;
						this.InAir = false;
					}
					this.TimeSequence.TimeClimbJumpCooldown = 0f;
					this.UpdateResyncBox2DContacts();
				}
				this.TimeSequence.TimeDisableDownThroughCloudWhileClimbing = 0f;
				this.ClimbDownCurrentSpeed = -1.7f;
				this.Climbing = false;
			}
			if (flag && this.Climbing && this.ClimbingDirection == -1)
			{
				this.ClimbingSlideDownTimeStamp = this.GameWorld.ElapsedTotalGameTime;
			}
		}

		// Token: 0x17000994 RID: 2452
		// (get) Token: 0x06003B0D RID: 15117 RVA: 0x00030383 File Offset: 0x0002E583
		// (set) Token: 0x06003B0E RID: 15118 RVA: 0x0003038B File Offset: 0x0002E58B
		internal float ClimbDownCurrentSpeed { get; set; }

		// Token: 0x06003B0F RID: 15119 RVA: 0x000FB2F0 File Offset: 0x000F94F0
		private void UpdateClimbVelocity(float ms)
		{
			if (this.GameOwner == GameOwnerEnum.Client && !this.HasLocalControl)
			{
				if (this.Climbing)
				{
					Microsoft.Xna.Framework.Vector2 linearVelocity = this.WorldBody.GetLinearVelocity();
					if (this.ClimbingDirection == 1)
					{
						if (linearVelocity.Y < -1.7f)
						{
							linearVelocity.Y += 0.1f * ms;
						}
						else
						{
							linearVelocity.Y = this.GetClimbSpeedUp();
						}
					}
					else if (this.ClimbingDirection == -1)
					{
						linearVelocity.Y += -0.02f * ms;
						if (linearVelocity.Y < this.GetClimbSpeedDownSlideMax())
						{
							linearVelocity.Y = this.GetClimbSpeedDownSlideMax();
						}
					}
					else
					{
						if (linearVelocity.Y < -1.7f)
						{
							linearVelocity.Y += 0.1f * ms;
						}
						if (linearVelocity.Y > 0f)
						{
							linearVelocity.Y = 0f;
						}
					}
					this.WorldBody.SetLinearVelocity(new Microsoft.Xna.Framework.Vector2(linearVelocity.X, linearVelocity.Y));
				}
				return;
			}
			if (this.Climbing)
			{
				if (this.ClimbingDirection == 1)
				{
					if (this.ClimbDownCurrentSpeed < -1.7f)
					{
						this.ClimbDownCurrentSpeed += 0.1f * ms;
						this.WorldBody.SetLinearVelocity(new Microsoft.Xna.Framework.Vector2(this.WorldBody.GetLinearVelocity().X, this.ClimbDownCurrentSpeed));
						return;
					}
					this.WorldBody.SetLinearVelocity(new Microsoft.Xna.Framework.Vector2(this.WorldBody.GetLinearVelocity().X, this.GetClimbSpeedUp()));
					return;
				}
				else if (this.ClimbingDirection == -1)
				{
					Microsoft.Xna.Framework.Vector2 position = this.WorldBody.GetPosition();
					if (this.m_climbLastLadderTop != null && this.m_climbLastLadderTop.GetBody() != null)
					{
						position.X = this.m_climbLastLadderTop.GetBody().GetPosition().X;
					}
					else if (this.m_climbLastLadderBot != null && this.m_climbLastLadderBot.GetBody() != null)
					{
						position.X = this.m_climbLastLadderBot.GetBody().GetPosition().X;
					}
					Microsoft.Xna.Framework.Vector2 vector = position - this.WorldBody.GetPosition();
					this.ClimbDownCurrentSpeed += -0.02f * ms;
					if (this.ClimbDownCurrentSpeed < this.GetClimbSpeedDownSlideMax())
					{
						this.ClimbDownCurrentSpeed = this.GetClimbSpeedDownSlideMax();
					}
					if (Math.Abs(vector.X) < 0.05f)
					{
						this.WorldBody.SetLinearVelocity(new Microsoft.Xna.Framework.Vector2(vector.X, this.ClimbDownCurrentSpeed));
					}
					else
					{
						this.WorldBody.SetLinearVelocity(new Microsoft.Xna.Framework.Vector2(this.WorldBody.GetLinearVelocity().X + vector.X, this.ClimbDownCurrentSpeed));
					}
					if (this.GameOwner != GameOwnerEnum.Client)
					{
						for (int i = 0; i < this.GameWorld.Players.Count; i++)
						{
							Player player = this.GameWorld.Players[i];
							if (player != this && player.Climbing && Math.Abs(player.ObjectData.GetWorldPosition().X - this.ObjectData.GetWorldPosition().X) <= 10f && player.ObjectData.GetWorldPosition().Y < this.ObjectData.GetWorldPosition().Y && Math.Abs(player.ObjectData.GetWorldPosition().Y - this.ObjectData.GetWorldPosition().Y) <= 16f)
							{
								player.Fall();
							}
						}
						return;
					}
				}
				else
				{
					if (this.ClimbDownCurrentSpeed < -1.7f)
					{
						this.ClimbDownCurrentSpeed += 0.1f * ms;
						if (this.ClimbDownCurrentSpeed > 0f)
						{
							this.ClimbDownCurrentSpeed = 0f;
						}
						this.WorldBody.SetLinearVelocity(new Microsoft.Xna.Framework.Vector2(this.WorldBody.GetLinearVelocity().X, this.ClimbDownCurrentSpeed));
						return;
					}
					this.WorldBody.SetLinearVelocity(new Microsoft.Xna.Framework.Vector2(this.WorldBody.GetLinearVelocity().X, 0f));
					return;
				}
			}
			else
			{
				this.ClimbDownCurrentSpeed = -1.7f;
			}
		}

		// Token: 0x06003B10 RID: 15120 RVA: 0x000FB710 File Offset: 0x000F9910
		private void CheckForceKneel(Microsoft.Xna.Framework.Vector2 gravityLine)
		{
			if (this.StandingOnGround)
			{
				bool doForceKneel = false;
				float scaleFactor = Converter.ConvertWorldToBox2D(2.4f);
				float scaleFactor2 = Converter.ConvertWorldToBox2D(12f);
				Microsoft.Xna.Framework.Vector2 gravityLine2 = gravityLine;
				SFDMath.RotateVector90CCW(ref gravityLine, out gravityLine2);
				this.m_rayCastInputs[0].p1 = this.WorldBody.Position + gravityLine2 * scaleFactor;
				this.m_rayCastInputs[0].p2 = this.WorldBody.Position + gravityLine2 * scaleFactor - gravityLine * scaleFactor2;
				this.m_rayCastInputs[1].p1 = this.WorldBody.Position - gravityLine2 * scaleFactor;
				this.m_rayCastInputs[1].p2 = this.WorldBody.Position - gravityLine2 * scaleFactor - gravityLine * scaleFactor2;
				scaleFactor = Converter.ConvertWorldToBox2D(3.5f);
				scaleFactor2 = Converter.ConvertWorldToBox2D(13.1f);
				this.m_rayCastInputs[2].p1 = this.WorldBody.GetPosition() - gravityLine2 * scaleFactor - gravityLine * scaleFactor2;
				this.m_rayCastInputs[2].p2 = this.WorldBody.GetPosition() + gravityLine2 * scaleFactor - gravityLine * scaleFactor2;
				this.m_rayCastInputs[3].p1 = this.m_rayCastInputs[2].p2;
				this.m_rayCastInputs[3].p2 = this.m_rayCastInputs[2].p1;
				AABB aabb;
				AABB.Create(out aabb, this.WorldBody.Position + gravityLine2 * scaleFactor - gravityLine * scaleFactor2, this.WorldBody.GetPosition() - gravityLine2 * scaleFactor, 0.05f);
				Fixture plrCircle = this.GetFixtureCircle();
				Fixture plrRectangle = this.GetFixturePolygon();
				Microsoft.Xna.Framework.Vector2 hitPoint = Microsoft.Xna.Framework.Vector2.Zero;
				bool isHit = false;
				RayCastOutput rco;
				ObjectData od;
				Filter fixtureFilter;
				this.WorldBody.GetWorld().QueryAABB(delegate(Fixture fixture)
				{
					if (fixture.GetUserData() != null & !fixture.IsSensor() & fixture != plrCircle & fixture != plrRectangle)
					{
						fixture.GetFilterData(out fixtureFilter);
						if (!Settings.b2ShouldCollide(ref this.m_playerFilterCollision, ref fixtureFilter))
						{
							return true;
						}
						isHit = false;
						for (int i = 2; i < 3; i++)
						{
							if (fixture.TestPoint(this.m_rayCastInputs[i].p1))
							{
								isHit = true;
								hitPoint = this.m_rayCastInputs[i].p1;
							}
							else if (fixture.TestPoint(this.m_rayCastInputs[i].p2))
							{
								isHit = true;
								hitPoint = this.m_rayCastInputs[i].p1;
							}
							else if (fixture.RayCast(out rco, ref this.m_rayCastInputs[i]))
							{
								isHit = true;
								hitPoint = this.m_rayCastInputs[i].GetHitPosition(rco.fraction);
							}
							if (isHit)
							{
								if (i < 2)
								{
									if (this.CheckCollisionFixture(fixture, out od, 0f, true))
									{
										doForceKneel = true;
										return false;
									}
								}
								else
								{
									Microsoft.Xna.Framework.Vector2 vector = fixture.GetBody().GetLinearVelocityFromWorldPoint(hitPoint) - this.WorldBody.GetLinearVelocity();
									if (vector.IsValid() && vector.Length() > 1f)
									{
										SFDMath.ProjectUonV(ref vector, ref gravityLine, out vector);
										vector.Normalize();
										if ((!vector.IsValid() || Microsoft.Xna.Framework.Vector2.Dot(gravityLine, vector) > 0f) && this.CheckCollisionFixture(fixture, out od, 0f, true))
										{
											doForceKneel = true;
											return false;
										}
									}
									else if (this.CheckCollisionFixture(fixture, out od, 0f, true))
									{
										doForceKneel = true;
										return false;
									}
								}
							}
						}
					}
					return true;
				}, ref aabb);
				this.ForceKneel = doForceKneel;
				if (this.GameOwner != GameOwnerEnum.Client && (this.ForceKneel & this.IsHoldingPlayerInGrab))
				{
					this.DropGrab();
					this.DisableGrabbing(true);
					return;
				}
			}
			else
			{
				this.ForceKneel = false;
			}
		}

		// Token: 0x17000995 RID: 2453
		// (get) Token: 0x06003B11 RID: 15121 RVA: 0x00030394 File Offset: 0x0002E594
		internal WorldContactListener WorldContactListener
		{
			get
			{
				return this.m_worldContactListener;
			}
		}

		// Token: 0x06003B12 RID: 15122 RVA: 0x000FB9E8 File Offset: 0x000F9BE8
		private bool FallingTowardsGround(Microsoft.Xna.Framework.Vector2 relativVelocity)
		{
			Microsoft.Xna.Framework.Vector2 gravityLineNormal = this.GetGravityLineNormal();
			SFDMath.ProjectUonV(ref relativVelocity, ref gravityLineNormal, out relativVelocity);
			if (relativVelocity.Length() > 0.5f)
			{
				Microsoft.Xna.Framework.Vector2 value = Microsoft.Xna.Framework.Vector2.Normalize(relativVelocity);
				if (Microsoft.Xna.Framework.Vector2.Dot(gravityLineNormal, value) < 0f)
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x06003B13 RID: 15123 RVA: 0x000FBA30 File Offset: 0x000F9C30
		internal bool CheckTouchingGround(out bool movementValid, out bool crossContact)
		{
			movementValid = true;
			crossContact = false;
			Microsoft.Xna.Framework.Vector2 value = Microsoft.Xna.Framework.Vector2.UnitY;
			if (this.Movement == PlayerMovement.Left)
			{
				value = -Microsoft.Xna.Framework.Vector2.UnitX;
			}
			else if (this.Movement == PlayerMovement.Right)
			{
				value = Microsoft.Xna.Framework.Vector2.UnitX;
			}
			if (this.Movement != PlayerMovement.Idle)
			{
				for (int i = 0; i < this.Contacts.ContactsCount; i++)
				{
					if (Microsoft.Xna.Framework.Vector2.Dot(value, this.Contacts.Contacts[i].N) < -0.01f)
					{
						movementValid = false;
						break;
					}
				}
			}
			Dictionary<Fixture, Microsoft.Xna.Framework.Vector2> dictionary = new Dictionary<Fixture, Microsoft.Xna.Framework.Vector2>(8);
			for (ContactEdge contactEdge = this.WorldBody.GetContactList(); contactEdge != null; contactEdge = contactEdge.Next)
			{
				if (contactEdge.Contact.IsTouching())
				{
					Fixture fixture = contactEdge.Contact.GetFixtureA();
					Fixture fixture2 = contactEdge.Contact.GetFixtureB();
					if (fixture == this.m_playerFixtureCircle)
					{
						fixture = fixture2;
						fixture2 = this.m_playerFixtureCircle;
					}
					if (!(this.TimeSequence.DisableCloudCollision & fixture.IsCloud()))
					{
						Manifold manifold;
						contactEdge.Contact.GetManifold(out manifold);
						if (!dictionary.ContainsKey(fixture))
						{
							dictionary.Add(fixture, manifold._localNormal);
						}
						else
						{
							float num = Microsoft.Xna.Framework.Vector2.Dot(dictionary[fixture], manifold._localNormal);
							if (num < -0.1f)
							{
								crossContact = true;
							}
						}
						if (!fixture2.IsSensor() & !fixture.IsSensor() & fixture2 == this.m_playerFixtureCircle)
						{
							for (int j = 0; j < this.Contacts.ContactsCount; j++)
							{
								if (this.Contacts.Contacts[j].NIsValid & this.Contacts.Contacts[j].Fixture == fixture)
								{
									Microsoft.Xna.Framework.Vector2 relativVelocity = this.WorldBody.GetLinearVelocity() - this.Contacts.Contacts[j].Fixture.GetBody().GetLinearVelocityFromWorldPoint(this.Contacts.Contacts[j].WorldPoint);
									SFDMath.ProjectUonV(ref relativVelocity, ref this.Contacts.Contacts[j].N, out relativVelocity);
									if (this.FallingTowardsGround(relativVelocity))
									{
										return true;
									}
								}
							}
						}
					}
				}
			}
			if (this.Contacts.CheckMinimumContactTimeExceeds(0.5f))
			{
				this.Contacts.ResetContactRelativePositions();
				return true;
			}
			return false;
		}

		// Token: 0x06003B14 RID: 15124 RVA: 0x000FBC74 File Offset: 0x000F9E74
		internal void UpdateStandingOnBody()
		{
			if (this.IsGrabbedByPlayer)
			{
				this.Contacts.ClearContactTimes();
			}
			Microsoft.Xna.Framework.Vector2 worldNormal;
			Fixture fixture;
			if (!this.Contacts.GetWalkNormal(ref this.CurrentSpeed, out worldNormal, out fixture))
			{
				this.StandingOnBody = null;
				return;
			}
			if (this.CheckRelativeVelocitySpeedOnFixturePositive(fixture, worldNormal, 2f))
			{
				this.StandingOnBody = fixture.GetBody();
				this.m_standingOnBodyRelativePosition = this.StandingOnBody.GetLocalPoint(this.WorldBody.GetPosition());
				this.m_standingOnBodyVelocity = this.StandingOnBody.GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition());
				return;
			}
			this.StandingOnBody = null;
		}

		// Token: 0x06003B15 RID: 15125 RVA: 0x0003039C File Offset: 0x0002E59C
		private void UpdateInAir()
		{
			this.InAir = !this.StandingOnGround;
		}

		// Token: 0x06003B16 RID: 15126 RVA: 0x000FBD10 File Offset: 0x000F9F10
		private void UpdateStandingOnGround()
		{
			if (this.Climbing && this.ClimbingDirection == 1)
			{
				this.StandingOnGround = false;
				return;
			}
			if (this.StandingOnBody != null)
			{
				if ((this.StandingOnBody.GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition()) - this.WorldBody.GetLinearVelocity()).Y <= -5f)
				{
					this.StandingOnGround = false;
					return;
				}
				this.StandingOnGround = true;
				this.LastOnGroundPosition = this.WorldBody.GetPosition();
				return;
			}
			else
			{
				if (this.Contacts.CheckMinimumContactTimeExceeds(0.5f))
				{
					this.Contacts.ResetContactRelativePositions();
					this.StandingOnGround = true;
					return;
				}
				this.StandingOnGround = false;
				return;
			}
		}

		// Token: 0x06003B17 RID: 15127 RVA: 0x000FBDC0 File Offset: 0x000F9FC0
		internal void AbortMelee()
		{
			switch (this.CurrentAction)
			{
			case PlayerAction.MeleeAttack1:
			case PlayerAction.MeleeAttack2:
			case PlayerAction.MeleeAttack3:
			case PlayerAction.Block:
				this.CurrentAction = PlayerAction.Idle;
				break;
			case PlayerAction.JumpKick:
			case PlayerAction.JumpAttack:
			case PlayerAction.Kick:
				break;
			default:
				return;
			}
		}

		// Token: 0x06003B18 RID: 15128 RVA: 0x000FBE00 File Offset: 0x000FA000
		private void CheckDisarmByHit(Player hitBy)
		{
			ObjectData objectData = this.CheckThrowableDisarm();
			if (objectData != null && objectData.MissileData != null)
			{
				objectData.MissileData.IgnorePlayer(hitBy);
			}
			objectData = this.CheckDisarmByHit(hitBy.LastDirectionX);
			if (objectData != null && objectData.MissileData != null)
			{
				objectData.MissileData.IgnorePlayer(hitBy);
			}
		}

		// Token: 0x06003B19 RID: 15129 RVA: 0x000FBE54 File Offset: 0x000FA054
		internal void HitByKick(Player hitBy)
		{
			this.SetCollisionPlayerPlayerOverlapping(hitBy, 800f);
			this.Shake.Start(150f);
			if (this.GameOwner != GameOwnerEnum.Client)
			{
				hitBy.Statisticts.m_TotalKickHits++;
			}
			hitBy.LastKickHitPlayerID = this.ObjectID;
			Microsoft.Xna.Framework.Vector2 vector = hitBy.CurrentVelocity - this.CurrentVelocity;
			float num = 2f;
			bool flag = hitBy.CurrentAction == PlayerAction.JumpKick && vector.Y < num;
			if (hitBy.StandingOnGround && (hitBy.Position - this.Position).Y > 8f)
			{
				flag = true;
			}
			if ((this.LastDirectionX != hitBy.LastDirectionX || Math.Abs(this.Position.X - hitBy.Position.X) < 4f) && this.CurrentAction == PlayerAction.Block)
			{
				this.TimeSequence.TimeBlock = 75f;
				SoundHandler.PlaySound("MeleeBlock", this.Position, this.GameWorld);
				if (flag && !this.HasMeleeStunImmunity)
				{
					this.LastDirectionX = -hitBy.LastDirectionX;
					this.StartStaggering(250f);
				}
				this.ResetBlockOnBlock(12f);
				this.ForceServerMovementState(5);
				return;
			}
			this.ResetBlockOnHit();
			this.CheckDisarmByHit(hitBy);
			bool rolling = this.Rolling;
			bool recoveryRolling = this.RecoveryRolling;
			SoundHandler.PlaySound("MeleeKick", this.Position, this.GameWorld);
			if (!this.LayingOnGround & !this.HasMeleeStunImmunity)
			{
				this.LastDirectionX = -hitBy.LastDirectionX;
			}
			this.TakeMeleeDamage(PlayerDamageEventType.Melee, 3f * hitBy.MeleeDamageDealtModifier, hitBy.ObjectID);
			this.AirControlBaseVelocity = Microsoft.Xna.Framework.Vector2.Zero;
			if (!this.HasMeleeStunImmunity)
			{
				if (this.InAir)
				{
					this.DeathKneeling = false;
					Microsoft.Xna.Framework.Vector2 newVelocity = new Microsoft.Xna.Framework.Vector2((float)hitBy.LastDirectionX * 3f * hitBy.MeleeForceModifier, 2f * hitBy.MeleeForceModifier + this.WorldBody.GetLinearVelocity().Y);
					if ((newVelocity.X > 0f && this.WorldBody.GetLinearVelocity().X > 0f) || (newVelocity.X < 0f && this.WorldBody.GetLinearVelocity().X < 0f))
					{
						newVelocity.X += this.WorldBody.GetLinearVelocity().X;
					}
					this.FallWithSpeed(newVelocity);
					this.ForceServerPositionState();
					return;
				}
				if (!this.TimeSequence.StunResistanceReached)
				{
					this.DeathKneeling = false;
					this.TimeSequence.ActivateStunResistanceAfterHit();
					if (!this.LayingOnGround & !this.IsDead & !flag)
					{
						this.LastDirectionX = -hitBy.LastDirectionX;
						this.StartStaggering(250f);
						this.ImportantUpdate = true;
						return;
					}
					if (rolling)
					{
						this.LastDirectionX = -hitBy.LastDirectionX;
						this.StartStaggering(520f);
						this.ImportantUpdate = true;
						return;
					}
					Microsoft.Xna.Framework.Vector2 newVelocity2 = new Microsoft.Xna.Framework.Vector2((float)hitBy.LastDirectionX * 3.3f * hitBy.MeleeForceModifier, 3f * hitBy.MeleeForceModifier + this.WorldBody.GetLinearVelocity().Y);
					if ((newVelocity2.X > 0f && this.WorldBody.GetLinearVelocity().X > 0f) || (newVelocity2.X < 0f && this.WorldBody.GetLinearVelocity().X < 0f))
					{
						newVelocity2.X += this.WorldBody.GetLinearVelocity().X;
					}
					this.FallWithSpeed(newVelocity2);
					this.ForceServerPositionState();
				}
			}
		}

		// Token: 0x06003B1A RID: 15130 RVA: 0x000FC20C File Offset: 0x000FA40C
		internal void CheckThrowableDisarmQueued()
		{
			if (!this.IsRemoved && (this.m_checkThrowableDisarmIsQueued & !this.GameWorld.GetActiveWorld.IsLocked))
			{
				bool fullLanding = this.FullLanding;
				float timeFullLanding = this.TimeSequence.TimeFullLanding;
				PlayerAction currentAction = this.CurrentAction;
				this.m_states[18] = this.m_checkThrowableDisarmThrowableIsActivated;
				Microsoft.Xna.Framework.Vector2 linearVelocity = this.WorldBody.GetLinearVelocity();
				linearVelocity.Y += Constants.RANDOM.NextFloat(0.2f);
				this.DropThrowable(linearVelocity);
				this.m_checkThrowableDisarmIsQueued = false;
				if (currentAction == PlayerAction.Disabled)
				{
					this.CurrentAction = currentAction;
				}
				this.FullLanding = fullLanding;
				this.TimeSequence.TimeFullLanding = timeFullLanding;
			}
		}

		// Token: 0x06003B1B RID: 15131 RVA: 0x000FC2C4 File Offset: 0x000FA4C4
		internal ObjectData CheckThrowableDisarm()
		{
			if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Thrown || (this.CurrentAction != PlayerAction.ManualAim && (!this.ThrowableIsActivated || this.m_throwFullyPerformed)))
			{
				return null;
			}
			if (this.GameWorld.GetActiveWorld.IsLocked)
			{
				if (!this.m_checkThrowableDisarmIsQueued)
				{
					this.m_checkThrowableDisarmIsQueued = true;
					this.m_checkThrowableDisarmThrowableIsActivated = this.ThrowableIsActivated;
				}
				return null;
			}
			bool fullLanding = this.FullLanding;
			float timeFullLanding = this.TimeSequence.TimeFullLanding;
			Microsoft.Xna.Framework.Vector2 linearVelocity = this.WorldBody.GetLinearVelocity();
			linearVelocity.Y += Constants.RANDOM.NextFloat(0.2f);
			ObjectData objectData = this.DropThrowable(linearVelocity);
			this.FullLanding = fullLanding;
			this.TimeSequence.TimeFullLanding = timeFullLanding;
			if (objectData.MissileData != null)
			{
				objectData.MissileData.ResetHitCooldown();
			}
			return objectData;
		}

		// Token: 0x06003B1C RID: 15132 RVA: 0x000303AD File Offset: 0x0002E5AD
		internal ObjectWeaponItem CheckDisarmByHit(int directionToDrop)
		{
			return this.CheckDisarmByHit(directionToDrop, Player.DISARM_POWER);
		}

		// Token: 0x06003B1D RID: 15133 RVA: 0x000FC398 File Offset: 0x000FA598
		internal ObjectWeaponItem CheckDisarmByHit(int directionToDrop, Microsoft.Xna.Framework.Vector2 power)
		{
			if (this.CurrentAction != PlayerAction.HipFire && this.CurrentAction != PlayerAction.ManualAim && this.CurrentAction != PlayerAction.DrawWeapon && (this.CurrentAction != PlayerAction.Disabled || !this.FullLanding))
			{
				return null;
			}
			if (this.CurrentAction == PlayerAction.DrawWeapon && (this.Climbing || this.LedgeGrabbing))
			{
				this.CurrentAction = PlayerAction.Idle;
				this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.NONE;
				this.CurrentWeaponQueued = SFD.Weapons.WeaponItemType.NONE;
				return null;
			}
			ObjectWeaponItem objectWeaponItem = this.DropWeaponItem(this.CurrentWeaponDrawn, directionToDrop, power, true);
			this.InThrowingMode = false;
			if (objectWeaponItem != null && objectWeaponItem.MissileData != null)
			{
				objectWeaponItem.MissileData.ResetHitCooldown();
			}
			return objectWeaponItem;
		}

		// Token: 0x06003B1E RID: 15134 RVA: 0x000FC434 File Offset: 0x000FA634
		internal void StartDeathKneel()
		{
			this.TimeSequence.TimeStagger = 0f;
			this.Staggering = false;
			this.Crouching = false;
			this.Rolling = false;
			this.TimeSequence.TimeFullLanding = 0f;
			this.FullLanding = false;
			this.DeathKneeling = true;
			this.CommandData.ContinousDeathKneel = false;
			this.ForceServerMovementState(25);
			this.CurrentAction = PlayerAction.Disabled;
		}

		// Token: 0x06003B1F RID: 15135 RVA: 0x000303BB File Offset: 0x0002E5BB
		internal void OnDeathKneelOver()
		{
			if (this.CheckDeathLedge((float)this.LastDirectionX, 28f, Player.DeathType.DeathKneel) > 0f)
			{
				this.Fall(new Microsoft.Xna.Framework.Vector2((float)this.LastDirectionX * 3f, 4f));
				return;
			}
			this.Fall();
		}

		// Token: 0x06003B20 RID: 15136 RVA: 0x000303FB File Offset: 0x0002E5FB
		internal void CancelDeathKneel()
		{
			if (this.DeathKneeling)
			{
				this.DeathKneeling = false;
				this.CommandData.ContinousDeathKneel = false;
				this.ForceServerMovementState(25);
				this.CurrentActionToIdle();
			}
		}

		// Token: 0x17000996 RID: 2454
		// (get) Token: 0x06003B21 RID: 15137 RVA: 0x00030426 File Offset: 0x0002E626
		// (set) Token: 0x06003B22 RID: 15138 RVA: 0x0003042E File Offset: 0x0002E62E
		internal float LastStaggerTime { get; set; }

		// Token: 0x06003B23 RID: 15139 RVA: 0x000FC4A0 File Offset: 0x000FA6A0
		internal void StartStaggering(float staggerTime)
		{
			if (this.RocketRideProjectileWorldID > 0)
			{
				return;
			}
			if (this.InAir)
			{
				this.Fall();
				this.ForceServerPositionState();
				return;
			}
			if (!this.LayingOnGround)
			{
				this.DropGrabbedPlayer(null, false, false, true);
				this.DisableGrabbing(false);
				this.m_staggeringExtendedCheckPerformed = false;
				this.LastStaggerTime = staggerTime;
				this.TimeSequence.TimeStagger = staggerTime;
				this.Staggering = true;
				this.CommandData.ContinousStagger = false;
				this.TimeSequence.TimeDazed = 0f;
				this.TimeSequence.TimeMeleeHit = 0f;
				this.MeleeHit = false;
				this.Rolling = false;
				this.CurrentAction = PlayerAction.Disabled;
				this.ForceServerMovementState(25);
				this.ClientMustInitiateMovement(true);
			}
		}

		// Token: 0x06003B24 RID: 15140 RVA: 0x000FC564 File Offset: 0x000FA764
		internal bool CanBeHitByMelee(Player otherPlayer)
		{
			if (this.RecoveryRolling)
			{
				int num = this.LastDirectionX;
				if (num == -1 && this.Contacts.LeftCollisionContactsCount > 0)
				{
					num = 0;
				}
				if (num == 1 && this.Contacts.RightCollisionContactsCount > 0)
				{
					num = 0;
				}
				int lastDirectionX = otherPlayer.LastDirectionX;
				if (num != 0 && num == lastDirectionX)
				{
					return false;
				}
			}
			return this.IsGrabbedByPlayer || !this.InSameTeam(otherPlayer);
		}

		// Token: 0x06003B25 RID: 15141 RVA: 0x00030437 File Offset: 0x0002E637
		internal bool InSameTeam(Player player)
		{
			return !player.IsDead && this.InSameTeam(player.CurrentTeam);
		}

		// Token: 0x06003B26 RID: 15142 RVA: 0x0003044F File Offset: 0x0002E64F
		internal bool InSameTeam(Team team)
		{
			return !this.IsDead && this.CurrentTeam != Team.Independent && this.CurrentTeam == team;
		}

		// Token: 0x06003B27 RID: 15143 RVA: 0x000FC5CC File Offset: 0x000FA7CC
		private void RandomizeDeathSequence(int hitByLastDirectionX)
		{
			switch (this.GetDeathType(Player.DeathType.DeathKneel | Player.DeathType.Stagger | Player.DeathType.Fall, Player.DeathTypeOrder.Random))
			{
			case Player.DeathType.DeathKneel:
				this.LastDirectionX = -hitByLastDirectionX;
				this.StartDeathKneel();
				return;
			case Player.DeathType.Stagger:
				this.LastDirectionX = -hitByLastDirectionX;
				this.StartStaggering(1000f);
				return;
			default:
				this.Fall(new Microsoft.Xna.Framework.Vector2((float)hitByLastDirectionX * 3f, 4f));
				this.ForceServerPositionState();
				return;
			}
		}

		// Token: 0x06003B28 RID: 15144 RVA: 0x000FC634 File Offset: 0x000FA834
		internal void HitByMissile(ObjectData od, PlayerHitByMissileEventArgs e)
		{
			this.Shake.Start(150f);
			int num = (e.RelativeVelocity.X > 0f) ? 1 : -1;
			Microsoft.Xna.Framework.Vector2 linearVelocity = od.Body.GetLinearVelocity();
			linearVelocity.X = Math.Min(Math.Abs(linearVelocity.X * 0.3333f), Player.DISARM_POWER.X);
			linearVelocity.Y = Math.Min(Math.Abs(linearVelocity.Y * 0.25f), Player.DISARM_POWER.Y);
			this.CheckThrowableDisarm();
			this.CheckDisarmByHit(num, linearVelocity);
			this.Rolling = false;
			this.AirControlBaseVelocity = Microsoft.Xna.Framework.Vector2.Zero;
			this.TimeSequence.DisableQueuedKey(new int[]
			{
				4,
				15
			});
			Microsoft.Xna.Framework.Vector2 vector = Converter.Box2DToWorld(e.NewBox2DPosition);
			Microsoft.Xna.Framework.Vector2 worldPosition = vector;
			if (num == 1 && worldPosition.X > this.Position.X)
			{
				worldPosition.X = this.Position.X;
			}
			else if (num == -1 && worldPosition.X < this.Position.X)
			{
				worldPosition.X = this.Position.X;
			}
			SFD.Weapons.WeaponItem weaponItem = null;
			if (od is ObjectWeaponItem)
			{
				ObjectWeaponItem objectWeaponItem = (ObjectWeaponItem)od;
				weaponItem = objectWeaponItem.GetWeaponItem();
			}
			if ((this.LastDirectionX != num || Math.Abs(this.Position.X - vector.X) < 4f) && this.CurrentAction == PlayerAction.Block)
			{
				od.MissileData.ResetHitCooldown();
				this.ResetBlockOnBlock(12f);
				this.Statisticts.m_TotalBlockedAttacks++;
				this.ForceServerMovementState(25);
				this.ImportantUpdate = true;
				EffectHandler.PlayEffect("Block", worldPosition, this.GameWorld);
				Material.HandleMeleeVsMelee(od.Tile.Material, this.GetCurrentMeleeWeaponInUse(false).Properties.WeaponMaterial, PlayerHitAction.Punch, worldPosition, this.GameWorld);
				if (weaponItem != null)
				{
					if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE && !this.HaveWeaponItem(weaponItem))
					{
						this.GrabWeaponItem(weaponItem, 0);
						od.Remove();
						if (weaponItem.Type == SFD.Weapons.WeaponItemType.Thrown || weaponItem.Type == SFD.Weapons.WeaponItemType.Handgun || weaponItem.Type == SFD.Weapons.WeaponItemType.Rifle || weaponItem.Type == SFD.Weapons.WeaponItemType.Melee)
						{
							this.CurrentWeaponDrawn = weaponItem.Type;
						}
						this.ImportantUpdate = true;
						return;
					}
					if (weaponItem.Type == SFD.Weapons.WeaponItemType.Melee)
					{
						weaponItem.MWeaponData.Durability.CurrentValue -= weaponItem.MWeaponData.Properties.ThrownDurabilityLossOnHitBlockingPlayers;
						od.Health.Fullness = weaponItem.MWeaponData.Durability.Fullness;
						if (od.Health.IsEmpty)
						{
							od.Destroy();
							return;
						}
					}
				}
			}
			else
			{
				od.MissileData.SetHitCooldown();
				if (weaponItem != null && weaponItem.Type == SFD.Weapons.WeaponItemType.Melee)
				{
					weaponItem.MWeaponData.Durability.CurrentValue -= weaponItem.MWeaponData.Properties.ThrownDurabilityLossOnHitPlayers;
					od.Health.Fullness = weaponItem.MWeaponData.Durability.Fullness;
					if (od.Health.IsEmpty)
					{
						od.Destroy();
					}
				}
				ObjectMissileStatus objectMissileStatus = (od.MissileData != null) ? od.MissileData.Status : ObjectMissileStatus.Debris;
				string text;
				string text2;
				if (objectMissileStatus == ObjectMissileStatus.Thrown)
				{
					text = od.Tile.MissileInfo.ThrownHitSoundID;
					text2 = od.Tile.MissileInfo.ThrownHitEffectID;
				}
				else
				{
					text = od.Tile.MissileInfo.NormalHitSoundID;
					text2 = od.Tile.MissileInfo.NormalHitEffectID;
				}
				bool flag = true;
				if (!string.IsNullOrEmpty(text))
				{
					SoundHandler.PlaySound(text, worldPosition, this.GameWorld);
					flag = false;
				}
				if (!string.IsNullOrEmpty(text2))
				{
					EffectHandler.PlayEffect(text2, worldPosition, this.GameWorld);
					flag = false;
				}
				if (flag)
				{
					Material material = this.GetPlayerHitMaterial();
					if (material == null)
					{
						material = this.ObjectData.Tile.Material;
					}
					Material.HandleMeleeVsMelee(od.Tile.Material, material, PlayerHitAction.Punch, worldPosition, this.GameWorld);
				}
				EffectHandler.PlayEffect("Smack", worldPosition, this.GameWorld);
				this.ResetBlockOnHit();
				bool isDead = this.IsDead;
				this.TakeMeleeDamage(PlayerDamageEventType.Missile, e.PlayerDamage, od.ObjectID);
				if (!this.HasMeleeStunImmunity)
				{
					if (this.InAir)
					{
						if (this.IsDead != isDead)
						{
							this.LastDirectionX = -num;
						}
						if (this.Falling)
						{
							this.ForceServerMovementState(25);
						}
						this.Fall(new Microsoft.Xna.Framework.Vector2((float)num * 1f, 1f));
						this.ForceServerPositionState();
						return;
					}
					if (this.IsDead)
					{
						if (this.IsDead != isDead)
						{
							this.RandomizeDeathSequence(num);
							return;
						}
						if (this.DeathKneeling)
						{
							return;
						}
						if (!this.LayingOnGround && Constants.RANDOM.NextDouble() > 0.5)
						{
							this.StartStaggering(1000f);
							return;
						}
						if (!this.LayingOnGround)
						{
							this.Fall(new Microsoft.Xna.Framework.Vector2((float)num * 3f, 4f));
							this.ForceServerPositionState();
							return;
						}
					}
					else if (!this.LayingOnGround && !this.TimeSequence.ForceCrouchDuringRise)
					{
						if (e.HitType == Player.MissileHitType.Knockdown)
						{
							this.Fall(new Microsoft.Xna.Framework.Vector2((float)num * 2f, 3f));
							return;
						}
						this.LastDirectionX = -num;
						this.GetHitAndStunned(300f);
					}
				}
			}
		}

		// Token: 0x06003B29 RID: 15145 RVA: 0x000FCB9C File Offset: 0x000FAD9C
		internal void HitByMelee(Player hitBy)
		{
			this.SetCollisionPlayerPlayerOverlapping(hitBy, 800f);
			this.Shake.Start(150f);
			this.CheckDisarmByHit(hitBy);
			this.Rolling = false;
			this.AirControlBaseVelocity = Microsoft.Xna.Framework.Vector2.Zero;
			this.TimeSequence.DisableQueuedKey(new int[]
			{
				4,
				15
			});
			if (this.GameOwner != GameOwnerEnum.Client)
			{
				hitBy.Statisticts.m_TotalMeleeAttackHits++;
			}
			hitBy.LastMeleeHitPlayerID = this.ObjectID;
			bool flag = hitBy.LastMeleeAction == PlayerAction.MeleeAttack3;
			Microsoft.Xna.Framework.Vector2 vector = hitBy.CurrentVelocity - this.CurrentVelocity;
			float num = 2f;
			AABB aabb;
			hitBy.GetAABBMeleeAttack(out aabb, false);
			Microsoft.Xna.Framework.Vector2 worldPosition = Converter.Box2DToWorld(new Microsoft.Xna.Framework.Vector2((hitBy.LastDirectionX == 1) ? aabb.upperBound.X : aabb.lowerBound.X, aabb.GetCenter().Y));
			if (hitBy.LastDirectionX == 1 && worldPosition.X > this.Position.X)
			{
				worldPosition.X = this.Position.X;
			}
			else if (hitBy.LastDirectionX == -1 && worldPosition.X < this.Position.X)
			{
				worldPosition.X = this.Position.X;
			}
			bool flag2 = this.LastDirectionX != hitBy.LastDirectionX || Math.Abs(this.Position.X - hitBy.Position.X) < 4f;
			bool flag3 = false;
			bool flag4 = true;
			MWeapon currentMeleeWeaponInUse = hitBy.GetCurrentMeleeWeaponInUse(false);
			if (currentMeleeWeaponInUse != null)
			{
				if (currentMeleeWeaponInUse is WpnShockBaton)
				{
					WpnShockBaton wpnShockBaton = (WpnShockBaton)currentMeleeWeaponInUse;
					if (!wpnShockBaton.CheckIsOnCooldown(this.GameWorld))
					{
						wpnShockBaton.CooldownTimestamp = this.GameWorld.ElapsedTotalGameTime;
						if (!Cheat.InfiniteAmmo)
						{
							wpnShockBaton.Durability.CurrentValue -= 25f;
						}
						SoundHandler.PlaySound("ElectricSparks", worldPosition, this.GameWorld);
						EffectHandler.PlayEffect("Electric", worldPosition, this.GameWorld);
						flag2 = false;
						flag3 = true;
					}
				}
				else if (currentMeleeWeaponInUse is WpnChainsaw)
				{
					flag4 = false;
				}
			}
			Material playerHitMaterial = this.GetPlayerHitMaterial();
			if (flag2 && this.CurrentAction == PlayerAction.Block)
			{
				hitBy.MinimumMeleeHitFrameTime = 150f;
				this.ResetBlockOnBlock(12f);
				bool flag5 = true;
				if (flag && !this.HasMeleeStunImmunity)
				{
					if (hitBy.LastMeleeAction == PlayerAction.JumpAttack)
					{
						if (vector.Y < num)
						{
							this.LastDirectionX = -hitBy.LastDirectionX;
							this.StartStaggering(250f);
							flag5 = false;
						}
					}
					else
					{
						this.LastDirectionX = -hitBy.LastDirectionX;
						this.StartStaggering(520f);
						flag5 = false;
					}
				}
				if (flag5)
				{
					this.Statisticts.m_TotalBlockedAttacks++;
					this.ForceServerMovementState(25);
					this.ImportantUpdate = true;
					EffectHandler.PlayEffect("Block", worldPosition, this.GameWorld);
				}
				else
				{
					EffectHandler.PlayEffect("Smack", worldPosition, this.GameWorld);
				}
				Material materialB = (playerHitMaterial == null) ? this.GetCurrentMeleeWeaponInUse(false).Properties.WeaponMaterial : playerHitMaterial;
				Material.HandleMeleeVsMelee(hitBy.GetCurrentMeleeWeaponInUse(false).Properties.WeaponMaterial, materialB, PlayerHitAction.Punch, worldPosition, this.GameWorld);
			}
			else
			{
				if (playerHitMaterial == null)
				{
					SoundHandler.PlaySound(hitBy.GetCurrentMeleeWeaponInUse(false).Properties.PlayerHitSoundID, worldPosition, this.GameWorld);
					EffectHandler.PlayEffect(hitBy.GetCurrentMeleeWeaponInUse(false).Properties.PlayerHitEffectID, worldPosition, this.GameWorld);
				}
				else
				{
					Material.HandleMeleeVsMelee(hitBy.GetCurrentMeleeWeaponInUse(false).Properties.WeaponMaterial, playerHitMaterial, PlayerHitAction.Punch, worldPosition, this.GameWorld);
				}
				if (flag4)
				{
					EffectHandler.PlayEffect("Smack", worldPosition, this.GameWorld);
				}
				this.ResetBlockOnHit();
				bool isDead = this.IsDead;
				float num2 = hitBy.GetCurrentMeleeWeaponInUse(false).Properties.DamagePlayers;
				bool flag6 = false;
				if (hitBy.GrabAttacking && this.ObjectID == hitBy.LastHoldingPlayerInGrabID)
				{
					flag6 = true;
					num2 *= 2f;
				}
				else if (flag3)
				{
					num2 *= 1.25f;
				}
				this.TakeMeleeDamage(PlayerDamageEventType.Melee, num2 * hitBy.MeleeDamageDealtModifier, hitBy.ObjectID);
				if (!this.HasMeleeStunImmunity)
				{
					if (this.InAir)
					{
						if (this.IsDead != isDead)
						{
							this.LastDirectionX = -hitBy.LastDirectionX;
						}
						if (this.Falling)
						{
							this.ForceServerMovementState(25);
						}
						if (hitBy.LastMeleeAction == PlayerAction.MeleeAttack3)
						{
							this.Fall(new Microsoft.Xna.Framework.Vector2((float)hitBy.LastDirectionX * 3f, 4f) * hitBy.MeleeForceModifier);
						}
						else
						{
							this.Fall(new Microsoft.Xna.Framework.Vector2((float)hitBy.LastDirectionX * 1f, 1f) * (flag6 ? hitBy.MeleeForceModifier : 1f));
						}
						this.CanRecoverFromFall = false;
						this.ForceServerPositionState();
						this.ImportantUpdate = true;
					}
					else if (this.IsDead)
					{
						if (this.IsDead != isDead)
						{
							this.RandomizeDeathSequence(hitBy.LastDirectionX);
						}
						else if (this.DeathKneeling)
						{
							if (hitBy.LastMeleeAction == PlayerAction.MeleeAttack3)
							{
								this.Fall(new Microsoft.Xna.Framework.Vector2((float)hitBy.LastDirectionX * 3f, 4f) * hitBy.MeleeForceModifier);
								this.ForceServerPositionState();
							}
						}
						else if (!this.LayingOnGround && Constants.RANDOM.NextDouble() > 0.5)
						{
							this.StartStaggering(1000f);
						}
						else if (!this.LayingOnGround)
						{
							this.Fall(new Microsoft.Xna.Framework.Vector2((float)hitBy.LastDirectionX * 3f, 4f) * hitBy.MeleeForceModifier);
							this.ForceServerPositionState();
						}
						else if (hitBy.LastMeleeAction == PlayerAction.MeleeAttack3)
						{
							this.Fall(new Microsoft.Xna.Framework.Vector2((float)hitBy.LastDirectionX * 3f, 4f) * hitBy.MeleeForceModifier);
							this.ForceServerPositionState();
						}
					}
					else if (!this.LayingOnGround && !this.TimeSequence.ForceCrouchDuringRise && !this.TimeSequence.StunResistanceReached)
					{
						this.TimeSequence.ActivateStunResistanceAfterHit();
						this.LastDirectionX = -hitBy.LastDirectionX;
						if (hitBy.LastMeleeAction == PlayerAction.MeleeAttack3)
						{
							this.Fall(new Microsoft.Xna.Framework.Vector2((float)hitBy.LastDirectionX * 3f, 4f) * hitBy.MeleeForceModifier);
							this.ForceServerPositionState();
							this.CanRecoverFromFall = false;
							this.ImportantUpdate = true;
						}
						else if (hitBy.LastMeleeAction == PlayerAction.JumpAttack && vector.Y < num)
						{
							if (this.Rolling)
							{
								this.LastDirectionX = -hitBy.LastDirectionX;
								this.StartStaggering(520f);
								this.ImportantUpdate = true;
							}
							else
							{
								this.Fall(new Microsoft.Xna.Framework.Vector2((float)hitBy.LastDirectionX * 0.5f, 1f));
								this.ForceServerPositionState();
								this.CanRecoverFromFall = false;
								this.ImportantUpdate = true;
							}
						}
						else
						{
							this.GetHitAndStunned(Player.MeleeTimes.GetTimeMeleeHit(hitBy) + (flag3 ? 500f : 0f));
						}
					}
				}
			}
			if (flag3)
			{
				this.CheckMeleeWeaponDestroyed();
			}
		}

		// Token: 0x06003B2A RID: 15146 RVA: 0x000FD2B8 File Offset: 0x000FB4B8
		internal Material GetPlayerHitMaterial()
		{
			Material result = null;
			if (this.PlayerHitEffect == PlayerHitEffect.Metal)
			{
				if (this.m_playerHitMetalMaterial == null)
				{
					this.m_playerHitMetalMaterial = MaterialDatabase.Get("metalplayer");
				}
				result = this.m_playerHitMetalMaterial;
			}
			return result;
		}

		// Token: 0x06003B2B RID: 15147 RVA: 0x000FD2F0 File Offset: 0x000FB4F0
		internal void GetHitAndStunned(float meleeHitTime)
		{
			this.ClientMustInitiateMovement(true);
			this.CurrentAction = PlayerAction.Disabled;
			this.Movement = PlayerMovement.Idle;
			this.DropGrabbedPlayer(null, false, false, true);
			this.Dazed = true;
			this.MeleeHit = true;
			this.Staggering = false;
			this.Rolling = false;
			this.Diving = false;
			this.DisableGrabbing(false);
			this.Sprinting = false;
			this.TimeSequence.TimeFullLanding = 0f;
			this.FullLanding = false;
			this.TimeSequence.TimeMeleeHit = meleeHitTime;
			this.TimeSequence.TimeBlockCooldown = 0f;
			this.TimeSequence.TimeDazed = this.TimeSequence.TimeMeleeHit + 110f;
			this.ImportantUpdate = true;
			this.ForceServerMovementState(25);
		}

		// Token: 0x06003B2C RID: 15148 RVA: 0x0003046E File Offset: 0x0002E66E
		internal void ResetBlockOnHit()
		{
			this.TimeSequence.TimeBlockCooldown = 0f;
			this.TimeSequence.TimeBlock = 0f;
			this.TimeSequence.IncreaseStunResistance();
		}

		// Token: 0x06003B2D RID: 15149 RVA: 0x000FD3B4 File Offset: 0x000FB5B4
		private void ResetBlockOnBlock(float energyBlockAmount)
		{
			this.DrainEnergy(energyBlockAmount);
			this.TimeSequence.TimeBlock = 100f;
			if (this.TimeSequence.TimeGrabCooldown < 100f)
			{
				this.TimeSequence.TimeGrabCooldown = 100f;
			}
			if (this.TimeSequence.TimeBlockCooldown > 200f)
			{
				this.TimeSequence.TimeBlockCooldown = 200f;
			}
		}

		// Token: 0x06003B2E RID: 15150 RVA: 0x000FD41C File Offset: 0x000FB61C
		internal void GiveStartWeaponItem(SFD.Weapons.WeaponItem wpnItem)
		{
			if (!this.IsRemoved && wpnItem != null)
			{
				this.EquipWeaponItem(wpnItem);
				if (this.GameOwner == GameOwnerEnum.Server)
				{
					this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, new NetMessage.PlayerReceiveItem.Data(this.ObjectID, wpnItem, NetMessage.PlayerReceiveItem.ReceiveSourceType.Other));
				}
				if (wpnItem.BaseProperties.IsMakeshift)
				{
					this.CurrentAction = PlayerAction.Idle;
					this.RedrawWeaponItem(SFD.Weapons.WeaponItemType.Melee, true, true);
				}
				return;
			}
		}

		// Token: 0x06003B2F RID: 15151 RVA: 0x000FD488 File Offset: 0x000FB688
		private void DropPrimaryMeleeWeapon()
		{
			SFD.Weapons.WeaponItemType currentWeaponDrawn = this.CurrentWeaponDrawn;
			MWeapon currentMeleeMakeshiftWeapon = this.CurrentMeleeMakeshiftWeapon;
			this.CurrentMeleeMakeshiftWeapon = null;
			this.DropWeaponItemShort(SFD.Weapons.WeaponItemType.Melee, false);
			this.CurrentMeleeMakeshiftWeapon = currentMeleeMakeshiftWeapon;
			this.CurrentWeaponDrawn = currentWeaponDrawn;
		}

		// Token: 0x06003B30 RID: 15152 RVA: 0x0003049B File Offset: 0x0002E69B
		internal bool CheckSuspendGrabWeaponItemNotifications()
		{
			return this.m_gameWorld == null || this.m_gameWorld.ElapsedTotalRealTime - this.CreateTime <= 100f;
		}

		// Token: 0x06003B31 RID: 15153 RVA: 0x000304C3 File Offset: 0x0002E6C3
		internal float GetExistTime()
		{
			if (this.m_gameWorld != null)
			{
				return this.m_gameWorld.ElapsedTotalRealTime - this.CreateTime;
			}
			return 0f;
		}

		// Token: 0x06003B32 RID: 15154 RVA: 0x000304E5 File Offset: 0x0002E6E5
		internal bool GrabWeaponMeleeItem(MWeapon wpnItem)
		{
			return wpnItem != null && this.GrabWeaponItem(new SFD.Weapons.WeaponItem(SFD.Weapons.WeaponItemType.Melee, wpnItem), 0);
		}

		// Token: 0x06003B33 RID: 15155 RVA: 0x000304FA File Offset: 0x0002E6FA
		internal bool GrabWeaponHandgunItem(RWeapon wpnItem)
		{
			return wpnItem != null && this.GrabWeaponItem(new SFD.Weapons.WeaponItem(SFD.Weapons.WeaponItemType.Handgun, wpnItem), 0);
		}

		// Token: 0x06003B34 RID: 15156 RVA: 0x0003050F File Offset: 0x0002E70F
		internal bool GrabWeaponRifleItem(RWeapon wpnItem)
		{
			return wpnItem != null && this.GrabWeaponItem(new SFD.Weapons.WeaponItem(SFD.Weapons.WeaponItemType.Rifle, wpnItem), 0);
		}

		// Token: 0x06003B35 RID: 15157 RVA: 0x00030524 File Offset: 0x0002E724
		internal bool GrabWeaponThrownItem(TWeapon wpnItem)
		{
			return wpnItem != null && this.GrabWeaponItem(new SFD.Weapons.WeaponItem(SFD.Weapons.WeaponItemType.Thrown, wpnItem), 0);
		}

		// Token: 0x06003B36 RID: 15158 RVA: 0x00030539 File Offset: 0x0002E739
		internal bool GrabWeaponPowerupItem(PItem wpnItem)
		{
			return wpnItem != null && this.GrabWeaponItem(new SFD.Weapons.WeaponItem(SFD.Weapons.WeaponItemType.Powerup, wpnItem), 0);
		}

		// Token: 0x06003B37 RID: 15159 RVA: 0x000FD4C4 File Offset: 0x000FB6C4
		internal bool GrabWeaponItem(SFD.Weapons.WeaponItem wpnItem, int objectWeaponItemSourceID = 0)
		{
			bool doRedrawItem = wpnItem.BaseProperties.IsMakeshift || (wpnItem.Type == this.CurrentWeaponDrawn && !this.HaveWeaponItem(wpnItem));
			if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee && wpnItem.Type == SFD.Weapons.WeaponItemType.Melee && !wpnItem.BaseProperties.IsMakeshift && this.GetCurrentMeleeWeaponInUse(false).Properties.IsMakeshift)
			{
				doRedrawItem = false;
			}
			return this.GrabWeaponItem(wpnItem, doRedrawItem, objectWeaponItemSourceID);
		}

		// Token: 0x06003B38 RID: 15160 RVA: 0x000FD53C File Offset: 0x000FB73C
		internal bool GrabWeaponItem(SFD.Weapons.WeaponItem wpnItem, bool doRedrawItem, int sourceObjectWeaponItemID = 0)
		{
			if (this.IsRemoved)
			{
				return false;
			}
			if (this.GameOwner != GameOwnerEnum.Client)
			{
				if (this.CurrentAction == PlayerAction.ThrowThrowing)
				{
					return false;
				}
				if (this.CurrentAction == PlayerAction.DrawWeapon && this.InThrowingMode)
				{
					return false;
				}
				if (this.ThrowCharging && this.CurrentAction != PlayerAction.ThrowThrowing && doRedrawItem && this.InThrowingMode)
				{
					this.ExitThrowingMode();
					this.InThrowingMode = false;
					this.ThrowCharging = false;
					this.CurrentActionToIdle();
				}
				if (!this.InThrowingMode && this.ThrowCharging && (wpnItem.BaseProperties.IsMakeshift || wpnItem.Type == this.CurrentWeaponDrawn))
				{
					return false;
				}
			}
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				this.EquipWeaponItem(wpnItem);
				return true;
			}
			if (this.AutoDropWeapon != SFD.Weapons.WeaponItemType.NONE)
			{
				this.DropWeaponItemShort(this.AutoDropWeapon, true);
				this.AutoDropWeapon = SFD.Weapons.WeaponItemType.NONE;
			}
			bool isNewWeapon = true;
			string text = (!wpnItem.BaseProperties.IsMakeshift) ? wpnItem.BaseProperties.WeaponID.ToString() : "";
			bool flag = this.CheckSuspendGrabWeaponItemNotifications();
			switch (wpnItem.Type)
			{
			case SFD.Weapons.WeaponItemType.Handgun:
				if (this.CurrentHandgunWeapon == null)
				{
					this.EquipWeaponItem(wpnItem);
					if (doRedrawItem)
					{
						this.RedrawWeaponItem(wpnItem.Type, isNewWeapon, true);
					}
					else if (!flag)
					{
						SoundHandler.PlaySound(this.CurrentHandgunWeapon.Properties.DrawSoundID, this.Position, this.GameWorld);
					}
				}
				else if (this.CurrentHandgunWeapon.Properties.WeaponID == wpnItem.RWeaponData.Properties.WeaponID && wpnItem.RWeaponData.Properties.MaxCarriedSpareMags != 0)
				{
					this.CurrentHandgunWeapon.TakeSpareAmmo(this, wpnItem.RWeaponData);
					if (!flag)
					{
						SoundHandler.PlaySound(this.CurrentHandgunWeapon.Properties.GrabAmmoSoundID, this.Position, this.GameWorld);
					}
					text += "_ammo";
				}
				else
				{
					if (this.CurrentHandgunWeapon.Properties.WeaponID == wpnItem.RWeaponData.Properties.WeaponID)
					{
						this.CurrentHandgunWeapon.TakeSpareAmmo(this, wpnItem.RWeaponData);
						isNewWeapon = false;
					}
					else
					{
						this.DropWeaponItemShort(SFD.Weapons.WeaponItemType.Handgun, false);
						this.EquipWeaponItem(wpnItem);
					}
					if (doRedrawItem)
					{
						this.RedrawWeaponItem(wpnItem.Type, isNewWeapon, true);
					}
					else if (!flag)
					{
						SoundHandler.PlaySound(this.CurrentHandgunWeapon.Properties.DrawSoundID, this.Position, this.GameWorld);
					}
				}
				if (this.GameOwner == GameOwnerEnum.Server)
				{
					this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, new NetMessage.PlayerReceiveItem.Data(this.ObjectID, this.CurrentHandgunWeapon, NetMessage.PlayerReceiveItem.ReceiveSourceType.GrabWeaponAmmo));
				}
				break;
			case SFD.Weapons.WeaponItemType.Rifle:
				if (this.CurrentRifleWeapon == null)
				{
					this.EquipWeaponItem(wpnItem);
					if (doRedrawItem)
					{
						this.RedrawWeaponItem(wpnItem.Type, isNewWeapon, true);
					}
					else if (!flag)
					{
						SoundHandler.PlaySound(this.CurrentRifleWeapon.Properties.DrawSoundID, this.Position, this.GameWorld);
					}
				}
				else if (this.CurrentRifleWeapon.Properties.WeaponID == wpnItem.RWeaponData.Properties.WeaponID && wpnItem.RWeaponData.Properties.MaxCarriedSpareMags != 0)
				{
					this.CurrentRifleWeapon.TakeSpareAmmo(this, wpnItem.RWeaponData);
					if (!flag)
					{
						SoundHandler.PlaySound(this.CurrentRifleWeapon.Properties.GrabAmmoSoundID, this.Position, this.GameWorld);
					}
					text += "_ammo";
				}
				else
				{
					if (this.CurrentRifleWeapon.Properties.WeaponID == wpnItem.RWeaponData.Properties.WeaponID)
					{
						this.CurrentRifleWeapon.TakeSpareAmmo(this, wpnItem.RWeaponData);
						isNewWeapon = false;
					}
					else
					{
						this.DropWeaponItemShort(SFD.Weapons.WeaponItemType.Rifle, false);
						this.EquipWeaponItem(wpnItem);
					}
					if (doRedrawItem)
					{
						this.RedrawWeaponItem(wpnItem.Type, isNewWeapon, true);
					}
					else if (!flag)
					{
						SoundHandler.PlaySound(this.CurrentRifleWeapon.Properties.DrawSoundID, this.Position, this.GameWorld);
					}
				}
				if (this.GameOwner == GameOwnerEnum.Server)
				{
					this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, new NetMessage.PlayerReceiveItem.Data(this.ObjectID, this.CurrentRifleWeapon, NetMessage.PlayerReceiveItem.ReceiveSourceType.GrabWeaponAmmo));
				}
				break;
			case SFD.Weapons.WeaponItemType.Thrown:
				if (this.CurrentThrownWeapon == null)
				{
					this.EquipWeaponItem(wpnItem);
					if (doRedrawItem)
					{
						this.RedrawWeaponItem(wpnItem.Type, isNewWeapon, true);
					}
					else if (!flag)
					{
						SoundHandler.PlaySound(this.CurrentThrownWeapon.Properties.DrawSoundID, this.Position, this.GameWorld);
					}
				}
				else if (this.CurrentThrownWeapon.Properties.WeaponID == wpnItem.TWeaponData.Properties.WeaponID && this.CurrentThrownWeapon.Properties.Stackable)
				{
					this.CurrentThrownWeapon.TakeSpareAmmo(wpnItem.TWeaponData);
					if (!flag)
					{
						SoundHandler.PlaySound(this.CurrentThrownWeapon.Properties.GrabAmmoSoundID, this.Position, this.GameWorld);
					}
					text += "_ammo";
				}
				else
				{
					this.DropWeaponItemShort(SFD.Weapons.WeaponItemType.Thrown, false);
					this.EquipWeaponItem(wpnItem);
					if (doRedrawItem)
					{
						this.RedrawWeaponItem(wpnItem.Type, isNewWeapon, true);
					}
				}
				if (this.GameOwner == GameOwnerEnum.Server)
				{
					this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, new NetMessage.PlayerReceiveItem.Data(this.ObjectID, this.CurrentThrownWeapon));
				}
				break;
			case SFD.Weapons.WeaponItemType.Melee:
				if (wpnItem.BaseProperties.IsMakeshift && this.CurrentMeleeMakeshiftWeapon != null)
				{
					this.DropWeaponItemShort(SFD.Weapons.WeaponItemType.Melee, false);
				}
				if (this.CurrentMeleeWeapon != null)
				{
					if (this.CurrentMeleeWeapon.Properties.WeaponID == wpnItem.BaseProperties.WeaponID)
					{
						wpnItem.MWeaponData.Durability.CurrentValue = Math.Max(this.CurrentMeleeWeapon.Durability.CurrentValue, wpnItem.MWeaponData.Durability.CurrentValue);
						isNewWeapon = false;
					}
					else if (!wpnItem.BaseProperties.IsMakeshift)
					{
						this.DropPrimaryMeleeWeapon();
					}
				}
				this.EquipWeaponItem(wpnItem);
				if (doRedrawItem && (wpnItem.BaseProperties.IsMakeshift || this.CurrentMeleeMakeshiftWeapon == null || this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee))
				{
					if (wpnItem.BaseProperties.IsMakeshift && this.CurrentAction == PlayerAction.DrawWeapon)
					{
						this.CurrentAction = PlayerAction.Idle;
					}
					this.RedrawWeaponItem(wpnItem.Type, isNewWeapon, true);
				}
				else if (!this.MeleeWeaponBroken & !wpnItem.BaseProperties.IsMakeshift & !flag)
				{
					SoundHandler.PlaySound(wpnItem.MWeaponData.Properties.DrawSoundID, this.Position, this.GameWorld);
				}
				if (this.GameOwner == GameOwnerEnum.Server)
				{
					this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, new NetMessage.PlayerReceiveItem.Data(this.ObjectID, wpnItem, NetMessage.PlayerReceiveItem.ReceiveSourceType.GrabWeaponAmmo));
				}
				break;
			case SFD.Weapons.WeaponItemType.Powerup:
				this.DropWeaponItemShort(SFD.Weapons.WeaponItemType.Powerup, false);
				this.EquipWeaponItem(wpnItem);
				if (!flag)
				{
					SoundHandler.PlaySound(wpnItem.PItemData.Properties.PickupSoundID, this.Position, this.GameWorld);
				}
				if (this.GameOwner == GameOwnerEnum.Server)
				{
					this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, new NetMessage.PlayerReceiveItem.Data(this.ObjectID, wpnItem, NetMessage.PlayerReceiveItem.ReceiveSourceType.GrabWeaponAmmo));
				}
				break;
			case SFD.Weapons.WeaponItemType.InstantPickup:
				wpnItem.HItemData.OnPickup(this, wpnItem.HItemData);
				break;
			default:
				ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "TODO: Player.GrabWeapon() WeaponItemType." + wpnItem.Type.ToString());
				break;
			}
			if (text != "" && !this.MeleeWeaponBroken && !flag)
			{
				EffectHandler.PlayEffect("PWT", this.Position, this.GameWorld, new object[]
				{
					text
				});
			}
			this.QueueAddedWeaponCallback(wpnItem.Type, wpnItem.BaseProperties.WeaponID, sourceObjectWeaponItemID);
			return true;
		}

		// Token: 0x06003B39 RID: 15161 RVA: 0x000FDCDC File Offset: 0x000FBEDC
		private bool CheckRocketRideDeath(bool explode = true)
		{
			if (this.RocketRideProjectileWorldID > 0 && this.RocketRideProjectile != null)
			{
				ProjectileBazooka projectileBazooka = (ProjectileBazooka)this.RocketRideProjectile;
				this.RocketRideProjectileWorldID = 0;
				if (explode)
				{
					this.Gib();
					this.GameWorld.TriggerExplosion(projectileBazooka.Position, 100f, true);
				}
				projectileBazooka.RemoveRocketRidePlayer();
				projectileBazooka.Remove();
				return true;
			}
			return false;
		}

		// Token: 0x06003B3A RID: 15162 RVA: 0x000FDD40 File Offset: 0x000FBF40
		internal bool CheckMissileDeflection(ObjectData od, Box2D.XNA.RayCastInput[] missileRCI)
		{
			if (this.IsInDeflectMissileFrameWindow && !od.MissileData.HitObjectIDs.ContainsKey(this.ObjectID))
			{
				AABB aabb;
				if (this.CurrentAction == PlayerAction.JumpKick)
				{
					this.GetAABBKick(out aabb);
				}
				else
				{
					this.GetAABBBulletDeflectOnAttack(out aabb);
				}
				if (this.DeflectBulletFirstAttackFrameWindow)
				{
					if (this.LastDirectionX == -1)
					{
						aabb.lowerBound.X = aabb.lowerBound.X - 0.32f;
					}
					else
					{
						aabb.upperBound.X = aabb.upperBound.X + 0.32f;
					}
				}
				int num = 0;
				int num2 = 0;
				RayCastOutput rayCastOutput;
				if (aabb.RayCast(out rayCastOutput, ref missileRCI[num], true) || aabb.RayCast(out rayCastOutput, ref missileRCI[++num2], true) || aabb.RayCast(out rayCastOutput, ref missileRCI[++num2], true))
				{
					MissileHitEventArgs missileHitEventArgs = new MissileHitEventArgs();
					missileHitEventArgs.HitBox2DPosition = missileRCI[num2].GetHitPosition(rayCastOutput.fraction);
					missileHitEventArgs.HitNormal = rayCastOutput.normal;
					PlayerHitByMissileEventArgs playerHitByMissileEventArgs = ObjectDataMethods.CreateDefaultMissileHitPlayerEventArgs(od, this, missileHitEventArgs);
					if (od.MissileData.Status == ObjectMissileStatus.Thrown)
					{
						od.MissileData.Status = ObjectMissileStatus.Dropped;
					}
					od.MissileData.IgnorePlayer(this);
					od.MissileData.ResetHitCooldown();
					float num3 = Math.Abs(this.WorldBody.GetLinearVelocity().X - playerHitByMissileEventArgs.NewLinearVelocity.X);
					if (num3 < 3f)
					{
						PlayerHitByMissileEventArgs playerHitByMissileEventArgs2 = playerHitByMissileEventArgs;
						playerHitByMissileEventArgs2.NewLinearVelocity.X = playerHitByMissileEventArgs2.NewLinearVelocity.X + (float)this.LastDirectionX * (3f - num3);
					}
					od.Body.SetTransform(playerHitByMissileEventArgs.NewBox2DPosition, playerHitByMissileEventArgs.NewAngle);
					od.Body.SetLinearVelocity(playerHitByMissileEventArgs.NewLinearVelocity);
					od.Body.SetAngularVelocity(playerHitByMissileEventArgs.NewAngularVelocity);
					if (this.GameOwner == GameOwnerEnum.Server)
					{
						this.GameWorld.AddForcedPositionUpdate(od.BodyData);
					}
					Microsoft.Xna.Framework.Vector2 worldPosition = Converter.ConvertBox2DToWorld(missileHitEventArgs.HitBox2DPosition);
					this.Statisticts.m_TotalBlockedAttacks++;
					EffectHandler.PlayEffect("Block", worldPosition, this.GameWorld);
					Material.HandleMeleeVsMelee(od.Tile.Material, this.GetCurrentMeleeWeaponInUse(false).Properties.WeaponMaterial, PlayerHitAction.Punch, worldPosition, this.GameWorld);
					return true;
				}
			}
			return false;
		}

		// Token: 0x06003B3B RID: 15163 RVA: 0x000FDF88 File Offset: 0x000FC188
		internal bool CheckProjectileDeflection(Projectile projectile, Microsoft.Xna.Framework.Vector2 oldPosition)
		{
			if (this.IsRemoved || !projectile.Properties.CanBeAbsorbedOrBlocked)
			{
				return false;
			}
			if (projectile.LastDirectionX == this.LastDirectionX)
			{
				return false;
			}
			bool flag = this.CurrentAction == PlayerAction.Block;
			bool flag2 = this.IsInDeflectBulletFrameWindow;
			DeflectBulletType deflectBulletType = DeflectBulletType.None;
			MWeapon currentMeleeWeaponInUse = this.GetCurrentMeleeWeaponInUse(false);
			if (currentMeleeWeaponInUse is WpnChainsaw && this.ExtraMeleeStateChainsawActive)
			{
				flag2 = true;
			}
			if (flag2)
			{
				deflectBulletType = currentMeleeWeaponInUse.Properties.DeflectionOnAttack.DeflectType;
			}
			else if (flag)
			{
				deflectBulletType = currentMeleeWeaponInUse.Properties.DeflectionDuringBlock.DeflectType;
			}
			if (deflectBulletType == DeflectBulletType.None)
			{
				return false;
			}
			MWeapon.PlayerBulletDeflectionAction playerBulletDeflectionAction = flag ? MWeapon.PlayerBulletDeflectionAction.DuringBlock : MWeapon.PlayerBulletDeflectionAction.OnAttack;
			AABB aabb = default(AABB);
			AABB aabb2 = default(AABB);
			AABB aabb3;
			if (flag)
			{
				this.GetAABBBulletDeflect(out aabb3);
				if (this.DeflectBulletFirstBlockFrameWindow)
				{
					if (this.LastDirectionX == -1)
					{
						aabb3.lowerBound.X = aabb3.lowerBound.X - 0.16f;
					}
					else
					{
						aabb3.upperBound.X = aabb3.upperBound.X + 0.16f;
					}
				}
			}
			else
			{
				this.GetAABBBulletDeflectOnAttack(out aabb3);
				this.GetAABBMeleeAttack(out aabb, false);
				if (this.DeflectBulletFirstAttackFrameWindow)
				{
					if (this.LastDirectionX == -1)
					{
						aabb3.lowerBound.X = aabb3.lowerBound.X - 0.48f;
					}
					else
					{
						aabb3.upperBound.X = aabb3.upperBound.X + 0.48f;
					}
				}
			}
			if (projectile.CheckTunneling)
			{
				this.GetAABBWhole(out aabb2);
			}
			Box2D.XNA.RayCastInput rayCastInput = default(Box2D.XNA.RayCastInput);
			rayCastInput.p1 = Converter.ConvertWorldToBox2D(oldPosition);
			rayCastInput.p2 = Converter.ConvertWorldToBox2D(projectile.Position);
			rayCastInput.maxFraction = 1f;
			RayCastOutput rayCastOutput;
			if (!aabb3.RayCast(out rayCastOutput, ref rayCastInput, true) && (!flag2 || !aabb.RayCast(out rayCastOutput, ref rayCastInput, true)) && (!projectile.CheckTunneling || !aabb2.Contains(ref rayCastInput.p2)))
			{
				return false;
			}
			if (deflectBulletType == DeflectBulletType.Deflect)
			{
				projectile.PowerupBouncesDone++;
				float deflectionAngle = currentMeleeWeaponInUse.Properties.GetDeflectionAngle(playerBulletDeflectionAction, projectile.NextDeflectionValue);
				Microsoft.Xna.Framework.Vector2 vector = projectile.Velocity * -1f;
				SFDMath.RotatePosition(ref vector, deflectionAngle, out vector);
				Microsoft.Xna.Framework.Vector2 deflectionNormal = Microsoft.Xna.Framework.Vector2.Normalize(vector);
				bool flag3 = false;
				this.GameWorld.UpdateProjectileRunScripts(projectile, this.ObjectData, deflectionNormal, ref flag3);
				projectile.ObjectIDToIgnore = 0;
				projectile.PlayerOwnerID = this.ObjectID;
				projectile.PlayerDistanceTraveled = 0f;
				projectile.ImportantUpdate = true;
				if (!flag3)
				{
					projectile.Velocity = vector;
					projectile.VisualDistanceTraveled = 0f;
				}
				projectile.NextDeflectionValue = Constants.RANDOM.NextFloat();
				projectile.HitObjectID = 0;
				projectile.HitNormal = Microsoft.Xna.Framework.Vector2.UnitY;
				projectile.HitFixtureID = "";
				projectile.HitFixtureIndex = 0;
				this.GameWorld.ResetPlayerProjectHitTest(projectile);
			}
			else
			{
				projectile.HitFlag = true;
				projectile.HitDamageValue = 0f;
				bool flag4 = false;
				this.GameWorld.UpdateProjectileRunScripts(projectile, this.ObjectData, Microsoft.Xna.Framework.Vector2.Zero, ref flag4);
				projectile.ObjectIDToIgnore = 0;
				projectile.PlayerOwnerID = this.ObjectID;
				projectile.PlayerDistanceTraveled = 0f;
				projectile.ImportantUpdate = true;
				projectile.HitObjectID = 0;
				projectile.HitNormal = Microsoft.Xna.Framework.Vector2.UnitY;
				projectile.HitFixtureID = "";
				projectile.HitFixtureIndex = 0;
			}
			if (this.GameWorld.GameOwner != GameOwnerEnum.Client)
			{
				currentMeleeWeaponInUse.PlayDeflectBulletEffects(this, projectile, playerBulletDeflectionAction);
				if (currentMeleeWeaponInUse.Properties.WeaponID != 7 && (!this.InfiniteAmmo || currentMeleeWeaponInUse.Properties.IsMakeshift))
				{
					currentMeleeWeaponInUse.DecreaseDurabilityDuringProjectileDeflection(this, projectile, playerBulletDeflectionAction);
					this.CheckMeleeWeaponDestroyed();
				}
			}
			return true;
		}

		// Token: 0x06003B3C RID: 15164 RVA: 0x000FE308 File Offset: 0x000FC508
		internal void HitByBazookaRocket(float bazookaRocketDamage)
		{
			bazookaRocketDamage = Math.Max(bazookaRocketDamage * this.GetModifiers().ExplosionDamageTakenModifier, bazookaRocketDamage);
			if (!this.IsDead && (this.Health.CurrentValue > bazookaRocketDamage || this.StrengthBoostActive))
			{
				this.EndRocketRide();
				if (!this.CheatInfiniteLife)
				{
					this.DoTakeDamage(bazookaRocketDamage);
					this.Statisticts.m_TotalExplosionDamageTaken += bazookaRocketDamage;
					this.OnDamage(PlayerDamageEventType.Explosion, bazookaRocketDamage, false, 0);
				}
				if (this.Health.Fullness <= 0f)
				{
					this.IsDead = true;
					if (this.OnDeath(Player.OnDeathScream.Ignore, true, false))
					{
						this.ForceServerMovementState(40);
						this.ForceServerPositionState();
						return;
					}
				}
			}
			else
			{
				this.SetEndPositionInRocketRide();
				this.Gib();
			}
		}

		// Token: 0x06003B3D RID: 15165 RVA: 0x000FE3BC File Offset: 0x000FC5BC
		internal void TakeProjectileDamage(Projectile projectile)
		{
			this.Shake.Start(150f);
			float num = this.m_modifiers.ProjectileCritChanceTakenModifier * projectile.CritChanceDealtModifier;
			float num2 = this.m_modifiers.ProjectileDamageTakenModifier * projectile.DamageDealtModifier;
			float num3 = Math.Min(this.m_modifiers.ProjectileCritChanceTakenModifier, 1f);
			bool flag = projectile.Properties.CritChance * num >= Constants.RANDOM.NextFloat();
			bool flag2 = false;
			if (!this.IsRemoved)
			{
				this.Statisticts.m_TotalProjectilesHitBy++;
			}
			if (!this.IsDead)
			{
				if (!this.CheatInfiniteLife)
				{
					float num4 = (flag ? projectile.Properties.CritDamage : projectile.Properties.PlayerDamage) * num2;
					this.Statisticts.m_TotalProjectileDamageTaken += num4;
					projectile.HitDamageCrit = flag;
					projectile.HitDamageValue = num4;
					this.DoTakeDamage(num4);
					this.OnDamage(PlayerDamageEventType.Projectile, num4, false, projectile.InstanceID);
				}
				if (this.Health.Fullness <= 0f)
				{
					this.IsDead = true;
					if (this.OnDeath(Player.OnDeathScream.Standard, true, false))
					{
						flag2 = true;
						this.ForceServerMovementState(40);
						this.ActivatePlayerDeathSlowmotion();
						this.CheckThrowableDisarm();
						this.DropWeaponItem(this.CurrentWeaponDrawn, this.LastDirectionX, new Microsoft.Xna.Framework.Vector2(1f), true);
						if (!this.CheckRocketRideDeath(true))
						{
							Player.DeathType deathType = Player.DeathType.DeathKneel | Player.DeathType.Stagger | Player.DeathType.Fall;
							if (this.Sprinting && projectile.LastDirectionX == this.LastDirectionX)
							{
								deathType &= ~Player.DeathType.DeathKneel;
							}
							switch (this.GetDeathType(deathType, Player.DeathTypeOrder.Prioritized))
							{
							case Player.DeathType.DeathKneel:
								this.StartDeathKneel();
								break;
							case Player.DeathType.Stagger:
								this.LastDirectionX = ((projectile.Direction.X > 0f) ? -1 : 1);
								this.StartStaggering(1000f);
								break;
							default:
								this.AirControlBaseVelocity = Microsoft.Xna.Framework.Vector2.Zero;
								this.Fall(projectile.Direction * 3f + new Microsoft.Xna.Framework.Vector2(0f, 3f));
								this.ForceServerPositionState();
								break;
							}
						}
						this.ImportantUpdate = true;
					}
				}
			}
			else if (!this.IsRemoved && !this.CheatInfiniteLife)
			{
				float num5 = projectile.Properties.PlayerDamage * num2;
				this.Statisticts.m_TotalProjectileDamageTaken += num5;
				projectile.HitDamageCrit = false;
				projectile.HitDamageValue = num5;
				this.DoTakeDamage(num5);
				if (!this.IsRemoved)
				{
					this.OnDamage(PlayerDamageEventType.Projectile, num5, true, projectile.InstanceID);
				}
			}
			this.TimeSequence.CurrentKnockbackForce += projectile.Properties.PlayerForce * num3;
			if (this.TimeSequence.CurrentKnockbackForce >= 100f)
			{
				this.TimeSequence.CurrentKnockbackForce -= 100f;
				flag = true;
			}
			if (flag && this.IsDead && (this.IsCaughtByPlayer || this.IsGrabbedByPlayer))
			{
				flag = false;
			}
			if (flag)
			{
				this.LastDirectionX = ((projectile.Direction.X > 0f) ? -1 : 1);
				Microsoft.Xna.Framework.Vector2 vector = this.WorldBody.GetLinearVelocity();
				vector += projectile.Direction * 3f;
				vector.Y += 3f;
				this.AirControlBaseVelocity = Microsoft.Xna.Framework.Vector2.Zero;
				this.FallWithSpeed(vector);
				this.ForceServerMovementState(5);
				this.ForceServerPositionState();
				flag2 = true;
			}
			if (flag2)
			{
				EffectHandler.PlayEffect("TR_SPR", Microsoft.Xna.Framework.Vector2.Zero, this.GameWorld, new object[]
				{
					this.ObjectID,
					"TR_D",
					2f
				});
			}
		}

		// Token: 0x06003B3E RID: 15166 RVA: 0x000FE768 File Offset: 0x000FC968
		internal float CheckDeathLedge(float direction, float maxWorldDistance, Player.DeathType checkDeathType)
		{
			float num = Converter.ConvertWorldToBox2D(maxWorldDistance + 4f);
			int scanLineLength = (int)(maxWorldDistance / 4f);
			float[] scanLineResults = new float[scanLineLength];
			for (int i = 0; i < scanLineLength; i++)
			{
				scanLineResults[i] = float.NaN;
			}
			float scanStartX = 0f;
			AABB aabb = default(AABB);
			aabb.lowerBound = this.WorldBody.GetPosition();
			aabb.upperBound = aabb.lowerBound;
			aabb.Grow(0.16f);
			aabb.lowerBound.Y = aabb.lowerBound.Y - 0.32f;
			if (direction == -1f)
			{
				aabb.lowerBound.X = aabb.lowerBound.X - num;
				scanStartX = aabb.upperBound.X + direction * 0.08f;
			}
			else
			{
				aabb.upperBound.X = aabb.upperBound.X + num;
				scanStartX = aabb.lowerBound.X + direction * 0.08f;
			}
			Box2D.XNA.RayCastInput rciHorizontal = default(Box2D.XNA.RayCastInput);
			rciHorizontal.maxFraction = 1f;
			rciHorizontal.p1 = this.WorldBody.GetPosition();
			rciHorizontal.p2 = rciHorizontal.p1 + new Microsoft.Xna.Framework.Vector2(direction * num, 0f);
			float maxHorizontalFraction = 1f;
			Box2D.XNA.RayCastInput rci = default(Box2D.XNA.RayCastInput);
			rci.maxFraction = 1f;
			rci.p1 = aabb.upperBound;
			rci.p2 = aabb.lowerBound;
			ObjectData od = null;
			Filter playerFilter = this.CollisionFilter;
			RayCastOutput rco;
			Filter fixtureFilter;
			this.GameWorld.GetActiveWorld.QueryAABB(delegate(Fixture fixture)
			{
				if (fixture != null && fixture.GetUserData() != null && !fixture.IsSensor())
				{
					od = ObjectData.Read(fixture);
					fixture.GetFilterData(out fixtureFilter);
					bool flag = od.BreakOnStagger & checkDeathType == Player.DeathType.Stagger;
					if (Settings.b2ShouldCollide(ref playerFilter, ref fixtureFilter) && !flag)
					{
						if (fixture.RayCast(out rco, ref rciHorizontal) && rco.fraction < maxHorizontalFraction)
						{
							maxHorizontalFraction = rco.fraction;
						}
						for (int k = 0; k < scanLineLength; k++)
						{
							float num7 = (float)k / (float)scanLineLength;
							if (num7 > maxHorizontalFraction)
							{
								break;
							}
							rci.p1.X = scanStartX + direction * (float)k * 4f * 0.04f;
							rci.p2.X = rci.p1.X;
							if (fixture.RayCast(out rco, ref rci))
							{
								float y = rci.GetHitPosition(rco.fraction).Y;
								if (float.IsNaN(scanLineResults[k]) || scanLineResults[k] < y)
								{
									scanLineResults[k] = y;
								}
							}
						}
					}
				}
				return true;
			}, ref aabb);
			int num2 = (int)((float)scanLineLength * maxHorizontalFraction + 0.001f);
			float num3 = scanLineResults[0];
			int num4 = 0;
			for (int j = 0; j < num2; j++)
			{
				float num5 = scanLineResults[j];
				if (!float.IsNaN(num5) && Math.Abs(num5 - num3) <= 0.32f)
				{
					if (num4 > 0)
					{
						return -1f;
					}
					num3 = num5;
				}
				else
				{
					num4++;
					if (num4 >= 3)
					{
						float num6 = ((float)j + 1f - (float)num4) / (float)scanLineLength;
						return Math.Abs(num6 * maxWorldDistance);
					}
				}
			}
			return -1f;
		}

		// Token: 0x06003B3F RID: 15167 RVA: 0x000FEA18 File Offset: 0x000FCC18
		internal Player.DeathType GetDeathType(Player.DeathType possibleDeaths, Player.DeathTypeOrder order)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			if ((possibleDeaths & Player.DeathType.DeathKneel) == Player.DeathType.DeathKneel)
			{
				flag = this.CanDeathKneel();
			}
			if ((possibleDeaths & Player.DeathType.Stagger) == Player.DeathType.Stagger)
			{
				flag2 = this.CanStagger();
			}
			if ((possibleDeaths & Player.DeathType.Fall) == Player.DeathType.Fall)
			{
				flag3 = true;
			}
			if (order == Player.DeathTypeOrder.Prioritized)
			{
				if (flag2 && flag)
				{
					if (Constants.RANDOM.NextBool())
					{
						flag2 = false;
					}
					else
					{
						flag = false;
					}
				}
				if (flag2)
				{
					return Player.DeathType.Stagger;
				}
				if (flag)
				{
					return Player.DeathType.DeathKneel;
				}
				if (flag3)
				{
					return Player.DeathType.Fall;
				}
			}
			else
			{
				List<Player.DeathType> list = new List<Player.DeathType>();
				if (flag2)
				{
					list.Add(Player.DeathType.Stagger);
				}
				if (flag)
				{
					list.Add(Player.DeathType.DeathKneel);
				}
				if (flag3)
				{
					list.Add(Player.DeathType.Fall);
				}
				if (list.Count > 0)
				{
					if (list.Count == 1)
					{
						return list[0];
					}
					return list[Constants.RANDOM.Next(0, list.Count)];
				}
			}
			return Player.DeathType.NONE;
		}

		// Token: 0x17000997 RID: 2455
		// (get) Token: 0x06003B40 RID: 15168 RVA: 0x0003054E File Offset: 0x0002E74E
		internal bool CheatInfiniteLife
		{
			get
			{
				return Cheat.InfiniteLife && (!this.IsBot || !Cheat.InfiniteLifePlayersOnly);
			}
		}

		// Token: 0x06003B41 RID: 15169 RVA: 0x000FEAD0 File Offset: 0x000FCCD0
		internal void TakeFallDamage(float fallDamage)
		{
			fallDamage *= this.m_modifiers.ImpactDamageTakenModifier;
			if (!this.IsDead)
			{
				if (!this.CheatInfiniteLife)
				{
					this.DoTakeDamage(fallDamage);
					this.Statisticts.m_TotalFallDamageTaken += fallDamage;
					this.OnDamage(PlayerDamageEventType.Fall, fallDamage, false, 0);
				}
				if (this.Health.Fullness <= 0f)
				{
					this.IsDead = true;
					if (this.OnDeath(Player.OnDeathScream.Standard, true, false))
					{
						this.ForceServerMovementState(40);
						this.ForceServerPositionState();
						this.CheckRocketRideDeath(true);
						return;
					}
				}
			}
			else if (!this.IsRemoved && !this.CheatInfiniteLife)
			{
				this.Statisticts.m_TotalFallDamageTaken += fallDamage;
				this.DoTakeDamage(fallDamage);
				if (!this.IsRemoved)
				{
					this.OnDamage(PlayerDamageEventType.Fall, fallDamage, true, 0);
				}
			}
		}

		// Token: 0x06003B42 RID: 15170 RVA: 0x0003056B File Offset: 0x0002E76B
		internal void PlayScream()
		{
			if (this.m_currentProfile.Gender == Player.GenderType.Female)
			{
				SoundHandler.PlaySound("CartoonScream", this.Position, this.GameWorld);
				return;
			}
			SoundHandler.PlaySound("Wilhelm", this.Position, this.GameWorld);
		}

		// Token: 0x06003B43 RID: 15171 RVA: 0x000FEB98 File Offset: 0x000FCD98
		internal void TakeMeleeDamage(PlayerDamageEventType damageType, float meleeDamage, int sourceID)
		{
			meleeDamage *= this.m_modifiers.MeleeDamageTakenModifier;
			if (!this.IsDead)
			{
				if (!this.CheatInfiniteLife)
				{
					this.DoTakeDamage(meleeDamage);
					this.Statisticts.m_TotalMeleeDamageTaken += meleeDamage;
					this.OnDamage(damageType, meleeDamage, false, sourceID);
				}
				if (this.Health.Fullness <= 0f)
				{
					this.IsDead = true;
					if (this.OnDeath(Player.OnDeathScream.Standard, true, false))
					{
						this.ForceServerMovementState(40);
						this.ForceServerPositionState();
						this.ActivatePlayerDeathSlowmotion();
						this.CheckRocketRideDeath(true);
						return;
					}
				}
			}
			else if (!this.IsRemoved && !this.CheatInfiniteLife)
			{
				this.Statisticts.m_TotalMeleeDamageTaken += meleeDamage;
				this.DoTakeDamage(meleeDamage);
				if (!this.IsRemoved)
				{
					this.OnDamage(damageType, meleeDamage, true, sourceID);
				}
			}
		}

		// Token: 0x06003B44 RID: 15172 RVA: 0x000FEC68 File Offset: 0x000FCE68
		internal void TakeExplosionDamage(Explosion explosionData)
		{
			float num = explosionData.ExplosionImpactPercentage * explosionData.SourceExplosionDamage * 0.5f * this.m_modifiers.ExplosionDamageTakenModifier;
			explosionData.ExplosionDamageTaken = num;
			if (!this.IsDead)
			{
				if (!this.CheatInfiniteLife)
				{
					this.DoTakeDamage(num);
					this.Statisticts.m_TotalExplosionDamageTaken += num;
					this.OnDamage(PlayerDamageEventType.Explosion, num, false, explosionData.ExplosionInstanceID);
				}
				else
				{
					explosionData.ExplosionDamageTaken = 0f;
				}
				if (this.Health.Fullness <= 0f)
				{
					this.IsDead = true;
					if (this.OnDeath(Player.OnDeathScream.Standard, true, false))
					{
						this.ForceServerMovementState(40);
						this.ForceServerPositionState();
						this.ActivatePlayerDeathSlowmotion();
						this.CheckThrowableDisarm();
						this.CheckRocketRideDeath(true);
						return;
					}
				}
			}
			else if (explosionData.ExplosionImpactPercentage > 0.6f)
			{
				if (!this.IsRemoved)
				{
					this.Statisticts.m_TotalExplosionDamageTaken += num;
				}
				this.Gib();
			}
		}

		// Token: 0x06003B45 RID: 15173 RVA: 0x000FED5C File Offset: 0x000FCF5C
		internal void TakeMiscDamage(float miscDamage, bool applyImpactDamageModifier = true, bool runOnDamageEvents = true, int sourceID = 0)
		{
			if (applyImpactDamageModifier)
			{
				miscDamage *= this.m_modifiers.ImpactDamageTakenModifier;
			}
			if (!this.IsDead)
			{
				if (!this.CheatInfiniteLife)
				{
					this.DoTakeDamage(miscDamage);
					this.Statisticts.m_TotalOtherDamageTaken += miscDamage;
					if (runOnDamageEvents)
					{
						this.OnDamage(PlayerDamageEventType.Other, miscDamage, false, sourceID);
					}
				}
				if (this.Health.Fullness <= 0f)
				{
					this.IsDead = true;
					if (this.OnDeath(Player.OnDeathScream.Standard, true, false))
					{
						this.ForceServerMovementState(40);
						this.ForceServerPositionState();
						this.ActivatePlayerDeathSlowmotion();
						this.CheckThrowableDisarm();
						this.CheckRocketRideDeath(true);
						return;
					}
				}
			}
			else if (!this.IsRemoved && !this.CheatInfiniteLife)
			{
				this.Statisticts.m_TotalOtherDamageTaken += miscDamage;
				this.DoTakeDamage(miscDamage);
				if (!this.IsRemoved && runOnDamageEvents)
				{
					this.OnDamage(PlayerDamageEventType.Other, miscDamage, false, sourceID);
				}
			}
		}

		// Token: 0x06003B46 RID: 15174 RVA: 0x000305A8 File Offset: 0x0002E7A8
		internal void DealScriptDamage(float damage, int sourceID = 0)
		{
			if (damage <= 0f)
			{
				return;
			}
			this.TakeMiscDamage(damage, false, !this.RunOnDamagePlayerTriggersActive, sourceID);
		}

		// Token: 0x06003B47 RID: 15175 RVA: 0x000FEE3C File Offset: 0x000FD03C
		internal void LowerFireRank()
		{
			if (this.GameWorld.ElapsedTotalGameTime - this.m_lastLowerFireRankGameTime < 400f)
			{
				return;
			}
			this.m_lastLowerFireRankGameTime = this.GameWorld.ElapsedTotalGameTime;
			if (this.BurningInferno)
			{
				this.BurningInferno = false;
				this.ObjectData.Fire.IgnitionValue = 22f;
				ConsoleOutput.ShowMessage(ConsoleOutputType.PlayerAction, "Player lower fire rank to 1");
				return;
			}
			this.ObjectData.Fire.IgnitionValue = 0f;
			this.ObjectData.Fire.BurnTime = 0f;
			this.ObjectData.Fire.SmokeTime = 3000f;
			ConsoleOutput.ShowMessage(ConsoleOutputType.PlayerAction, "Player lower fire rank to 0");
		}

		// Token: 0x06003B48 RID: 15176 RVA: 0x000FEEF0 File Offset: 0x000FD0F0
		internal void TakeFireDamage(float fireDamage)
		{
			fireDamage *= this.m_modifiers.FireDamageTakenModifier;
			if (!this.IsDead)
			{
				if (!this.CheatInfiniteLife)
				{
					this.DoTakeDamage(fireDamage);
					this.Statisticts.m_TotalFireDamageTaken += fireDamage;
					this.OnDamage(PlayerDamageEventType.Fire, fireDamage, false, 0);
				}
				if (this.Health.Fullness <= 0f)
				{
					this.IsDead = true;
					if (this.OnDeath(Player.OnDeathScream.Standard, true, false))
					{
						this.ForceServerMovementState(40);
						this.ForceServerPositionState();
						this.ActivatePlayerDeathSlowmotion();
						this.CheckThrowableDisarm();
						if (!this.CheckRocketRideDeath(true))
						{
							if (this.Sprinting)
							{
								this.Fall();
							}
							else
							{
								Player.DeathType deathType = this.GetDeathType(Player.DeathType.DeathKneel | Player.DeathType.Fall, Player.DeathTypeOrder.Prioritized);
								if (deathType == Player.DeathType.DeathKneel)
								{
									this.StartDeathKneel();
								}
								else
								{
									this.Fall();
								}
							}
						}
					}
				}
			}
			if (this.IsDead && !this.Burned && fireDamage > 0f)
			{
				this.Burned = true;
				if (!this.DeathKneeling && !this.Staggering)
				{
					this.Fall(new Microsoft.Xna.Framework.Vector2(0f, 3f));
				}
				EffectHandler.PlayEffect("PLRB", this.Position, this.GameWorld);
				SoundHandler.PlaySound("Flamethrower", this.Position, this.GameWorld);
			}
		}

		// Token: 0x06003B49 RID: 15177 RVA: 0x000FF028 File Offset: 0x000FD228
		internal void FlipMovement(PlayerMovement newMovement, bool portalFlip, Microsoft.Xna.Framework.Vector2 portalTargetBaseVelocityChange)
		{
			if (portalFlip)
			{
				this.CurrentSpeed.X = this.CurrentSpeed.X * -1f;
				this.CurrentTargetSpeed.X = this.CurrentTargetSpeed.X * -1f;
				this.DiveRotation = -this.DiveRotation;
				this.AirControlBaseVelocity.X = this.AirControlBaseVelocity.X * -1f;
				this.VirtualKeyboard.FlipMovement(newMovement);
				if (newMovement == PlayerMovement.Left)
				{
					if (this.CurrentAction != PlayerAction.Disabled)
					{
						this.LastDirectionX = -1;
					}
					else
					{
						this.LastDirectionX = -this.LastDirectionX;
					}
					float x = this.WorldBody.GetLinearVelocity().X;
					this.WorldBody.SetLinearVelocity(portalTargetBaseVelocityChange + new Microsoft.Xna.Framework.Vector2((x > 0f) ? (-x) : x, this.WorldBody.GetLinearVelocity().Y));
				}
				else if (newMovement == PlayerMovement.Right)
				{
					if (this.CurrentAction != PlayerAction.Disabled)
					{
						this.LastDirectionX = 1;
					}
					else
					{
						this.LastDirectionX = -this.LastDirectionX;
					}
					float x2 = this.WorldBody.GetLinearVelocity().X;
					this.WorldBody.SetLinearVelocity(portalTargetBaseVelocityChange + new Microsoft.Xna.Framework.Vector2((x2 > 0f) ? x2 : (-x2), this.WorldBody.GetLinearVelocity().Y));
				}
				if (this.Movement != PlayerMovement.Idle)
				{
					this.Movement = newMovement;
				}
				if (this.HasLocalControl && this.GameOwner == GameOwnerEnum.Client && this.m_game.Client != null)
				{
					this.MustSendVirtualKeyboard = true;
				}
			}
		}

		// Token: 0x06003B4A RID: 15178 RVA: 0x000FF1A0 File Offset: 0x000FD3A0
		internal void ActivatePlayerDeathSlowmotion()
		{
			this.GameWorld.UpdateGameOverData(false);
			if (this.GameWorld.GameOverData.IsOver)
			{
				this.GameWorld.SlowmotionHandler.AddSlowmotion(new Slowmotion(100f, 2000f, 1000f, 0.2f, 0));
				EffectHandler.PlayEffect("CAM_S", this.Position, this.GameWorld, new object[]
				{
					0.5f,
					200f,
					false
				});
			}
		}

		// Token: 0x06003B4B RID: 15179 RVA: 0x000FF238 File Offset: 0x000FD438
		internal void StartIgnoreBodyID(int bodyID, float ms)
		{
			Filter filter;
			this.m_playerFixtureCircle.GetFilterData(out filter);
			if (filter.bodyIDToIgnore == null)
			{
				filter.bodyIDToIgnore = new Dictionary<int, ushort>();
			}
			if (!filter.bodyIDToIgnore.ContainsKey(bodyID))
			{
				filter.bodyIDToIgnore.Add(bodyID, 1);
			}
			this.m_playerFixtureCircle.SetFilterData(ref filter);
			if (this.m_ignoredBodyIDs.ContainsKey(bodyID))
			{
				if (this.m_ignoredBodyIDs[bodyID] < ms)
				{
					this.m_ignoredBodyIDs[bodyID] = ms;
					return;
				}
			}
			else
			{
				this.m_ignoredBodyIDs.Add(bodyID, ms);
			}
		}

		// Token: 0x06003B4C RID: 15180 RVA: 0x000FF2CC File Offset: 0x000FD4CC
		private void StopIgnoreBodyID(int bodyID)
		{
			Filter filter;
			this.m_playerFixtureCircle.GetFilterData(out filter);
			if (filter.bodyIDToIgnore != null && filter.bodyIDToIgnore.ContainsKey(bodyID))
			{
				filter.bodyIDToIgnore.Remove(bodyID);
				this.m_playerFixtureCircle.SetFilterData(ref filter);
			}
			if (this.m_ignoredBodyIDs.ContainsKey(bodyID))
			{
				this.m_ignoredBodyIDs.Remove(bodyID);
			}
		}

		// Token: 0x06003B4D RID: 15181 RVA: 0x000FF334 File Offset: 0x000FD534
		private void UpdateIgnoredBodyIDs(float ms)
		{
			if (this.m_ignoredBodyIDs.Count > 0)
			{
				int count = this.m_ignoredBodyIDs.Count;
				List<int> list = new List<int>(this.m_ignoredBodyIDs.Keys);
				foreach (int num in list)
				{
					Dictionary<int, float> ignoredBodyIDs;
					int key;
					(ignoredBodyIDs = this.m_ignoredBodyIDs)[key = num] = ignoredBodyIDs[key] - ms;
					if (this.m_ignoredBodyIDs[num] <= 0f)
					{
						this.StopIgnoreBodyID(num);
					}
				}
			}
		}

		// Token: 0x17000998 RID: 2456
		// (get) Token: 0x06003B4E RID: 15182 RVA: 0x000305C5 File Offset: 0x0002E7C5
		// (set) Token: 0x06003B4F RID: 15183 RVA: 0x000305CD File Offset: 0x0002E7CD
		internal bool LazerUpgradeQueued { get; set; }

		// Token: 0x17000999 RID: 2457
		// (get) Token: 0x06003B50 RID: 15184 RVA: 0x000305D6 File Offset: 0x0002E7D6
		// (set) Token: 0x06003B51 RID: 15185 RVA: 0x000305DE File Offset: 0x0002E7DE
		internal bool WeaponBouncingUpgradeQueued { get; set; }

		// Token: 0x1700099A RID: 2458
		// (get) Token: 0x06003B52 RID: 15186 RVA: 0x000305E7 File Offset: 0x0002E7E7
		// (set) Token: 0x06003B53 RID: 15187 RVA: 0x000305EF File Offset: 0x0002E7EF
		internal bool WeaponFireUpgradeQueued { get; set; }

		// Token: 0x06003B54 RID: 15188 RVA: 0x000FF3DC File Offset: 0x000FD5DC
		internal void CheckWeaponUpgradeQueued(RWeapon rw)
		{
			if (rw != null)
			{
				if (rw.LazerUpgrade == 0 && this.LazerUpgradeQueued)
				{
					rw.LazerUpgrade = 1;
					this.SyncRWeaponItem(rw);
					this.LazerUpgradeQueued = false;
				}
				if (this.WeaponBouncingUpgradeQueued && rw.Properties.CanUseBouncingBulletsPowerup)
				{
					rw.PowerupBouncingRounds = (ushort)WpnBouncingAmmo.FillSpecialAmmoToGun(rw);
					rw.PowerupFireRounds = 0;
					this.WeaponBouncingUpgradeQueued = false;
					return;
				}
				if (this.WeaponFireUpgradeQueued && rw.Properties.CanUseFireBulletsPowerup)
				{
					rw.PowerupFireRounds = (ushort)WpnBouncingAmmo.FillSpecialAmmoToGun(rw);
					rw.PowerupBouncingRounds = 0;
					this.WeaponFireUpgradeQueued = false;
				}
			}
		}

		// Token: 0x06003B55 RID: 15189 RVA: 0x000305F8 File Offset: 0x0002E7F8
		internal void SyncRWeaponItem(RWeapon rw)
		{
			if (this.GameOwner == GameOwnerEnum.Server)
			{
				GameSFD.Handle.Server.SendMessage(MessageType.PlayerReceiveItem, new NetMessage.PlayerReceiveItem.Data(this.ObjectID, rw, NetMessage.PlayerReceiveItem.ReceiveSourceType.GrabWeaponAmmo));
			}
		}

		// Token: 0x06003B56 RID: 15190 RVA: 0x00030626 File Offset: 0x0002E826
		internal void SyncThrowableWeapon()
		{
			if (this.GameOwner == GameOwnerEnum.Server && this.CurrentThrownWeapon != null)
			{
				this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, new NetMessage.PlayerReceiveItem.Data(this.ObjectID, this.CurrentThrownWeapon));
			}
		}

		// Token: 0x06003B57 RID: 15191 RVA: 0x000FF478 File Offset: 0x000FD678
		internal void GetRelativeBodyData(out Player.RelativeBodyData data)
		{
			data = default(Player.RelativeBodyData);
			data.Clear();
			if (this.IsRemoved)
			{
				return;
			}
			Body body = null;
			Fixture fixture = null;
			float fraction = 99f;
			this.GetRelativeBody(out body, out fixture, out fraction, -Microsoft.Xna.Framework.Vector2.UnitY);
			data.Down.Body = body;
			data.Down.Fixture = fixture;
			data.Down.Fraction = fraction;
			this.GetRelativeBody(out body, out fixture, out fraction, Microsoft.Xna.Framework.Vector2.UnitY);
			data.Up.Body = body;
			data.Up.Fixture = fixture;
			data.Up.Fraction = fraction;
			this.GetRelativeBody(out body, out fixture, out fraction, -Microsoft.Xna.Framework.Vector2.UnitX);
			data.Left.Body = body;
			data.Left.Fixture = fixture;
			data.Left.Fraction = fraction;
			this.GetRelativeBody(out body, out fixture, out fraction, Microsoft.Xna.Framework.Vector2.UnitX);
			data.Right.Body = body;
			data.Right.Fixture = fixture;
			data.Right.Fraction = fraction;
		}

		// Token: 0x1700099B RID: 2459
		// (get) Token: 0x06003B58 RID: 15192 RVA: 0x00030661 File Offset: 0x0002E861
		// (set) Token: 0x06003B59 RID: 15193 RVA: 0x00030669 File Offset: 0x0002E869
		internal bool ScanningRelativeBody { get; private set; }

		// Token: 0x06003B5A RID: 15194 RVA: 0x000FF584 File Offset: 0x000FD784
		internal void GetRelativeBody(out Body body, out Fixture fixture, out float fraction, Microsoft.Xna.Framework.Vector2 direction)
		{
			Body minBody = null;
			Fixture minFixture = null;
			float minFraction = 1f;
			Filter playerFilter = this.CollisionFilter;
			Microsoft.Xna.Framework.Vector2 position = this.WorldBody.GetPosition();
			Microsoft.Xna.Framework.Vector2 point2 = this.WorldBody.GetPosition() + direction * Converter.ConvertWorldToBox2D(36f);
			float num = 0.11111111f;
			this.ScanningRelativeBody = true;
			Filter testFixtureFilter;
			this.GameWorld.GetActiveWorld.RayCast(delegate(Fixture testFixture, Microsoft.Xna.Framework.Vector2 point, Microsoft.Xna.Framework.Vector2 normal, float rayFraction)
			{
				if (rayFraction >= minFraction)
				{
					return 1f;
				}
				if (testFixture != null && testFixture.GetUserData() != null && !testFixture.IsSensor() && testFixture.TileFixtureIndex != 255)
				{
					testFixture.GetFilterData(out testFixtureFilter);
					if (Settings.b2ShouldCollide(ref playerFilter, ref testFixtureFilter))
					{
						minBody = testFixture.GetBody();
						minFixture = testFixture;
						minFraction = rayFraction;
					}
					return minFraction;
				}
				return 1f;
			}, position, point2);
			this.ScanningRelativeBody = false;
			if (minFraction < num)
			{
				minFraction = num;
			}
			if (minBody != null)
			{
				body = minBody;
				fixture = minFixture;
				fraction = minFraction;
				return;
			}
			body = null;
			fixture = null;
			fraction = 1f;
		}

		// Token: 0x06003B5B RID: 15195 RVA: 0x000FF65C File Offset: 0x000FD85C
		internal void UpdateAimInput()
		{
			if (this.CurrentAction == PlayerAction.ManualAim)
			{
				bool flag = this.VirtualKeyboard.PressingKey(0, false);
				bool flag2 = this.VirtualKeyboard.PressingKey(1, false);
				if (flag ^ flag2)
				{
					if (flag)
					{
						this.AimUp();
						return;
					}
					this.AimDown();
					return;
				}
				else
				{
					this.AimStop();
				}
			}
		}

		// Token: 0x06003B5C RID: 15196 RVA: 0x000FF6AC File Offset: 0x000FD8AC
		internal void SetEndPositionInRocketRide()
		{
			if (this.m_lastRocketRideProjectile != null)
			{
				this.Position = this.m_lastRocketRideProjectile.Position - this.m_lastRocketRideProjectile.Direction * 8f;
				this.WorldBody.SetTransform(Converter.WorldToBox2D(this.Position), 0f);
				this.WorldBody.SetLinearVelocity(Microsoft.Xna.Framework.Vector2.Zero);
				this.PreBox2DPosition = this.WorldBody.GetPosition();
				this.PreBox2DLinearVelocity = Microsoft.Xna.Framework.Vector2.Zero;
			}
		}

		// Token: 0x06003B5D RID: 15197 RVA: 0x000FF734 File Offset: 0x000FD934
		internal void EndRocketRide()
		{
			this.SetEndPositionInRocketRide();
			this.RocketRideProjectileWorldID = 0;
			this.m_lastRocketRideProjectileWorldId = 0;
			this.m_lastRocketRideProjectile = null;
			if (this.m_polygonFixtureDisabledDuringRocketRiding)
			{
				this.m_polygonFixtureDisabledDuringRocketRiding = false;
				this.m_playerFilterCollision.disableCloudCollision = false;
				this.m_playerFixtureCircle.SetFilterData(ref this.m_playerFilterCollision);
				this.m_playerFixturePolygon.SetFilterData(ref this.m_playerFilterCollision);
			}
			this.Fall();
			this.ForceServerPositionState();
			this.ForceServerMovementState(10);
		}

		// Token: 0x06003B5E RID: 15198 RVA: 0x00030672 File Offset: 0x0002E872
		private void InitOverHealth()
		{
			if (!this.IsDead && this.RocketRideProjectileWorldID == 0 && !this.StrengthBoostActive)
			{
				this.OverHealth.Fullness = 1f;
			}
		}

		// Token: 0x06003B5F RID: 15199 RVA: 0x0003069C File Offset: 0x0002E89C
		public ObjectData DisarmActiveThrowable(Microsoft.Xna.Framework.Vector2 power)
		{
			return this.DropThrowable(power);
		}

		// Token: 0x06003B60 RID: 15200 RVA: 0x000FF7B0 File Offset: 0x000FD9B0
		public ObjectWeaponItem Disarm(SFD.Weapons.WeaponItemType weaponType, int directionToDrop, Microsoft.Xna.Framework.Vector2 power, bool ignoreHolsteredModel, out ObjectData disarmedLiveGrenade)
		{
			disarmedLiveGrenade = null;
			if (weaponType == SFD.Weapons.WeaponItemType.Thrown)
			{
				ObjectData objectData = this.DropThrowable(power);
				if (objectData != null)
				{
					if (objectData is ObjectWeaponItem)
					{
						return (ObjectWeaponItem)objectData;
					}
					disarmedLiveGrenade = objectData;
					return null;
				}
			}
			ObjectWeaponItem result = this.DropWeaponItem(weaponType, (directionToDrop == -1) ? -1 : 1, power, ignoreHolsteredModel);
			this.InThrowingMode = false;
			return result;
		}

		// Token: 0x06003B61 RID: 15201 RVA: 0x000FF800 File Offset: 0x000FDA00
		internal void BeginRocketRide(ProjectileBazooka projectileBazooka)
		{
			this.CheckThrowableDisarm();
			this.DropGrabbedPlayer(null, false, false, true);
			this.DropCaughtByPlayer();
			this.DropWeaponItem(this.CurrentWeaponDrawn, (projectileBazooka.Direction.X > 0f) ? 1 : -1, new Microsoft.Xna.Framework.Vector2(1.75f), true);
			this.InThrowingMode = false;
			this.InitOverHealth();
			this.Energy.CurrentValue = 100f;
			this.CurrentAction = PlayerAction.Disabled;
			this.InAir = true;
			this.TakingCover = false;
			this.Sprinting = false;
			this.Rolling = false;
			this.Diving = false;
			this.DisableGrabbing(false);
			this.Falling = false;
			this.LayingOnGround = false;
			this.DeathKneeling = false;
			this.Climbing = false;
			this.StandingOnGround = false;
			this.FullLanding = false;
			this.Rotation = 0f;
			this.DiveRotation = 0f;
			this.LastDirectionX = -projectileBazooka.LastDirectionX;
			this.Shake.Start(150f);
		}

		// Token: 0x06003B62 RID: 15202 RVA: 0x00002B52 File Offset: 0x00000D52
		internal void AutomaticGrabWeaponItems()
		{
		}

		// Token: 0x06003B63 RID: 15203 RVA: 0x000FF908 File Offset: 0x000FDB08
		internal ObjectData GetClosestActivateableObject(bool activateableFlag, bool activateableHighlightFlag, float cacheTime, float elapsedTime)
		{
			if (this.IsRemoved)
			{
				return null;
			}
			if (this.IsDead)
			{
				return null;
			}
			if (cacheTime > 0f && this.m_closestActivateableObjectCacheTime > 0f)
			{
				this.m_closestActivateableObjectCacheTime -= elapsedTime;
				if (this.m_closestActivateableObjectCacheObject != null && !this.m_closestActivateableObjectCacheObject.TerminationInitiated && !this.m_closestActivateableObjectCacheObject.IsDisposed)
				{
					return this.m_closestActivateableObjectCacheObject;
				}
				return null;
			}
			else
			{
				ObjectData od = null;
				ObjectData closest = null;
				float closestDist = 999f;
				AABB aabb;
				this.GetAABBWhole(out aabb);
				aabb.Grow(2f);
				this.WorldBody.GetWorld().QueryAABB(delegate(Fixture fixture)
				{
					if (fixture != null && fixture.GetUserData() != null && !fixture.IsSensor())
					{
						od = ObjectData.Read(fixture);
						if (!od.TerminationInitiated && ((activateableFlag && od.ActivateableForPlayer(this)) || (activateableHighlightFlag && od.ActivateableHighlightningForPlayer(this))))
						{
							if (od.MissileData != null)
							{
								Microsoft.Xna.Framework.Vector2 x = od.Body.GetLinearVelocity() - this.WorldBody.GetLinearVelocity();
								if (x.CalcSafeLength() > 7f)
								{
									return true;
								}
							}
							float num = Microsoft.Xna.Framework.Vector2.Distance(od.Body.GetPosition(), this.WorldBody.GetPosition());
							if (num < closestDist)
							{
								closestDist = num;
								closest = od;
							}
						}
					}
					return true;
				}, ref aabb);
				this.m_closestActivateableObjectCacheTime = cacheTime;
				if (closest != null && closestDist <= Converter.WorldToBox2D(closest.ActivateRange))
				{
					this.m_closestActivateableObjectCacheObject = closest;
					return closest;
				}
				this.m_closestActivateableObjectCacheObject = null;
				return null;
			}
		}

		// Token: 0x06003B64 RID: 15204 RVA: 0x000FFA20 File Offset: 0x000FDC20
		internal void ActivateObject()
		{
			ObjectData closestActivateableObject = this.GetClosestActivateableObject(true, false, 0f, 0f);
			if (closestActivateableObject != null)
			{
				closestActivateableObject.Activate(this.ObjectData);
			}
		}

		// Token: 0x06003B65 RID: 15205 RVA: 0x000FFA50 File Offset: 0x000FDC50
		private void PerformMeleeHit()
		{
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				if (!this.HasLocalControl)
				{
					return;
				}
				if (this.CurrentAction == PlayerAction.JumpAttack)
				{
					this.SyncClientAction(ClientActionType.JumpAttackHit);
				}
			}
			this.m_gameWorld.MeleeAddPlayerHit(this);
			this.DrainEnergy(5f);
			this.TimeSequence.DisableActionsAfterMelee(this.CurrentAction);
		}

		// Token: 0x06003B66 RID: 15206 RVA: 0x000FFAA8 File Offset: 0x000FDCA8
		private void PerformKickHit()
		{
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				if (!this.HasLocalControl)
				{
					return;
				}
				if (this.CurrentAction == PlayerAction.JumpKick)
				{
					this.SyncClientAction(ClientActionType.JumpKickHit);
				}
			}
			this.m_gameWorld.KickAddPlayerHit(this);
			if (this.CurrentAction == PlayerAction.JumpKick)
			{
				this.FireSequence.KickCooldownTimer += 700f;
			}
			else
			{
				this.FireSequence.KickCooldownTimer += 550f;
			}
			this.DrainEnergy(5f);
			this.TimeSequence.DisableActionsAfterMelee(this.CurrentAction);
		}

		// Token: 0x06003B67 RID: 15207 RVA: 0x000FFB38 File Offset: 0x000FDD38
		private void SyncServerAction(ServerActionType action)
		{
			NetMessage.ServerAction.Data data = default(NetMessage.ServerAction.Data);
			data.PlayerID = this.ObjectID;
			data.Action = action;
			this.m_game.Server.SendMessage(MessageType.ServerAction, data);
		}

		// Token: 0x06003B68 RID: 15208 RVA: 0x000FFB7C File Offset: 0x000FDD7C
		internal void HandleServerAction(ServerActionType action)
		{
			if (action != ServerActionType.ThrowBeforeBeginChargeEvent)
			{
				return;
			}
			if (this.CurrentThrownWeapon != null)
			{
				TWeaponBeforeBeginChargeArgs e = new TWeaponBeforeBeginChargeArgs(this, this.CurrentThrownWeapon);
				this.CurrentThrownWeapon.OnBeforeBeginCharge(e);
			}
		}

		// Token: 0x06003B69 RID: 15209 RVA: 0x000FFBB4 File Offset: 0x000FDDB4
		private void SyncClientAction(ClientActionType action)
		{
			NetMessage.ClientAction.Data data = default(NetMessage.ClientAction.Data);
			data.PlayerID = this.ObjectID;
			data.Action = action;
			this.m_game.Client.SendMessage(MessageType.ClientAction, data);
		}

		// Token: 0x06003B6A RID: 15210 RVA: 0x000FFBF8 File Offset: 0x000FDDF8
		internal void HandleClientAction(ClientActionType action)
		{
			if (action <= ClientActionType.Roll)
			{
				switch (action)
				{
				case ClientActionType.JumpAttackHit:
					if (this.CurrentAction != PlayerAction.JumpAttack && this.CurrentAction != PlayerAction.HipFire && this.CurrentAction != PlayerAction.ManualAim && !this.Falling && !this.LayingOnGround && !this.IsGrabbedByPlayer && !this.IsCaughtByPlayer && !this.m_havePerformedJumpAttack)
					{
						this.PerformMeleeHit();
						return;
					}
					break;
				case ClientActionType.JumpKickHit:
					if (this.CurrentAction != PlayerAction.JumpKick && this.CurrentAction != PlayerAction.HipFire && this.CurrentAction != PlayerAction.ManualAim && !this.Falling && !this.LayingOnGround && !this.IsGrabbedByPlayer && !this.IsCaughtByPlayer && !this.m_havePerformedJumpAttack)
					{
						this.PerformKickHit();
					}
					break;
				case (ClientActionType)3:
					break;
				case ClientActionType.Dive:
					if (this.CanDive())
					{
						this.Dive();
						this.ForceServerMovementState(5);
						return;
					}
					break;
				default:
					if (action != ClientActionType.Roll)
					{
						return;
					}
					if (this.CanRoll())
					{
						this.Roll(false);
						this.ForceServerMovementState(5);
						return;
					}
					break;
				}
			}
			else if (action != ClientActionType.RecoveryRoll)
			{
				if (action != ClientActionType.Jump)
				{
					return;
				}
				this.Statisticts.m_TotalJumps++;
				this.m_timeSinceLastJump = 0f;
				return;
			}
			else if (this.CanRecoveryRoll())
			{
				this.RecoveryRoll();
				this.ForceServerMovementState(5);
				return;
			}
		}

		// Token: 0x06003B6B RID: 15211 RVA: 0x000FFD54 File Offset: 0x000FDF54
		internal void JumpAttack(bool forceState = false)
		{
			if (forceState || (this.CurrentAction == PlayerAction.Idle && this.FireSequence.KickCooldownTimer <= 800f))
			{
				this.Sprinting = false;
				this.CurrentAction = PlayerAction.JumpAttack;
				this.FireSequence.KickCooldownTimer += 700f;
				this.MinimumMeleeHitFrameTime = 85f;
				this.ImportantUpdate = true;
				this.ForceClientMovementState(10);
			}
		}

		// Token: 0x06003B6C RID: 15212 RVA: 0x000FFDC0 File Offset: 0x000FDFC0
		internal void MeleeAttack1()
		{
			this.CurrentAction = PlayerAction.MeleeAttack1;
			this.Sprinting = false;
			this.ForceClientMovementState(2);
			if (this.StandingOnGround)
			{
				this.ForceServerMovementState(5);
				this.ForceClientMovementState(6);
			}
			this.MinimumMeleeHitFrameTime = 85f;
			this.ImportantUpdate = true;
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				this.FreezeAnimationOnAction = this.CurrentAction;
			}
		}

		// Token: 0x06003B6D RID: 15213 RVA: 0x000FFE20 File Offset: 0x000FE020
		internal bool CanIgnoreObjectImpact(ObjectData od)
		{
			if (this.m_tempIgnoreObjectImpacts.Count > 0)
			{
				for (int i = 0; i < this.m_tempIgnoreObjectImpacts.Count; i++)
				{
					if (this.m_tempIgnoreObjectImpacts[i].ItemA == od)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x06003B6E RID: 15214 RVA: 0x000FFE6C File Offset: 0x000FE06C
		private void UpdateIgnoreObjectsImpacts(float ms)
		{
			for (int i = this.m_tempIgnoreObjectImpacts.Count - 1; i >= 0; i--)
			{
				this.m_tempIgnoreObjectImpacts[i].ItemB -= ms;
				if (this.m_tempIgnoreObjectImpacts[i].ItemB <= 0f)
				{
					this.m_tempIgnoreObjectImpacts.RemoveAt(i);
				}
			}
		}

		// Token: 0x06003B6F RID: 15215 RVA: 0x000FFED0 File Offset: 0x000FE0D0
		private void AddIgnoreObjectsImpacts(ObjectData od, Fixture fixture)
		{
			if ((this.WorldBody.GetLinearVelocity() - fixture.GetBody().GetLinearVelocity()).Length() < 3f)
			{
				this.m_tempIgnoreObjectImpacts.Add(new Pair<ObjectData, float>(od, Math.Max(this.GetAverageRoundtripTime() + 100f, 300f)));
			}
		}

		// Token: 0x06003B70 RID: 15216 RVA: 0x000FFF30 File Offset: 0x000FE130
		private void UpdateAntiKicking()
		{
			List<int> list = null;
			foreach (KeyValuePair<int, float> keyValuePair in this.m_recentlyHitObjectsInKick)
			{
				if (keyValuePair.Value <= this.GameWorld.ElapsedTotalRealTime - 300f)
				{
					if (list == null)
					{
						list = new List<int>();
					}
					list.Add(keyValuePair.Key);
				}
			}
			if (list != null)
			{
				foreach (int key in list)
				{
					this.m_recentlyHitObjectsInKick.Remove(key);
				}
			}
		}

		// Token: 0x06003B71 RID: 15217 RVA: 0x000FFFF8 File Offset: 0x000FE1F8
		internal bool HitObjectsInKick()
		{
			if (this.InAir && this.m_havePerformedJumpAttack)
			{
				return false;
			}
			this.m_havePerformedJumpAttack = true;
			this.DeflectBulletFrameWindowTime = 100f;
			this.DeflectBulletFirstAttackFrameWindow = true;
			this.LastKickHitPlayerID = 0;
			if (this.GameOwner != GameOwnerEnum.Client)
			{
				this.Statisticts.m_TotalKickSwings++;
			}
			if (this.StandingOnGround)
			{
				this.m_ignoreStandingOnBodyVelocityTimer = Math.Max(350f, this.GetAverageRoundtripTime() + 100f);
			}
			AABB aabb;
			this.GetAABBKick(out aabb);
			bool flag = false;
			Box2D.XNA.RayCastInput rciDynamic = default(Box2D.XNA.RayCastInput);
			rciDynamic.p1 = aabb.GetCenter();
			rciDynamic.p2 = aabb.GetCenter();
			if (this.LastDirectionX == 1)
			{
				rciDynamic.p1.X = aabb.lowerBound.X;
				rciDynamic.p2.X = aabb.upperBound.X;
			}
			else
			{
				rciDynamic.p1.X = aabb.upperBound.X;
				rciDynamic.p2.X = aabb.lowerBound.X;
			}
			float hitDamage = 0f;
			Microsoft.Xna.Framework.Vector2 sourceStartPos = Converter.ConvertBox2DToWorld(rciDynamic.p1);
			HashSet<ObjectData> hashSet = new HashSet<ObjectData>();
			GameWorld.RayCastResult rayCastResult = this.HitObjectsScanWallResult(hashSet, sourceStartPos, false, PlayerHitAction.Kick, ref flag, ref aabb, out hitDamage);
			hashSet.Clear();
			List<PlayerMeleeHitArg> list = null;
			if (this.GameWorld.ScriptCallbackExists_PlayerMeleeAction)
			{
				list = new List<PlayerMeleeHitArg>();
			}
			Material material = this.GetPlayerHitMaterial();
			if (material == null)
			{
				material = Player.m_meleeFeet.Properties.WeaponMaterial;
			}
			if (rayCastResult.EndFixture != null)
			{
				ObjectData objectData = ObjectData.Read(rayCastResult.EndFixture);
				Material.HandleMeleeVsObject(material, objectData, rayCastResult.EndFixture, PlayerHitAction.Kick, rayCastResult.EndPosition, this.GameWorld);
				if (list != null)
				{
					list.Add(new PlayerMeleeHitArg(objectData.ObjectID, objectData.ScriptBridge, rayCastResult.EndPosition.ToSFDVector2(), false, hitDamage));
				}
				flag = true;
			}
			Box2D.XNA.RayCastInput rciStatic1 = default(Box2D.XNA.RayCastInput);
			Box2D.XNA.RayCastInput rciStatic2 = default(Box2D.XNA.RayCastInput);
			Box2D.XNA.RayCastInput rciStatic3 = default(Box2D.XNA.RayCastInput);
			RayCastOutput rco = default(RayCastOutput);
			float wallDistance = (rayCastResult.EndPosition - sourceStartPos).Length();
			rciDynamic.p2 = Converter.ConvertWorldToBox2D(rayCastResult.EndPosition);
			rciDynamic.maxFraction = 1f;
			rciStatic1.p1 = rciDynamic.p1;
			rciStatic2.p1 = rciDynamic.p1;
			rciStatic3.p1 = rciDynamic.p1;
			rciStatic1.maxFraction = 1f;
			rciStatic2.maxFraction = 1f;
			rciStatic3.maxFraction = 1f;
			rciStatic1.p2 = rciDynamic.p2;
			rciStatic1.p2.Y = aabb.lowerBound.Y;
			rciStatic2.p2 = rciDynamic.p2;
			rciStatic3.p2 = rciDynamic.p2;
			rciStatic3.p2.Y = aabb.upperBound.Y;
			sourceStartPos = Converter.WorldToBox2D(sourceStartPos);
			wallDistance = Converter.WorldToBox2D(wallDistance);
			Dictionary<ObjectData, Player.HitObjectInMelee> hitObjects = new Dictionary<ObjectData, Player.HitObjectInMelee>();
			this.WorldBody.GetWorld().QueryAABB(delegate(Fixture fixture)
			{
				if (fixture != null && fixture.GetUserData() != null && !fixture.IsSensor())
				{
					ObjectData objectData3 = ObjectData.Read(fixture);
					Filter filter;
					fixture.GetFilterData(out filter);
					bool flag2;
					if ((flag2 = filter.kickable) && objectData3.Body == this.StandingOnBody)
					{
						flag2 = filter.kickableTop;
					}
					if (this.m_recentlyHitObjectsInKick.ContainsKey(objectData3.ObjectID))
					{
						flag2 = false;
					}
					if (objectData3 != this.ObjectData && flag2 && (objectData3.Body.GetType() == Box2D.XNA.BodyType.Dynamic || (objectData3.Body.GetType() == Box2D.XNA.BodyType.Static && objectData3.Destructable) || objectData3.IsPlayer))
					{
						float num = 1f;
						bool flag3 = false;
						Microsoft.Xna.Framework.Vector2 vector2 = rciDynamic.p1;
						rciDynamic.p2 = fixture.GetBody().GetPosition();
						if (fixture.TestPoint(rciDynamic.p1))
						{
							num = 0f;
							flag3 = true;
						}
						else if (fixture.RayCast(out rco, ref rciDynamic))
						{
							num = rco.fraction;
							vector2 = rciDynamic.GetHitPosition(rco.fraction);
							flag3 = (aabb.Contains(ref vector2) && (vector2 - sourceStartPos).CalcSafeLength() <= wallDistance);
						}
						if (!flag3 && objectData3.IsPlayer)
						{
							Player player2 = (Player)objectData3.InternalData;
							AABB aabb2;
							player2.GetAABBSpecialKickFriendlyBox(out aabb2);
							if (aabb2.Contains(ref rciStatic1.p1))
							{
								num = 0f;
								flag3 = true;
							}
							else if (aabb2.RayCast(out rco, ref rciStatic1))
							{
								num = rco.fraction;
								vector2 = rciStatic1.GetHitPosition(rco.fraction);
								flag3 = true;
							}
							else if (aabb2.Contains(ref rciStatic2.p1))
							{
								num = 0f;
								flag3 = true;
							}
							else if (aabb2.RayCast(out rco, ref rciStatic2))
							{
								num = rco.fraction;
								vector2 = rciStatic2.GetHitPosition(rco.fraction);
								flag3 = true;
							}
							else if (aabb2.Contains(ref rciStatic3.p1))
							{
								num = 0f;
								flag3 = true;
							}
							else if (aabb2.RayCast(out rco, ref rciStatic3))
							{
								num = rco.fraction;
								vector2 = rciStatic3.GetHitPosition(rco.fraction);
								flag3 = true;
							}
						}
						if (!flag3)
						{
							if (fixture.RayCast(out rco, ref rciStatic2))
							{
								num = rco.fraction;
								vector2 = rciStatic1.GetHitPosition(rco.fraction);
								flag3 = true;
							}
							else if (fixture.RayCast(out rco, ref rciStatic1))
							{
								num = rco.fraction;
								vector2 = rciStatic1.GetHitPosition(rco.fraction);
								flag3 = true;
							}
							else if (fixture.RayCast(out rco, ref rciStatic3))
							{
								num = rco.fraction;
								vector2 = rciStatic1.GetHitPosition(rco.fraction);
								flag3 = true;
							}
						}
						if (flag3)
						{
							if (!hitObjects.ContainsKey(objectData3))
							{
								hitObjects.Add(objectData3, new Player.HitObjectInMelee(num, vector2, fixture, objectData3));
							}
							else
							{
								Player.HitObjectInMelee hitObjectInMelee = hitObjects[objectData3];
								if (num < hitObjectInMelee.Fraction)
								{
									hitObjectInMelee.Fraction = num;
									hitObjectInMelee.Fixture = fixture;
									hitObjectInMelee.HitPos = vector2;
									hitObjectInMelee.ObjectData = objectData3;
								}
							}
						}
					}
				}
				return true;
			}, ref aabb);
			foreach (KeyValuePair<ObjectData, Player.HitObjectInMelee> keyValuePair in hitObjects)
			{
				ObjectData objectData2 = keyValuePair.Value.ObjectData;
				if (objectData2 != null && !objectData2.IsDisposed)
				{
					Microsoft.Xna.Framework.Vector2 vector = Converter.ConvertBox2DToWorld(keyValuePair.Value.HitPos);
					Fixture fixture2 = keyValuePair.Value.Fixture;
					this.m_recentlyHitObjectsInKick.Add(objectData2.ObjectID, this.GameWorld.ElapsedTotalRealTime);
					if (objectData2.IsPlayer)
					{
						Player player = (Player)objectData2.InternalData;
						if (!player.IsDead && this.InSameTeam(player))
						{
							continue;
						}
						AABB aabb3;
						player.GetAABBSpecialKickFriendlyBox(out aabb3);
						if (!AABB.TestOverlap(ref aabb, ref aabb3))
						{
							continue;
						}
					}
					this.AddIgnoreObjectsImpacts(objectData2, fixture2);
					PlayerBeforeHitEventArgs playerBeforeHitEventArgs = new PlayerBeforeHitEventArgs(PlayerHitAction.Kick, fixture2, vector, 5f * this.MeleeDamageDealtModifier);
					objectData2.BeforePlayerMeleeHit(this, playerBeforeHitEventArgs);
					if (!playerBeforeHitEventArgs.Cancel)
					{
						PlayerHitEventArgs playerHitEventArgs = new PlayerHitEventArgs(PlayerHitAction.Kick, fixture2, vector, 5f * this.MeleeDamageDealtModifier);
						objectData2.PlayerMeleeHit(this, playerHitEventArgs);
						if (playerHitEventArgs.HitSomething)
						{
							if (objectData2.GameOwner == GameOwnerEnum.Server)
							{
								objectData2.GameWorld.AddForcedPositionUpdate(objectData2.BodyData);
							}
							this.GameWorld.TrackKickedObject(this, objectData2);
							this.AddMissileObjectAndIgnoreTeammates(objectData2, ObjectMissileStatus.Dropped, true);
							if (list != null)
							{
								list.Add(new PlayerMeleeHitArg(objectData2.ObjectID, objectData2.ScriptBridge, vector.ToSFDVector2(), objectData2.IsPlayer, playerHitEventArgs.ImpactDamage));
							}
						}
						if (playerHitEventArgs.ShowDefaultEffects)
						{
							Material.HandleMeleeVsObject(material, objectData2, fixture2, PlayerHitAction.Kick, vector, this.GameWorld);
						}
						flag |= playerHitEventArgs.HitSomething;
					}
				}
			}
			hitObjects.Clear();
			hitObjects = null;
			if (list != null && this.GameOwner != GameOwnerEnum.Client)
			{
				this.GameWorld.RunScriptOnPlayerMeleeActionCallbacks(this, list);
				list.Clear();
				list = null;
			}
			return flag;
		}

		// Token: 0x1700099C RID: 2460
		// (get) Token: 0x06003B72 RID: 15218 RVA: 0x000306A5 File Offset: 0x0002E8A5
		// (set) Token: 0x06003B73 RID: 15219 RVA: 0x000306AD File Offset: 0x0002E8AD
		internal HashSet<ObjectData> LastObjectsHitInMelee { get; private set; }

		// Token: 0x1700099D RID: 2461
		// (get) Token: 0x06003B74 RID: 15220 RVA: 0x000306B6 File Offset: 0x0002E8B6
		// (set) Token: 0x06003B75 RID: 15221 RVA: 0x000306BE File Offset: 0x0002E8BE
		internal int LastMeleeHitPlayerID { get; private set; }

		// Token: 0x1700099E RID: 2462
		// (get) Token: 0x06003B76 RID: 15222 RVA: 0x000306C7 File Offset: 0x0002E8C7
		// (set) Token: 0x06003B77 RID: 15223 RVA: 0x000306CF File Offset: 0x0002E8CF
		internal int LastKickHitPlayerID { get; private set; }

		// Token: 0x1700099F RID: 2463
		// (get) Token: 0x06003B78 RID: 15224 RVA: 0x000306D8 File Offset: 0x0002E8D8
		// (set) Token: 0x06003B79 RID: 15225 RVA: 0x000306E0 File Offset: 0x0002E8E0
		internal Microsoft.Xna.Framework.Vector2 LastMeleeHitBox2DPosition { get; private set; }

		// Token: 0x170009A0 RID: 2464
		// (get) Token: 0x06003B7A RID: 15226 RVA: 0x000306E9 File Offset: 0x0002E8E9
		// (set) Token: 0x06003B7B RID: 15227 RVA: 0x000306F1 File Offset: 0x0002E8F1
		internal int LastMeleeHitDirection { get; private set; }

		// Token: 0x06003B7C RID: 15228 RVA: 0x0010064C File Offset: 0x000FE84C
		internal bool HitObjectsInMelee(bool checkOnly = false, Func<ObjectData, bool> hitFilter = null)
		{
			if ((!checkOnly & this.InAir) && this.m_havePerformedJumpAttack)
			{
				return false;
			}
			this.m_havePerformedJumpAttack = true;
			this.DiveAttackFrameWindowTime = 275f;
			this.DeflectBulletFrameWindowTime = 100f;
			this.DeflectBulletFirstAttackFrameWindow = true;
			this.LastMeleeHitPlayerID = 0;
			this.LastMeleeHitBox2DPosition = this.PreBox2DPosition;
			this.LastMeleeHitDirection = this.LastDirectionX;
			if (this.GameOwner != GameOwnerEnum.Client)
			{
				this.Statisticts.m_TotalMeleeAttackSwings++;
			}
			bool flag = false;
			AABB aabb;
			this.GetAABBMeleeAttack(out aabb, false);
			float hitDamage = 0f;
			Microsoft.Xna.Framework.Vector2 vector = new Microsoft.Xna.Framework.Vector2(this.Position.X, Converter.ConvertBox2DToWorld(aabb.GetCenter().Y));
			this.LastObjectsHitInMelee.Clear();
			GameWorld.RayCastResult rayCastResult = this.HitObjectsScanWallResult(this.LastObjectsHitInMelee, vector, checkOnly, PlayerHitAction.Punch, ref flag, ref aabb, out hitDamage);
			if (checkOnly && flag)
			{
				return true;
			}
			List<PlayerMeleeHitArg> list = null;
			if (this.GameWorld.ScriptCallbackExists_PlayerMeleeAction)
			{
				list = new List<PlayerMeleeHitArg>();
			}
			if (rayCastResult.EndFixture != null)
			{
				if (!checkOnly)
				{
					ObjectData objectData = ObjectData.Read(rayCastResult.EndFixture);
					if (hitFilter == null || hitFilter(objectData))
					{
						Material material = this.GetPlayerHitMaterial();
						if (material == null || this.GetCurrentMeleeWeaponInUse(false) != this.CurrentMeleeFists)
						{
							material = this.GetCurrentMeleeWeaponInUse(false).Properties.WeaponMaterial;
						}
						Material.HandleMeleeVsObject(material, objectData, rayCastResult.EndFixture, PlayerHitAction.Punch, rayCastResult.EndPosition, this.GameWorld);
					}
					if (list != null)
					{
						list.Add(new PlayerMeleeHitArg(objectData.ObjectID, objectData.ScriptBridge, rayCastResult.EndPosition.ToSFDVector2(), false, hitDamage));
					}
				}
				flag = true;
			}
			Box2D.XNA.RayCastInput rciStatic = default(Box2D.XNA.RayCastInput);
			Box2D.XNA.RayCastInput rciStaticDown = default(Box2D.XNA.RayCastInput);
			Box2D.XNA.RayCastInput rciStaticUp = default(Box2D.XNA.RayCastInput);
			Box2D.XNA.RayCastInput rciDynamic = default(Box2D.XNA.RayCastInput);
			RayCastOutput rco = default(RayCastOutput);
			float wallDistance = Converter.ConvertWorldToBox2D((float)Math.Sqrt(Math.Pow((double)(rayCastResult.EndPosition - vector).X, 2.0) + Math.Pow((double)((rayCastResult.EndPosition - vector).Y * 0.5f), 2.0)));
			rciStatic.p1 = Converter.ConvertWorldToBox2D(vector);
			rciStatic.p2 = Converter.ConvertWorldToBox2D(rayCastResult.EndPosition);
			rciStatic.maxFraction = 1f;
			rciDynamic.p1 = Converter.ConvertWorldToBox2D(vector);
			rciDynamic.p2 = Converter.ConvertWorldToBox2D(rayCastResult.EndPosition);
			rciDynamic.maxFraction = 1f;
			rciStaticDown.p1 = rciStatic.p1;
			rciStaticDown.p2 = rciStatic.p2;
			rciStaticDown.p2.Y = aabb.lowerBound.Y;
			rciStaticDown.maxFraction = 1f;
			rciStaticUp.p1 = rciStatic.p1;
			rciStaticUp.p2 = rciStatic.p2;
			rciStaticUp.p2.Y = aabb.upperBound.Y;
			rciStaticUp.maxFraction = 1f;
			Dictionary<ObjectData, Player.HitObjectInMelee> hitObjects = new Dictionary<ObjectData, Player.HitObjectInMelee>();
			this.GameWorld.GetActiveWorld.QueryAABB(delegate(Fixture fixture)
			{
				if (fixture != null && fixture.GetUserData() != null && !fixture.IsSensor())
				{
					ObjectData objectData3 = ObjectData.Read(fixture);
					Filter filter;
					fixture.GetFilterData(out filter);
					if ((filter.punchable & objectData3.Body != this.StandingOnBody) && (fixture.GetBody().GetType() == Box2D.XNA.BodyType.Dynamic || objectData3.Destructable || objectData3.IsPlayer) && objectData3 != this.ObjectData)
					{
						float num = 1f;
						bool flag2 = false;
						Microsoft.Xna.Framework.Vector2 vector3 = rciStatic.p1;
						if (objectData3.IsPlayer)
						{
							Player player2 = (Player)objectData3.InternalData;
							if (player2 != null)
							{
								AABB aabb2;
								player2.GetAABBWholeMeleeHitbox(out aabb2);
								if (aabb2.Contains(ref rciStatic.p1))
								{
									num = 0f;
									flag2 = true;
								}
								else if (aabb2.RayCast(out rco, ref rciStaticDown))
								{
									num = rco.fraction;
									vector3 = rciStaticDown.GetHitPosition(rco.fraction);
									flag2 = true;
								}
								else if (aabb2.RayCast(out rco, ref rciStaticUp))
								{
									num = rco.fraction;
									vector3 = rciStaticUp.GetHitPosition(rco.fraction);
									flag2 = true;
								}
							}
						}
						else if (fixture.RayCast(out rco, ref rciStatic))
						{
							vector3 = rciStatic.GetHitPosition(rco.fraction);
							num = rco.fraction;
							flag2 = true;
						}
						else if (fixture.TestPoint(rciStatic.p1))
						{
							num = 0f;
							flag2 = true;
						}
						else if (!objectData3.IsPlayer)
						{
							rciDynamic.p2 = fixture.GetBody().GetPosition();
							Microsoft.Xna.Framework.Vector2 vector4 = rciDynamic.p2 - rciDynamic.p1;
							if (SFDMath.IsValid(vector4.X) && Math.Sign(vector4.X) == Math.Sign(this.LastDirectionX) && fixture.RayCast(out rco, ref rciDynamic))
							{
								vector3 = rciDynamic.GetHitPosition(rco.fraction);
								float num2 = (vector3 - rciDynamic.p1).Length();
								if (num2 <= wallDistance)
								{
									num = num2 / wallDistance;
									flag2 = true;
								}
							}
						}
						if (!flag2 && !objectData3.IsPlayer)
						{
							if (fixture.RayCast(out rco, ref rciStaticDown))
							{
								num = rco.fraction;
								vector3 = rciStaticDown.GetHitPosition(rco.fraction);
								flag2 = true;
							}
							if (fixture.RayCast(out rco, ref rciStaticUp))
							{
								num = rco.fraction;
								vector3 = rciStaticUp.GetHitPosition(rco.fraction);
								flag2 = true;
							}
						}
						if (flag2)
						{
							if (!hitObjects.ContainsKey(objectData3))
							{
								hitObjects.Add(objectData3, new Player.HitObjectInMelee(num, vector3, fixture, objectData3));
							}
							else
							{
								Player.HitObjectInMelee hitObjectInMelee = hitObjects[objectData3];
								if (num < hitObjectInMelee.Fraction)
								{
									hitObjectInMelee.Fraction = num;
									hitObjectInMelee.Fixture = fixture;
									hitObjectInMelee.HitPos = vector3;
									hitObjectInMelee.ObjectData = objectData3;
								}
							}
						}
					}
				}
				return true;
			}, ref aabb);
			if (this.m_grabbedPlayerForceHit != null && this.GrabAttacking)
			{
				if (!this.m_grabbedPlayerForceHit.IsDisposed && !this.m_grabbedPlayerForceHit.IsRemoved && !this.m_grabbedPlayerForceHit.ObjectData.TerminationInitiated && !hitObjects.ContainsKey(this.m_grabbedPlayerForceHit.ObjectData))
				{
					hitObjects.Add(this.m_grabbedPlayerForceHit.ObjectData, new Player.HitObjectInMelee(0f, rciStatic.p1, this.m_grabbedPlayerForceHit.GetFixtureCircle(), this.m_grabbedPlayerForceHit.ObjectData));
				}
				this.m_grabbedPlayerForceHit = null;
			}
			HashSet<int> hashSet = null;
			foreach (KeyValuePair<ObjectData, Player.HitObjectInMelee> keyValuePair in from q in hitObjects
			orderby q.Value.Fraction
			select q)
			{
				if (hitFilter == null || hitFilter(keyValuePair.Key))
				{
					if (keyValuePair.Value.ObjectData.IsPlayer)
					{
						Player player = (Player)keyValuePair.Value.ObjectData.InternalData;
						if (player.IsGrabbedByPlayer)
						{
							if (hashSet == null)
							{
								hashSet = new HashSet<int>();
							}
							hashSet.Add(player.GrabbedByPlayerID);
						}
						else if (player.IsHoldingPlayerInGrab)
						{
							if (hashSet == null)
							{
								hashSet = new HashSet<int>();
							}
							hashSet.Add(player.HoldingPlayerInGrabID);
						}
					}
					if (hashSet == null || !hashSet.Contains(keyValuePair.Value.ObjectData.ObjectID))
					{
						Microsoft.Xna.Framework.Vector2 vector2 = Converter.ConvertBox2DToWorld(keyValuePair.Value.HitPos);
						Fixture fixture2 = keyValuePair.Value.Fixture;
						ObjectData objectData2 = keyValuePair.Value.ObjectData;
						this.AddIgnoreObjectsImpacts(objectData2, fixture2);
						MWeaponProperties properties = this.GetCurrentMeleeWeaponInUse(false).Properties;
						float impactDamage = (keyValuePair.Value.ObjectData.IsPlayer ? properties.DamagePlayers : properties.DamageObjects) * this.MeleeDamageDealtModifier;
						PlayerBeforeHitEventArgs playerBeforeHitEventArgs = new PlayerBeforeHitEventArgs(PlayerHitAction.Punch, fixture2, vector2, impactDamage);
						if (!checkOnly)
						{
							keyValuePair.Value.ObjectData.BeforePlayerMeleeHit(this, playerBeforeHitEventArgs);
						}
						if (!playerBeforeHitEventArgs.Cancel)
						{
							PlayerHitEventArgs playerHitEventArgs = new PlayerHitEventArgs(PlayerHitAction.Punch, fixture2, vector2, impactDamage);
							if (!checkOnly)
							{
								keyValuePair.Value.ObjectData.PlayerMeleeHit(this, playerHitEventArgs);
								if (playerHitEventArgs.HitSomething)
								{
									if (objectData2.GameOwner == GameOwnerEnum.Server)
									{
										objectData2.GameWorld.AddForcedPositionUpdate(objectData2.BodyData);
									}
									this.LastObjectsHitInMelee.Add(keyValuePair.Value.ObjectData);
									this.AddMissileObjectAndIgnoreTeammates(objectData2, ObjectMissileStatus.Dropped, true);
								}
								if (playerHitEventArgs.ShowDefaultEffects)
								{
									Material material2 = this.GetPlayerHitMaterial();
									if (material2 == null || this.GetCurrentMeleeWeaponInUse(false) != this.CurrentMeleeFists)
									{
										material2 = properties.WeaponMaterial;
									}
									Material.HandleMeleeVsObject(material2, keyValuePair.Value.ObjectData, fixture2, PlayerHitAction.Punch, vector2, this.GameWorld);
								}
								if (list != null)
								{
									list.Add(new PlayerMeleeHitArg(objectData2.ObjectID, objectData2.ScriptBridge, vector2.ToSFDVector2(), objectData2.IsPlayer, playerHitEventArgs.ImpactDamage));
								}
							}
							else if (keyValuePair.Value.ObjectData.IsPlayer)
							{
								keyValuePair.Value.ObjectData.PlayerMeleeHit(this, playerHitEventArgs);
							}
							flag |= playerHitEventArgs.HitSomething;
							if (checkOnly)
							{
								break;
							}
						}
					}
				}
			}
			hitObjects.Clear();
			hitObjects = null;
			if (!checkOnly & this.LastObjectsHitInMelee.Count > 0)
			{
				this.UpdateMeleeWeaponDurabilityOnHitObjects(this.LastObjectsHitInMelee);
			}
			if (list != null && !checkOnly && this.GameOwner != GameOwnerEnum.Client)
			{
				this.GameWorld.RunScriptOnPlayerMeleeActionCallbacks(this, list);
				list.Clear();
				list = null;
			}
			return flag;
		}

		// Token: 0x06003B7D RID: 15229 RVA: 0x00100DE0 File Offset: 0x000FEFE0
		private GameWorld.RayCastResult HitObjectsScanWallResult(HashSet<ObjectData> objectsHitInMelee, Microsoft.Xna.Framework.Vector2 wallCheckStartPos, bool checkOnly, PlayerHitAction hitAction, ref bool hitSomething, ref AABB aabb, out float wallDamage)
		{
			wallDamage = 0f;
			List<ObjectData> objectsToIgnore = new List<ObjectData>();
			Microsoft.Xna.Framework.Vector2 direction = Microsoft.Xna.Framework.Vector2.UnitX * (float)this.LastDirectionX;
			GameWorld.RayCastResult result = default(GameWorld.RayCastResult);
			int i = 0;
			while (i < 3)
			{
				i++;
				result = this.GameWorld.RayCast(wallCheckStartPos, direction, 0f, Converter.ConvertBox2DToWorld(aabb.upperBound.X - aabb.lowerBound.X), delegate(Fixture fixture)
				{
					ObjectData objectData2 = ObjectData.Read(fixture);
					Filter filter2;
					fixture.GetFilterData(out filter2);
					if (hitAction == PlayerHitAction.Punch)
					{
						return (filter2.punchable & objectData2.Body != this.StandingOnBody & objectData2.Body.GetType() == Box2D.XNA.BodyType.Static & !objectData2.TerminationInitiated) && !objectsToIgnore.Contains(objectData2) && this.CheckCollisionFixture(fixture, out objectData2, 0f, true);
					}
					bool flag;
					if ((flag = filter2.kickable) && objectData2.Body == this.StandingOnBody)
					{
						flag = filter2.kickableTop;
					}
					if (this.m_recentlyHitObjectsInKick.ContainsKey(objectData2.ObjectID))
					{
						flag = false;
					}
					return (flag & !objectData2.TerminationInitiated) && objectData2.Body.GetType() == Box2D.XNA.BodyType.Static && this.CheckCollisionFixture(fixture, out objectData2, 0f, true);
				}, (Player player) => false);
				if (result.EndFixture != null)
				{
					Filter filter;
					result.EndFixture.GetFilterData(out filter);
					bool blockMelee = filter.blockMelee;
					ObjectData objectData = ObjectData.Read(result.EndFixture);
					if (hitAction == PlayerHitAction.Kick)
					{
						this.m_recentlyHitObjectsInKick.Add(objectData.ObjectID, this.GameWorld.ElapsedTotalRealTime);
					}
					if (objectData.Destructable)
					{
						this.AddIgnoreObjectsImpacts(objectData, result.EndFixture);
						MWeapon mweapon = (hitAction == PlayerHitAction.Kick) ? Player.m_meleeFeet : this.GetCurrentMeleeWeaponInUse(false);
						float num = (objectData.IsPlayer ? mweapon.Properties.DamagePlayers : mweapon.Properties.DamageObjects) * this.MeleeDamageDealtModifier;
						wallDamage = num;
						PlayerBeforeHitEventArgs playerBeforeHitEventArgs = new PlayerBeforeHitEventArgs(hitAction, result.EndFixture, result.EndPosition, num);
						if (!checkOnly)
						{
							objectData.BeforePlayerMeleeHit(this, playerBeforeHitEventArgs);
						}
						if (!playerBeforeHitEventArgs.Cancel)
						{
							PlayerHitEventArgs playerHitEventArgs = new PlayerHitEventArgs(hitAction, result.EndFixture, result.EndPosition, num);
							if (!checkOnly)
							{
								objectData.PlayerMeleeHit(this, playerHitEventArgs);
								wallDamage = playerHitEventArgs.ImpactDamage;
								if (playerHitEventArgs.HitSomething)
								{
									objectsHitInMelee.Add(objectData);
								}
							}
							if (hitAction == PlayerHitAction.Kick & playerHitEventArgs.HitSomething)
							{
								this.GameWorld.TrackKickedObject(this, objectData);
							}
							if (objectData.TerminationInitiated)
							{
								wallCheckStartPos = result.EndPosition;
							}
							else
							{
								if (blockMelee)
								{
									break;
								}
								objectsToIgnore.Add(objectData);
							}
							hitSomething = ((hitSomething | playerHitEventArgs.HitSomething) || checkOnly);
							continue;
						}
						objectsToIgnore.Add(objectData);
						continue;
					}
					else
					{
						if (!blockMelee)
						{
							objectsToIgnore.Add(objectData);
							continue;
						}
						objectsHitInMelee.Add(objectData);
					}
				}
				IL_27F:
				objectsToIgnore.Clear();
				objectsToIgnore = null;
				return result;
			}
			goto IL_27F;
		}

		// Token: 0x06003B7E RID: 15230 RVA: 0x00101084 File Offset: 0x000FF284
		internal void UpdateMeleeWeaponDurability(bool applyToMakeshift, float durability)
		{
			MWeapon mweapon = applyToMakeshift ? this.CurrentMeleeMakeshiftWeapon : this.CurrentMeleeWeapon;
			if (mweapon != null)
			{
				if (durability > 1f)
				{
					durability = 1f;
				}
				if (durability < 0f)
				{
					durability = 0f;
				}
				if (mweapon.Durability.Fullness != durability)
				{
					mweapon.Durability.Fullness = durability;
					this.CheckMeleeWeaponDestroyed();
				}
			}
		}

		// Token: 0x06003B7F RID: 15231 RVA: 0x001010E4 File Offset: 0x000FF2E4
		internal void UpdateMeleeWeaponDurabilityOnHitObjects(IEnumerable<ObjectData> objectsHitInMelee)
		{
			MWeapon currentMeleeWeaponInUse = this.GetCurrentMeleeWeaponInUse(false);
			if (!this.InfiniteAmmo || currentMeleeWeaponInUse.Properties.IsMakeshift)
			{
				currentMeleeWeaponInUse.DecreaseDurabilityOnHitTargets(this, objectsHitInMelee);
				this.CheckMeleeWeaponDestroyed();
			}
		}

		// Token: 0x06003B80 RID: 15232 RVA: 0x0010111C File Offset: 0x000FF31C
		private void CheckMeleeWeaponDestroyed()
		{
			MWeapon currentMeleeWeaponInUse = this.GetCurrentMeleeWeaponInUse(false);
			if (currentMeleeWeaponInUse.Durability.IsEmpty && currentMeleeWeaponInUse.Properties.AutoDestroyOnDurabilityEmpty)
			{
				short replacementWeaponID = currentMeleeWeaponInUse.Properties.ReplacementWeaponID;
				currentMeleeWeaponInUse.Destroyed(this);
				this.MeleeWeaponBroken = true;
				this.RemoveWeaponItem(SFD.Weapons.WeaponItemType.Melee, true, true);
				if (replacementWeaponID != -1)
				{
					SFD.Weapons.WeaponItem weapon = WeaponDatabase.GetWeapon(replacementWeaponID);
					if (weapon != null && weapon.BaseProperties.WeaponCanBeEquipped)
					{
						this.GrabWeaponItem(weapon, false, 0);
					}
				}
				this.ImportantUpdate = true;
				return;
			}
			if (currentMeleeWeaponInUse.Properties.WeaponID != 7 && currentMeleeWeaponInUse.Properties.WeaponID != 22 && currentMeleeWeaponInUse.Properties.WeaponID != 59 && this.GameOwner == GameOwnerEnum.Server)
			{
				NetMessage.PlayerReceiveItem.Data data = new NetMessage.PlayerReceiveItem.Data(this.ObjectID, currentMeleeWeaponInUse);
				this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, data);
			}
		}

		// Token: 0x06003B81 RID: 15233 RVA: 0x000306FA File Offset: 0x0002E8FA
		internal void ActivatePowerup()
		{
			if (this.CurrentPowerupItem != null)
			{
				this.CurrentPowerupItem.OnActivation(this, this.CurrentPowerupItem);
			}
		}

		// Token: 0x06003B82 RID: 15234 RVA: 0x00030716 File Offset: 0x0002E916
		internal void RemovePowerup()
		{
			if (this.CurrentPowerupItem != null)
			{
				this.RemoveWeaponItem(SFD.Weapons.WeaponItemType.Powerup, true, true);
			}
		}

		// Token: 0x06003B83 RID: 15235 RVA: 0x001011F8 File Offset: 0x000FF3F8
		internal void ActivateWeaponItem(SFD.Weapons.WeaponItemType weaponToDraw, bool dropMakeshift = false, bool playDrawSound = true)
		{
			if (!(this.Rolling | this.Diving | this.Disabled | this.Climbing | this.ThrowCharging | this.LedgeGrabbing | this.IsGrabbing) && this.CurrentAction != PlayerAction.ThrowThrowing && !this.TimeSequence.DrawWeaponDisabled && this.CurrentAction != PlayerAction.JumpKick && this.CurrentAction != PlayerAction.JumpAttack && (this.CurrentAction != PlayerAction.DrawWeapon || !this.InThrowingMode))
			{
				this.DisableFireWhileHoldingAttackKey = false;
				this.InThrowingMode = false;
				this.CurrentWeaponQueued = SFD.Weapons.WeaponItemType.NONE;
				if (this.CurrentAction != PlayerAction.DrawWeapon)
				{
					switch (weaponToDraw)
					{
					case SFD.Weapons.WeaponItemType.Handgun:
						if (this.CurrentMeleeMakeshiftWeapon != null && this.CurrentHandgunWeapon != null && dropMakeshift)
						{
							this.DropWeaponItem(SFD.Weapons.WeaponItemType.Melee, false);
						}
						if (this.CurrentHandgunWeapon != null && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Handgun)
						{
							this.CancelReloading();
							this.CurrentAction = PlayerAction.DrawWeapon;
							this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.Handgun;
							this.m_reloadPrepared = false;
							this.ImportantUpdate = true;
							return;
						}
						break;
					case SFD.Weapons.WeaponItemType.Rifle:
						if (this.CurrentMeleeMakeshiftWeapon != null && this.CurrentRifleWeapon != null && dropMakeshift)
						{
							this.DropWeaponItem(SFD.Weapons.WeaponItemType.Melee, false);
						}
						if (this.CurrentRifleWeapon != null && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Rifle)
						{
							this.CancelReloading();
							this.CurrentAction = PlayerAction.DrawWeapon;
							this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.Rifle;
							this.m_reloadPrepared = false;
							this.ImportantUpdate = true;
							return;
						}
						break;
					case SFD.Weapons.WeaponItemType.Thrown:
						if (this.CurrentMeleeMakeshiftWeapon != null && this.CurrentThrownWeapon != null && dropMakeshift)
						{
							this.DropWeaponItem(SFD.Weapons.WeaponItemType.Melee, false);
						}
						if (this.CurrentThrownWeapon != null && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Thrown)
						{
							this.CancelReloading();
							this.CurrentAction = PlayerAction.DrawWeapon;
							this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.Thrown;
							SoundHandler.PlaySound(this.CurrentThrownWeapon.Properties.DrawSoundID, this.Position, this.GameWorld);
							this.m_reloadPrepared = false;
							this.ImportantUpdate = true;
						}
						break;
					case SFD.Weapons.WeaponItemType.Melee:
						if (this.CurrentAction == PlayerAction.ManualAim)
						{
							this.CurrentAction = PlayerAction.Idle;
						}
						if (this.CurrentMeleeMakeshiftWeapon != null && this.CurrentMeleeWeapon != null && dropMakeshift)
						{
							this.DropWeaponItem(SFD.Weapons.WeaponItemType.Melee, false);
						}
						if (this.CurrentMeleeMakeshiftWeapon != null && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee)
						{
							this.CancelReloading();
							this.CurrentAction = PlayerAction.DrawWeapon;
							this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.Melee;
							SoundHandler.PlaySound(this.CurrentMeleeMakeshiftWeapon.Properties.DrawSoundID, this.Position, this.GameWorld);
							this.ImportantUpdate = true;
							if (playDrawSound)
							{
								SoundHandler.PlaySound(this.CurrentMeleeMakeshiftWeapon.Properties.DrawSoundID, this.Position, this.GameWorld);
							}
						}
						else if (this.CurrentMeleeWeapon != null && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee)
						{
							this.CancelReloading();
							this.CurrentAction = PlayerAction.DrawWeapon;
							this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.Melee;
							if (playDrawSound)
							{
								SoundHandler.PlaySound(this.CurrentMeleeWeapon.Properties.DrawSoundID, this.Position, this.GameWorld);
							}
							this.ImportantUpdate = true;
						}
						else if (this.CurrentMeleeWeapon == null && this.CurrentMeleeMakeshiftWeapon == null && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.NONE)
						{
							this.CancelReloading();
							this.SheatheCurrentWeapon(false);
							this.CurrentWeaponSheatheQueued = (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.NONE);
							this.ImportantUpdate = true;
						}
						this.m_reloadPrepared = false;
						return;
					default:
						return;
					}
				}
				return;
			}
			this.CurrentWeaponQueued = weaponToDraw;
			this.CurrentWeaponSheatheQueued = false;
			this.ThrowingModeToggleQueued = false;
		}

		// Token: 0x06003B84 RID: 15236 RVA: 0x0010153C File Offset: 0x000FF73C
		internal void RedrawWeaponItem(SFD.Weapons.WeaponItemType wpnToRedraw, bool isNewWeapon, bool playDrawSound = true)
		{
			if (this.CurrentAction == PlayerAction.Kick || (!this.MeleeWeaponBroken && (this.CurrentAction == PlayerAction.MeleeAttack1 || this.CurrentAction == PlayerAction.MeleeAttack2 || this.CurrentAction == PlayerAction.MeleeAttack3)))
			{
				this.CurrentAction = PlayerAction.Idle;
				this.ImportantUpdate = true;
			}
			if (this.Disabled || this.CurrentAction == PlayerAction.Grabbing || (this.CurrentAction == PlayerAction.DrawWeapon && this.InThrowingMode))
			{
				return;
			}
			if (isNewWeapon)
			{
				this.InThrowingMode = false;
				if (this.CurrentAction == PlayerAction.Block)
				{
					this.CurrentActionToIdle();
				}
			}
			if (this.InThrowingMode && !this.CanExitThrowingMode())
			{
				this.ThrowingModeToggleQueued = true;
				return;
			}
			bool inThrowingMode = this.InThrowingMode;
			this.SheatheCurrentWeapon(true);
			this.ActivateWeaponItem(wpnToRedraw, false, playDrawSound);
			if (inThrowingMode && !isNewWeapon)
			{
				this.InThrowingMode = true;
				this.ExitingThrowingMode = true;
			}
			if (!this.Rolling)
			{
				this.ForceHardAnimationReset(true);
			}
		}

		// Token: 0x06003B85 RID: 15237 RVA: 0x00101618 File Offset: 0x000FF818
		internal void SheatheCurrentWeapon(bool forceRedraw = false)
		{
			if (this.ThrowCharging || this.CurrentAction == PlayerAction.ThrowThrowing)
			{
				if (forceRedraw)
				{
					this.InThrowingMode = false;
					this.ThrowCharging = false;
					this.ThrowingModeToggleQueued = false;
					this.CurrentAction = PlayerAction.Idle;
				}
				else
				{
					if (this.InThrowingMode && this.CurrentAction != PlayerAction.ThrowThrowing)
					{
						this.ThrowCharging = false;
						this.CurrentWeaponSheatheQueued = false;
						this.ThrowingModeToggleQueued = false;
						if (this.CurrentAction == PlayerAction.HipFire || this.CurrentAction == PlayerAction.ManualAim)
						{
							this.CurrentAction = PlayerAction.Idle;
						}
						return;
					}
					if (!this.InThrowingMode && this.ThrowCharging && this.CurrentAction != PlayerAction.ThrowThrowing && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown && this.CurrentMeleeMakeshiftWeapon == null)
					{
						TWeapon currentThrownWeaponInUse = this.GetCurrentThrownWeaponInUse();
						if (currentThrownWeaponInUse != null && currentThrownWeaponInUse.Properties.CanBeSheathedDuringAim)
						{
							this.ThrowCharging = false;
							if (this.CurrentAction == PlayerAction.HipFire || this.CurrentAction == PlayerAction.ManualAim)
							{
								this.CurrentAction = PlayerAction.Idle;
							}
							return;
						}
					}
					this.CurrentWeaponSheatheQueued = true;
					return;
				}
			}
			if (this.TimeSequence.SheatheWeaponDisabled)
			{
				if (!forceRedraw)
				{
					this.CurrentWeaponSheatheQueued = true;
					return;
				}
				this.CurrentWeaponSheatheQueued = false;
			}
			if (this.CurrentAction != PlayerAction.Idle && this.CurrentAction != PlayerAction.HipFire && this.CurrentAction != PlayerAction.ManualAim)
			{
				if (this.CurrentAction != PlayerAction.Disabled)
				{
					if (this.CurrentWeaponQueued != SFD.Weapons.WeaponItemType.NONE)
					{
						this.CurrentWeaponQueued = SFD.Weapons.WeaponItemType.NONE;
						return;
					}
					return;
				}
			}
			if (this.Climbing && this.CurrentMeleeMakeshiftWeapon != null && !forceRedraw)
			{
				return;
			}
			this.InThrowingMode = false;
			if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee)
			{
				MWeapon currentMeleeWeaponInUse = this.GetCurrentMeleeWeaponInUse(false);
				if (currentMeleeWeaponInUse != null && currentMeleeWeaponInUse is WpnChainsaw)
				{
					this.m_havePerformedJumpAttack = false;
				}
			}
			if (this.CurrentMeleeMakeshiftWeapon != null && !forceRedraw)
			{
				this.DropWeaponItem(SFD.Weapons.WeaponItemType.Melee, false);
			}
			this.CurrentWeaponSheatheQueued = false;
			this.ThrowingModeToggleQueued = false;
			this.CancelReloading();
			this.CurrentWeaponQueued = SFD.Weapons.WeaponItemType.NONE;
			this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.NONE;
			if (this.CurrentAction != PlayerAction.HipFire)
			{
				if (this.CurrentAction != PlayerAction.ManualAim)
				{
					return;
				}
			}
			this.CurrentAction = PlayerAction.Idle;
		}

		// Token: 0x06003B86 RID: 15238 RVA: 0x00030729 File Offset: 0x0002E929
		internal ObjectWeaponItem DropWeaponItemShort(SFD.Weapons.WeaponItemType wpnToDrop, bool ignoreHolsteredModel = false)
		{
			return this.DropWeaponItem(wpnToDrop, this.LastDirectionX, Microsoft.Xna.Framework.Vector2.One * 0.75f, ignoreHolsteredModel, new Microsoft.Xna.Framework.Vector2(0f, 10f), false, Player.DropWeaponItemSource.ManuallyDropped);
		}

		// Token: 0x06003B87 RID: 15239 RVA: 0x00030759 File Offset: 0x0002E959
		internal ObjectWeaponItem DropWeaponItem(SFD.Weapons.WeaponItemType wpnToDrop, bool ignoreHolsteredModel)
		{
			return this.DropWeaponItem(wpnToDrop, this.LastDirectionX, Microsoft.Xna.Framework.Vector2.One, ignoreHolsteredModel, new Microsoft.Xna.Framework.Vector2(0f, 10f), false, Player.DropWeaponItemSource.Other);
		}

		// Token: 0x06003B88 RID: 15240 RVA: 0x0003077F File Offset: 0x0002E97F
		internal ObjectWeaponItem DropWeaponItem(SFD.Weapons.WeaponItemType wpnToDrop, int directionToDrop, Microsoft.Xna.Framework.Vector2 power, bool ignoreHolsteredModel)
		{
			return this.DropWeaponItem(wpnToDrop, directionToDrop, power, ignoreHolsteredModel, new Microsoft.Xna.Framework.Vector2(0f, 10f), false, Player.DropWeaponItemSource.Other);
		}

		// Token: 0x06003B89 RID: 15241 RVA: 0x001017F8 File Offset: 0x000FF9F8
		internal ObjectWeaponItem DropWeaponItem(SFD.Weapons.WeaponItemType wpnToDrop, int directionToDrop, Microsoft.Xna.Framework.Vector2 power, bool ignoreHolsteredModel, Microsoft.Xna.Framework.Vector2 dropOffset, bool handleCoverObject, Player.DropWeaponItemSource dropWeaponItemSource = Player.DropWeaponItemSource.Other)
		{
			string mapObjectID = "";
			bool pickupable = false;
			bool flag = false;
			SFD.Weapons.WeaponItem weaponItem = null;
			if ((this.CurrentAction == PlayerAction.DrawWeapon || this.CurrentAction == PlayerAction.HipFire || this.CurrentAction == PlayerAction.ManualAim) && this.CurrentWeaponDrawn == wpnToDrop)
			{
				this.CurrentAction = PlayerAction.Idle;
				this.ImportantUpdate = true;
			}
			switch (wpnToDrop)
			{
			case SFD.Weapons.WeaponItemType.NONE:
				return null;
			case SFD.Weapons.WeaponItemType.Handgun:
				if (this.CurrentHandgunWeapon != null)
				{
					mapObjectID = this.CurrentHandgunWeapon.Properties.ModelID;
					pickupable = true;
					flag = (!this.CurrentHandgunWeapon.IsEmpty && this.CurrentHandgunWeapon.Properties.SpawnsInSheath);
					weaponItem = new SFD.Weapons.WeaponItem(SFD.Weapons.WeaponItemType.Handgun, this.CurrentHandgunWeapon);
					goto IL_1FE;
				}
				goto IL_1FE;
			case SFD.Weapons.WeaponItemType.Rifle:
				if (this.CurrentRifleWeapon != null)
				{
					mapObjectID = this.CurrentRifleWeapon.Properties.ModelID;
					pickupable = true;
					flag = (!this.CurrentRifleWeapon.IsEmpty && this.CurrentRifleWeapon.Properties.SpawnsInSheath);
					weaponItem = new SFD.Weapons.WeaponItem(SFD.Weapons.WeaponItemType.Rifle, this.CurrentRifleWeapon);
					goto IL_1FE;
				}
				goto IL_1FE;
			case SFD.Weapons.WeaponItemType.Thrown:
				if (this.CurrentThrownWeapon != null)
				{
					mapObjectID = this.CurrentThrownWeapon.Properties.ModelID;
					pickupable = true;
					flag = this.CurrentThrownWeapon.Properties.SpawnsInSheath;
					weaponItem = new SFD.Weapons.WeaponItem(SFD.Weapons.WeaponItemType.Thrown, this.CurrentThrownWeapon);
					goto IL_1FE;
				}
				goto IL_1FE;
			case SFD.Weapons.WeaponItemType.Melee:
				if (this.CurrentMeleeMakeshiftWeapon != null)
				{
					mapObjectID = this.CurrentMeleeMakeshiftWeapon.Properties.ModelID;
					pickupable = true;
					flag = this.CurrentMeleeMakeshiftWeapon.Properties.SpawnsInSheath;
					weaponItem = new SFD.Weapons.WeaponItem(SFD.Weapons.WeaponItemType.Melee, this.CurrentMeleeMakeshiftWeapon);
					goto IL_1FE;
				}
				if (this.CurrentMeleeWeapon != null)
				{
					mapObjectID = this.CurrentMeleeWeapon.Properties.ModelID;
					pickupable = true;
					flag = this.CurrentMeleeWeapon.Properties.SpawnsInSheath;
					weaponItem = new SFD.Weapons.WeaponItem(SFD.Weapons.WeaponItemType.Melee, this.CurrentMeleeWeapon);
					goto IL_1FE;
				}
				goto IL_1FE;
			case SFD.Weapons.WeaponItemType.Powerup:
				if (this.CurrentPowerupItem != null)
				{
					mapObjectID = this.CurrentPowerupItem.Properties.ModelID;
					pickupable = true;
					flag = this.CurrentPowerupItem.Properties.SpawnsInSheath;
					weaponItem = new SFD.Weapons.WeaponItem(SFD.Weapons.WeaponItemType.Powerup, this.CurrentPowerupItem);
					goto IL_1FE;
				}
				goto IL_1FE;
			}
			return null;
			IL_1FE:
			if (weaponItem == null)
			{
				return null;
			}
			this.WeaponAbortBurstMode();
			this.m_reloadPrepared = false;
			this.RemoveWeaponItem(wpnToDrop, true, false);
			if (!weaponItem.BaseProperties.IsMakeshift && this.IsDead && this.ItemDropMode == Player.ItemDropModeEnum.RemoveOnDeath)
			{
				this.QueueRemovedWeaponCallback(weaponItem.Type, weaponItem.BaseProperties.WeaponID, 0, dropWeaponItemSource == Player.DropWeaponItemSource.ManuallyDropped, false);
				return null;
			}
			SpawnObjectInformation spawnObjectInformation = new SpawnObjectInformation(this.GameWorld.IDCounter.NextObjectData(mapObjectID), this.Position + dropOffset, (weaponItem.BaseProperties.WeaponID == 36) ? (0.7853982f * -(float)this.LastDirectionX) : 0f, (wpnToDrop == SFD.Weapons.WeaponItemType.Powerup) ? 1 : ((short)this.LastDirectionX), new Microsoft.Xna.Framework.Vector2((float)directionToDrop * 3f * power.X, 4f * power.Y), Constants.RANDOM.NextFloat(-3.14f, 3.14f));
			if (handleCoverObject && this.CoverObject != null && this.CoverObject.Body != null && this.CoverObjectCanShootThrough)
			{
				spawnObjectInformation.IgnoreBodyID = this.CoverObject.Body.BodyID;
			}
			flag = (flag && !ignoreHolsteredModel);
			Body body = this.m_gameWorld.CreateWeaponItem(spawnObjectInformation, flag, pickupable, true);
			ObjectData objectData = ObjectData.Read(body.GetFixtureList());
			ObjectWeaponItem objectWeaponItem = (ObjectWeaponItem)objectData;
			if (this.m_modifiers.InfiniteAmmo >= 1 && dropWeaponItemSource != Player.DropWeaponItemSource.ManuallyDropped && weaponItem.RWeaponData != null)
			{
				weaponItem.RWeaponData.RestoreAmmo();
			}
			objectWeaponItem.InternalData = weaponItem;
			objectWeaponItem.DroppedByPlayerID = this.ObjectID;
			objectWeaponItem.DroppedByPlayerSource = dropWeaponItemSource;
			if (!weaponItem.BaseProperties.IsMakeshift)
			{
				objectWeaponItem.SetDespawnTime(Constants.RANDOM.NextFloat(19000f, 21000f), false);
				if ((weaponItem.Type == SFD.Weapons.WeaponItemType.Rifle || weaponItem.Type == SFD.Weapons.WeaponItemType.Handgun) && weaponItem.RWeaponData.IsEmpty)
				{
					objectWeaponItem.QueueItemRemoval();
				}
				if (weaponItem.Type == SFD.Weapons.WeaponItemType.Thrown && weaponItem.TWeaponData is WpnC4Detonator && this.GameWorld.GetObjectDataByID(((WpnC4Detonator)weaponItem.TWeaponData).ConnectedC4ObjectID) == null)
				{
					objectWeaponItem.QueueItemRemoval();
				}
			}
			if (weaponItem.Type == SFD.Weapons.WeaponItemType.Melee & weaponItem.MWeaponData != null)
			{
				objectWeaponItem.Health.Fullness = weaponItem.MWeaponData.Durability.Fullness;
			}
			this.GameWorld.WeaponSpawnManager.RemoveSupplyItemTracking(objectData);
			if (objectData.Tile.CanBeMissile)
			{
				this.GameWorld.AddMissileObject(objectData, ObjectMissileStatus.Dropped, this);
				if (objectData.MissileData != null)
				{
					objectData.MissileData.SetHitCooldown();
				}
			}
			if (this.ItemDropMode == Player.ItemDropModeEnum.Break || this.ItemDropMode == Player.ItemDropModeEnum.RemoveOnDeath)
			{
				objectWeaponItem.QueueBreakOnDrop();
				objectWeaponItem.QueueItemRemoval();
				if (this.IsDead)
				{
					objectWeaponItem.Activateable = false;
					objectWeaponItem.ActivateableHighlightning = false;
				}
			}
			if (this.GameOwner == GameOwnerEnum.Server)
			{
				this.GameWorld.AddBodyToSync(objectData.BodyData);
			}
			this.QueueRemovedWeaponCallback(weaponItem.Type, weaponItem.BaseProperties.WeaponID, objectWeaponItem.ObjectID, dropWeaponItemSource == Player.DropWeaponItemSource.ManuallyDropped, this.InThrowingMode && dropWeaponItemSource == Player.DropWeaponItemSource.Other);
			return objectWeaponItem;
		}

		// Token: 0x06003B8A RID: 15242 RVA: 0x00101D28 File Offset: 0x000FFF28
		internal void RemoveWeaponItem(SFD.Weapons.WeaponItemType wpnToDrop, bool removeMakeshift = true, bool addToRemovedCallbacks = true)
		{
			bool isMakeshiftWeapon = wpnToDrop == SFD.Weapons.WeaponItemType.Melee && this.CurrentMeleeMakeshiftWeapon != null && removeMakeshift;
			short num = this.UnequipWeaponItem(wpnToDrop, removeMakeshift);
			if (num != 0 && addToRemovedCallbacks)
			{
				this.QueueRemovedWeaponCallback(wpnToDrop, num, 0, false, false);
			}
			if (this.GameOwner == GameOwnerEnum.Server)
			{
				NetMessage.PlayerReceiveItem.Data data = new NetMessage.PlayerReceiveItem.Data(this.ObjectID, wpnToDrop, isMakeshiftWeapon, this.MeleeWeaponBroken);
				this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, data);
			}
		}

		// Token: 0x06003B8B RID: 15243 RVA: 0x00101D98 File Offset: 0x000FFF98
		internal void QueueRemovedWeaponCallback(SFD.Weapons.WeaponItemType wpnItemType, short wpnItemID, int targetObjectID, bool dropped, bool thrown)
		{
			if (this.GameOwner != GameOwnerEnum.Client && this.GameWorld.ScriptCallbackExists_PlayerWeaponRemovedAction)
			{
				if (this.m_removedAddedWeaponCallbacks == null)
				{
					this.m_removedAddedWeaponCallbacks = new List<Tuple<bool, PlayerWeaponRemovedArg, PlayerWeaponAddedArg>>();
				}
				PlayerWeaponRemovedArg item = new PlayerWeaponRemovedArg((SFDGameScriptInterface.WeaponItemType)wpnItemType, (SFDGameScriptInterface.WeaponItem)wpnItemID, targetObjectID, dropped, thrown);
				this.m_removedAddedWeaponCallbacks.Add(new Tuple<bool, PlayerWeaponRemovedArg, PlayerWeaponAddedArg>(true, item, default(PlayerWeaponAddedArg)));
				return;
			}
		}

		// Token: 0x06003B8C RID: 15244 RVA: 0x00101DF8 File Offset: 0x000FFFF8
		internal void QueueAddedWeaponCallback(SFD.Weapons.WeaponItemType wpnItemType, short wpnItemID, int sourceObjectID)
		{
			if (this.GameOwner != GameOwnerEnum.Client && this.GameWorld.ScriptCallbackExists_PlayerWeaponAddedAction)
			{
				if (this.m_removedAddedWeaponCallbacks == null)
				{
					this.m_removedAddedWeaponCallbacks = new List<Tuple<bool, PlayerWeaponRemovedArg, PlayerWeaponAddedArg>>();
				}
				PlayerWeaponAddedArg item = new PlayerWeaponAddedArg((SFDGameScriptInterface.WeaponItemType)wpnItemType, (SFDGameScriptInterface.WeaponItem)wpnItemID, sourceObjectID);
				this.m_removedAddedWeaponCallbacks.Add(new Tuple<bool, PlayerWeaponRemovedArg, PlayerWeaponAddedArg>(false, default(PlayerWeaponRemovedArg), item));
				return;
			}
		}

		// Token: 0x06003B8D RID: 15245 RVA: 0x00101E54 File Offset: 0x00100054
		internal void ProcessRemovedAddedWeaponsCallback()
		{
			if (this.m_removedAddedWeaponCallbacks != null && this.m_removedAddedWeaponCallbacks.Count > 0)
			{
				Tuple<bool, PlayerWeaponRemovedArg, PlayerWeaponAddedArg>[] array = this.m_removedAddedWeaponCallbacks.ToArray();
				this.m_removedAddedWeaponCallbacks.Clear();
				foreach (Tuple<bool, PlayerWeaponRemovedArg, PlayerWeaponAddedArg> tuple in array)
				{
					if (tuple.Item1)
					{
						this.GameWorld.RunScriptOnPlayerWeaponRemovedActionCallbacks(this, tuple.Item2);
					}
					else
					{
						this.GameWorld.RunScriptOnPlayerWeaponAddedActionCallbacks(this, tuple.Item3);
					}
				}
			}
		}

		// Token: 0x06003B8E RID: 15246 RVA: 0x00101ED0 File Offset: 0x001000D0
		internal void EnterManualAim(bool resetAim = true)
		{
			if (this.CurrentAction != PlayerAction.ManualAim)
			{
				if (resetAim)
				{
					this.AimSpeed = 0f;
					this.AimAngle = 0f;
				}
				this.CurrentAction = PlayerAction.ManualAim;
				this.FireSequence.MinimumManualAimTime = 250f;
				this.ForceServerMovementState(1);
				this.ForceClientMovementState(1);
			}
		}

		// Token: 0x06003B8F RID: 15247 RVA: 0x0003079D File Offset: 0x0002E99D
		internal bool SpeedBoostPrepare()
		{
			if (!this.SpeedBoostPreparing && !this.FireSequence.WeaponBurstMode)
			{
				this.SpeedBoostPreparing = true;
				if (this.Sprinting && this.StandingOnGround)
				{
					this.Sprinting = false;
				}
				this.ImportantUpdate = true;
				return true;
			}
			return false;
		}

		// Token: 0x06003B90 RID: 15248 RVA: 0x00101F24 File Offset: 0x00100124
		internal void SpeedBoostApply(float time)
		{
			if (!this.IsDead && time > 0f)
			{
				this.SpeedBoostActive = true;
				this.Energy.Fullness = 1f;
				this.ImportantUpdate = true;
				this.TimeSequence.TimeSpeedBoostActive = Math.Max(this.TimeSequence.TimeSpeedBoostActive, time);
			}
		}

		// Token: 0x06003B91 RID: 15249 RVA: 0x000307DC File Offset: 0x0002E9DC
		internal void SpeedBoostDeactivate()
		{
			if (this.SpeedBoostActive)
			{
				SoundHandler.PlaySound("StrengthBoostStop", this.Position, this.GameWorld);
				this.SpeedBoostActive = false;
				this.ImportantUpdate = true;
			}
			this.TimeSequence.TimeSpeedBoostActive = 0f;
		}

		// Token: 0x06003B92 RID: 15250 RVA: 0x0003081A File Offset: 0x0002EA1A
		internal bool StrengthBoostPrepare()
		{
			if (!this.StrengthBoostPreparing && !this.FireSequence.WeaponBurstMode)
			{
				this.StrengthBoostPreparing = true;
				if (this.Sprinting && this.StandingOnGround)
				{
					this.Sprinting = false;
				}
				this.ImportantUpdate = true;
				return true;
			}
			return false;
		}

		// Token: 0x06003B93 RID: 15251 RVA: 0x00101F7C File Offset: 0x0010017C
		internal void StrengthBoostApply(float time)
		{
			if (!this.IsDead && time > 0f)
			{
				if (!this.StrengthBoostActive)
				{
					if (this.Health.CurrentValue < 5f)
					{
						this.Health.CurrentValue = 5f;
					}
					this.InitOverHealth();
					this.StrengthBoostActive = true;
					this.ImportantUpdate = true;
				}
				this.TimeSequence.TimeStrengthBoostActive = Math.Max(this.TimeSequence.TimeStrengthBoostActive, time);
			}
		}

		// Token: 0x06003B94 RID: 15252 RVA: 0x00101FF4 File Offset: 0x001001F4
		internal void StrengthBoostDeactivate()
		{
			if (this.StrengthBoostActive)
			{
				SoundHandler.PlaySound("StrengthBoostStop", this.Position, this.GameWorld);
				this.StrengthBoostActive = false;
				if (!this.IsDead && this.Health.CurrentValue < 1f)
				{
					this.Kill(true, false);
				}
				this.ImportantUpdate = true;
			}
			this.TimeSequence.TimeStrengthBoostActive = 0f;
		}

		// Token: 0x06003B95 RID: 15253 RVA: 0x00102060 File Offset: 0x00100260
		internal void Block()
		{
			this.Sprinting = false;
			this.CurrentAction = PlayerAction.Block;
			this.TimeSequence.TimeBlock = 300f + ((this.GameOwner == GameOwnerEnum.Client) ? this.GetAverageRoundtripTime() : 0f);
			this.TimeSequence.TimeBlockCooldown = 600f + ((this.GameOwner == GameOwnerEnum.Client) ? this.GetNetworkJitter() : 0f);
			this.TimeSequence.DisableQueuedKey(5);
			this.TimeSequence.SyncServerTimeBlockCooldown = false;
			this.DeflectBulletFirstBlockFrameWindow = true;
			this.ImportantUpdate = true;
			if (this.StandingOnGround)
			{
				this.ForceClientMovementState(2);
				this.ForceServerMovementState(5);
			}
			else
			{
				this.ForceClientMovementState(10);
			}
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				this.FreezeAnimationOnAction = this.CurrentAction;
			}
		}

		// Token: 0x06003B96 RID: 15254 RVA: 0x00102128 File Offset: 0x00100328
		internal void GroundKick()
		{
			if (this.CurrentAction == PlayerAction.Kick)
			{
				return;
			}
			this.TakingCover = false;
			this.Sprinting = false;
			this.CurrentAction = PlayerAction.Kick;
			this.ImportantUpdate = true;
			this.ForceClientMovementState(1);
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				this.FreezeAnimationOnAction = this.CurrentAction;
			}
			this.ForceServerMovementState(5);
		}

		// Token: 0x06003B97 RID: 15255 RVA: 0x00030859 File Offset: 0x0002EA59
		internal void SetKickHitFrame(bool withEvents)
		{
			this.UpdateAnimation();
			this.GetSubAnimations()[0].SetFrameWithEvent("KICK", withEvents);
		}

		// Token: 0x06003B98 RID: 15256 RVA: 0x00030874 File Offset: 0x0002EA74
		internal bool PerformedKickHitFrame()
		{
			return this.PastFrameEvent("KICK", 0);
		}

		// Token: 0x06003B99 RID: 15257 RVA: 0x00030882 File Offset: 0x0002EA82
		internal void SetMeleeHitFrame(bool withEvents)
		{
			this.UpdateAnimation();
			this.GetSubAnimations()[0].SetFrameWithEvent("HIT", withEvents);
		}

		// Token: 0x06003B9A RID: 15258 RVA: 0x00102180 File Offset: 0x00100380
		internal bool PerformedMeleeHitFrame()
		{
			if (this.CurrentAction != PlayerAction.Kick)
			{
				if (this.CurrentAction != PlayerAction.JumpKick)
				{
					if (this.CurrentAction == PlayerAction.JumpAttack)
					{
						this.PastFrameEvent("HIT", 0);
					}
					return (this.MeleeWeaponBroken && (this.m_currentAnimationPlayerAction == PlayerAction.MeleeAttack1 || this.m_currentAnimationPlayerAction == PlayerAction.MeleeAttack2 || this.m_currentAnimationPlayerAction == PlayerAction.MeleeAttack3 || this.m_currentAnimationPlayerAction == PlayerAction.JumpAttack)) || this.PastFrameEvent("HIT", 1);
				}
			}
			return this.PastFrameEvent("KICK", 0);
		}

		// Token: 0x06003B9B RID: 15259 RVA: 0x00102204 File Offset: 0x00100404
		internal float GetMeleeFrameTimeLeft()
		{
			if (this.CurrentAction != PlayerAction.Kick)
			{
				if (this.CurrentAction != PlayerAction.JumpKick)
				{
					if (this.CurrentAction == PlayerAction.JumpAttack)
					{
						return this.m_subAnimations[0].TimeLeftInAnimation();
					}
					return this.m_subAnimations[(int)((this.m_subAnimationsLength >= 1) ? (this.m_subAnimationsLength - 1) : 0)].TimeLeftInAnimation();
				}
			}
			return this.m_subAnimations[0].TimeLeftInAnimation();
		}

		// Token: 0x06003B9C RID: 15260 RVA: 0x0010226C File Offset: 0x0010046C
		internal bool PastFrameEvent(string frameEvent, int subAnimIndex)
		{
			this.UpdateAnimation();
			int num = this.GetSubAnimations()[subAnimIndex].GetCurrentFrameIndex();
			foreach (AnimationFrameData animationFrameData in this.GetSubAnimations()[subAnimIndex].GetAllFrames())
			{
				if (animationFrameData.Event.Contains(frameEvent))
				{
					return true;
				}
				num--;
				if (num < 0)
				{
					return false;
				}
			}
			return false;
		}

		// Token: 0x06003B9D RID: 15261 RVA: 0x0003089D File Offset: 0x0002EA9D
		internal void JumpKick()
		{
			if (this.CurrentAction == PlayerAction.JumpKick)
			{
				return;
			}
			this.TakingCover = false;
			this.Sprinting = false;
			this.CurrentAction = PlayerAction.JumpKick;
			this.ImportantUpdate = true;
			this.ForceClientMovementState(10);
		}

		// Token: 0x06003B9E RID: 15262 RVA: 0x000308CD File Offset: 0x0002EACD
		internal void Kick()
		{
			if (this.GameOwner == GameOwnerEnum.Client && !this.HasLocalControl)
			{
				this.Sprinting = false;
				return;
			}
			if (this.InAir)
			{
				this.JumpKick();
				return;
			}
			this.GroundKick();
		}

		// Token: 0x170009A1 RID: 2465
		// (get) Token: 0x06003B9F RID: 15263 RVA: 0x000308FD File Offset: 0x0002EAFD
		internal bool IgnoreSolvingStuckContacts
		{
			get
			{
				return this.Climbing | this.LedgeGrabbing;
			}
		}

		// Token: 0x06003BA0 RID: 15264 RVA: 0x0003090C File Offset: 0x0002EB0C
		internal void Fall()
		{
			this.Fall(Microsoft.Xna.Framework.Vector2.Zero);
		}

		// Token: 0x06003BA1 RID: 15265 RVA: 0x00030919 File Offset: 0x0002EB19
		internal void FallWithSpeed(Microsoft.Xna.Framework.Vector2 newVelocity)
		{
			this.Fall(newVelocity - this.WorldBody.GetLinearVelocity());
		}

		// Token: 0x06003BA2 RID: 15266 RVA: 0x001022D4 File Offset: 0x001004D4
		internal void Fall(Microsoft.Xna.Framework.Vector2 addVelocity)
		{
			this.m_LastMeleeAction = PlayerAction.None;
			if (this.RocketRideProjectileWorldID > 0)
			{
				return;
			}
			if (this.IsRemoved)
			{
				return;
			}
			if (this.GameOwner != GameOwnerEnum.Client & this.IsGrabbedByPlayer)
			{
				this.m_dropGrabbedPlayersNextUpdate = true;
			}
			bool flag = !this.Falling;
			Microsoft.Xna.Framework.Vector2 vector = this.WorldBody.GetLinearVelocity() + addVelocity;
			this.TakingCover = false;
			this.m_preBox2DLinearVelocity = vector;
			this.WorldBody.SetLinearVelocity(vector);
			if (this.GameOwner != GameOwnerEnum.Client)
			{
				this.CheckThrowableDisarm();
			}
			this.TimeSequence.TimeJumpTimeout = 100f;
			this.TimeSequence.TimeTriggerJump = 0f;
			this.CurrentAction = PlayerAction.Disabled;
			this.FullLanding = false;
			this.TimeSequence.TimeFullLanding = 0f;
			this.Climbing = false;
			this.Rolling = false;
			this.Diving = false;
			this.DisableGrabbing(false);
			this.Crouching = false;
			this.LayingOnGround = false;
			this.StandingOnGround = false;
			this.DeathKneeling = false;
			this.Falling = true;
			this.InAir = true;
			this.TimeSequence.TimeMeleeHit = 0f;
			this.MeleeHit = false;
			this.Staggering = false;
			this.m_haveTouchedGroundSinceLastInAir = false;
			this.RefilterContacts = true;
			if (flag)
			{
				this.ForceServerMovementState(25);
				this.ForceClientMovementState(25);
			}
		}

		// Token: 0x06003BA3 RID: 15267 RVA: 0x00030932 File Offset: 0x0002EB32
		internal void SimulateFall()
		{
			this.SimulateFall(Microsoft.Xna.Framework.Vector2.Zero);
		}

		// Token: 0x06003BA4 RID: 15268 RVA: 0x00102424 File Offset: 0x00100624
		internal void SimulateFall(Microsoft.Xna.Framework.Vector2 addVelocity)
		{
			if (this.RocketRideProjectileWorldID > 0)
			{
				return;
			}
			if (this.IsRemoved)
			{
				return;
			}
			if (addVelocity != Microsoft.Xna.Framework.Vector2.Zero)
			{
				Microsoft.Xna.Framework.Vector2 vector = this.WorldBody.GetLinearVelocity() + addVelocity;
				this.m_preBox2DLinearVelocity = vector;
				this.WorldBody.SetLinearVelocity(vector);
			}
			this.CurrentAction = PlayerAction.Disabled;
			this.FullLanding = false;
			this.Climbing = false;
			this.Rolling = false;
			this.Diving = false;
			this.DisableGrabbing(false);
			this.Crouching = false;
			this.LayingOnGround = false;
			this.StandingOnGround = false;
			this.Falling = true;
			this.InAir = true;
			this.TimeSequence.TimeMeleeHit = 0f;
			this.MeleeHit = false;
			this.Staggering = false;
			this.m_haveTouchedGroundSinceLastInAir = false;
			this.ForceClientMovementState(3);
			this.RefilterContacts = true;
		}

		// Token: 0x06003BA5 RID: 15269 RVA: 0x001024F8 File Offset: 0x001006F8
		internal void SimulateFallWithSpeed(Microsoft.Xna.Framework.Vector2 velocity)
		{
			if (this.RocketRideProjectileWorldID > 0)
			{
				return;
			}
			if (this.IsRemoved)
			{
				return;
			}
			this.WorldBody.SetLinearVelocity(this.AirControlBaseVelocity + velocity);
			this.CurrentAction = PlayerAction.Disabled;
			this.FullLanding = false;
			this.Climbing = false;
			this.Rolling = false;
			this.Diving = false;
			this.DisableGrabbing(false);
			this.Crouching = false;
			this.LayingOnGround = false;
			this.StandingOnGround = false;
			this.Falling = true;
			this.InAir = true;
			this.TimeSequence.TimeMeleeHit = 0f;
			this.MeleeHit = false;
			this.Staggering = false;
			this.m_haveTouchedGroundSinceLastInAir = false;
			this.ForceClientMovementState(3);
		}

		// Token: 0x06003BA6 RID: 15270 RVA: 0x0003093F File Offset: 0x0002EB3F
		internal void RecoveryRoll()
		{
			this.CurrentAction = PlayerAction.Idle;
			this.Roll(true);
		}

		// Token: 0x06003BA7 RID: 15271 RVA: 0x001025AC File Offset: 0x001007AC
		internal void Roll(bool isRecoveryRoll = false)
		{
			if (this.GameOwner != GameOwnerEnum.Client)
			{
				this.StopGrabbingChargeSequence(true);
			}
			if (this.CurrentAction != PlayerAction.MeleeAttack1 && this.CurrentAction != PlayerAction.MeleeAttack2 && this.CurrentAction != PlayerAction.MeleeAttack3)
			{
				if (this.CurrentAction != PlayerAction.Kick)
				{
					this.MinimumRollTimeBeforeJump = 90f;
					goto IL_5A;
				}
			}
			this.MinimumRollTimeBeforeJump = Math.Max(90f, this.GetMeleeFrameTimeLeft());
			IL_5A:
			this.ForceClientMovementState(20);
			this.ResetAimAngle = true;
			this.Diving = false;
			this.RollLockMovement = true;
			this.WeaponAbortBurstMode();
			this.Statisticts.m_TotalRolls++;
			this.DrainEnergy(8f);
			this.TakingCover = false;
			this.Sprinting = false;
			this.Falling = false;
			this.Rolling = true;
			this.LastDirectionXActionRoll = this.LastDirectionX;
			if (this.CurrentAction == PlayerAction.Kick)
			{
				this.CurrentAction = PlayerAction.Idle;
			}
			this.AbortMelee();
			if (isRecoveryRoll)
			{
				this.ForceClientMovementState(40);
				this.ForceServerMovementState(40);
				this.LayingOnGround = false;
				this.TimeSequence.TimeForceCrouchDuringRiseTimer = 0f;
				this.TimeSequence.TimeForceLayOnGroundTimer = 0f;
			}
			this.RecoveryRolling = isRecoveryRoll;
			this.ImportantUpdate = true;
			if (this.GameOwner != GameOwnerEnum.Client)
			{
				this.LowerFireRank();
			}
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				this.SyncClientAction(this.RecoveryRolling ? ClientActionType.RecoveryRoll : ClientActionType.Roll);
			}
		}

		// Token: 0x06003BA8 RID: 15272 RVA: 0x00102708 File Offset: 0x00100908
		internal void EnterThrowingMode()
		{
			this.EnteringThrowingMode = true;
			this.RedrawWeaponItem(this.CurrentWeaponDrawn, false, false);
			SoundHandler.PlaySound("Draw1", this.Position, this.GameWorld);
			this.InThrowingMode = true;
			this.TimeSequence.TimeToggleThrowingModeCooldown = 400f;
			this.ThrowingModeToggleQueued = false;
			this.ImportantUpdate = true;
		}

		// Token: 0x06003BA9 RID: 15273 RVA: 0x00102768 File Offset: 0x00100968
		internal void ExitThrowingMode()
		{
			this.ExitingThrowingMode = true;
			this.RedrawWeaponItem(this.CurrentWeaponDrawn, false, false);
			SoundHandler.PlaySound("Draw1", this.Position, this.GameWorld);
			this.TimeSequence.TimeToggleThrowingModeCooldown = 400f;
			this.ThrowingModeToggleQueued = false;
			this.ImportantUpdate = true;
		}

		// Token: 0x06003BAA RID: 15274 RVA: 0x0003094F File Offset: 0x0002EB4F
		internal void DropLadderAndLedge()
		{
			if (this.LedgeGrabbing)
			{
				this.LedgeGrabDisableGrabbingCurrentLedges();
				this.ClearLedgeGrab();
			}
			else
			{
				this.Jump(0.5f, false);
			}
			this.ImportantUpdate = true;
			this.ForceClientMovementState(5);
		}

		// Token: 0x06003BAB RID: 15275 RVA: 0x00030981 File Offset: 0x0002EB81
		internal void Jump()
		{
			this.Jump(7.55f, false);
		}

		// Token: 0x06003BAC RID: 15276 RVA: 0x001027C0 File Offset: 0x001009C0
		internal void Jump(float jumpPower, bool keepRolling = false)
		{
			this.RollLockMovement = false;
			if (this.LedgeGrabbing)
			{
				float worldValue = (float)(-(float)this.LedgeGrabData.GrabDirectionX);
				this.WorldBody.SetTransform(this.WorldBody.GetPosition() + new Microsoft.Xna.Framework.Vector2(Converter.WorldToBox2D(worldValue), 0f), 0f);
			}
			this.ClearLedgeGrab();
			this.LedgeGrabClearDisabledGrabbingLedges();
			this.CheckForceKneel(this.GetGravityLineNormal());
			if (this.ForceKneel)
			{
				return;
			}
			this.ResetAimAngle = true;
			this.UpdateAirControlVelocity();
			if (jumpPower > 1f)
			{
				this.Statisticts.m_TotalJumps++;
				if (this.GameOwner == GameOwnerEnum.Client)
				{
					this.SyncClientAction(ClientActionType.Jump);
				}
				this.m_timeSinceLastJump = 0f;
				this.DrainEnergy(this.Sprinting ? 10f : 5f);
				if (this.CurrentAction == PlayerAction.JumpKick | this.CurrentAction == PlayerAction.JumpAttack)
				{
					this.CurrentActionToIdle();
				}
			}
			else
			{
				this.IncreaseClimbDropCount();
			}
			this.TakingCover = false;
			this.TimeSequence.TimeDisableDownThroughCloud = 0f;
			this.TimeSequence.TimeTriggerDownThroughCloudsDelay = 0f;
			if (!this.CanActivateSprint())
			{
				this.Sprinting = false;
			}
			if (this.GameOwner != GameOwnerEnum.Server)
			{
				SoundHandler.PlaySound("PlayerDive", this.Position, 0.75f, this.GameWorld);
			}
			this.TimeSequence.TimeJumpTimeout = 100f;
			this.TimeSequence.TimeTriggerJump = 0f;
			if (this.Climbing)
			{
				this.TimeSequence.TimeClimbJumpCooldown = 800f;
			}
			this.StandingOnGround = false;
			this.InAir = true;
			this.m_playerFixtureCircle.SetFriction(0f);
			if (!keepRolling)
			{
				if (this.Rolling | this.Diving)
				{
					this.TimeSequence.TimeStuntCooldown = 1000f - Math.Min(this.RollTime, 500f);
				}
				this.Rolling = false;
			}
			this.Diving = false;
			this.Climbing = false;
			this.DisableGrabbing(false);
			this.AirControlBaseVelocity = new Microsoft.Xna.Framework.Vector2(this.AirControlBaseVelocity.X, SFDMath.DampenTowardsZero(this.AirControlBaseVelocity.Y, 0.35f));
			Microsoft.Xna.Framework.Vector2 linearVelocity = new Microsoft.Xna.Framework.Vector2(this.AirControlBaseVelocity.X + this.WorldBody.GetLinearVelocity().X, this.AirControlBaseVelocity.Y + jumpPower);
			this.WorldBody.SetLinearVelocity(linearVelocity);
			this.ImportantUpdate = true;
		}

		// Token: 0x06003BAD RID: 15277 RVA: 0x00102A2C File Offset: 0x00100C2C
		internal void UpdateAirControlVelocity()
		{
			if (this.CurrentAction != PlayerAction.Kick)
			{
				if (this.StandingOnBody != null)
				{
					if (this.StandingOnBody.GetFixtureList().ShapeType == ShapeType.Circle)
					{
						this.AirControlBaseVelocity = this.AirControlBaseVelocity * 0.2f + this.StandingOnBody.GetLinearVelocityFromWorldPoint(this.WorldBody.GetPosition()) * 0.8f;
					}
					else
					{
						this.AirControlBaseVelocity = this.StandingOnBody.GetLinearVelocity();
					}
				}
				else if (this.StandingOnGround)
				{
					this.AirControlBaseVelocity = Microsoft.Xna.Framework.Vector2.Zero;
				}
				if (this.CurrentAction == PlayerAction.Disabled && this.InAir && !this.GrabCharging && !this.Staggering)
				{
					this.AirControlBaseVelocity = Microsoft.Xna.Framework.Vector2.Zero;
				}
			}
		}

		// Token: 0x06003BAE RID: 15278 RVA: 0x00102AF0 File Offset: 0x00100CF0
		internal void Dive()
		{
			this.ForceClientMovementState(20);
			this.Statisticts.m_TotalDives++;
			this.UpdateAirControlVelocity();
			this.DrainEnergy(10f);
			this.TimeSequence.TimeTriggerJump = 0f;
			this.ResetAimAngle = true;
			this.StandingOnGround = false;
			this.InAir = true;
			this.Diving = true;
			Microsoft.Xna.Framework.Vector2 position = this.WorldBody.GetPosition();
			position.Y += 0.15f;
			this.WorldBody.SetTransform(position, 0f);
			Microsoft.Xna.Framework.Vector2 linearVelocity = this.AirControlBaseVelocity + new Microsoft.Xna.Framework.Vector2(this.WorldBody.GetLinearVelocity().X, 5f);
			this.WorldBody.SetLinearVelocity(linearVelocity);
			this.ImportantUpdate = true;
			this.m_haveTouchedGroundSinceLastInAir = false;
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				this.SyncClientAction(ClientActionType.Dive);
			}
		}

		// Token: 0x06003BAF RID: 15279 RVA: 0x0003098F File Offset: 0x0002EB8F
		private void DrainEnergy(float energyAmount)
		{
			if (!Cheat.InfiniteEnergy && !this.SpeedBoostActive)
			{
				this.TimeSequence.TimeEnergyRechargeCooldown = 100f;
				this.Energy.CurrentValue -= energyAmount * this.m_modifiers.EnergyConsumptionModifier;
			}
		}

		// Token: 0x06003BB0 RID: 15280 RVA: 0x000309CF File Offset: 0x0002EBCF
		internal void TakeCover()
		{
			if (!this.TakingCover && this.CurrentAction == PlayerAction.HipFire)
			{
				this.FireSequence.HipFireEndTimer = 300f;
				this.CurrentAction = PlayerAction.Idle;
				this.ForceClientMovementState(3);
			}
			this.TakingCover = true;
		}

		// Token: 0x06003BB1 RID: 15281 RVA: 0x00030A07 File Offset: 0x0002EC07
		internal void AllowInstantCoverFromHipFire()
		{
			if (this.CurrentAction == PlayerAction.HipFire && !this.VirtualKeyboard.PressingKey(4, false))
			{
				this.FireSequence.HipFireEndTimer = 300f;
				this.CurrentAction = PlayerAction.Idle;
				this.ForceClientMovementState(3);
			}
		}

		// Token: 0x170009A2 RID: 2466
		// (get) Token: 0x06003BB2 RID: 15282 RVA: 0x00030A3F File Offset: 0x0002EC3F
		internal bool Flash
		{
			get
			{
				return this.m_flashTimer > 0f;
			}
		}

		// Token: 0x06003BB3 RID: 15283 RVA: 0x00030A4E File Offset: 0x0002EC4E
		internal void BeginFlash(float flashTime)
		{
			this.m_flashTimer = flashTime;
		}

		// Token: 0x06003BB4 RID: 15284 RVA: 0x00030A57 File Offset: 0x0002EC57
		internal void StopFlash()
		{
			this.m_flashTimer = 0f;
		}

		// Token: 0x170009A3 RID: 2467
		// (get) Token: 0x06003BB5 RID: 15285 RVA: 0x00030A64 File Offset: 0x0002EC64
		internal float DrawScale
		{
			get
			{
				return ((this.m_modifiers.SizeModifier > 0f) ? this.m_modifiers.SizeModifier : 1f) * (this.StrengthBoostActive ? 1.15f : 1f);
			}
		}

		// Token: 0x170009A4 RID: 2468
		// (get) Token: 0x06003BB6 RID: 15286 RVA: 0x00102BD8 File Offset: 0x00100DD8
		internal Microsoft.Xna.Framework.Color DrawColor
		{
			get
			{
				if (this.Health.CheckRecentlyDecreased(40f) || this.Burning)
				{
					return ColorCorrection.CreateCustom(Constants.COLORS.DAMAGE_FLASH_PLAYER) * 2f;
				}
				if (this.Flash && this.m_currentFlashTime <= 0f)
				{
					return Constants.COLORS.PLAYER_FLASH_LIGHT;
				}
				if (this.StrengthBoostActive && this.SpeedBoostActive)
				{
					int val = (int)Constants.COLORS.STRENGTH_BOOST_PLAYER.R + (Math.Abs((int)(Constants.COLORS.STRENGTH_BOOST_PLAYER.R - Constants.COLORS.SPEED_BOOST_PLAYER.R)) >> 1);
					int val2 = (int)Constants.COLORS.STRENGTH_BOOST_PLAYER.G + (Math.Abs((int)(Constants.COLORS.STRENGTH_BOOST_PLAYER.G - Constants.COLORS.SPEED_BOOST_PLAYER.G)) >> 1);
					int val3 = (int)Constants.COLORS.STRENGTH_BOOST_PLAYER.B + (Math.Abs((int)(Constants.COLORS.STRENGTH_BOOST_PLAYER.B - Constants.COLORS.SPEED_BOOST_PLAYER.B)) >> 1);
					return ColorCorrection.CreateCustom(new Microsoft.Xna.Framework.Color(Math.Min(val, 255), Math.Min(val2, 255), Math.Min(val3, 255))) * 2f;
				}
				if (this.StrengthBoostActive)
				{
					return ColorCorrection.CreateCustom(Constants.COLORS.STRENGTH_BOOST_PLAYER) * 2f;
				}
				if (this.SpeedBoostActive)
				{
					return ColorCorrection.CreateCustom(Constants.COLORS.SPEED_BOOST_PLAYER) * 2f;
				}
				return Microsoft.Xna.Framework.Color.Gray;
			}
		}

		// Token: 0x06003BB7 RID: 15287 RVA: 0x00102D38 File Offset: 0x00100F38
		private void UpdateFlash(float ms)
		{
			if (this.m_currentFlashTime >= 0f)
			{
				this.m_currentFlashTime -= ms;
				if (this.m_currentFlashTime < 0f)
				{
					this.m_currentFlashTime = -this.FLASH_TIME_CHARGE;
					return;
				}
			}
			else
			{
				this.m_currentFlashTime += ms;
				if (this.m_currentFlashTime >= 0f)
				{
					this.m_currentFlashTime = this.FLASH_TIME_LIGHT;
				}
			}
		}

		// Token: 0x170009A5 RID: 2469
		// (get) Token: 0x06003BB8 RID: 15288 RVA: 0x00030A9F File Offset: 0x0002EC9F
		// (set) Token: 0x06003BB9 RID: 15289 RVA: 0x00030AA7 File Offset: 0x0002ECA7
		public Microsoft.Xna.Framework.Vector2 Position { get; set; }

		// Token: 0x170009A6 RID: 2470
		// (get) Token: 0x06003BBA RID: 15290 RVA: 0x00030AB0 File Offset: 0x0002ECB0
		// (set) Token: 0x06003BBB RID: 15291 RVA: 0x00030AB8 File Offset: 0x0002ECB8
		public float Rotation { get; set; }

		// Token: 0x170009A7 RID: 2471
		// (get) Token: 0x06003BBC RID: 15292 RVA: 0x00030AC1 File Offset: 0x0002ECC1
		// (set) Token: 0x06003BBD RID: 15293 RVA: 0x00030AC9 File Offset: 0x0002ECC9
		public float RotationDirection { get; set; }

		// Token: 0x170009A8 RID: 2472
		// (get) Token: 0x06003BBE RID: 15294 RVA: 0x00030AD2 File Offset: 0x0002ECD2
		// (set) Token: 0x06003BBF RID: 15295 RVA: 0x00030ADA File Offset: 0x0002ECDA
		public float LastFallingRotation { get; set; }

		// Token: 0x170009A9 RID: 2473
		// (get) Token: 0x06003BC0 RID: 15296 RVA: 0x00030AE3 File Offset: 0x0002ECE3
		// (set) Token: 0x06003BC1 RID: 15297 RVA: 0x00030AEB File Offset: 0x0002ECEB
		public Equipment Equipment { get; set; }

		// Token: 0x170009AA RID: 2474
		// (get) Token: 0x06003BC2 RID: 15298 RVA: 0x00030AF4 File Offset: 0x0002ECF4
		// (set) Token: 0x06003BC3 RID: 15299 RVA: 0x00030AFC File Offset: 0x0002ECFC
		public string Name { get; private set; }

		// Token: 0x170009AB RID: 2475
		// (get) Token: 0x06003BC4 RID: 15300 RVA: 0x00030B05 File Offset: 0x0002ED05
		// (set) Token: 0x06003BC5 RID: 15301 RVA: 0x00030B0D File Offset: 0x0002ED0D
		public Player.DrawStatusInfoFlags DrawStatusInfo { get; private set; }

		// Token: 0x170009AC RID: 2476
		// (get) Token: 0x06003BC6 RID: 15302 RVA: 0x00030B16 File Offset: 0x0002ED16
		// (set) Token: 0x06003BC7 RID: 15303 RVA: 0x00030B1E File Offset: 0x0002ED1E
		public Player.ShakeValues Shake { get; private set; }

		// Token: 0x06003BC8 RID: 15304 RVA: 0x00102DA4 File Offset: 0x00100FA4
		internal void UpdateRotationDirection(int prefferedRotationDirection = 0)
		{
			if (prefferedRotationDirection == 0)
			{
				prefferedRotationDirection = -this.LastDirectionX;
				if (this.PreBox2DLinearVelocity.X > 0.1f)
				{
					prefferedRotationDirection = 1;
				}
				else if (this.PreBox2DLinearVelocity.X < -0.1f)
				{
					prefferedRotationDirection = -1;
				}
				if (this.GrabImmunity)
				{
					prefferedRotationDirection = -prefferedRotationDirection;
				}
			}
			Microsoft.Xna.Framework.Vector2 vector = this.Disabled ? this.CurrentVelocity : this.CurrentSpeed;
			if (Math.Abs(vector.X) < 0.1f)
			{
				vector = this.CurrentVelocity;
			}
			this.RotationDirection = ((vector.X > 0.1f) ? 1f : ((vector.X < -0.1f) ? -1f : ((float)prefferedRotationDirection)));
		}

		// Token: 0x170009AD RID: 2477
		// (get) Token: 0x06003BC9 RID: 15305 RVA: 0x00030B27 File Offset: 0x0002ED27
		// (set) Token: 0x06003BCA RID: 15306 RVA: 0x00030B2F File Offset: 0x0002ED2F
		public float SlowmotionFactor { get; set; }

		// Token: 0x170009AE RID: 2478
		// (get) Token: 0x06003BCB RID: 15307 RVA: 0x00030B38 File Offset: 0x0002ED38
		// (set) Token: 0x06003BCC RID: 15308 RVA: 0x00030B40 File Offset: 0x0002ED40
		public float SlowmotionProjectileFactor { get; set; }

		// Token: 0x06003BCD RID: 15309 RVA: 0x00030B49 File Offset: 0x0002ED49
		public void SetName(string name)
		{
			this.Name = name;
			this.m_nameTextSize = Constants.MeasureString(this.m_font, this.Name);
		}

		// Token: 0x06003BCE RID: 15310 RVA: 0x00030B69 File Offset: 0x0002ED69
		public string GetUserName()
		{
			return this.Name;
		}

		// Token: 0x06003BCF RID: 15311 RVA: 0x00102E58 File Offset: 0x00101058
		public bool SetBotName(string name)
		{
			if (this.IsBot)
			{
				string name2 = "";
				string text = "";
				if (Profile.ValidateName(name, out name2, out text))
				{
					if (this.m_currentProfile != null)
					{
						this.m_currentProfile.Name = name2;
					}
					this.SetName(name2);
					this.MetaDataUpdated = true;
					return true;
				}
			}
			return false;
		}

		// Token: 0x1400000F RID: 15
		// (add) Token: 0x06003BD0 RID: 15312 RVA: 0x00102EAC File Offset: 0x001010AC
		// (remove) Token: 0x06003BD1 RID: 15313 RVA: 0x00102EE4 File Offset: 0x001010E4
		internal event SubAnimationFrameEvent SecondSubAnimationFrameEvent;

		// Token: 0x170009AF RID: 2479
		// (get) Token: 0x06003BD2 RID: 15314 RVA: 0x00030B71 File Offset: 0x0002ED71
		public int LastDirectionXVisual
		{
			get
			{
				if (this.m_currentAnimation != Animation.Cover)
				{
					return this.LastDirectionX;
				}
				return -this.LastDirectionX;
			}
		}

		// Token: 0x170009B0 RID: 2480
		// (get) Token: 0x06003BD3 RID: 15315 RVA: 0x00030B8B File Offset: 0x0002ED8B
		// (set) Token: 0x06003BD4 RID: 15316 RVA: 0x00030B93 File Offset: 0x0002ED93
		public int LastDirectionXAnimation { get; private set; }

		// Token: 0x170009B1 RID: 2481
		// (get) Token: 0x06003BD5 RID: 15317 RVA: 0x00030B9C File Offset: 0x0002ED9C
		// (set) Token: 0x06003BD6 RID: 15318 RVA: 0x00102F1C File Offset: 0x0010111C
		public int LastDirectionX
		{
			get
			{
				return this.m_lastDirectionX;
			}
			set
			{
				if (value != 1 && value != -1)
				{
					throw new Exception("LastDirectionX can only be 1 or -1");
				}
				if (this.m_lastDirectionX != value)
				{
					this.m_lastDirectionX = value;
					if (this.CurrentAction == PlayerAction.ManualAim)
					{
						this.AimSpeed = 0f;
						if (this.AimAngle >= 1.5697963f)
						{
							if (this.VirtualKeyboard.PressingKey(1, false))
							{
								this.AimAngle = 1.5707964f;
								return;
							}
						}
						else if (this.AimAngle <= -1.5697963f && this.VirtualKeyboard.PressingKey(0, false))
						{
							this.AimAngle = -1.5707964f;
							return;
						}
						this.AimAngle = 0f;
						this.AimSequence = (this.AimSequence + 1) % byte.MaxValue;
						this.CheckManualAimStart(PlayerAction.ManualAim);
						if (this.ManualAimStart)
						{
							this.ForceHardAnimationReset(false);
							return;
						}
					}
					else
					{
						this.ResetAimAngle = true;
						this.ImportantUpdate = (this.CurrentAction == PlayerAction.MeleeAttack1 | this.CurrentAction == PlayerAction.MeleeAttack2 | this.CurrentAction == PlayerAction.MeleeAttack3 | this.CurrentAction == PlayerAction.Kick | this.CurrentAction == PlayerAction.Block | this.CurrentAction == PlayerAction.DrawWeapon | this.CurrentAction == PlayerAction.ManualAim);
					}
				}
			}
		}

		// Token: 0x06003BD7 RID: 15319 RVA: 0x00030BA4 File Offset: 0x0002EDA4
		public SubAnimationPlayer[] GetSubAnimations()
		{
			return this.m_subAnimations;
		}

		// Token: 0x06003BD8 RID: 15320 RVA: 0x00103044 File Offset: 0x00101244
		public void InitPlayerPresentation(GameSFD game)
		{
			this.m_subAnimations = new SubAnimationPlayer[4];
			this.m_tailSubAnimation = new SubAnimationPlayer(this, -1);
			this.m_tailSubAnimation.SetAnimation(Animations.Data.GetAnimation("TailIdle"));
			for (int i = 0; i < this.m_subAnimations.Length; i++)
			{
				this.m_subAnimations[i] = new SubAnimationPlayer(this, i);
			}
			for (int j = 0; j < this.m_subAnimations.Length - 1; j++)
			{
				this.m_subAnimations[j].SetSubAnimationPlayer(this.m_subAnimations[j + 1]);
				this.m_subAnimations[j].SetTailSubAnimationPlayer(this.m_tailSubAnimation);
			}
			for (int k = 0; k < this.m_subAnimations.Length; k++)
			{
				this.m_subAnimations[k].SetAnimation(Animations.Data.GetAnimation("BaseIdle"));
			}
			this.m_subAnimationsLength = 4;
			this.Equipment = new Equipment();
			this.m_currentAnimation = Animation.None;
			this.m_currentAnimationPlayerAction = PlayerAction.Idle;
			this.LastDirectionX = 1;
			this.m_subAnimations[0].SubAnimationFrameEvent += this.SubAnimation0FrameEvent;
			this.m_subAnimations[1].SubAnimationFrameEvent += this.SubAnimation1FrameEvent;
		}

		// Token: 0x06003BD9 RID: 15321 RVA: 0x00103170 File Offset: 0x00101370
		public void RemovePlayerPresentation()
		{
			this.m_subAnimations[0].SubAnimationFrameEvent -= this.SubAnimation0FrameEvent;
			this.m_subAnimations[1].SubAnimationFrameEvent -= this.SubAnimation1FrameEvent;
			foreach (SubAnimationPlayer subAnimationPlayer in this.m_subAnimations)
			{
				subAnimationPlayer.Dispose();
			}
			this.m_tailSubAnimation.Dispose();
			this.m_tailSubAnimation = null;
			this.m_subAnimations = null;
			this.Equipment = null;
		}

		// Token: 0x06003BDA RID: 15322 RVA: 0x00030BAC File Offset: 0x0002EDAC
		private void SubAnimation0FrameEvent(AnimationEvent animationEvent, int subAnimation)
		{
			if (this.SecondSubAnimationFrameEvent != null)
			{
				this.SecondSubAnimationFrameEvent(animationEvent, subAnimation);
			}
		}

		// Token: 0x06003BDB RID: 15323 RVA: 0x00030BAC File Offset: 0x0002EDAC
		private void SubAnimation1FrameEvent(AnimationEvent animationEvent, int subAnimation)
		{
			if (this.SecondSubAnimationFrameEvent != null)
			{
				this.SecondSubAnimationFrameEvent(animationEvent, subAnimation);
			}
		}

		// Token: 0x170009B2 RID: 2482
		// (get) Token: 0x06003BDC RID: 15324 RVA: 0x00030BC3 File Offset: 0x0002EDC3
		public bool IsNullProfile
		{
			get
			{
				return this.m_currentProfile == null;
			}
		}

		// Token: 0x170009B3 RID: 2483
		// (get) Token: 0x06003BDD RID: 15325 RVA: 0x00030BCE File Offset: 0x0002EDCE
		public Player.GenderType Gender
		{
			get
			{
				if (this.m_currentProfile == null)
				{
					return Player.GenderType.Male;
				}
				return this.m_currentProfile.Gender;
			}
		}

		// Token: 0x06003BDE RID: 15326 RVA: 0x001031F0 File Offset: 0x001013F0
		public void ApplyScriptProfile(IProfile profile)
		{
			if (profile == null)
			{
				if (this.m_currentProfile != null)
				{
					this.ApplyProfile(null, false);
					this.MetaDataUpdated = true;
					return;
				}
			}
			else if (false | this.EquipScriptClothingItem(profile.Skin, 0) | this.EquipScriptClothingItem(profile.ChestUnder, 1) | this.EquipScriptClothingItem(profile.Legs, 2) | this.EquipScriptClothingItem(profile.Waist, 3) | this.EquipScriptClothingItem(profile.Feet, 4) | this.EquipScriptClothingItem(profile.ChestOver, 5) | this.EquipScriptClothingItem(profile.Accessory, 6) | this.EquipScriptClothingItem(profile.Hands, 7) | this.EquipScriptClothingItem(profile.Head, 8))
			{
				for (int i = 0; i < 9; i++)
				{
					if (this.m_currentProfile.EquippedItems[i] != null)
					{
						this.Equipment.Equip(this.m_currentProfile.EquippedItems[i]);
					}
					else
					{
						this.Equipment.Unequip(i);
					}
					this.Equipment.SetItemColors(i, this.m_currentProfile.EquippedItemsColors[i]);
				}
				this.CheckBurnedProfile();
				this.MetaDataUpdated = true;
			}
		}

		// Token: 0x06003BDF RID: 15327 RVA: 0x00103304 File Offset: 0x00101504
		private bool EquipScriptClothingItem(IProfileClothingItem clothingItem, int layer)
		{
			Item item = (clothingItem != null) ? Items.GetItem(clothingItem.Name) : null;
			if (item != null && (item.EquipmentLayer != layer || (!item.CanScript && !item.CanEquip)))
			{
				item = null;
			}
			if (item != null)
			{
				Item item2 = this.m_currentProfile.EquippedItems[layer];
				string a = string.Format("{0}_{1}_{2}", this.m_currentProfile.EquippedItemsColors[layer][0], this.m_currentProfile.EquippedItemsColors[layer][1], this.m_currentProfile.EquippedItemsColors[layer][2]);
				this.m_currentProfile.EquippedItemsColors[layer][0] = "";
				this.m_currentProfile.EquippedItemsColors[layer][1] = "";
				this.m_currentProfile.EquippedItemsColors[layer][2] = "";
				this.m_currentProfile.EquipItem(clothingItem.Name, clothingItem.Color1, clothingItem.Color2, clothingItem.Color3);
				Item item3 = this.m_currentProfile.EquippedItems[layer];
				string b = string.Format("{0}_{1}_{2}", this.m_currentProfile.EquippedItemsColors[layer][0], this.m_currentProfile.EquippedItemsColors[layer][1], this.m_currentProfile.EquippedItemsColors[layer][2]);
				return item2 != item3 || a != b;
			}
			if (layer == 0)
			{
				return false;
			}
			if (this.m_currentProfile.EquippedItems[layer] != null)
			{
				this.m_currentProfile.EquippedItems[layer] = null;
				this.m_currentProfile.EquippedItemsColors[layer][0] = "";
				this.m_currentProfile.EquippedItemsColors[layer][1] = "";
				this.m_currentProfile.EquippedItemsColors[layer][2] = "";
				return true;
			}
			return false;
		}

		// Token: 0x06003BE0 RID: 15328 RVA: 0x001034A0 File Offset: 0x001016A0
		public void ApplyProfile(Profile profile, bool setName = true)
		{
			if (profile == null)
			{
				if (this.m_currentProfile != null)
				{
					for (int i = 0; i < 9; i++)
					{
						this.Equipment.Unequip(i);
					}
					this.m_currentProfile = null;
				}
				this.CheckBurnedProfile();
				return;
			}
			bool flag = this.m_currentProfile != profile;
			this.m_currentProfile = profile;
			if (setName)
			{
				this.m_currentProfile.ValidateProfileIntegrity(true, Profile.ValidateProfileType.None);
				this.Name = this.m_currentProfile.Name;
				this.m_nameTextSize = Constants.MeasureString(this.m_font, this.Name);
			}
			if (!flag)
			{
				return;
			}
			for (int j = 0; j < 9; j++)
			{
				if (this.m_currentProfile.EquippedItems[j] != null)
				{
					this.Equipment.Equip(this.m_currentProfile.EquippedItems[j]);
				}
				else
				{
					this.Equipment.Unequip(j);
				}
				this.Equipment.SetItemColors(j, this.m_currentProfile.EquippedItemsColors[j]);
			}
			this.CheckBurnedProfile();
		}

		// Token: 0x06003BE1 RID: 15329 RVA: 0x00030BE5 File Offset: 0x0002EDE5
		public Profile GetProfile()
		{
			return this.m_currentProfile;
		}

		// Token: 0x06003BE2 RID: 15330 RVA: 0x00030BED File Offset: 0x0002EDED
		public void SetSubAnimation(int subIndex, AnimationData animation)
		{
			this.m_subAnimations[subIndex].SetAnimation(animation);
		}

		// Token: 0x06003BE3 RID: 15331 RVA: 0x00103590 File Offset: 0x00101790
		public List<AnimationPartData> GetSubItemMarkerInfo(int itemPartID)
		{
			List<AnimationPartData> list = new List<AnimationPartData>(3);
			this.m_subAnimations[0].FindSubItemMarkerInfo(itemPartID, list);
			return list;
		}

		// Token: 0x06003BE4 RID: 15332 RVA: 0x001035B8 File Offset: 0x001017B8
		public AnimationPartData GetSubItemMarkerInfo(int itemPartID, out Microsoft.Xna.Framework.Vector2 localPosition, out float partRotation, out int foundInSubAnim)
		{
			foundInSubAnim = -1;
			AnimationPartData animationPartData = this.m_subAnimations[0].FindSubItemMarkerInfo(itemPartID, 0, out foundInSubAnim);
			if (animationPartData != null)
			{
				localPosition = new Microsoft.Xna.Framework.Vector2(animationPartData.X, animationPartData.Y);
				partRotation = animationPartData.Rotation;
				return animationPartData;
			}
			localPosition = Microsoft.Xna.Framework.Vector2.One;
			partRotation = 0f;
			return null;
		}

		// Token: 0x06003BE5 RID: 15333 RVA: 0x00103614 File Offset: 0x00101814
		public void Draw(SpriteBatch spriteBatch, float ms)
		{
			if (!this.IsNullProfile)
			{
				if (this.WorldBody != null)
				{
					this.UpdatePlayerPositionToBox2DPosition(ms);
				}
				Microsoft.Xna.Framework.Vector2 vector = this.Position;
				this.Shake.UpdateShake(ms / this.GameWorld.SlowmotionHandler.SlowmotionModifier);
				vector = this.Shake.ApplyShake(vector);
				int animationDirection = this.GetAnimationDirection();
				int hurtLevel = 0;
				if (!this.Burned)
				{
					float fullness = this.Health.Fullness;
					hurtLevel = ((this.Health.Fullness <= 0.12f) ? 2 : ((fullness <= 0.25f) ? 1 : 0));
				}
				this.Equipment.EnsureHurtLevelEquipped(hurtLevel);
				float drawScale = this.DrawScale;
				if (this.m_currentDrawScale != drawScale)
				{
					if (this.GameWorld.ElapsedTotalRealTime - this.CreateTime < 100f)
					{
						this.m_currentDrawScale = this.DrawScale;
					}
					else if (this.m_currentDrawScale < drawScale)
					{
						this.m_currentDrawScale += 0.0003f * ms;
						if (this.m_currentDrawScale > drawScale)
						{
							this.m_currentDrawScale = drawScale;
						}
					}
					else
					{
						this.m_currentDrawScale -= 0.0003f * ms;
						if (this.m_currentDrawScale < drawScale)
						{
							this.m_currentDrawScale = drawScale;
						}
					}
				}
				if (this.SpeedBoostActive)
				{
					Microsoft.Xna.Framework.Vector2 vector2 = vector - this.m_speedBoostDelayedPos;
					float num = vector2.CalcSafeLength();
					if (num > 6f)
					{
						vector2.Normalize();
						if (vector2.IsValid())
						{
							this.m_speedBoostDelayedPos = vector - vector2 * 5.99f;
						}
					}
					else
					{
						vector2.Normalize();
						if (vector2.IsValid())
						{
							this.m_speedBoostDelayedPos += vector2 * Math.Min(ms / 13f, num);
						}
					}
					Microsoft.Xna.Framework.Color drawColor = this.DrawColor;
					drawColor.A = 40;
					this.m_subAnimations[0].Draw(spriteBatch, this.m_speedBoostDelayedPos, this.m_currentDrawScale, animationDirection, this.Rotation + this.m_subAnimations[0].Rotation, this.Equipment, drawColor, ms);
				}
				this.m_subAnimations[0].Draw(spriteBatch, vector, this.m_currentDrawScale, animationDirection, this.Rotation + this.m_subAnimations[0].Rotation, this.Equipment, this.DrawColor, ms);
			}
		}

		// Token: 0x06003BE6 RID: 15334 RVA: 0x00030BFD File Offset: 0x0002EDFD
		public void DrawOnScreen(SpriteBatch spriteBatch, Microsoft.Xna.Framework.Vector2 position, float rotation, float scale, Microsoft.Xna.Framework.Color fillColor, float ms)
		{
			this.DrawOnScreen(spriteBatch, position, rotation, scale, 1, fillColor, ms);
		}

		// Token: 0x06003BE7 RID: 15335 RVA: 0x00103854 File Offset: 0x00101A54
		public void DrawOnScreen(SpriteBatch spriteBatch, Microsoft.Xna.Framework.Vector2 position, float rotation, float scale, int direction, Microsoft.Xna.Framework.Color fillColor, float ms)
		{
			if (!this.IsNullProfile)
			{
				this.m_subAnimations[0].DrawOnScreen(spriteBatch, position, rotation + this.m_subAnimations[0].Rotation, scale, direction, this.Equipment, fillColor, ms);
			}
		}

		// Token: 0x06003BE8 RID: 15336 RVA: 0x00030C0F File Offset: 0x0002EE0F
		public int GetAnimationDirection()
		{
			if (this.Climbing)
			{
				return 1;
			}
			if (!(this.m_currentAnimation == Animation.Cover | (this.m_currentAnimation == Animation.Crouch & this.TakingCover)))
			{
				return this.LastDirectionXAnimation;
			}
			return -this.LastDirectionXAnimation;
		}

		// Token: 0x06003BE9 RID: 15337 RVA: 0x00103898 File Offset: 0x00101A98
		public void DrawDistanceArrow(Area boundsArrows)
		{
			if ((this.DrawStatusInfo & Player.DrawStatusInfoFlags.Name) != Player.DrawStatusInfoFlags.Name)
			{
				return;
			}
			Microsoft.Xna.Framework.Vector2 vector = this.Position + new Microsoft.Xna.Framework.Vector2(0f, 8f);
			float distanceFromEdge = boundsArrows.GetDistanceFromEdge(vector);
			if (distanceFromEdge > 10f)
			{
				int num = (int)Math.Round((double)(distanceFromEdge / 12f));
				int num2 = 0;
				int num3 = 0;
				if (boundsArrows.Right < vector.X)
				{
					num2 = 1;
				}
				else if (boundsArrows.Left > vector.X)
				{
					num2 = -1;
				}
				if (boundsArrows.Top < vector.Y)
				{
					num3 = 1;
				}
				else if (boundsArrows.Bottom > vector.Y)
				{
					num3 = -1;
				}
				if (num2 != 0 || num3 != 0)
				{
					Microsoft.Xna.Framework.Vector2 vector2 = vector;
					if (vector2.X > boundsArrows.Right)
					{
						vector2.X = boundsArrows.Right;
					}
					else if (vector2.X < boundsArrows.Left)
					{
						vector2.X = boundsArrows.Left;
					}
					if (vector2.Y > boundsArrows.Top)
					{
						vector2.Y = boundsArrows.Top;
					}
					else if (vector2.Y < boundsArrows.Bottom)
					{
						vector2.Y = boundsArrows.Bottom;
					}
					vector2 = Camera.ConvertWorldToScreen(vector2);
					vector2.X -= (float)(num2 * (Constants.DistanceArrow.Width + 10) / 2);
					vector2.Y += (float)(num3 * (Constants.DistanceArrow.Height + 10) / 2);
					float rotation = 0f;
					Texture2D texture2D;
					if (num2 != 0 && num3 != 0)
					{
						texture2D = Constants.DistanceArrowD;
						if (num2 == 1)
						{
							if (num3 == 1)
							{
								rotation = -1.5707964f;
							}
							else if (num3 == -1)
							{
								rotation = 0f;
							}
						}
						else if (num3 == 1)
						{
							rotation = 3.1415927f;
						}
						else if (num3 == -1)
						{
							rotation = 1.5707964f;
						}
					}
					else
					{
						texture2D = Constants.DistanceArrow;
						if (num2 == 1)
						{
							rotation = 0f;
						}
						else if (num2 == -1)
						{
							rotation = 3.1415927f;
						}
						else if (num3 == 1)
						{
							rotation = -1.5707964f;
						}
						else if (num3 == -1)
						{
							rotation = 1.5707964f;
						}
					}
					Microsoft.Xna.Framework.Vector2 origin = new Microsoft.Xna.Framework.Vector2((float)texture2D.Width / 2f, (float)texture2D.Height / 2f);
					float num4 = Math.Max(Camera.Zoom * 0.5f, 1f);
					this.m_spriteBatch.Draw(texture2D, vector2, null, Microsoft.Xna.Framework.Color.Gray, rotation, origin, num4, SpriteEffects.None, 0f);
					vector2.X -= (float)(num2 * (Constants.DistanceArrow.Width + 10)) * num4;
					vector2.Y += (float)(num3 * (Constants.DistanceArrow.Height + 10)) * num4;
					string text = string.Format("{0} ({1})", this.Name, num);
					if (Constants.Font1Outline != null)
					{
						Texture2D texture2D2 = null;
						switch (this.CurrentTeam)
						{
						case Team.Team1:
							texture2D2 = Constants.TeamIcon1;
							break;
						case Team.Team2:
							texture2D2 = Constants.TeamIcon2;
							break;
						case Team.Team3:
							texture2D2 = Constants.TeamIcon3;
							break;
						case Team.Team4:
							texture2D2 = Constants.TeamIcon4;
							break;
						}
						Microsoft.Xna.Framework.Vector2 value = Constants.MeasureString(Constants.Font1Outline, text);
						float num5 = Camera.ConvertWorldToScreenX(boundsArrows.Left);
						float num6 = Camera.ConvertWorldToScreenX(boundsArrows.Right);
						if (texture2D2 != null)
						{
							num5 += ((float)texture2D2.Width + 4f) * num4;
						}
						if (num3 == 0)
						{
							num6 -= (float)texture2D.Width;
							num5 += (float)texture2D.Width;
						}
						if (vector2.X + value.X / 3f * num4 > num6)
						{
							vector2.X = num6 - value.X / 3f * num4;
						}
						if (vector2.X - value.X / 3f * num4 < num5)
						{
							vector2.X = num5 + value.X / 3f * num4;
						}
						float num7 = vector2.X - value.X * 0.5f * (num4 * 0.5f);
						Constants.DrawString(this.m_spriteBatch, Constants.Font1Outline, text, vector2, this.CurrentTeamColor, 0f, value * 0.5f, num4 * 0.5f, SpriteEffects.None, 0);
						if (texture2D2 != null)
						{
							this.m_spriteBatch.Draw(texture2D2, new Microsoft.Xna.Framework.Vector2(num7 - (float)texture2D2.Width * num4, vector2.Y - value.Y * 0.25f * num4), null, Microsoft.Xna.Framework.Color.Gray, 0f, Microsoft.Xna.Framework.Vector2.Zero, num4, SpriteEffects.None, 1f);
						}
					}
				}
			}
		}

		// Token: 0x06003BEA RID: 15338 RVA: 0x00103D28 File Offset: 0x00101F28
		public void DrawPlates(float ms)
		{
			Microsoft.Xna.Framework.Vector2 vector = Camera.ConvertWorldToScreen(this.Position + new Microsoft.Xna.Framework.Vector2(0f, 24f));
			float num = Microsoft.Xna.Framework.MathHelper.Max(Camera.Zoom * 0.5f, 1f);
			if (!this.IsDead)
			{
				if ((this.DrawStatusInfo & Player.DrawStatusInfoFlags.Name) == Player.DrawStatusInfoFlags.Name)
				{
					Constants.DrawString(this.m_spriteBatch, Constants.Font1Outline, this.Name, new Microsoft.Xna.Framework.Vector2(vector.X, vector.Y - 0.75f * this.m_nameTextSize.Y * num), this.GetTeamTextColor(), 0f, this.m_nameTextSize * 0.5f, num * 0.5f, SpriteEffects.None, 0);
					Texture2D teamIcon = Constants.GetTeamIcon(this.m_currentTeam);
					if (teamIcon != null)
					{
						this.m_spriteBatch.Draw(teamIcon, new Microsoft.Xna.Framework.Vector2(vector.X - this.m_nameTextSize.X * 0.25f * num - (float)teamIcon.Width * num, vector.Y - this.m_nameTextSize.Y * num), null, Microsoft.Xna.Framework.Color.Gray, 0f, Microsoft.Xna.Framework.Vector2.Zero, num, SpriteEffects.None, 1f);
					}
				}
				if (this.ChatActive)
				{
					if (this.m_chatIconTimer > 250f)
					{
						this.m_chatIconFrame = (this.m_chatIconFrame + 1) % 4;
						this.m_chatIconTimer -= 250f;
					}
					else
					{
						this.m_chatIconTimer += ms;
					}
					this.m_spriteBatch.Draw(Constants.ChatIcon, new Microsoft.Xna.Framework.Vector2(vector.X + this.m_nameTextSize.X * 0.25f * num, vector.Y - this.m_nameTextSize.Y * num), new Rectangle?(new Rectangle(1 + this.m_chatIconFrame * 13, 1, 12, 12)), ColorCorrection.FromXNAToCustom(Constants.COLORS.CHAT_ICON), 0f, Microsoft.Xna.Framework.Vector2.Zero, num, SpriteEffects.None, 1f);
				}
			}
			vector.Y -= 11f * num;
			if ((this.DrawStatusInfo & Player.DrawStatusInfoFlags.StatusBars) == Player.DrawStatusInfoFlags.StatusBars)
			{
				Player.HealthMode currentHealthMode = this.GetCurrentHealthMode();
				if (!this.IsDead)
				{
					BarMeter barMeter = this.Health;
					bool flag = barMeter.CheckRecentlyModified(2000f);
					Microsoft.Xna.Framework.Color xnaColor = Constants.COLORS.LIFE_BAR;
					if (currentHealthMode == Player.HealthMode.StrengthBoostOverHealth || currentHealthMode == Player.HealthMode.RocketRideOverHealth)
					{
						barMeter = this.OverHealth;
						xnaColor = (((int)(GameSFD.LastUpdateNetTimeMS / 200f) % 2 == 0) ? Constants.COLORS.LIFE_BAR_OVERHEALTH_A : Constants.COLORS.LIFE_BAR_OVERHEALTH_B);
						flag = true;
					}
					if (flag | this.Energy.CheckRecentlyModified(2000f))
					{
						float num2 = 32f * num;
						float num3 = 2f * num;
						Rectangle destinationRectangle = new Rectangle((int)(vector.X - num2 / 2f), (int)vector.Y, (int)num2, (int)num3);
						float num4 = Math.Max(1f, Camera.Zoom * 0.5f);
						for (float num5 = -num4; num5 <= num4; num5 += num4 * 2f)
						{
							for (float num6 = -num4; num6 <= num4; num6 += num4 * 2f)
							{
								Rectangle destinationRectangle2 = new Rectangle(destinationRectangle.X + (int)num5, destinationRectangle.Y + (int)num6, destinationRectangle.Width, (int)((float)destinationRectangle.Height * 2f));
								this.m_spriteBatch.Draw(Constants.WhitePixel, destinationRectangle2, Microsoft.Xna.Framework.Color.Black);
							}
						}
						this.m_spriteBatch.Draw(Constants.WhitePixel, destinationRectangle, new Microsoft.Xna.Framework.Color(64, 64, 64));
						if (barMeter.CheckRecentlyModified(50f))
						{
							xnaColor = Microsoft.Xna.Framework.Color.White;
						}
						int width = destinationRectangle.Width;
						destinationRectangle.Width = (int)((float)width * barMeter.Fullness);
						this.m_spriteBatch.Draw(Constants.WhitePixel, destinationRectangle, ColorCorrection.FromXNAToCustom(xnaColor));
						destinationRectangle.Y += destinationRectangle.Height;
						destinationRectangle.Width = width;
						this.m_spriteBatch.Draw(Constants.WhitePixel, destinationRectangle, new Microsoft.Xna.Framework.Color(64, 64, 64));
						destinationRectangle.Width = (int)((float)width * this.Energy.Fullness);
						this.m_spriteBatch.Draw(Constants.WhitePixel, destinationRectangle, ColorCorrection.FromXNAToCustom(Constants.COLORS.ENERGY_BAR));
					}
				}
			}
		}

		// Token: 0x06003BEB RID: 15339 RVA: 0x00104164 File Offset: 0x00102364
		public void DrawAim(float ms, Player.DrawAimMode aimMode)
		{
			if (this.IsRemoved)
			{
				return;
			}
			if (aimMode == Player.DrawAimMode.Lazer && !this.InThrowingMode)
			{
				if (this.CurrentAction == PlayerAction.ManualAim || this.CurrentAction == PlayerAction.HipFire)
				{
					RWeapon rweapon = null;
					if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Handgun && this.CurrentHandgunWeapon != null && this.CurrentHandgunWeapon.LazerUpgrade > 0)
					{
						rweapon = this.CurrentHandgunWeapon;
					}
					if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle && this.CurrentRifleWeapon != null && this.CurrentRifleWeapon.LazerUpgrade > 0)
					{
						rweapon = this.CurrentRifleWeapon;
					}
					if (rweapon != null)
					{
						Microsoft.Xna.Framework.Vector2 vector;
						Microsoft.Xna.Framework.Vector2 vector2;
						if (!this.GetWeaponInformation(Player.WeaponInformationType.LazerPosition, out vector, out vector2))
						{
							return;
						}
						bool flag = false;
						if (this.CurrentAction == PlayerAction.HipFire && Math.Abs(Microsoft.Xna.Framework.Vector2.Dot(vector2, Microsoft.Xna.Framework.Vector2.UnitX)) < 0.7f)
						{
							flag = true;
						}
						if (!flag)
						{
							SFDMath.RotatePosition(ref vector2, Constants.RANDOM.NextFloat(-0.002f, 0.002f), out vector2);
							float num = Camera.GetDistanceToEdge(vector, vector2);
							if (num != -1f)
							{
								num += 16f;
								GameWorld.RayCastResult rayCastResult = this.GameWorld.RayCast(vector, vector2, rweapon.Properties.LazerPosition.X + 4f, num, new GameWorld.RayCastFixtureCheck(this.LazerRayCastCollision), new GameWorld.RayCastPlayerCheck(this.LazerRayCastPlayerCollision));
								if (!rayCastResult.TunnelCollision)
								{
									this.GameWorld.DrawLazer(this.m_spriteBatch, this.IsLocal, rayCastResult.StartPosition, rayCastResult.EndPosition, rayCastResult.Direction);
									return;
								}
							}
						}
					}
				}
			}
			else if (aimMode == Player.DrawAimMode.ManualAimBox && this.CurrentAction == PlayerAction.ManualAim && this.IsLocal)
			{
				Microsoft.Xna.Framework.Vector2 aim_ARM_OFFSET = this.AIM_ARM_OFFSET;
				Microsoft.Xna.Framework.Vector2 vector3 = new Microsoft.Xna.Framework.Vector2(36f, 0f);
				RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
				if (currentRangedWeaponInUse != null)
				{
					vector3 += currentRangedWeaponInUse.Properties.CursorAimOffset;
				}
				SFDMath.RotatePosition(ref vector3, -this.AimAngle, out vector3);
				vector3.X *= (float)this.LastDirectionX;
				Microsoft.Xna.Framework.Vector2 vector4 = this.Position + aim_ARM_OFFSET + vector3;
				Microsoft.Xna.Framework.Vector2 vector5;
				Microsoft.Xna.Framework.Vector2 vector6;
				if (this.GetWeaponInformation(Player.WeaponInformationType.MuzzlePosition, out vector5, out vector6))
				{
					Microsoft.Xna.Framework.Vector2 direction = vector4 - vector5;
					direction.Normalize();
					GameWorld.RayCastResult rayCastResult2 = this.GameWorld.RayCast(vector5, direction, 0f, (vector4 - vector5).Length(), new GameWorld.RayCastFixtureCheck(this.LazerRayCastCollision), new GameWorld.RayCastPlayerCheck(this.LazerRayCastPlayerCollision));
					if (!rayCastResult2.TunnelCollision)
					{
						vector4 = rayCastResult2.EndPosition;
						Camera.ConvertWorldToScreen(vector4.X, vector4.Y, out vector4.X, out vector4.Y);
						this.m_spriteBatch.Draw(Player.m_textureCrosshair, vector4, null, Microsoft.Xna.Framework.Color.Gray, 0f, new Microsoft.Xna.Framework.Vector2((float)(Player.m_textureCrosshair.Width / 2), (float)(Player.m_textureCrosshair.Height / 2)), Math.Max(Camera.Zoom / 2f, 1f), SpriteEffects.None, 0f);
					}
				}
			}
		}

		// Token: 0x170009B4 RID: 2484
		// (get) Token: 0x06003BEC RID: 15340 RVA: 0x00030C46 File Offset: 0x0002EE46
		private Microsoft.Xna.Framework.Vector2 AIM_ARM_OFFSET
		{
			get
			{
				return new Microsoft.Xna.Framework.Vector2(-2f * (float)this.LastDirectionX, 14f) * this.DrawScale;
			}
		}

		// Token: 0x170009B5 RID: 2485
		// (get) Token: 0x06003BED RID: 15341 RVA: 0x00030C6A File Offset: 0x0002EE6A
		private Microsoft.Xna.Framework.Vector2 AIM_HIPFIRE_BASE_OFFSET
		{
			get
			{
				return new Microsoft.Xna.Framework.Vector2(0f, 6.5f) * this.DrawScale;
			}
		}

		// Token: 0x06003BEE RID: 15342 RVA: 0x00030C86 File Offset: 0x0002EE86
		private bool LazerRayCastPlayerCollision(Player player)
		{
			if (!this.InThrowingMode)
			{
				if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Thrown)
				{
					return player != this;
				}
			}
			return player != this && (!this.InSameTeam(player) || !this.CheckPlayerOverlapAABBWhole(player));
		}

		// Token: 0x06003BEF RID: 15343 RVA: 0x00104478 File Offset: 0x00102678
		private bool LazerRayCastCollision(Fixture fixture)
		{
			if (!fixture.IsCloud())
			{
				ObjectData objectData = ObjectData.Read(fixture);
				Filter filter;
				fixture.GetFilterData(out filter);
				if ((filter.categoryBits & 15) > 0 || objectData.IsPlayer)
				{
					if (objectData.IsPlayer && this.ObjectData == objectData)
					{
						return false;
					}
					if (objectData == this.CoverObject && this.CoverObjectCanShootThrough)
					{
						return false;
					}
					Material tileFixtureMaterial = objectData.Tile.GetTileFixtureMaterial((int)fixture.TileFixtureIndex);
					return !tileFixtureMaterial.Transparent;
				}
			}
			return false;
		}

		// Token: 0x06003BF0 RID: 15344 RVA: 0x001044F8 File Offset: 0x001026F8
		public float GetRangedFireArmLength()
		{
			switch (this.CurrentWeaponDrawn)
			{
			case SFD.Weapons.WeaponItemType.Handgun:
				if (this.CurrentHandgunWeapon != null)
				{
					return this.CurrentHandgunWeapon.Visuals.AnimFireArmLength;
				}
				return 7f;
			case SFD.Weapons.WeaponItemType.Rifle:
				if (this.CurrentRifleWeapon != null)
				{
					return this.CurrentRifleWeapon.Visuals.AnimFireArmLength;
				}
				return 2f;
			default:
				return 5f;
			}
		}

		// Token: 0x06003BF1 RID: 15345 RVA: 0x00104560 File Offset: 0x00102760
		private string GetAnimUpperOverride(string defaulPrefix, out bool useAnimPrefix)
		{
			if (this.MeleeHit)
			{
				useAnimPrefix = true;
				this.m_meleeHitAnim = ((this.m_meleeHitAnim == 1) ? 2 : 1);
				return "UpperMeleeHit" + this.m_meleeHitAnim.ToString();
			}
			if (this.AnimationUpperOverride != null)
			{
				useAnimPrefix = true;
				return this.AnimationUpperOverride.OverrideUpperAnimation();
			}
			if (this.m_currentAnimationPlayerAction == PlayerAction.Block)
			{
				useAnimPrefix = true;
				if (this.MeleeWeaponBroken)
				{
					return this.m_meleeAnimUpperLast + "End";
				}
				MWeapon currentMeleeWeaponInUse = this.GetCurrentMeleeWeaponInUse(false);
				this.m_meleeAnimUpperLast = currentMeleeWeaponInUse.Visuals.AnimBlockUpper;
				return this.m_meleeAnimUpperLast;
			}
			else if (this.m_currentAnimationPlayerAction == PlayerAction.MeleeAttack1)
			{
				useAnimPrefix = true;
				if (this.MeleeWeaponBroken)
				{
					return this.m_meleeAnimUpperLast + "End";
				}
				MWeapon currentMeleeWeaponInUse2 = this.GetCurrentMeleeWeaponInUse(false);
				this.m_meleeAnimUpperLast = currentMeleeWeaponInUse2.Visuals.AnimMeleeAttack1;
				return this.m_meleeAnimUpperLast;
			}
			else if (this.m_currentAnimationPlayerAction == PlayerAction.MeleeAttack2)
			{
				useAnimPrefix = true;
				if (this.MeleeWeaponBroken)
				{
					return this.m_meleeAnimUpperLast + "End";
				}
				MWeapon currentMeleeWeaponInUse3 = this.GetCurrentMeleeWeaponInUse(false);
				this.m_meleeAnimUpperLast = currentMeleeWeaponInUse3.Visuals.AnimMeleeAttack2;
				return this.m_meleeAnimUpperLast;
			}
			else if (this.m_currentAnimationPlayerAction == PlayerAction.MeleeAttack3)
			{
				useAnimPrefix = true;
				if (this.MeleeWeaponBroken)
				{
					return this.m_meleeAnimUpperLast + "End";
				}
				MWeapon currentMeleeWeaponInUse4 = this.GetCurrentMeleeWeaponInUse(false);
				this.m_meleeAnimUpperLast = currentMeleeWeaponInUse4.Visuals.AnimMeleeAttack3;
				return this.m_meleeAnimUpperLast;
			}
			else
			{
				if (this.ThrowCharging)
				{
					useAnimPrefix = true;
					return "UpperThrowSmall";
				}
				if (this.m_currentAnimationPlayerAction == PlayerAction.ThrowThrowing)
				{
					useAnimPrefix = true;
					return "UpperThrowSmallRelease";
				}
				if (this.m_currentAnimationPlayerAction == PlayerAction.HipFire)
				{
					if (!this.InThrowingMode)
					{
						if (this.Equipment.WeaponDrawn == SFD.Weapons.WeaponItemType.Handgun && this.CurrentHandgunWeapon != null)
						{
							useAnimPrefix = true;
							return this.CurrentHandgunWeapon.Visuals.AnimUpperHipfire;
						}
						if (this.Equipment.WeaponDrawn == SFD.Weapons.WeaponItemType.Rifle && this.CurrentRifleWeapon != null)
						{
							useAnimPrefix = true;
							return this.CurrentRifleWeapon.Visuals.AnimUpperHipfire;
						}
					}
				}
				else if (this.m_currentAnimationPlayerAction == PlayerAction.DrawWeapon)
				{
					if (this.InThrowingMode)
					{
						switch (this.Equipment.WeaponDrawn)
						{
						case SFD.Weapons.WeaponItemType.NONE:
							break;
						default:
							ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "TODO: Player.GetPrefix() (3) found nothing for SFD.Weapons.WeaponItemType." + this.Equipment.WeaponDrawn.ToString());
							break;
						case SFD.Weapons.WeaponItemType.Handgun:
							useAnimPrefix = true;
							if (this.CurrentHandgunWeapon != null)
							{
								return this.CurrentHandgunWeapon.Visuals.AnimToggleThrowingMode;
							}
							return "UpperToggleThrown";
						case SFD.Weapons.WeaponItemType.Rifle:
							useAnimPrefix = true;
							if (this.CurrentRifleWeapon != null)
							{
								return this.CurrentRifleWeapon.Visuals.AnimToggleThrowingMode;
							}
							return "UpperToggleThrown";
						case SFD.Weapons.WeaponItemType.Thrown:
							useAnimPrefix = true;
							if (this.CurrentThrownWeapon != null)
							{
								return this.CurrentThrownWeapon.Visuals.AnimToggleThrowingMode;
							}
							return "UpperToggleThrown";
						case SFD.Weapons.WeaponItemType.Melee:
							useAnimPrefix = true;
							if (this.CurrentVisualMeleeWeapon != null)
							{
								return this.CurrentVisualMeleeWeapon.Visuals.AnimToggleThrowingMode;
							}
							return "UpperToggleThrown";
						}
					}
					else
					{
						switch (this.Equipment.WeaponDrawn)
						{
						case SFD.Weapons.WeaponItemType.NONE:
							break;
						default:
							ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "TODO: Player.GetPrefix() (2) found nothing for SFD.Weapons.WeaponItemType." + this.Equipment.WeaponDrawn.ToString());
							break;
						case SFD.Weapons.WeaponItemType.Handgun:
							useAnimPrefix = true;
							if (this.CurrentHandgunWeapon != null)
							{
								return this.CurrentHandgunWeapon.Visuals.AnimDraw;
							}
							return "UpperDrawHandgun";
						case SFD.Weapons.WeaponItemType.Rifle:
							useAnimPrefix = true;
							if (this.CurrentRifleWeapon != null)
							{
								return this.CurrentRifleWeapon.Visuals.AnimDraw;
							}
							return "UpperDrawRifle";
						case SFD.Weapons.WeaponItemType.Thrown:
							useAnimPrefix = true;
							if (this.CurrentThrownWeapon != null)
							{
								return this.CurrentThrownWeapon.Visuals.AnimDraw;
							}
							return "UpperDrawThrown";
						case SFD.Weapons.WeaponItemType.Melee:
							useAnimPrefix = true;
							if (this.CurrentVisualMeleeWeapon != null)
							{
								return this.CurrentVisualMeleeWeapon.Visuals.AnimDraw;
							}
							return "UpperDrawMelee";
						}
					}
				}
				useAnimPrefix = false;
				return defaulPrefix;
			}
		}

		// Token: 0x06003BF2 RID: 15346 RVA: 0x0010493C File Offset: 0x00102B3C
		private string GetAnimIdleLower()
		{
			if (this.m_currentAnimationPlayerAction == PlayerAction.MeleeAttack1)
			{
				if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee)
				{
					return "BaseMelee1H1";
				}
				return "BasePunch1";
			}
			else if (this.m_currentAnimationPlayerAction == PlayerAction.MeleeAttack2)
			{
				if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee)
				{
					return "BaseMelee1H2";
				}
				return "BasePunch2";
			}
			else
			{
				if (this.m_currentAnimationPlayerAction != PlayerAction.MeleeAttack3)
				{
					return "BaseIdle";
				}
				if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee)
				{
					return "BaseMelee1H3";
				}
				return "BasePunch3";
			}
		}

		// Token: 0x06003BF3 RID: 15347 RVA: 0x001049A8 File Offset: 0x00102BA8
		private string GetAnimIdleUpper()
		{
			bool flag;
			string animUpperOverride = this.GetAnimUpperOverride("UpperIdle", out flag);
			if (flag)
			{
				return animUpperOverride;
			}
			if (!this.InThrowingMode)
			{
				if (this.Crouching || this.TakingCover)
				{
					switch (this.Equipment.WeaponDrawn)
					{
					case SFD.Weapons.WeaponItemType.NONE:
						return "UpperCrouch";
					case SFD.Weapons.WeaponItemType.Handgun:
						if (this.CurrentHandgunWeapon != null)
						{
							return this.CurrentHandgunWeapon.Visuals.AnimCrouchUpper;
						}
						return "UpperCrouchHandgun";
					case SFD.Weapons.WeaponItemType.Rifle:
						if (this.CurrentRifleWeapon != null)
						{
							return this.CurrentRifleWeapon.Visuals.AnimCrouchUpper;
						}
						return "UpperCrouchRifle";
					case SFD.Weapons.WeaponItemType.Thrown:
						if (this.CurrentThrownWeapon != null)
						{
							return this.CurrentThrownWeapon.Visuals.AnimCrouchUpper;
						}
						return "UpperCrouch";
					case SFD.Weapons.WeaponItemType.Melee:
						if (this.CurrentVisualMeleeWeapon == null)
						{
							return "UpperCrouchMelee";
						}
						if (this.IsUsingChainsaw)
						{
							return "UpperAttackChainsaw";
						}
						return this.CurrentVisualMeleeWeapon.Visuals.AnimCrouchUpper;
					}
				}
				switch (this.Equipment.WeaponDrawn)
				{
				case SFD.Weapons.WeaponItemType.NONE:
					return "UpperIdle";
				case SFD.Weapons.WeaponItemType.Handgun:
					if (this.CurrentHandgunWeapon != null)
					{
						return this.CurrentHandgunWeapon.Visuals.AnimIdleUpper;
					}
					return "UpperIdleHandgun";
				case SFD.Weapons.WeaponItemType.Rifle:
					if (this.CurrentRifleWeapon != null)
					{
						return this.CurrentRifleWeapon.Visuals.AnimIdleUpper;
					}
					return "UpperIdleRifle";
				case SFD.Weapons.WeaponItemType.Thrown:
					if (this.CurrentThrownWeapon != null)
					{
						return this.CurrentThrownWeapon.Visuals.AnimIdleUpper;
					}
					return "UpperIdleThrown";
				case SFD.Weapons.WeaponItemType.Melee:
					if (this.CurrentVisualMeleeWeapon == null)
					{
						return "UpperIdleMelee";
					}
					if (this.IsUsingChainsaw)
					{
						return "UpperAttackChainsaw";
					}
					return this.CurrentVisualMeleeWeapon.Visuals.AnimIdleUpper;
				}
				return "UpperIdle";
			}
			if (!this.Crouching && !this.TakingCover)
			{
				return Player.ThrowingModeVisuals.AnimIdleUpper;
			}
			return Player.ThrowingModeVisuals.AnimCrouchUpper;
		}

		// Token: 0x06003BF4 RID: 15348 RVA: 0x00104B88 File Offset: 0x00102D88
		private string GetAnimJumpKickUpper()
		{
			bool flag;
			string animUpperOverride = this.GetAnimUpperOverride("UpperJumpKick", out flag);
			if (flag)
			{
				return animUpperOverride;
			}
			if (this.InThrowingMode)
			{
				return Player.ThrowingModeVisuals.AnimJumpKickUpper;
			}
			switch (this.Equipment.WeaponDrawn)
			{
			case SFD.Weapons.WeaponItemType.NONE:
				return "UpperJumpKick";
			case SFD.Weapons.WeaponItemType.Handgun:
				if (this.CurrentHandgunWeapon != null)
				{
					return this.CurrentHandgunWeapon.Visuals.AnimJumpKickUpper;
				}
				return "UpperJumpKickHandgun";
			case SFD.Weapons.WeaponItemType.Rifle:
				if (this.CurrentRifleWeapon != null)
				{
					return this.CurrentRifleWeapon.Visuals.AnimJumpKickUpper;
				}
				return "UpperJumpKickRifle";
			case SFD.Weapons.WeaponItemType.Thrown:
				if (this.CurrentThrownWeapon != null)
				{
					return this.CurrentThrownWeapon.Visuals.AnimJumpKickUpper;
				}
				return "UpperJumpKick";
			case SFD.Weapons.WeaponItemType.Melee:
				if (this.CurrentVisualMeleeWeapon != null)
				{
					return this.CurrentVisualMeleeWeapon.Visuals.AnimJumpKickUpper;
				}
				return "UpperJumpKickMelee";
			}
			return "UpperJumpKick";
		}

		// Token: 0x06003BF5 RID: 15349 RVA: 0x00104C70 File Offset: 0x00102E70
		private string GetAnimFullLanding()
		{
			if (this.InThrowingMode)
			{
				return Player.ThrowingModeVisuals.AnimFullLand;
			}
			switch (this.Equipment.WeaponDrawn)
			{
			case SFD.Weapons.WeaponItemType.NONE:
				return "FullLand";
			case SFD.Weapons.WeaponItemType.Handgun:
				if (this.CurrentHandgunWeapon != null)
				{
					return this.CurrentHandgunWeapon.Visuals.AnimFullLand;
				}
				return "FullLandHandgun";
			case SFD.Weapons.WeaponItemType.Rifle:
				if (this.CurrentRifleWeapon != null)
				{
					return this.CurrentRifleWeapon.Visuals.AnimFullLand;
				}
				return "FullLandHandgun";
			case SFD.Weapons.WeaponItemType.Thrown:
				if (this.CurrentThrownWeapon != null)
				{
					return this.CurrentThrownWeapon.Visuals.AnimFullLand;
				}
				return "FullLandThrown";
			case SFD.Weapons.WeaponItemType.Melee:
				if (this.CurrentVisualMeleeWeapon != null)
				{
					return this.CurrentVisualMeleeWeapon.Visuals.AnimFullLand;
				}
				return "FullLandMelee";
			}
			return "FullLand";
		}

		// Token: 0x06003BF6 RID: 15350 RVA: 0x00104D48 File Offset: 0x00102F48
		private string GetAnimJumpUpper(bool isFalling = false)
		{
			bool flag;
			string animUpperOverride = this.GetAnimUpperOverride("UpperJump", out flag);
			if (flag)
			{
				return animUpperOverride;
			}
			if (!this.InThrowingMode)
			{
				switch (this.Equipment.WeaponDrawn)
				{
				case SFD.Weapons.WeaponItemType.NONE:
					if (!isFalling)
					{
						return "UpperJump";
					}
					return "UpperJumpFalling";
				case SFD.Weapons.WeaponItemType.Handgun:
					if (this.CurrentHandgunWeapon != null)
					{
						if (!isFalling)
						{
							return this.CurrentHandgunWeapon.Visuals.AnimJumpUpper;
						}
						return this.CurrentHandgunWeapon.Visuals.AnimJumpUpperFalling;
					}
					else
					{
						if (!isFalling)
						{
							return "UpperJumpHandgun";
						}
						return "UpperJumpFallingHandgun";
					}
					break;
				case SFD.Weapons.WeaponItemType.Rifle:
					if (this.CurrentRifleWeapon != null)
					{
						if (!isFalling)
						{
							return this.CurrentRifleWeapon.Visuals.AnimJumpUpper;
						}
						return this.CurrentRifleWeapon.Visuals.AnimJumpUpperFalling;
					}
					else
					{
						if (!isFalling)
						{
							return "UpperJumpRifle";
						}
						return "UpperJumpFallingRifle";
					}
					break;
				case SFD.Weapons.WeaponItemType.Thrown:
					if (this.CurrentThrownWeapon != null)
					{
						if (!isFalling)
						{
							return this.CurrentThrownWeapon.Visuals.AnimJumpUpper;
						}
						return this.CurrentThrownWeapon.Visuals.AnimJumpUpperFalling;
					}
					else
					{
						if (!isFalling)
						{
							return "UpperJump";
						}
						return "UpperJumpFalling";
					}
					break;
				case SFD.Weapons.WeaponItemType.Melee:
					if (this.CurrentVisualMeleeWeapon != null)
					{
						if (!isFalling)
						{
							return this.CurrentVisualMeleeWeapon.Visuals.AnimJumpUpper;
						}
						return this.CurrentVisualMeleeWeapon.Visuals.AnimJumpUpperFalling;
					}
					else
					{
						if (!isFalling)
						{
							return "UpperJumpMelee";
						}
						return "UpperJumpFallingMelee";
					}
					break;
				}
				return "UpperJump";
			}
			if (!isFalling)
			{
				return Player.ThrowingModeVisuals.AnimJumpUpper;
			}
			return Player.ThrowingModeVisuals.AnimJumpUpperFalling;
		}

		// Token: 0x06003BF7 RID: 15351 RVA: 0x00030CBE File Offset: 0x0002EEBE
		private string GetAnimDeathKneel()
		{
			if (this.Equipment.WeaponDrawn != SFD.Weapons.WeaponItemType.Handgun)
			{
				if (this.Equipment.WeaponDrawn != SFD.Weapons.WeaponItemType.Rifle)
				{
					return "FullDeathKneel";
				}
			}
			return "FullDeathKneelHandgun";
		}

		// Token: 0x06003BF8 RID: 15352 RVA: 0x00030CE9 File Offset: 0x0002EEE9
		private string GetAnimJumpAttack(bool isFalling = false)
		{
			if (this.MeleeWeaponBroken)
			{
				return "FullJumpAttackMeleeEnd";
			}
			return this.GetCurrentMeleeWeaponInUse(false).Visuals.AnimFullJumpAttack;
		}

		// Token: 0x06003BF9 RID: 15353 RVA: 0x00104EBC File Offset: 0x001030BC
		private string GetAnimKickUpper()
		{
			bool flag;
			string animUpperOverride = this.GetAnimUpperOverride("UpperKick", out flag);
			if (flag)
			{
				return animUpperOverride;
			}
			if (this.InThrowingMode)
			{
				return Player.ThrowingModeVisuals.AnimKickUpper;
			}
			switch (this.Equipment.WeaponDrawn)
			{
			case SFD.Weapons.WeaponItemType.NONE:
				return "UpperKick";
			case SFD.Weapons.WeaponItemType.Handgun:
				if (this.CurrentHandgunWeapon != null)
				{
					return this.CurrentHandgunWeapon.Visuals.AnimKickUpper;
				}
				return "UpperKickHandgun";
			case SFD.Weapons.WeaponItemType.Rifle:
				if (this.CurrentRifleWeapon != null)
				{
					return this.CurrentRifleWeapon.Visuals.AnimKickUpper;
				}
				return "UpperKickRifle";
			case SFD.Weapons.WeaponItemType.Thrown:
				if (this.CurrentThrownWeapon != null)
				{
					return this.CurrentThrownWeapon.Visuals.AnimKickUpper;
				}
				return "UpperKick";
			case SFD.Weapons.WeaponItemType.Melee:
				if (this.CurrentVisualMeleeWeapon != null)
				{
					return this.CurrentVisualMeleeWeapon.Visuals.AnimKickUpper;
				}
				return "UpperKickMelee";
			}
			return "UpperKick";
		}

		// Token: 0x06003BFA RID: 15354 RVA: 0x00104FA4 File Offset: 0x001031A4
		private string GetAnimStaggerUpper()
		{
			if (this.InThrowingMode)
			{
				return Player.ThrowingModeVisuals.AnimStaggerUpper;
			}
			switch (this.Equipment.WeaponDrawn)
			{
			case SFD.Weapons.WeaponItemType.NONE:
				return "UpperStagger";
			case SFD.Weapons.WeaponItemType.Handgun:
				if (this.CurrentHandgunWeapon != null)
				{
					return this.CurrentHandgunWeapon.Visuals.AnimStaggerUpper;
				}
				return "UpperStaggerHandgun";
			case SFD.Weapons.WeaponItemType.Rifle:
				if (this.CurrentRifleWeapon != null)
				{
					return this.CurrentRifleWeapon.Visuals.AnimStaggerUpper;
				}
				return "UpperStaggerHandgun";
			case SFD.Weapons.WeaponItemType.Thrown:
				if (this.CurrentThrownWeapon != null)
				{
					return this.CurrentThrownWeapon.Visuals.AnimStaggerUpper;
				}
				return "UpperStagger";
			case SFD.Weapons.WeaponItemType.Melee:
				if (this.CurrentVisualMeleeWeapon != null)
				{
					return this.CurrentVisualMeleeWeapon.Visuals.AnimStaggerUpper;
				}
				return "UpperStagger";
			}
			return "UpperStagger";
		}

		// Token: 0x06003BFB RID: 15355 RVA: 0x0010507C File Offset: 0x0010327C
		private string GetAnimRunUpper()
		{
			bool flag;
			string animUpperOverride = this.GetAnimUpperOverride("UpperRun", out flag);
			if (flag)
			{
				return animUpperOverride;
			}
			if (this.InThrowingMode)
			{
				return Player.ThrowingModeVisuals.AnimRunUpper;
			}
			switch (this.Equipment.WeaponDrawn)
			{
			case SFD.Weapons.WeaponItemType.NONE:
				return "UpperRun";
			case SFD.Weapons.WeaponItemType.Handgun:
				if (this.CurrentHandgunWeapon != null)
				{
					return this.CurrentHandgunWeapon.Visuals.AnimRunUpper;
				}
				return "UpperRunHandgun";
			case SFD.Weapons.WeaponItemType.Rifle:
				if (this.CurrentRifleWeapon != null)
				{
					return this.CurrentRifleWeapon.Visuals.AnimRunUpper;
				}
				return "UpperRunRifle";
			case SFD.Weapons.WeaponItemType.Thrown:
				if (this.CurrentThrownWeapon != null)
				{
					return this.CurrentThrownWeapon.Visuals.AnimRunUpper;
				}
				return "UpperRun";
			case SFD.Weapons.WeaponItemType.Melee:
				if (this.CurrentVisualMeleeWeapon == null)
				{
					return "UpperRunMelee";
				}
				if (this.IsUsingChainsaw)
				{
					return "UpperAttackChainsaw";
				}
				return this.CurrentVisualMeleeWeapon.Visuals.AnimRunUpper;
			}
			return "UpperRun";
		}

		// Token: 0x06003BFC RID: 15356 RVA: 0x00105174 File Offset: 0x00103374
		private string GetAnimWalkUpper()
		{
			bool flag;
			string animUpperOverride = this.GetAnimUpperOverride("UpperWalk", out flag);
			if (flag)
			{
				return animUpperOverride;
			}
			if (this.InThrowingMode)
			{
				return Player.ThrowingModeVisuals.AnimWalkUpper;
			}
			switch (this.Equipment.WeaponDrawn)
			{
			case SFD.Weapons.WeaponItemType.NONE:
				return "UpperWalk";
			case SFD.Weapons.WeaponItemType.Handgun:
				if (this.CurrentHandgunWeapon != null)
				{
					return this.CurrentHandgunWeapon.Visuals.AnimWalkUpper;
				}
				return "UpperWalkHandgun";
			case SFD.Weapons.WeaponItemType.Rifle:
				if (this.CurrentRifleWeapon != null)
				{
					return this.CurrentRifleWeapon.Visuals.AnimWalkUpper;
				}
				return "UpperWalkRifle";
			case SFD.Weapons.WeaponItemType.Thrown:
				if (this.CurrentThrownWeapon != null)
				{
					return this.CurrentThrownWeapon.Visuals.AnimWalkUpper;
				}
				return "UpperWalk";
			case SFD.Weapons.WeaponItemType.Melee:
				if (this.CurrentVisualMeleeWeapon == null)
				{
					return "UpperWalkMelee";
				}
				if (this.IsUsingChainsaw)
				{
					return "UpperAttackChainsaw";
				}
				return this.CurrentVisualMeleeWeapon.Visuals.AnimWalkUpper;
			}
			return "UpperWalk";
		}

		// Token: 0x170009B6 RID: 2486
		// (get) Token: 0x06003BFD RID: 15357 RVA: 0x00030D0A File Offset: 0x0002EF0A
		// (set) Token: 0x06003BFE RID: 15358 RVA: 0x00030D12 File Offset: 0x0002EF12
		private PlayerAction FreezeAnimationOnAction { get; set; }

		// Token: 0x06003BFF RID: 15359 RVA: 0x00030D1B File Offset: 0x0002EF1B
		private void UnfreezeAnimationOnAction()
		{
			this.FreezeAnimationOnAction = PlayerAction.None;
			this.ForceHardAnimationReset(false);
			this.PlayAnimation();
		}

		// Token: 0x06003C00 RID: 15360 RVA: 0x00030D31 File Offset: 0x0002EF31
		public Animation GetAnimation()
		{
			return this.m_currentAnimation;
		}

		// Token: 0x06003C01 RID: 15361 RVA: 0x00030D39 File Offset: 0x0002EF39
		public PlayerAction GetAnimationPlayerMode()
		{
			return this.m_currentAnimationPlayerAction;
		}

		// Token: 0x06003C02 RID: 15362 RVA: 0x00030D41 File Offset: 0x0002EF41
		public void ForceHardAnimationReset(bool forceHardSubAnimationReset = false)
		{
			this.m_currentAnimation = Animation.None;
			this.m_forceHardAubAnimationReset = (this.m_forceHardAubAnimationReset || forceHardSubAnimationReset);
		}

		// Token: 0x06003C03 RID: 15363 RVA: 0x00030D58 File Offset: 0x0002EF58
		public void ForceSoftAnimationReset()
		{
			this.m_softUpdate = true;
		}

		// Token: 0x170009B7 RID: 2487
		// (get) Token: 0x06003C04 RID: 15364 RVA: 0x00030D61 File Offset: 0x0002EF61
		// (set) Token: 0x06003C05 RID: 15365 RVA: 0x00030D69 File Offset: 0x0002EF69
		internal IPlayerUpperAnimationOverride AnimationUpperOverride
		{
			get
			{
				return this.m_animationUpperOverride;
			}
			set
			{
				this.m_animationUpperOverride = value;
				this.m_softUpdate = true;
				this.m_animationUpperOverrideLastWaitFrame = -1;
			}
		}

		// Token: 0x06003C06 RID: 15366 RVA: 0x00030D80 File Offset: 0x0002EF80
		public void SetAnimation(Animation animation)
		{
			this.SetAnimation(animation, this.CurrentAction);
		}

		// Token: 0x170009B8 RID: 2488
		// (get) Token: 0x06003C07 RID: 15367 RVA: 0x00030D8F File Offset: 0x0002EF8F
		// (set) Token: 0x06003C08 RID: 15368 RVA: 0x00030D97 File Offset: 0x0002EF97
		public float DiveRotation { get; set; }

		// Token: 0x06003C09 RID: 15369 RVA: 0x00030DA0 File Offset: 0x0002EFA0
		public Microsoft.Xna.Framework.Vector2 DiveVector()
		{
			return new Microsoft.Xna.Framework.Vector2((float)Math.Cos((double)this.DiveRotation) * (float)this.LastDirectionX, -(float)Math.Sin((double)this.DiveRotation) * (float)this.LastDirectionX);
		}

		// Token: 0x06003C0A RID: 15370 RVA: 0x0010526C File Offset: 0x0010346C
		public void UpdateAnimation()
		{
			if (this.IsRemoved)
			{
				return;
			}
			if (this.m_subAnimations[1].IsStopped)
			{
				if (this.CurrentAction == PlayerAction.DrawWeapon)
				{
					this.m_subAnimations[1].Play();
				}
				if (this.GameOwner == GameOwnerEnum.Server && this.FreezeAnimationOnAction != this.CurrentAction && (this.CurrentAction == PlayerAction.MeleeAttack1 || this.CurrentAction == PlayerAction.MeleeAttack2 || this.CurrentAction == PlayerAction.MeleeAttack3 || this.CurrentAction == PlayerAction.ThrowThrowing) && !this.m_subAnimations[1].IsLastFrame())
				{
					if (this.CurrentAction == PlayerAction.ThrowThrowing)
					{
						this.m_subAnimations[1].SetFrame(0);
						ConsoleOutput.ShowMessage(ConsoleOutputType.PlayerAction, this.GameOwner.ToString() + ": Resetting player action ThrowThrowing as it's stuck");
					}
					this.m_subAnimations[1].Play();
				}
			}
			if (this.RocketRideProjectileWorldID <= 0)
			{
				if (this.CurrentAction == PlayerAction.ManualAim)
				{
					this.m_subAnimations[0].Rotation = 0f;
					if (this.AnimationUpperOverride != null && this.AnimationUpperOverride.ResetRotation())
					{
						this.m_subAnimations[1].Rotation = 0f;
					}
					else
					{
						this.m_subAnimations[1].Rotation = ((this.LastDirectionX == 1) ? this.AimAngle : (-this.AimAngle));
					}
				}
				else if (this.Diving)
				{
					this.m_subAnimations[0].Rotation = this.DiveRotation;
					this.m_subAnimations[1].Rotation = 0f;
				}
				else if (this.CaughtByPlayer != null)
				{
					this.m_subAnimations[0].Rotation = 0f;
					this.m_subAnimations[1].Rotation = 0f;
				}
				else if (this.GrabbedByPlayer != null && this.GrabbedByPlayer.GrabThrowing)
				{
					this.m_subAnimations[0].Rotation = 1.5707964f * (float)this.GrabbedByPlayer.LastDirectionX;
					this.m_subAnimations[1].Rotation = 0f;
				}
				else
				{
					this.m_subAnimations[0].Rotation = 0f;
					this.m_subAnimations[1].Rotation = 0f;
				}
				if (this.IsGrabbedByPlayer)
				{
					this.SetAnimation(Animation.GrabbedByPlayer);
				}
				else if (this.IsCaughtByPlayer)
				{
					this.SetAnimation(Animation.CaughtInDive);
				}
				else if (this.FullLanding & this.StandingOnGround)
				{
					if (this.LastMeleeAction == PlayerAction.JumpAttack && this.m_currentAnimation == Animation.JumpAttack && !this.m_subAnimations[0].IsLastFrame())
					{
						this.SetAnimation(Animation.JumpAttack);
					}
					else
					{
						this.SetAnimation(Animation.FullLanding);
					}
				}
				else if (this.DeathKneeling)
				{
					this.SetAnimation(Animation.DeathKneel);
				}
				else if (this.LayingOnGround)
				{
					int num = (int)(this.LastFallingRotation / 6.2831855f);
					float num2 = this.LastFallingRotation - (float)num * 6.2831855f + 0.01f;
					num2 *= (float)this.LastDirectionXVisual;
					if (num2 <= -3.1415927f | (num2 >= 0f & num2 <= 3.1415927f))
					{
						this.SetAnimation(Animation.LayOnGroundF);
					}
					else
					{
						this.SetAnimation(Animation.LayOnGroundB);
					}
				}
				else if (this.Falling)
				{
					if (this.m_currentAnimation == Animation.LayOnGroundB)
					{
						if (this.LastDirectionXAnimation == -1)
						{
							this.Rotation = 1.5707964f;
						}
						else
						{
							this.Rotation = -1.5707964f;
						}
						this.LastFallingRotation = this.Rotation;
						this.UpdateRotationDirection(0);
					}
					else if (this.m_currentAnimation == Animation.LayOnGroundF)
					{
						if (this.LastDirectionXAnimation == -1)
						{
							this.Rotation = -1.5707964f;
						}
						else
						{
							this.Rotation = 1.5707964f;
						}
						this.LastFallingRotation = this.Rotation;
						this.UpdateRotationDirection(0);
					}
					else if (this.m_currentAnimation == Animation.DeathKneel)
					{
						if (this.LastDirectionXAnimation == -1)
						{
							this.Rotation = -0.3926991f;
						}
						else
						{
							this.Rotation = 0.3926991f;
						}
						this.LastFallingRotation = this.Rotation;
						this.UpdateRotationDirection(this.LastDirectionXAnimation);
					}
					this.SetAnimation(Animation.Falling);
				}
				else if (this.GrabThrowing)
				{
					this.SetAnimation(Animation.HoldingPlayerInGrabThrowing);
				}
				else if (this.GrabAttacking)
				{
					this.SetAnimation(Animation.HoldingPlayerInGrabAttack);
				}
				else if (this.HoldingPlayerInGrabID != 0)
				{
					if (this.Movement != PlayerMovement.Idle)
					{
						this.SetAnimation(Animation.HoldingPlayerInGrabWalk);
					}
					else
					{
						this.SetAnimation(Animation.HoldingPlayerInGrab);
					}
				}
				else if (this.CurrentAction == PlayerAction.Kick)
				{
					this.SetAnimation(Animation.Kick);
				}
				else if (this.CurrentAction == PlayerAction.JumpKick)
				{
					this.SetAnimation(Animation.JumpKick);
				}
				else if (this.CurrentAction == PlayerAction.JumpAttack)
				{
					this.SetAnimation(Animation.JumpAttack);
				}
				else if (this.GrabTelegraphing)
				{
					this.SetAnimation(Animation.GrabTelegraphing);
				}
				else if (this.GrabCharging)
				{
					this.SetAnimation(Animation.GrabCharging);
				}
				else if (this.Staggering)
				{
					this.SetAnimation(Animation.Stagger);
				}
				else if (this.Diving)
				{
					this.SetAnimation(Animation.Dive);
				}
				else if (this.Rolling)
				{
					this.SetAnimation(Animation.Roll);
				}
				else if (this.Crouching)
				{
					this.SetAnimation(Animation.Crouch);
				}
				else if (this.Climbing)
				{
					if (this.ClimbingDirection == -1)
					{
						this.SetAnimation(Animation.LadderSlide);
					}
					else if (this.ClimbingDirection != 1 && this.Movement == PlayerMovement.Idle)
					{
						this.SetAnimation(Animation.LadderClimb);
						this.StopAnimation();
					}
					else
					{
						this.SetAnimation(Animation.LadderClimb);
						this.PlayAnimation();
					}
				}
				else if (this.CurrentAction == PlayerAction.ManualAim)
				{
					this.SetAnimation(Animation.Aiming);
				}
				else if (this.LedgeGrabbing)
				{
					if (this.LedgeGrabbingTurn)
					{
						this.SetAnimation(Animation.LedgeGrabTurn);
					}
					else
					{
						this.SetAnimation(Animation.LedgeGrab);
					}
				}
				else if (!this.StandingOnGround && !this.HaveTouchedGroundSinceLastInAir)
				{
					if (this.CurrentAction != PlayerAction.MeleeAttack1 && this.CurrentAction != PlayerAction.MeleeAttack2)
					{
						if (this.CurrentAction != PlayerAction.MeleeAttack3)
						{
							if (!(this.WorldBody.GetLinearVelocity().Y > 0f & this.m_currentAnimation == Animation.Jump) && this.WorldBody.GetLinearVelocity().Y <= 3f)
							{
								this.SetAnimation(Animation.JumpFalling);
								goto IL_81B;
							}
							this.SetAnimation(Animation.Jump);
							goto IL_81B;
						}
					}
					this.SetAnimation(Animation.Idle);
				}
				else if (this.Movement != PlayerMovement.Idle)
				{
					if (this.Sprinting)
					{
						if (this.m_modifiers.SprintSpeedModifier < 0.3f)
						{
							this.SetAnimation(Animation.Walk);
						}
						else if (this.m_modifiers.SprintSpeedModifier < 0.6f)
						{
							this.SetAnimation(Animation.Run);
						}
						else
						{
							this.SetAnimation(Animation.Sprint);
						}
					}
					else if (this.Walking)
					{
						this.SetAnimation(Animation.Walk);
					}
					else if (this.m_modifiers.RunSpeedModifier < 0.6f)
					{
						this.SetAnimation(Animation.Walk);
					}
					else if (this.m_modifiers.RunSpeedModifier > 1.4f && this.AnimationUpperOverride == null && this.CurrentAction == PlayerAction.Idle && !this.IsUsingChainsaw)
					{
						this.SetAnimation(Animation.Sprint);
					}
					else
					{
						this.SetAnimation(Animation.Run);
					}
				}
				else if (this.CurrentAction == PlayerAction.ThrowThrowing)
				{
					this.SetAnimation(Animation.Idle);
				}
				else if (this.TakingCover)
				{
					if (!this.IsInCoverPosition())
					{
						this.ManualAimStart = false;
						this.SetAnimation(Animation.Aiming);
					}
					else
					{
						this.SetAnimation(Animation.Cover);
					}
				}
				else if (this.MeleeHit)
				{
					this.SetAnimation(Animation.Idle);
				}
				else if (this.CurrentAction != PlayerAction.Disabled)
				{
					this.SetAnimation(Animation.Idle);
				}
				else
				{
					this.SetAnimation(Animation.Idle);
				}
				IL_81B:
				this.LastDirectionXAnimation = this.LastDirectionX;
				return;
			}
			this.Rotation = 0f;
			this.DiveRotation = 0f;
			this.SetAnimation(Animation.RocketRide);
			if (this.RocketRideProjectile == null)
			{
				this.m_subAnimations[0].Rotation = 0f;
				return;
			}
			if (this.RocketRideProjectile.Direction.X >= 0f)
			{
				this.m_subAnimations[0].Rotation = (float)Math.Atan2((double)(-(double)this.RocketRideProjectile.Direction.Y), (double)this.RocketRideProjectile.Direction.X);
				return;
			}
			this.m_subAnimations[0].Rotation = 3.1415927f + (float)Math.Atan2((double)(-(double)this.RocketRideProjectile.Direction.Y), (double)this.RocketRideProjectile.Direction.X);
		}

		// Token: 0x06003C0B RID: 15371 RVA: 0x00105AA0 File Offset: 0x00103CA0
		public void ProgressAnimation(float ms)
		{
			this.DiveRotation += 0.00085000007f * ms * (float)this.LastDirectionX;
			if (this.LastDirectionX == 1)
			{
				if ((double)this.DiveRotation > 1.0471975511965976)
				{
					this.DiveRotation = 1.0471976f;
				}
			}
			else if ((double)this.DiveRotation < -1.0471975511965976)
			{
				this.DiveRotation = -1.0471976f;
			}
			for (short num = 0; num < this.m_subAnimationsLength; num += 1)
			{
				this.m_subAnimations[(int)num].Update(ms);
			}
		}

		// Token: 0x06003C0C RID: 15372 RVA: 0x00105B30 File Offset: 0x00103D30
		public void SetAnimation(Animation animation, PlayerAction animationPlayerMode)
		{
			this.Equipment.AutoSheatheWeapons = (animation == Animation.Sprint | animation == Animation.Roll | animation == Animation.CaughtInDive | animation == Animation.GrabbedByPlayer | animation == Animation.HoldingPlayerInGrab | animation == Animation.HoldingPlayerInGrabAttack | animation == Animation.Dive | animation == Animation.LadderClimb | animation == Animation.LadderSlide | animation == Animation.LedgeGrab | animation == Animation.LedgeGrabTurn | animation == Animation.GrabTelegraphing | animation == Animation.GrabCharging);
			this.Equipment.RenderMainInOffhand = this.InThrowingMode;
			this.Equipment.InThrowingMode = this.InThrowingMode;
			if (this.m_currentAnimation == animation && !this.m_softUpdate && this.m_currentAnimationPlayerAction == animationPlayerMode && this.m_animationUpperOverrideLastValue == this.m_animationUpperOverride)
			{
				return;
			}
			if (this.m_currentAnimation != animation)
			{
				this.m_softUpdate = false;
			}
			else
			{
				if (this.m_currentAnimation != Animation.Jump)
				{
					if (this.m_currentAnimation != Animation.JumpFalling)
					{
						if (animation == Animation.Roll)
						{
							this.m_softUpdate = false;
							goto IL_F0;
						}
						if (this.CurrentAction == PlayerAction.DrawWeapon)
						{
							this.m_softUpdate = false;
							goto IL_F0;
						}
						goto IL_F0;
					}
				}
				this.m_softUpdatePart = 1;
			}
			IL_F0:
			bool flag = this.m_currentAnimation != animation;
			bool flag2 = !this.m_forceHardAubAnimationReset && !this.MeleeWeaponBroken && this.m_currentAnimationPlayerAction == animationPlayerMode && (animationPlayerMode == PlayerAction.DrawWeapon | animationPlayerMode == PlayerAction.MeleeAttack1 | animationPlayerMode == PlayerAction.MeleeAttack2 | animationPlayerMode == PlayerAction.MeleeAttack3 | animationPlayerMode == PlayerAction.Block | animationPlayerMode == PlayerAction.ThrowThrowing);
			this.m_forceHardAubAnimationReset = false;
			if (this.m_currentAnimation == Animation.None)
			{
				for (short num = 0; num < this.m_subAnimationsLength; num += 1)
				{
					if (num != 1 || !flag2)
					{
						this.m_subAnimations[(int)num].SetFrame(0, false);
					}
				}
			}
			this.m_currentAnimation = animation;
			bool flag3 = false;
			if (this.FreezeAnimationOnAction != PlayerAction.None)
			{
				if (this.CurrentAction == this.FreezeAnimationOnAction)
				{
					flag3 = true;
				}
				else
				{
					this.FreezeAnimationOnAction = PlayerAction.None;
					this.PlayAnimation();
				}
			}
			if (this.m_currentAnimationPlayerAction != animationPlayerMode)
			{
				this.MeleeWeaponBroken = false;
			}
			this.m_currentAnimationPlayerAction = animationPlayerMode;
			if (this.AnimationUpperOverride != null)
			{
				flag2 = (this.m_animationUpperOverrideLastValue == this.m_animationUpperOverride);
			}
			bool flag4 = true;
			if (this.SpawnAnimation != Player.PlayerSpawnAnimation.None && (this.m_currentAnimation != Animation.Idle | this.Disabled))
			{
				this.SpawnAnimation = Player.PlayerSpawnAnimation.None;
			}
			switch (this.m_currentAnimation)
			{
			case Animation.Idle:
				if (this.SpawnAnimation == Player.PlayerSpawnAnimation.Zombie)
				{
					this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullZombieSpawn"));
					this.m_subAnimationsLength = 1;
				}
				else
				{
					this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation(this.GetAnimIdleLower()));
					this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation(this.GetAnimIdleUpper()));
					this.m_subAnimationsLength = 2;
				}
				break;
			case Animation.Run:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("BaseRun"));
				this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation(this.GetAnimRunUpper()));
				this.m_subAnimationsLength = 2;
				break;
			case Animation.Walk:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("BaseWalk"));
				this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation(this.GetAnimWalkUpper()));
				this.m_subAnimationsLength = 2;
				break;
			case Animation.Jump:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("BaseJump"));
				this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation(this.GetAnimJumpUpper(false)));
				this.m_subAnimationsLength = 2;
				break;
			case Animation.JumpFalling:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("BaseJumpFalling"));
				this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation(this.GetAnimJumpUpper(true)));
				this.m_subAnimationsLength = 2;
				break;
			case Animation.JumpKick:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("BaseJumpKick"));
				this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation(this.GetAnimJumpKickUpper()));
				this.m_subAnimationsLength = 2;
				flag4 = false;
				break;
			case Animation.JumpAttack:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation(this.GetAnimJumpAttack(false)));
				this.m_subAnimationsLength = 1;
				flag4 = false;
				break;
			case Animation.Crouch:
			case Animation.Cover:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("BaseCrouch"));
				this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation(this.GetAnimIdleUpper()));
				this.m_subAnimationsLength = 2;
				break;
			case Animation.Roll:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullRoll"));
				this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation(this.GetAnimJumpUpper(false)));
				this.m_subAnimationsLength = 2;
				flag4 = false;
				break;
			case Animation.Dive:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullDive"));
				this.m_subAnimations[0].SetFrame(0);
				this.m_subAnimationsLength = 1;
				break;
			case Animation.Falling:
			{
				string animationName = "FullFallF";
				float num2 = 1f;
				if (this.WorldBody != null)
				{
					num2 = this.WorldBody.GetLinearVelocity().X;
					if (float.IsNaN(num2) || float.IsInfinity(num2))
					{
						num2 = 0f;
					}
				}
				if (num2 != 0f && Math.Sign(num2) != this.LastDirectionX)
				{
					animationName = "FullFallB";
				}
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation(animationName));
				this.m_subAnimationsLength = 1;
				break;
			}
			case Animation.LayOnGroundF:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullKnockdownF"));
				this.m_subAnimationsLength = 1;
				break;
			case Animation.LayOnGroundB:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullKnockdownB"));
				this.m_subAnimationsLength = 1;
				break;
			case Animation.Sprint:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("BaseSprint"));
				this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation("UpperSprint"));
				this.m_subAnimationsLength = 2;
				break;
			case Animation.Aiming:
				if (this.AnimationUpperOverride != null)
				{
					this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation(this.GetAnimIdleLower()));
					this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation(this.GetAnimIdleUpper()));
					this.m_subAnimationsLength = 2;
				}
				else
				{
					if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Thrown && !this.InThrowingMode)
					{
						this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("ManualAimBase"));
					}
					else
					{
						this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("ManualAimBaseThrown"));
					}
					string animationName2;
					if (this.InThrowingMode)
					{
						animationName2 = (this.ManualAimStart ? Player.ThrowingModeVisuals.AnimManualAimStart : Player.ThrowingModeVisuals.AnimManualAim);
					}
					else
					{
						animationName2 = "ManualAimHandgun";
						if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle)
						{
							animationName2 = "ManualAimRifle";
						}
						if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown)
						{
							animationName2 = "ManualAimThrown";
						}
						switch (this.CurrentWeaponDrawn)
						{
						case SFD.Weapons.WeaponItemType.Handgun:
							if (this.CurrentHandgunWeapon != null)
							{
								if (this.ManualAimStart)
								{
									animationName2 = this.CurrentHandgunWeapon.Visuals.AnimManualAimStart;
								}
								else
								{
									animationName2 = this.CurrentHandgunWeapon.Visuals.AnimManualAim;
								}
							}
							break;
						case SFD.Weapons.WeaponItemType.Rifle:
							if (this.CurrentRifleWeapon != null)
							{
								if (this.ManualAimStart)
								{
									animationName2 = this.CurrentRifleWeapon.Visuals.AnimManualAimStart;
								}
								else
								{
									animationName2 = this.CurrentRifleWeapon.Visuals.AnimManualAim;
								}
							}
							break;
						case SFD.Weapons.WeaponItemType.Thrown:
							if (this.CurrentThrownWeapon != null)
							{
								if (this.ManualAimStart)
								{
									animationName2 = this.CurrentThrownWeapon.Visuals.AnimManualAimStart;
								}
								else
								{
									animationName2 = this.CurrentThrownWeapon.Visuals.AnimManualAim;
								}
							}
							break;
						}
					}
					this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation(animationName2));
					this.m_subAnimationsLength = 2;
				}
				break;
			case Animation.LedgeGrab:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullLedgeGrab"));
				this.m_subAnimationsLength = 1;
				break;
			case Animation.LedgeGrabTurn:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullLedgeGrabTurn"));
				this.m_subAnimationsLength = 1;
				break;
			case Animation.Kick:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("BaseKick"));
				this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation(this.GetAnimKickUpper()));
				this.m_subAnimationsLength = 2;
				flag4 = false;
				break;
			case Animation.Stagger:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("BaseStagger"));
				this.m_subAnimations[1].SetAnimation(Animations.Data.GetAnimation(this.GetAnimStaggerUpper()));
				this.m_subAnimationsLength = 2;
				break;
			case Animation.CaughtInDive:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullFallF"));
				this.m_subAnimations[0].SetFrame(0);
				this.m_subAnimationsLength = 1;
				break;
			case Animation.GrabbedByPlayer:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation(this.IsDead ? "FullGrabbedCorpse" : "FullFallF"));
				this.m_subAnimations[0].SetFrame(0);
				this.m_subAnimationsLength = 1;
				break;
			case Animation.HoldingPlayerInGrab:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullGrab"));
				this.m_subAnimations[0].SetFrame(0);
				this.m_subAnimationsLength = 1;
				break;
			case Animation.HoldingPlayerInGrabWalk:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullGrabWalk"));
				this.m_subAnimations[0].SetFrame(0);
				this.m_subAnimationsLength = 1;
				break;
			case Animation.HoldingPlayerInGrabAttack:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullGrabPunch"));
				this.m_subAnimations[0].SetFrame(0);
				this.m_subAnimationsLength = 1;
				break;
			case Animation.HoldingPlayerInGrabThrowing:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullGrabThrow"));
				this.m_subAnimations[0].SetFrame(0);
				this.m_subAnimationsLength = 1;
				break;
			case Animation.LadderSlide:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullLadderSlide"));
				this.m_subAnimationsLength = 1;
				break;
			case Animation.LadderClimb:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullLadderClimb"));
				this.m_subAnimationsLength = 1;
				break;
			case Animation.RocketRide:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullRocketRide"));
				this.m_subAnimationsLength = 1;
				break;
			case Animation.FullLanding:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation(this.GetAnimFullLanding()));
				this.m_subAnimationsLength = 1;
				break;
			case Animation.DeathKneel:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation(this.GetAnimDeathKneel()));
				this.m_subAnimations[0].SetFrame(0);
				this.m_subAnimationsLength = 1;
				break;
			case Animation.GrabTelegraphing:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullChargeA"));
				this.m_subAnimationsLength = 1;
				break;
			case Animation.GrabCharging:
				this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation("FullChargeB"));
				this.m_subAnimationsLength = 1;
				break;
			default:
				this.m_subAnimationsLength = 0;
				break;
			}
			if (this.AnimationUpperOverride != null)
			{
				string text = this.AnimationUpperOverride.OverrideLowerAnimation();
				if (!string.IsNullOrEmpty(text))
				{
					this.m_subAnimations[0].SetAnimation(Animations.Data.GetAnimation(text));
				}
				if (!(this.AnimationUpperOverride.OverrideUpperAnimation() != this.m_subAnimations[1].GetAnimation().Name) && this.m_subAnimationsLength >= 2)
				{
					if (this.m_animationUpperOverrideLastWaitFrame != -1)
					{
						this.m_subAnimations[1].SetFrameSilent(this.m_animationUpperOverrideLastWaitFrame);
						this.m_animationUpperOverrideLastWaitFrame = -1;
					}
					else if (!flag2)
					{
						this.m_subAnimations[1].SetFrame(0);
					}
				}
				else if (this.AnimationUpperOverride.OverrideUpperAnimationType() == IPlayerUpperAnimationTypeEnum.WaitToContinue)
				{
					if (this.m_animationUpperOverrideLastWaitFrame == -1)
					{
						this.m_animationUpperOverrideLastWaitFrame = this.m_subAnimations[1].GetCurrentFrameIndex();
					}
				}
				else
				{
					IPlayerUpperAnimationOverride animationUpperOverride = this.AnimationUpperOverride;
					this.AnimationUpperOverride = null;
					animationUpperOverride.OverrideUpperAnimationAborted(this, this.m_currentAnimation);
				}
			}
			if (this.m_softUpdatePart != -1)
			{
				for (short num3 = 0; num3 < this.m_subAnimationsLength; num3 += 1)
				{
					if (num3 != 1 || !flag2)
					{
						if ((int)num3 == this.m_softUpdatePart - 1)
						{
							this.m_subAnimations[this.m_softUpdatePart].SetFrame(0);
						}
						else
						{
							this.m_subAnimations[(int)num3].SetUpdatedFrame();
						}
					}
				}
				this.m_softUpdatePart = -1;
			}
			else if (!this.m_softUpdate)
			{
				for (short num4 = 0; num4 < this.m_subAnimationsLength; num4 += 1)
				{
					if ((num4 != 1 || !flag2) && (num4 != 0 || flag4 || flag))
					{
						this.m_subAnimations[(int)num4].SetFrame(0);
					}
				}
			}
			else
			{
				for (int i = 0; i < (int)this.m_subAnimationsLength; i++)
				{
					if (i != 1 || !flag2)
					{
						this.m_subAnimations[i].SetUpdatedFrame();
					}
				}
			}
			if (this.AnimationUpperOverride != null)
			{
				this.m_subAnimations[1].Play();
			}
			if (flag3)
			{
				this.StopAnimation();
			}
			this.m_animationUpperOverrideLastValue = this.AnimationUpperOverride;
			this.m_softUpdate = false;
		}

		// Token: 0x06003C0D RID: 15373 RVA: 0x001068D8 File Offset: 0x00104AD8
		public void StopAnimation()
		{
			for (short num = 0; num < this.m_subAnimationsLength; num += 1)
			{
				this.m_subAnimations[(int)num].Stop();
			}
		}

		// Token: 0x06003C0E RID: 15374 RVA: 0x00106904 File Offset: 0x00104B04
		public void PlayAnimation()
		{
			for (short num = 0; num < this.m_subAnimationsLength; num += 1)
			{
				this.m_subAnimations[(int)num].Play();
			}
		}

		// Token: 0x06003C0F RID: 15375 RVA: 0x00030DD2 File Offset: 0x0002EFD2
		public void PlayAnimation(int subAnimation)
		{
			if (subAnimation >= 0 && subAnimation < (int)this.m_subAnimationsLength)
			{
				this.m_subAnimations[subAnimation].Play();
			}
		}

		// Token: 0x06003C10 RID: 15376 RVA: 0x00030DEE File Offset: 0x0002EFEE
		public void PlayAnimation(int startFrame, int subAnimation)
		{
			if (subAnimation >= 0 && subAnimation < (int)this.m_subAnimationsLength)
			{
				this.m_subAnimations[subAnimation].Play(startFrame);
			}
		}

		// Token: 0x170009B9 RID: 2489
		// (get) Token: 0x06003C11 RID: 15377 RVA: 0x00030E0B File Offset: 0x0002F00B
		// (set) Token: 0x06003C12 RID: 15378 RVA: 0x00030E13 File Offset: 0x0002F013
		internal bool ImportantUpdate { get; set; }

		// Token: 0x170009BA RID: 2490
		// (get) Token: 0x06003C13 RID: 15379 RVA: 0x00030E1C File Offset: 0x0002F01C
		// (set) Token: 0x06003C14 RID: 15380 RVA: 0x00030E47 File Offset: 0x0002F047
		internal PlayerMovement Movement
		{
			get
			{
				if (!((this.Rolling & this.StandingOnGround) | this.Diving))
				{
					return this.m_movement;
				}
				if (this.LastDirectionX != 1)
				{
					return PlayerMovement.Left;
				}
				return PlayerMovement.Right;
			}
			set
			{
				this.m_movement = value;
				if (value != PlayerMovement.Idle)
				{
					this.ResetAimAngle = true;
				}
			}
		}

		// Token: 0x170009BB RID: 2491
		// (get) Token: 0x06003C15 RID: 15381 RVA: 0x00030E5A File Offset: 0x0002F05A
		// (set) Token: 0x06003C16 RID: 15382 RVA: 0x00030E62 File Offset: 0x0002F062
		internal float CurrentActionTime { get; private set; }

		// Token: 0x170009BC RID: 2492
		// (get) Token: 0x06003C17 RID: 15383 RVA: 0x00030E6B File Offset: 0x0002F06B
		// (set) Token: 0x06003C18 RID: 15384 RVA: 0x00030E73 File Offset: 0x0002F073
		internal float CurrentGroundTime { get; private set; }

		// Token: 0x170009BD RID: 2493
		// (get) Token: 0x06003C19 RID: 15385 RVA: 0x00030E7C File Offset: 0x0002F07C
		// (set) Token: 0x06003C1A RID: 15386 RVA: 0x00030E84 File Offset: 0x0002F084
		internal float CurrentAirTime { get; private set; }

		// Token: 0x170009BE RID: 2494
		// (get) Token: 0x06003C1B RID: 15387 RVA: 0x00030E8D File Offset: 0x0002F08D
		// (set) Token: 0x06003C1C RID: 15388 RVA: 0x00030E95 File Offset: 0x0002F095
		internal float MinimumRollTimeBeforeJump { get; private set; }

		// Token: 0x06003C1D RID: 15389 RVA: 0x00030E9E File Offset: 0x0002F09E
		internal void ClientMustInitiateMovement(bool value)
		{
			this.m_clientMustInitiateMovement = value;
		}

		// Token: 0x170009BF RID: 2495
		// (get) Token: 0x06003C1E RID: 15390 RVA: 0x00030EA7 File Offset: 0x0002F0A7
		// (set) Token: 0x06003C1F RID: 15391 RVA: 0x00030EAF File Offset: 0x0002F0AF
		internal bool DeflectBulletFirstBlockFrameWindow { get; set; }

		// Token: 0x170009C0 RID: 2496
		// (get) Token: 0x06003C20 RID: 15392 RVA: 0x00030EB8 File Offset: 0x0002F0B8
		// (set) Token: 0x06003C21 RID: 15393 RVA: 0x00030EC0 File Offset: 0x0002F0C0
		internal float DeflectBulletFrameWindowTime { get; set; }

		// Token: 0x170009C1 RID: 2497
		// (get) Token: 0x06003C22 RID: 15394 RVA: 0x00030EC9 File Offset: 0x0002F0C9
		// (set) Token: 0x06003C23 RID: 15395 RVA: 0x00030ED1 File Offset: 0x0002F0D1
		internal bool DeflectBulletFirstAttackFrameWindow { get; set; }

		// Token: 0x170009C2 RID: 2498
		// (get) Token: 0x06003C24 RID: 15396 RVA: 0x00030EDA File Offset: 0x0002F0DA
		internal bool IsInDeflectBulletFrameWindow
		{
			get
			{
				return this.DeflectBulletFrameWindowTime > 0f && (this.CurrentAction == PlayerAction.MeleeAttack1 | this.CurrentAction == PlayerAction.MeleeAttack2 | this.CurrentAction == PlayerAction.MeleeAttack3 | this.CurrentAction == PlayerAction.JumpAttack);
			}
		}

		// Token: 0x170009C3 RID: 2499
		// (get) Token: 0x06003C25 RID: 15397 RVA: 0x00106930 File Offset: 0x00104B30
		internal bool IsInDeflectMissileFrameWindow
		{
			get
			{
				return this.DeflectBulletFrameWindowTime > 0f && (this.CurrentAction == PlayerAction.MeleeAttack1 | this.CurrentAction == PlayerAction.MeleeAttack2 | this.CurrentAction == PlayerAction.MeleeAttack3 | this.CurrentAction == PlayerAction.JumpAttack | this.CurrentAction == PlayerAction.JumpKick);
			}
		}

		// Token: 0x170009C4 RID: 2500
		// (get) Token: 0x06003C26 RID: 15398 RVA: 0x00030F13 File Offset: 0x0002F113
		// (set) Token: 0x06003C27 RID: 15399 RVA: 0x00030F1B File Offset: 0x0002F11B
		internal float DiveAttackFrameWindowTime { get; set; }

		// Token: 0x170009C5 RID: 2501
		// (get) Token: 0x06003C28 RID: 15400 RVA: 0x00030F24 File Offset: 0x0002F124
		internal bool IsInDiveAttackFrameWindow
		{
			get
			{
				return this.DiveAttackFrameWindowTime > 0f && (this.CurrentAction == PlayerAction.MeleeAttack1 | this.CurrentAction == PlayerAction.MeleeAttack2 | this.CurrentAction == PlayerAction.MeleeAttack3 | this.CurrentAction == PlayerAction.JumpAttack | this.GrabAttacking);
			}
		}

		// Token: 0x06003C29 RID: 15401 RVA: 0x00030F64 File Offset: 0x0002F164
		internal static bool CheckServerControlsMovementForAction(PlayerAction playerAction)
		{
			return playerAction == PlayerAction.Disabled | playerAction == PlayerAction.Grabbing;
		}

		// Token: 0x170009C6 RID: 2502
		// (get) Token: 0x06003C2A RID: 15402 RVA: 0x00030F71 File Offset: 0x0002F171
		internal bool ServerForceControlsMovement
		{
			get
			{
				return this.m_currentAction == PlayerAction.Disabled | this.m_currentAction == PlayerAction.Grabbing | !this.IsInputEnabled;
			}
		}

		// Token: 0x170009C7 RID: 2503
		// (get) Token: 0x06003C2B RID: 15403 RVA: 0x00030F92 File Offset: 0x0002F192
		internal PlayerAction LastMeleeAction
		{
			get
			{
				return this.m_LastMeleeAction;
			}
		}

		// Token: 0x170009C8 RID: 2504
		// (get) Token: 0x06003C2C RID: 15404 RVA: 0x00030F9A File Offset: 0x0002F19A
		// (set) Token: 0x06003C2D RID: 15405 RVA: 0x00106980 File Offset: 0x00104B80
		internal PlayerAction CurrentAction
		{
			get
			{
				return this.m_currentAction;
			}
			set
			{
				if (this.m_currentAction != value)
				{
					if (this.m_currentAction == PlayerAction.DrawWeapon)
					{
						if (this.ExitingThrowingMode)
						{
							this.InThrowingMode = false;
							this.ExitingThrowingMode = false;
						}
						else if (this.EnteringThrowingMode)
						{
							this.EnteringThrowingMode = false;
						}
					}
					this.PreparingHipFire = 0f;
					if (value == PlayerAction.MeleeAttack1 | value == PlayerAction.Kick | (value == PlayerAction.Block & this.StandingOnGround))
					{
						this.ClientMustInitiateMovement(true);
					}
					this.CurrentActionTime = 0f;
					this.MeleeWeaponBroken = false;
					PlayerAction currentAction = this.m_currentAction;
					PlayerAction currentAction2 = this.m_currentAction;
					if (currentAction2 != PlayerAction.ManualAim)
					{
						switch (currentAction2)
						{
						case PlayerAction.ThrowThrowing:
							this.AimSpeed = 0f;
							break;
						case PlayerAction.Grabbing:
							this.DisableGrabbing(false);
							break;
						case PlayerAction.Disabled:
							if (this.FullLanding)
							{
								this.TimeSequence.TimeFullLanding = 0f;
								this.FullLanding = false;
								this.ImportantUpdate = true;
							}
							break;
						}
					}
					else
					{
						this.AbortManualAim(value != PlayerAction.ThrowThrowing && !this.Reloading);
					}
					this.m_currentAction = value;
					if (this.GameOwner != GameOwnerEnum.Client && this.AutoDropWeapon != SFD.Weapons.WeaponItemType.NONE)
					{
						this.DropWeaponItem(this.AutoDropWeapon, true);
						this.AutoDropWeapon = SFD.Weapons.WeaponItemType.NONE;
					}
					if (this.TakingCover && this.m_currentAction != PlayerAction.Idle && this.m_currentAction != PlayerAction.DrawWeapon && this.m_currentAction != PlayerAction.ManualAim && this.m_currentAction != PlayerAction.HipFire && this.m_currentAction != PlayerAction.ThrowThrowing)
					{
						this.TakingCover = false;
					}
					if (this.m_currentAction != PlayerAction.HipFire && this.m_currentAction != PlayerAction.ManualAim)
					{
						this.WeaponAbortBurstMode();
					}
					switch (this.m_currentAction)
					{
					case PlayerAction.DrawWeapon:
						this.m_LastMeleeAction = PlayerAction.None;
						this.FireSequence.Reset();
						if ((this.GameOwner != GameOwnerEnum.Client || this.HasLocalControl) && !(this.InAir & (this.EnteringThrowingMode | this.ExitingThrowingMode)))
						{
							this.Sprinting = false;
						}
						this.ImportantUpdate = true;
						return;
					case PlayerAction.HipFire:
					case PlayerAction.ManualAim:
						this.m_LastMeleeAction = PlayerAction.None;
						this.AimSequence = (this.AimSequence + 1) % byte.MaxValue;
						if (!this.InAir)
						{
							this.Sprinting = false;
						}
						if (this.ResetAimAngle)
						{
							this.AimAngle = 0f;
							this.AimSpeed = 0f;
							this.ResetAimAngle = false;
						}
						if (value == PlayerAction.ManualAim)
						{
							this.Crouching = false;
						}
						if (!this.m_isBackToHipFire)
						{
							this.FireSequence.Reset();
						}
						this.CheckManualAimStart(currentAction);
						if (this.GameOwner != GameOwnerEnum.Server)
						{
							this.AimSpeed = 0f;
							if (!this.m_isBackToHipFire)
							{
								this.PlayAimStartSoundForCurrentWeapon(currentAction);
							}
							this.InitRecoilDistance();
						}
						this.ImportantUpdate = true;
						return;
					case PlayerAction.MeleeAttack1:
						this.m_LastMeleeAction = PlayerAction.MeleeAttack1;
						if (this.m_meleeHit1Cooldown > 0f)
						{
							this.m_meleeHit1Delay = this.m_meleeHit1Cooldown;
							this.FreezeAnimationOnAction = PlayerAction.MeleeAttack1;
						}
						this.m_meleeHit1Cooldown = 450f;
						return;
					case PlayerAction.MeleeAttack2:
						this.m_LastMeleeAction = PlayerAction.MeleeAttack2;
						return;
					case PlayerAction.MeleeAttack3:
						this.m_LastMeleeAction = PlayerAction.MeleeAttack3;
						return;
					case PlayerAction.JumpKick:
						this.FullLanding = true;
						this.TimeSequence.TimeFullLanding = 0f;
						this.m_LastMeleeAction = PlayerAction.JumpKick;
						this.LastDirectionXActionKick = this.LastDirectionX;
						return;
					case PlayerAction.JumpAttack:
						this.FullLanding = true;
						this.TimeSequence.TimeFullLanding = 0f;
						this.m_LastMeleeAction = PlayerAction.JumpAttack;
						return;
					case PlayerAction.Kick:
						this.m_ignoreStandingOnBodyVelocityTimer = Math.Max(350f, this.GetAverageRoundtripTime() + 100f);
						this.m_LastMeleeAction = PlayerAction.Kick;
						this.LastDirectionXActionKick = this.LastDirectionX;
						return;
					case PlayerAction.Block:
						this.GameWorld.BringPlayerToFront.Add(this);
						this.m_LastMeleeAction = PlayerAction.Block;
						return;
					case PlayerAction.ThrowThrowing:
						this.ThrowCharging = false;
						return;
					case PlayerAction.Grabbing:
						this.m_LastMeleeAction = PlayerAction.Grabbing;
						break;
					case PlayerAction.Disabled:
						this.ClearLedgeGrab();
						this.ThrowCharging = false;
						return;
					default:
						return;
					}
				}
			}
		}

		// Token: 0x06003C2E RID: 15406 RVA: 0x00106D34 File Offset: 0x00104F34
		private void AbortManualAim(bool resetAngle)
		{
			this.AbortAnimationOverride();
			this.FireSequence.MinimumManualAimTime = 0f;
			this.ManualAimStart = false;
			if (resetAngle)
			{
				this.AimAngle = 0f;
				this.AimSpeed = 0f;
			}
			this.TimeSequence.DisableQueuedKey(26);
		}

		// Token: 0x06003C2F RID: 15407 RVA: 0x00106D84 File Offset: 0x00104F84
		private void PlayAimStartSoundForCurrentWeapon(PlayerAction prevAction)
		{
			string soundID = "";
			if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown)
			{
				if (this.ThrowCharging && prevAction == PlayerAction.Kick)
				{
					soundID = "NONE";
				}
				else
				{
					TWeapon currentThrownWeaponInUse = this.GetCurrentThrownWeaponInUse();
					if (currentThrownWeaponInUse != null && !string.IsNullOrEmpty(currentThrownWeaponInUse.Properties.AimStartSoundID))
					{
						soundID = currentThrownWeaponInUse.Properties.AimStartSoundID;
					}
				}
			}
			else
			{
				RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
				if (currentRangedWeaponInUse != null && !string.IsNullOrEmpty(currentRangedWeaponInUse.Properties.AimStartSoundID))
				{
					soundID = currentRangedWeaponInUse.Properties.AimStartSoundID;
				}
			}
			SoundHandler.PlaySound(soundID, this.Position, this.GameWorld);
		}

		// Token: 0x06003C30 RID: 15408 RVA: 0x00106E1C File Offset: 0x0010501C
		private void InitRecoilDistance()
		{
			if (this.m_currentAction == PlayerAction.HipFire)
			{
				this.m_subAnimations[1].RecoilDistance = 0.1f;
				return;
			}
			RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
			this.m_subAnimations[1].RecoilDistance = ((currentRangedWeaponInUse == null) ? 0.5f : currentRangedWeaponInUse.Visuals.RecoilDistance);
		}

		// Token: 0x06003C31 RID: 15409 RVA: 0x00106E70 File Offset: 0x00105070
		internal float GetAverageRoundtripTime()
		{
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				return this.m_game.Client.GetAverageRoundtripTime();
			}
			if (this.GameOwner == GameOwnerEnum.Server)
			{
				GameConnectionTag gameConnectionTag = this.GetGameConnectionTag();
				if (gameConnectionTag != null && gameConnectionTag.NetConnection != null)
				{
					return gameConnectionTag.NetConnection.AverageRoundtripTime * 1000f;
				}
			}
			return 0f;
		}

		// Token: 0x06003C32 RID: 15410 RVA: 0x00030FA2 File Offset: 0x0002F1A2
		internal float GetAverageLatencyTime()
		{
			return this.GetAverageRoundtripTime() * 0.5f;
		}

		// Token: 0x06003C33 RID: 15411 RVA: 0x00106ECC File Offset: 0x001050CC
		private void CheckManualAimStart(PlayerAction prevAction)
		{
			if (this.AnimationUpperOverride != null)
			{
				this.ManualAimStart = false;
				return;
			}
			TWeapon currentThrownWeaponInUse = this.GetCurrentThrownWeaponInUse();
			RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
			if (prevAction != PlayerAction.HipFire)
			{
				if ((currentRangedWeaponInUse != null && !string.IsNullOrEmpty(currentRangedWeaponInUse.Visuals.AnimManualAimStart)) || (currentThrownWeaponInUse != null && !string.IsNullOrEmpty(currentThrownWeaponInUse.Visuals.AnimManualAimStart)))
				{
					this.ManualAimStart = (Math.Abs(this.AimAngle) < 0.1f);
					return;
				}
			}
			else
			{
				this.ManualAimStart = false;
			}
		}

		// Token: 0x170009C9 RID: 2505
		// (get) Token: 0x06003C34 RID: 15412 RVA: 0x00030FB0 File Offset: 0x0002F1B0
		// (set) Token: 0x06003C35 RID: 15413 RVA: 0x00030FBA File Offset: 0x0002F1BA
		internal bool StandingOnGround
		{
			get
			{
				return this.m_states[0];
			}
			set
			{
				this.m_states[0] = value;
				if (!value)
				{
					this.StandingOnGroundBox2DStep = false;
				}
			}
		}

		// Token: 0x170009CA RID: 2506
		// (get) Token: 0x06003C36 RID: 15414 RVA: 0x00030FCF File Offset: 0x0002F1CF
		internal bool InFreeAir
		{
			get
			{
				return this.InAir && !this.Climbing && !this.LedgeGrabbing;
			}
		}

		// Token: 0x170009CB RID: 2507
		// (get) Token: 0x06003C37 RID: 15415 RVA: 0x00030FEC File Offset: 0x0002F1EC
		// (set) Token: 0x06003C38 RID: 15416 RVA: 0x00106F48 File Offset: 0x00105148
		internal bool InAir
		{
			get
			{
				return this.m_states[1];
			}
			set
			{
				if (this.m_states[1] != value)
				{
					this.m_states[1] = value;
					if (value)
					{
						this.m_havePerformedJumpAttack = false;
						this.Contacts.ClearContactTimes();
					}
				}
				if (value)
				{
					this.m_haveTouchedGroundSinceLastInAir = false;
				}
				if ((this.CurrentAction == PlayerAction.JumpKick || this.CurrentAction == PlayerAction.JumpAttack) && !value && this.GameOwner != GameOwnerEnum.Client)
				{
					this.CurrentActionToIdle();
				}
			}
		}

		// Token: 0x06003C39 RID: 15417 RVA: 0x00030FF6 File Offset: 0x0002F1F6
		internal void CurrentActionToIdle()
		{
			if (this.ThrowCharging)
			{
				this.m_isBackToHipFire = true;
				this.CurrentAction = PlayerAction.HipFire;
				this.m_isBackToHipFire = false;
				return;
			}
			this.CurrentAction = PlayerAction.Idle;
		}

		// Token: 0x170009CC RID: 2508
		// (get) Token: 0x06003C3A RID: 15418 RVA: 0x0003101D File Offset: 0x0002F21D
		internal bool HaveTouchedGroundSinceLastInAir
		{
			get
			{
				return this.m_haveTouchedGroundSinceLastInAir;
			}
		}

		// Token: 0x170009CD RID: 2509
		// (get) Token: 0x06003C3B RID: 15419 RVA: 0x00031025 File Offset: 0x0002F225
		// (set) Token: 0x06003C3C RID: 15420 RVA: 0x0003102F File Offset: 0x0002F22F
		internal bool Running
		{
			get
			{
				return this.m_states[2];
			}
			set
			{
				this.m_states[2] = value;
			}
		}

		// Token: 0x170009CE RID: 2510
		// (get) Token: 0x06003C3D RID: 15421 RVA: 0x0003103A File Offset: 0x0002F23A
		// (set) Token: 0x06003C3E RID: 15422 RVA: 0x00031045 File Offset: 0x0002F245
		internal bool SpeedBoostPreparing
		{
			get
			{
				return this.m_states[43];
			}
			set
			{
				if (this.m_states[43] != value)
				{
					this.m_states[43] = value;
					this.m_speedBoostPreparingIndex++;
				}
			}
		}

		// Token: 0x170009CF RID: 2511
		// (get) Token: 0x06003C3F RID: 15423 RVA: 0x0003106B File Offset: 0x0002F26B
		// (set) Token: 0x06003C40 RID: 15424 RVA: 0x00031076 File Offset: 0x0002F276
		internal bool SpeedBoostActive
		{
			get
			{
				return this.m_states[44];
			}
			set
			{
				this.m_states[44] = value;
			}
		}

		// Token: 0x170009D0 RID: 2512
		// (get) Token: 0x06003C41 RID: 15425 RVA: 0x00031082 File Offset: 0x0002F282
		// (set) Token: 0x06003C42 RID: 15426 RVA: 0x0003108D File Offset: 0x0002F28D
		internal bool StrengthBoostPreparing
		{
			get
			{
				return this.m_states[41];
			}
			set
			{
				if (this.m_states[41] != value)
				{
					this.m_states[41] = value;
					this.m_strengthBoostPreparingIndex++;
				}
			}
		}

		// Token: 0x170009D1 RID: 2513
		// (get) Token: 0x06003C43 RID: 15427 RVA: 0x000310B3 File Offset: 0x0002F2B3
		// (set) Token: 0x06003C44 RID: 15428 RVA: 0x000310BE File Offset: 0x0002F2BE
		internal bool StrengthBoostActive
		{
			get
			{
				return this.m_states[42];
			}
			set
			{
				this.m_states[42] = value;
			}
		}

		// Token: 0x170009D2 RID: 2514
		// (get) Token: 0x06003C45 RID: 15429 RVA: 0x000310CA File Offset: 0x0002F2CA
		// (set) Token: 0x06003C46 RID: 15430 RVA: 0x000310D4 File Offset: 0x0002F2D4
		internal bool Sprinting
		{
			get
			{
				return this.m_states[3];
			}
			set
			{
				if (this.m_states[3] != value)
				{
					this.m_states[3] = value;
					if (value)
					{
						this.AbortMelee();
					}
				}
			}
		}

		// Token: 0x170009D3 RID: 2515
		// (get) Token: 0x06003C47 RID: 15431 RVA: 0x000310F3 File Offset: 0x0002F2F3
		// (set) Token: 0x06003C48 RID: 15432 RVA: 0x000310FD File Offset: 0x0002F2FD
		internal bool Falling
		{
			get
			{
				return this.m_states[4];
			}
			set
			{
				if (this.m_states[4] != value)
				{
					this.m_states[4] = value;
					if (value)
					{
						this.LastFallingRotation = this.Rotation;
						this.DeathKneeling = false;
					}
				}
			}
		}

		// Token: 0x170009D4 RID: 2516
		// (get) Token: 0x06003C49 RID: 15433 RVA: 0x00031129 File Offset: 0x0002F329
		// (set) Token: 0x06003C4A RID: 15434 RVA: 0x00031133 File Offset: 0x0002F333
		internal bool Crouching
		{
			get
			{
				return this.m_states[5];
			}
			set
			{
				this.m_states[5] = value;
			}
		}

		// Token: 0x170009D5 RID: 2517
		// (get) Token: 0x06003C4B RID: 15435 RVA: 0x0003113E File Offset: 0x0002F33E
		// (set) Token: 0x06003C4C RID: 15436 RVA: 0x00031149 File Offset: 0x0002F349
		internal bool RecoveryRolling
		{
			get
			{
				return this.m_states[30];
			}
			set
			{
				this.m_states[30] = value;
			}
		}

		// Token: 0x06003C4D RID: 15437 RVA: 0x00031155 File Offset: 0x0002F355
		internal void SetWallDivingCount(byte value)
		{
			if (this.m_wallDivingCount < value || this.m_wallDivingCount - value >= 2)
			{
				this.m_wallDivingCount = value;
				this.TimeSequence.TimeWallDiveCooldown = 500f;
			}
		}

		// Token: 0x06003C4E RID: 15438 RVA: 0x00031182 File Offset: 0x0002F382
		internal void IncreaseWallDivingCount()
		{
			this.m_wallDivingCount += 1;
			this.TimeSequence.TimeWallDiveCooldown = 500f;
			if (this.m_wallDivingCount > 7)
			{
				this.m_wallDivingCount = 0;
			}
		}

		// Token: 0x06003C4F RID: 15439 RVA: 0x000311B3 File Offset: 0x0002F3B3
		internal byte GetWallDivingCount()
		{
			return this.m_wallDivingCount;
		}

		// Token: 0x06003C50 RID: 15440 RVA: 0x00106FB0 File Offset: 0x001051B0
		internal void SetClimbDropCount(byte value)
		{
			if (this.m_climbDropCount < value || this.m_climbDropCount - value >= 2)
			{
				this.m_climbDropCount = value;
				this.TimeSequence.TimeClimbingCooldown = 300f;
				this.TimeSequence.TimePostDropClimbAttackCooldown = 200f;
				this.ImportantUpdate = true;
			}
		}

		// Token: 0x06003C51 RID: 15441 RVA: 0x00107000 File Offset: 0x00105200
		internal void IncreaseClimbDropCount()
		{
			this.m_climbDropCount += 1;
			this.TimeSequence.TimeClimbingCooldown = 300f;
			this.TimeSequence.TimePostDropClimbAttackCooldown = 200f;
			if (this.m_climbDropCount > 3)
			{
				this.m_climbDropCount = 0;
			}
		}

		// Token: 0x06003C52 RID: 15442 RVA: 0x000311BB File Offset: 0x0002F3BB
		internal byte GetClimbDropCount()
		{
			return this.m_climbDropCount;
		}

		// Token: 0x170009D6 RID: 2518
		// (get) Token: 0x06003C53 RID: 15443 RVA: 0x000311C3 File Offset: 0x0002F3C3
		// (set) Token: 0x06003C54 RID: 15444 RVA: 0x0010704C File Offset: 0x0010524C
		internal bool Rolling
		{
			get
			{
				return this.m_states[6];
			}
			set
			{
				if (this.m_states[6] != value)
				{
					if (this.GameOwner != GameOwnerEnum.Server && !this.m_states[6] && value)
					{
						SoundHandler.PlaySound("PlayerRoll", this.Position, this.GameWorld);
					}
					this.CurrentActionTime = 0f;
					this.m_states[6] = value;
					this.m_rollTime = 0f;
					if (!value)
					{
						this.RecoveryRolling = false;
					}
				}
			}
		}

		// Token: 0x170009D7 RID: 2519
		// (get) Token: 0x06003C55 RID: 15445 RVA: 0x000311CD File Offset: 0x0002F3CD
		internal float RollTime
		{
			get
			{
				return this.m_rollTime;
			}
		}

		// Token: 0x06003C56 RID: 15446 RVA: 0x001070BC File Offset: 0x001052BC
		internal void ClientUpdateGameUserForceServerMovement(bool newValue)
		{
			GameUser gameUser = this.GetGameUser();
			if (gameUser != null && gameUser.ForceServerMovement != newValue)
			{
				if (!newValue)
				{
					this.ReleaseAllVirtualKeys();
				}
				gameUser.ForceServerMovement = newValue;
				this.UpdateCanDoPlayerAction();
				if (newValue)
				{
					this.PressAllVirtualKeysCurrentlyPhysicallyPressed();
				}
			}
		}

		// Token: 0x170009D8 RID: 2520
		// (get) Token: 0x06003C57 RID: 15447 RVA: 0x000311D5 File Offset: 0x0002F3D5
		// (set) Token: 0x06003C58 RID: 15448 RVA: 0x000311DD File Offset: 0x0002F3DD
		internal int LastDirectionXActionRoll { get; private set; }

		// Token: 0x170009D9 RID: 2521
		// (get) Token: 0x06003C59 RID: 15449 RVA: 0x000311E6 File Offset: 0x0002F3E6
		// (set) Token: 0x06003C5A RID: 15450 RVA: 0x000311EE File Offset: 0x0002F3EE
		internal int LastDirectionXActionKick { get; private set; }

		// Token: 0x06003C5B RID: 15451 RVA: 0x001070FC File Offset: 0x001052FC
		internal void DisableCaughtPlayersConnection()
		{
			this.DropCaughtByPlayer();
			this.DropGrabbedPlayer(null, false, false, true);
		}

		// Token: 0x06003C5C RID: 15452 RVA: 0x00107124 File Offset: 0x00105324
		internal void DropCaughtByPlayer()
		{
			if (this.CaughtByPlayerID != 0)
			{
				Player player = this.m_gameWorld.GetPlayer(this.CaughtByPlayerID);
				if (player != null)
				{
					player.DropGrabbedPlayer(null, false, false, true);
				}
				this.CaughtByPlayerID = 0;
			}
			if (this.GrabbedByPlayerID != 0)
			{
				Player player2 = this.m_gameWorld.GetPlayer(this.GrabbedByPlayerID);
				if (player2 != null)
				{
					player2.DropGrabbedPlayer(null, false, false, true);
				}
				this.GrabbedByPlayerID = 0;
			}
		}

		// Token: 0x170009DA RID: 2522
		// (get) Token: 0x06003C5D RID: 15453 RVA: 0x000311F7 File Offset: 0x0002F3F7
		// (set) Token: 0x06003C5E RID: 15454 RVA: 0x000311FF File Offset: 0x0002F3FF
		internal bool RefilterContacts { get; set; }

		// Token: 0x06003C5F RID: 15455 RVA: 0x001071A0 File Offset: 0x001053A0
		internal void DropGrabbedPlayer(Microsoft.Xna.Framework.Vector2? box2DLinearVelocity = null, bool isWallDiving = false, bool dropGently = false, bool disableGrabbingAction = true)
		{
			bool flag = false;
			bool flag2 = false;
			Player player = null;
			if (this.HoldingPlayerInGrabID != 0)
			{
				player = this.m_gameWorld.GetPlayer(this.HoldingPlayerInGrabID);
				flag = true;
			}
			else if (this.HoldingPlayerInDiveID != 0)
			{
				player = this.m_gameWorld.GetPlayer(this.HoldingPlayerInDiveID);
				this.LastCaughtPlayerID = this.HoldingPlayerInDiveID;
				flag = true;
				flag2 = true;
			}
			if (flag)
			{
				this.HoldingPlayerInGrabID = 0;
				this.HoldingPlayerInDiveID = 0;
				if (disableGrabbingAction && this.CurrentAction == PlayerAction.Grabbing)
				{
					this.CurrentActionToIdle();
				}
				if (player != null)
				{
					Microsoft.Xna.Framework.Vector2 linearVelocity = Microsoft.Xna.Framework.Vector2.Zero;
					if (flag2)
					{
						if (box2DLinearVelocity != null)
						{
							player.LastCaughtInDiveVelocity = new Microsoft.Xna.Framework.Vector2?(box2DLinearVelocity.Value);
						}
						else
						{
							player.LastCaughtInDiveVelocity = new Microsoft.Xna.Framework.Vector2?(this.m_preBox2DLinearVelocity);
						}
						this.UpdateCaughtPlayerPosition(player, true);
					}
					else if (box2DLinearVelocity != null)
					{
						linearVelocity = box2DLinearVelocity.Value;
					}
					player.AirControlBaseVelocity.X = 0f;
					player.AirControlBaseVelocity.Y = 0f;
					player.CaughtByPlayerID = 0;
					player.GrabbedByPlayerID = 0;
					player.UpdateResyncBox2DContacts();
					if (player.WorldBody != null)
					{
						player.m_preBox2DLinearVelocity.X = linearVelocity.X;
						player.WorldBody.SetLinearVelocity(linearVelocity);
					}
					player.ForceServerMovementState(25);
					player.ForceServerPositionState();
					if (!dropGently)
					{
						if (this.GameOwner != GameOwnerEnum.Client)
						{
							player.Fall();
						}
						else
						{
							Player player2 = player;
							player2.ForceClientMovementStateIgnored += 1;
							player.SimulateFall();
							Player player3 = player;
							player3.ForceClientMovementStateIgnored -= 1;
						}
					}
					else
					{
						player.CurrentActionToIdle();
					}
					player.RefilterContacts = true;
					this.SetCollisionPlayerPlayerOverlapping(player, 50f);
					if (isWallDiving)
					{
						this.IncreaseWallDivingCount();
					}
				}
			}
		}

		// Token: 0x170009DB RID: 2523
		// (get) Token: 0x06003C60 RID: 15456 RVA: 0x00031208 File Offset: 0x0002F408
		// (set) Token: 0x06003C61 RID: 15457 RVA: 0x00031210 File Offset: 0x0002F410
		internal Player.PlayerSpawnAnimation SpawnAnimation
		{
			get
			{
				return this.m_spawnAnimation;
			}
			set
			{
				if (this.m_spawnAnimation != value)
				{
					this.m_spawnAnimation = value;
					if (this.m_currentAnimation == Animation.Idle)
					{
						this.ForceHardAnimationReset(true);
					}
				}
			}
		}

		// Token: 0x170009DC RID: 2524
		// (get) Token: 0x06003C62 RID: 15458 RVA: 0x00031232 File Offset: 0x0002F432
		// (set) Token: 0x06003C63 RID: 15459 RVA: 0x0003123D File Offset: 0x0002F43D
		internal bool DeathKneeling
		{
			get
			{
				return this.m_states[28];
			}
			set
			{
				this.m_states[28] = value;
			}
		}

		// Token: 0x170009DD RID: 2525
		// (get) Token: 0x06003C64 RID: 15460 RVA: 0x00031249 File Offset: 0x0002F449
		// (set) Token: 0x06003C65 RID: 15461 RVA: 0x00031254 File Offset: 0x0002F454
		internal bool InThrowingMode
		{
			get
			{
				return this.m_states[31];
			}
			set
			{
				if (this.m_states[31] != value)
				{
					this.m_states[31] = value;
					if (value)
					{
						this.AbortAnimationOverride();
					}
				}
			}
		}

		// Token: 0x170009DE RID: 2526
		// (get) Token: 0x06003C66 RID: 15462 RVA: 0x00031275 File Offset: 0x0002F475
		// (set) Token: 0x06003C67 RID: 15463 RVA: 0x00031280 File Offset: 0x0002F480
		private bool ExitingThrowingMode
		{
			get
			{
				return this.m_states[38];
			}
			set
			{
				this.m_states[38] = value;
			}
		}

		// Token: 0x170009DF RID: 2527
		// (get) Token: 0x06003C68 RID: 15464 RVA: 0x0003128C File Offset: 0x0002F48C
		// (set) Token: 0x06003C69 RID: 15465 RVA: 0x00031297 File Offset: 0x0002F497
		private bool EnteringThrowingMode
		{
			get
			{
				return this.m_states[39];
			}
			set
			{
				this.m_states[39] = value;
			}
		}

		// Token: 0x170009E0 RID: 2528
		// (get) Token: 0x06003C6A RID: 15466 RVA: 0x000312A3 File Offset: 0x0002F4A3
		// (set) Token: 0x06003C6B RID: 15467 RVA: 0x00107340 File Offset: 0x00105540
		internal bool Diving
		{
			get
			{
				return this.m_states[7];
			}
			set
			{
				if (this.m_states[7] != value)
				{
					if ((this.GameOwner != GameOwnerEnum.Client || this.HasLocalControl) && this.HoldingPlayerInDiveID != 0 && !value)
					{
						this.DropGrabbedPlayer(null, false, false, true);
					}
					if (value)
					{
						if (this.GameOwner != GameOwnerEnum.Server)
						{
							SoundHandler.PlaySound("PlayerDive", this.Position, this.GameWorld);
						}
						this.LastCaughtPlayerID = 0;
					}
					else if (this.GameOwner != GameOwnerEnum.Client && this.CurrentAction == PlayerAction.Idle)
					{
						this.LowerFireRank();
					}
					this.DiveRotation = -0.35f * (float)this.LastDirectionX;
					this.CurrentActionTime = 0f;
					this.m_states[7] = value;
				}
			}
		}

		// Token: 0x170009E1 RID: 2529
		// (get) Token: 0x06003C6C RID: 15468 RVA: 0x000312AD File Offset: 0x0002F4AD
		internal bool IsInputEnabled
		{
			get
			{
				return this.m_states[27];
			}
		}

		// Token: 0x170009E2 RID: 2530
		// (get) Token: 0x06003C6D RID: 15469 RVA: 0x000312B8 File Offset: 0x0002F4B8
		internal PlayerInputMode InputMode
		{
			get
			{
				if (!this.m_states[27])
				{
					return PlayerInputMode.Disabled;
				}
				if (this.m_states[45])
				{
					return PlayerInputMode.ReadOnly;
				}
				return PlayerInputMode.Enabled;
			}
		}

		// Token: 0x06003C6E RID: 15470 RVA: 0x001073F4 File Offset: 0x001055F4
		internal void SetInputEnabled(bool value)
		{
			if (this.m_states[27] != value)
			{
				if (!value)
				{
					this.ReleaseAllVirtualKeys();
					this.m_states[27] = value;
					this.UpdateCanDoPlayerAction();
				}
				else
				{
					this.m_states[27] = value;
					this.UpdateCanDoPlayerAction();
					this.PressAllVirtualKeysCurrentlyPhysicallyPressed();
				}
			}
			this.m_states[45] = false;
		}

		// Token: 0x06003C6F RID: 15471 RVA: 0x00107448 File Offset: 0x00105648
		internal void SetInputMode(PlayerInputMode value)
		{
			switch (value)
			{
			case PlayerInputMode.Disabled:
				this.SetInputEnabled(false);
				return;
			case PlayerInputMode.Enabled:
				this.SetInputEnabled(true);
				return;
			case PlayerInputMode.ReadOnly:
				this.SetInputEnabled(true);
				this.m_states[45] = true;
				return;
			default:
				return;
			}
		}

		// Token: 0x170009E3 RID: 2531
		// (get) Token: 0x06003C70 RID: 15472 RVA: 0x000312D5 File Offset: 0x0002F4D5
		// (set) Token: 0x06003C71 RID: 15473 RVA: 0x000312E0 File Offset: 0x0002F4E0
		internal bool CanRecoverFromFall
		{
			get
			{
				return this.m_states[29];
			}
			set
			{
				this.m_states[29] = value;
			}
		}

		// Token: 0x170009E4 RID: 2532
		// (get) Token: 0x06003C72 RID: 15474 RVA: 0x000312EC File Offset: 0x0002F4EC
		// (set) Token: 0x06003C73 RID: 15475 RVA: 0x000312F6 File Offset: 0x0002F4F6
		internal bool LayingOnGround
		{
			get
			{
				return this.m_states[8];
			}
			set
			{
				this.m_states[8] = value;
			}
		}

		// Token: 0x170009E5 RID: 2533
		// (get) Token: 0x06003C74 RID: 15476 RVA: 0x00031301 File Offset: 0x0002F501
		// (set) Token: 0x06003C75 RID: 15477 RVA: 0x0003130C File Offset: 0x0002F50C
		internal bool MeleeHit
		{
			get
			{
				return this.m_states[9];
			}
			set
			{
				this.m_states[9] = value;
			}
		}

		// Token: 0x170009E6 RID: 2534
		// (get) Token: 0x06003C76 RID: 15478 RVA: 0x00031318 File Offset: 0x0002F518
		// (set) Token: 0x06003C77 RID: 15479 RVA: 0x00031323 File Offset: 0x0002F523
		internal bool Dazed
		{
			get
			{
				return this.m_states[10];
			}
			set
			{
				this.m_states[10] = value;
			}
		}

		// Token: 0x170009E7 RID: 2535
		// (get) Token: 0x06003C78 RID: 15480 RVA: 0x0003132F File Offset: 0x0002F52F
		// (set) Token: 0x06003C79 RID: 15481 RVA: 0x0003133A File Offset: 0x0002F53A
		internal bool IsDead
		{
			get
			{
				return this.m_states[11];
			}
			set
			{
				this.m_states[11] = value;
			}
		}

		// Token: 0x170009E8 RID: 2536
		// (get) Token: 0x06003C7A RID: 15482 RVA: 0x00031346 File Offset: 0x0002F546
		// (set) Token: 0x06003C7B RID: 15483 RVA: 0x00031351 File Offset: 0x0002F551
		internal bool GrabTelegraphing
		{
			get
			{
				return this.m_states[32];
			}
			set
			{
				this.m_states[32] = value;
			}
		}

		// Token: 0x170009E9 RID: 2537
		// (get) Token: 0x06003C7C RID: 15484 RVA: 0x0003135D File Offset: 0x0002F55D
		// (set) Token: 0x06003C7D RID: 15485 RVA: 0x00031368 File Offset: 0x0002F568
		internal bool GrabCharging
		{
			get
			{
				return this.m_states[33];
			}
			set
			{
				this.m_states[33] = value;
			}
		}

		// Token: 0x170009EA RID: 2538
		// (get) Token: 0x06003C7E RID: 15486 RVA: 0x00031374 File Offset: 0x0002F574
		// (set) Token: 0x06003C7F RID: 15487 RVA: 0x0003137F File Offset: 0x0002F57F
		internal bool GrabAttacking
		{
			get
			{
				return this.m_states[34];
			}
			set
			{
				this.m_states[34] = value;
			}
		}

		// Token: 0x170009EB RID: 2539
		// (get) Token: 0x06003C80 RID: 15488 RVA: 0x0003138B File Offset: 0x0002F58B
		// (set) Token: 0x06003C81 RID: 15489 RVA: 0x00031396 File Offset: 0x0002F596
		internal bool GrabThrowing
		{
			get
			{
				return this.m_states[36];
			}
			set
			{
				this.m_states[36] = value;
			}
		}

		// Token: 0x170009EC RID: 2540
		// (get) Token: 0x06003C82 RID: 15490 RVA: 0x000313A2 File Offset: 0x0002F5A2
		// (set) Token: 0x06003C83 RID: 15491 RVA: 0x000313AD File Offset: 0x0002F5AD
		internal bool GrabKicking
		{
			get
			{
				return this.m_states[35];
			}
			set
			{
				this.m_states[35] = value;
			}
		}

		// Token: 0x170009ED RID: 2541
		// (get) Token: 0x06003C84 RID: 15492 RVA: 0x000313B9 File Offset: 0x0002F5B9
		// (set) Token: 0x06003C85 RID: 15493 RVA: 0x000313C4 File Offset: 0x0002F5C4
		internal bool GrabImmunity
		{
			get
			{
				return this.m_states[37];
			}
			set
			{
				this.m_states[37] = value;
			}
		}

		// Token: 0x170009EE RID: 2542
		// (get) Token: 0x06003C86 RID: 15494 RVA: 0x000313D0 File Offset: 0x0002F5D0
		// (set) Token: 0x06003C87 RID: 15495 RVA: 0x000313DB File Offset: 0x0002F5DB
		internal bool ExtraMeleeStateChainsawActive
		{
			get
			{
				return this.m_states[40];
			}
			set
			{
				if (this.m_states[40] != value)
				{
					this.m_states[40] = value;
					this.ForceHardAnimationReset(true);
				}
			}
		}

		// Token: 0x170009EF RID: 2543
		// (get) Token: 0x06003C88 RID: 15496 RVA: 0x000313FA File Offset: 0x0002F5FA
		internal bool IsUsingChainsaw
		{
			get
			{
				return this.ExtraMeleeStateChainsawActive && this.m_currentMeleeWeapon is WpnChainsaw && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee;
			}
		}

		// Token: 0x170009F0 RID: 2544
		// (get) Token: 0x06003C89 RID: 15497 RVA: 0x0003141C File Offset: 0x0002F61C
		internal bool IsHoldingChainsaw
		{
			get
			{
				return this.m_currentMeleeWeapon is WpnChainsaw && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee;
			}
		}

		// Token: 0x170009F1 RID: 2545
		// (get) Token: 0x06003C8A RID: 15498 RVA: 0x00031436 File Offset: 0x0002F636
		internal bool IsGrabbing
		{
			get
			{
				return this.CurrentAction == PlayerAction.Grabbing;
			}
		}

		// Token: 0x170009F2 RID: 2546
		// (get) Token: 0x06003C8B RID: 15499 RVA: 0x00031442 File Offset: 0x0002F642
		private bool IsPerformingGrabAction
		{
			get
			{
				return this.GrabAttacking | this.GrabThrowing | this.GrabKicking | this.GrabCharging | this.GrabTelegraphing;
			}
		}

		// Token: 0x170009F3 RID: 2547
		// (get) Token: 0x06003C8C RID: 15500 RVA: 0x00031466 File Offset: 0x0002F666
		// (set) Token: 0x06003C8D RID: 15501 RVA: 0x0010748C File Offset: 0x0010568C
		internal bool Staggering
		{
			get
			{
				return this.m_states[12];
			}
			set
			{
				if (this.m_states[12] != value)
				{
					this.CurrentActionTime = 0f;
				}
				this.m_states[12] = value;
				if (value)
				{
					this.m_clientMustInitiateMovement = false;
					this.Crouching = false;
					this.Rolling = false;
					this.TimeSequence.TimeFullLanding = 0f;
					this.FullLanding = false;
				}
			}
		}

		// Token: 0x170009F4 RID: 2548
		// (get) Token: 0x06003C8E RID: 15502 RVA: 0x00031471 File Offset: 0x0002F671
		internal bool PreventFallThroughCloudsActive
		{
			get
			{
				return !this.Staggering && !this.DeathKneeling;
			}
		}

		// Token: 0x170009F5 RID: 2549
		// (get) Token: 0x06003C8F RID: 15503 RVA: 0x00031486 File Offset: 0x0002F686
		// (set) Token: 0x06003C90 RID: 15504 RVA: 0x001074EC File Offset: 0x001056EC
		internal bool CloudsDisabled
		{
			get
			{
				return this.m_states[13];
			}
			set
			{
				if (this.m_states[13] != value)
				{
					this.m_states[13] = value;
					this.m_playerFilterCollision.disableCloudCollision = this.CloudsDisabled;
					this.m_playerFixtureCircle.SetFilterData(ref this.m_playerFilterCollision);
					this.m_playerFixturePolygon.SetFilterData(ref this.m_playerFilterCollision);
					this.m_polygonFixtureEnabled = true;
					this.ImportantUpdate = true;
					if (this.GameOwner != GameOwnerEnum.Client || this.HasLocalControl)
					{
						if (this.m_playerFilterCollision.disableCloudCollision)
						{
							this.TimeSequence.TimeTriggerJump = 0f;
						}
						if (!this.IsDead)
						{
							this.UpdateResyncBox2DContacts();
						}
					}
				}
			}
		}

		// Token: 0x170009F6 RID: 2550
		// (get) Token: 0x06003C91 RID: 15505 RVA: 0x00031491 File Offset: 0x0002F691
		// (set) Token: 0x06003C92 RID: 15506 RVA: 0x000314BB File Offset: 0x0002F6BB
		internal bool IsRemoved
		{
			get
			{
				return this.ObjectData == null || this.ObjectData.IsDisposed || this.WorldBody == null || this.m_states[15];
			}
			set
			{
				this.m_states[15] = value;
			}
		}

		// Token: 0x170009F7 RID: 2551
		// (get) Token: 0x06003C93 RID: 15507 RVA: 0x000314C7 File Offset: 0x0002F6C7
		// (set) Token: 0x06003C94 RID: 15508 RVA: 0x000314D2 File Offset: 0x0002F6D2
		internal bool ForceKneel
		{
			get
			{
				return this.m_states[16];
			}
			set
			{
				this.m_states[16] = value;
			}
		}

		// Token: 0x170009F8 RID: 2552
		// (get) Token: 0x06003C95 RID: 15509 RVA: 0x000314DE File Offset: 0x0002F6DE
		// (set) Token: 0x06003C96 RID: 15510 RVA: 0x000314E9 File Offset: 0x0002F6E9
		internal bool TakingCover
		{
			get
			{
				return this.m_states[14];
			}
			set
			{
				if (this.m_states[14] != value)
				{
					this.m_states[14] = value;
					if (!value)
					{
						this.m_coverObject = null;
						this.m_coverObjectCanShootThrough = false;
					}
				}
			}
		}

		// Token: 0x170009F9 RID: 2553
		// (get) Token: 0x06003C97 RID: 15511 RVA: 0x00031512 File Offset: 0x0002F712
		// (set) Token: 0x06003C98 RID: 15512 RVA: 0x00031527 File Offset: 0x0002F727
		internal bool ClimbingClient
		{
			get
			{
				return this.m_climbingClient && !this.IsBot;
			}
			set
			{
				this.m_climbingClient = value;
			}
		}

		// Token: 0x170009FA RID: 2554
		// (get) Token: 0x06003C99 RID: 15513 RVA: 0x00031530 File Offset: 0x0002F730
		// (set) Token: 0x06003C9A RID: 15514 RVA: 0x00107590 File Offset: 0x00105790
		internal bool Climbing
		{
			get
			{
				return this.m_states[17];
			}
			set
			{
				if (this.m_states[17] != value && value)
				{
					this.m_havePerformedJumpAttack = false;
				}
				this.m_states[17] = value;
				if (value)
				{
					this.DisableJumpWhileHoldingUpKey = true;
					this.Rolling = false;
					this.FullLanding = false;
				}
				if ((this.CurrentAction == PlayerAction.JumpKick | this.CurrentAction == PlayerAction.JumpAttack | this.CurrentAction == PlayerAction.Kick | this.CurrentAction == PlayerAction.MeleeAttack1 | this.CurrentAction == PlayerAction.MeleeAttack2 | this.CurrentAction == PlayerAction.MeleeAttack3 | this.CurrentAction == PlayerAction.Block) && value && (this.GameOwner != GameOwnerEnum.Client || this.HasLocalControl))
				{
					this.CurrentAction = PlayerAction.Idle;
				}
			}
		}

		// Token: 0x170009FB RID: 2555
		// (get) Token: 0x06003C9B RID: 15515 RVA: 0x0003153B File Offset: 0x0002F73B
		// (set) Token: 0x06003C9C RID: 15516 RVA: 0x00031546 File Offset: 0x0002F746
		internal bool LedgeGrabbingTurn
		{
			get
			{
				return this.m_states[23];
			}
			set
			{
				this.m_states[23] = value;
			}
		}

		// Token: 0x170009FC RID: 2556
		// (get) Token: 0x06003C9D RID: 15517 RVA: 0x00031552 File Offset: 0x0002F752
		internal bool LedgeGrabbing
		{
			get
			{
				return this.m_ledgeGrabbingData.Fixture != null;
			}
		}

		// Token: 0x170009FD RID: 2557
		// (get) Token: 0x06003C9E RID: 15518 RVA: 0x00031565 File Offset: 0x0002F765
		internal LedgeGrabbingData LedgeGrabData
		{
			get
			{
				return this.m_ledgeGrabbingData;
			}
		}

		// Token: 0x170009FE RID: 2558
		// (get) Token: 0x06003C9F RID: 15519 RVA: 0x0003156D File Offset: 0x0002F76D
		// (set) Token: 0x06003CA0 RID: 15520 RVA: 0x00107640 File Offset: 0x00105840
		internal bool ThrowCharging
		{
			get
			{
				return this.m_states[18];
			}
			set
			{
				if (!this.InThrowingMode && !this.m_states[18] && value && this.CurrentThrownWeapon != null)
				{
					TWeaponOnBeginChargeArgs e = new TWeaponOnBeginChargeArgs(this, this.CurrentThrownWeapon);
					this.CurrentThrownWeapon.OnBeginCharge(e);
				}
				this.m_states[18] = value;
			}
		}

		// Token: 0x170009FF RID: 2559
		// (get) Token: 0x06003CA1 RID: 15521 RVA: 0x00031578 File Offset: 0x0002F778
		// (set) Token: 0x06003CA2 RID: 15522 RVA: 0x00031594 File Offset: 0x0002F794
		internal bool ChatActive
		{
			get
			{
				return this.m_states[19] && this.m_chatActiveTime > 250f;
			}
			set
			{
				if (this.m_states[19] != value)
				{
					this.m_chatActiveTime = 0f;
				}
				this.m_states[19] = value;
			}
		}

		// Token: 0x17000A00 RID: 2560
		// (get) Token: 0x06003CA3 RID: 15523 RVA: 0x000315B7 File Offset: 0x0002F7B7
		internal bool IsRecoveryKneeling
		{
			get
			{
				return this.StandingOnGround & this.FullLandingOnGround;
			}
		}

		// Token: 0x17000A01 RID: 2561
		// (get) Token: 0x06003CA4 RID: 15524 RVA: 0x000315C6 File Offset: 0x0002F7C6
		internal bool FullLandingOnGround
		{
			get
			{
				return this.FullLanding & this.TimeSequence.TimeFullLanding > 0f;
			}
		}

		// Token: 0x17000A02 RID: 2562
		// (get) Token: 0x06003CA5 RID: 15525 RVA: 0x000315E1 File Offset: 0x0002F7E1
		// (set) Token: 0x06003CA6 RID: 15526 RVA: 0x000315EC File Offset: 0x0002F7EC
		internal bool FullLanding
		{
			get
			{
				return this.m_states[24];
			}
			set
			{
				this.m_states[24] = value;
			}
		}

		// Token: 0x17000A03 RID: 2563
		// (get) Token: 0x06003CA7 RID: 15527 RVA: 0x000315F8 File Offset: 0x0002F7F8
		// (set) Token: 0x06003CA8 RID: 15528 RVA: 0x00031600 File Offset: 0x0002F800
		internal bool MeleeWeaponBroken
		{
			get
			{
				return this.m_meleeWeaponBroken;
			}
			set
			{
				if (this.m_meleeWeaponBroken != value)
				{
					this.m_meleeWeaponBroken = value;
					if (value && !this.PerformingStunt)
					{
						this.ForceHardAnimationReset(false);
					}
				}
			}
		}

		// Token: 0x17000A04 RID: 2564
		// (get) Token: 0x06003CA9 RID: 15529 RVA: 0x00031624 File Offset: 0x0002F824
		// (set) Token: 0x06003CAA RID: 15530 RVA: 0x0003162C File Offset: 0x0002F82C
		private bool ManualAimStart { get; set; }

		// Token: 0x06003CAB RID: 15531 RVA: 0x00107690 File Offset: 0x00105890
		internal void CancelReloading()
		{
			if (this.GameOwner != GameOwnerEnum.Client)
			{
				this.AutoReloadWeapon = false;
			}
			if (this.AnimationUpperOverride != null)
			{
				IPlayerUpperAnimationSourceEnum playerUpperAnimationSourceEnum = this.AnimationUpperOverride.OverrideUpperAnimationSource();
				switch (playerUpperAnimationSourceEnum)
				{
				case IPlayerUpperAnimationSourceEnum.None:
					break;
				case IPlayerUpperAnimationSourceEnum.Reloading:
				case IPlayerUpperAnimationSourceEnum.PostFire:
				case IPlayerUpperAnimationSourceEnum.PostReload:
					this.AnimationUpperOverride.OverrideUpperAnimationAborted(this, Animation.None);
					this.AnimationUpperOverride = null;
					break;
				default:
					ConsoleOutput.ShowMessage(ConsoleOutputType.Error, "Player.CancelReloading() unhandled case of type '" + playerUpperAnimationSourceEnum.ToString() + "'");
					break;
				}
			}
			if (this.Reloading)
			{
				this.Reloading = false;
			}
		}

		// Token: 0x17000A05 RID: 2565
		// (get) Token: 0x06003CAC RID: 15532 RVA: 0x00031635 File Offset: 0x0002F835
		// (set) Token: 0x06003CAD RID: 15533 RVA: 0x00107720 File Offset: 0x00105920
		internal bool Reloading
		{
			get
			{
				return this.m_states[20];
			}
			set
			{
				if (this.GameOwner == GameOwnerEnum.Client)
				{
					if (!this.m_states[20] && value)
					{
						RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
						if (currentRangedWeaponInUse != null)
						{
							if (!string.IsNullOrEmpty(currentRangedWeaponInUse.Visuals.AnimReloadUpper))
							{
								this.AnimationUpperOverride = new PlayerReloadingAnimation(this, currentRangedWeaponInUse);
							}
							this.UpdateAnimation();
						}
					}
					else if (this.m_states[20] && !value)
					{
						this.AnimationUpperOverride = null;
					}
				}
				if (this.m_states[20] != value)
				{
					this.ImportantUpdate = true;
				}
				this.m_states[20] = value;
			}
		}

		// Token: 0x17000A06 RID: 2566
		// (get) Token: 0x06003CAE RID: 15534 RVA: 0x00031640 File Offset: 0x0002F840
		// (set) Token: 0x06003CAF RID: 15535 RVA: 0x001077A8 File Offset: 0x001059A8
		internal bool ReloadingToggle
		{
			get
			{
				return this.m_states[21];
			}
			set
			{
				if (this.GameOwner != GameOwnerEnum.Server && this.m_states[21] != value)
				{
					RWeapon currentRangedWeaponInUse = this.GetCurrentRangedWeaponInUse();
					if (this.Reloading)
					{
						if (currentRangedWeaponInUse != null && !string.IsNullOrEmpty(currentRangedWeaponInUse.Visuals.AnimReloadUpper))
						{
							this.AnimationUpperOverride = new PlayerReloadingAnimation(this, currentRangedWeaponInUse);
						}
					}
					else if (currentRangedWeaponInUse != null)
					{
						currentRangedWeaponInUse.OnReloadAnimationFinished(this);
						this.FireSequence.WeaponReloadCooldown = currentRangedWeaponInUse.Properties.ReloadPostCooldown;
					}
				}
				this.m_states[21] = value;
			}
		}

		// Token: 0x17000A07 RID: 2567
		// (get) Token: 0x06003CB0 RID: 15536 RVA: 0x0003164B File Offset: 0x0002F84B
		// (set) Token: 0x06003CB1 RID: 15537 RVA: 0x00031656 File Offset: 0x0002F856
		internal bool Walking
		{
			get
			{
				return this.m_states[22];
			}
			set
			{
				this.m_states[22] = value;
			}
		}

		// Token: 0x17000A08 RID: 2568
		// (get) Token: 0x06003CB2 RID: 15538 RVA: 0x00031662 File Offset: 0x0002F862
		// (set) Token: 0x06003CB3 RID: 15539 RVA: 0x0003166D File Offset: 0x0002F86D
		internal bool Burned
		{
			get
			{
				return this.m_states[25];
			}
			set
			{
				if (this.m_states[25] != value)
				{
					this.m_states[25] = value;
					this.CheckBurnedProfile();
				}
			}
		}

		// Token: 0x06003CB4 RID: 15540 RVA: 0x00107828 File Offset: 0x00105A28
		internal void CheckBurnedProfile()
		{
			if (this.Burned)
			{
				Item item = Items.GetItem((this.Gender == Player.GenderType.Male) ? "Burnt" : "Burnt_fem");
				if (item != null)
				{
					for (int i = 0; i < 9; i++)
					{
						this.Equipment.Unequip(i);
					}
					this.Equipment.Equip(item);
				}
			}
		}

		// Token: 0x17000A09 RID: 2569
		// (get) Token: 0x06003CB5 RID: 15541 RVA: 0x00107880 File Offset: 0x00105A80
		internal bool Burning
		{
			get
			{
				if (this.BurningInferno)
				{
					return true;
				}
				ObjectData objectData = this.ObjectData;
				return objectData != null && !objectData.IsDisposed && objectData.Fire.IsBurning;
			}
		}

		// Token: 0x17000A0A RID: 2570
		// (get) Token: 0x06003CB6 RID: 15542 RVA: 0x0003168B File Offset: 0x0002F88B
		// (set) Token: 0x06003CB7 RID: 15543 RVA: 0x00031696 File Offset: 0x0002F896
		internal bool BurningInferno
		{
			get
			{
				return this.m_states[26];
			}
			set
			{
				this.m_states[26] = value;
			}
		}

		// Token: 0x06003CB8 RID: 15544 RVA: 0x000316A2 File Offset: 0x0002F8A2
		internal bool[] GetStates()
		{
			return this.m_states;
		}

		// Token: 0x06003CB9 RID: 15545 RVA: 0x001078B8 File Offset: 0x00105AB8
		internal void SetStatesServer(bool[] stateValues, PlayerAction playerAction, bool forceSync)
		{
			if (stateValues.Length != this.m_states.Length)
			{
				throw new Exception("Error: Player.SetStates() received invalid data");
			}
			bool flag = false;
			bool flag2 = false;
			Microsoft.Xna.Framework.Vector2 zero = Microsoft.Xna.Framework.Vector2.Zero;
			if (forceSync)
			{
				if (stateValues[1])
				{
					if (this.Rolling | this.Diving | this.TimeSequence.TimeStuntCooldown > 0f)
					{
						this.TimeSequence.TimeStuntCooldown = 1000f - Math.Min(this.RollTime, 500f);
					}
					if ((playerAction == PlayerAction.JumpAttack && this.CurrentAction == PlayerAction.MeleeAttack1) || (playerAction == PlayerAction.JumpKick && this.CurrentAction == PlayerAction.Kick))
					{
						this.StandingOnGround = stateValues[0];
						this.InAir = stateValues[1];
						this.CheckMeleeGroundToAir(true);
					}
				}
				if (!this.Rolling & stateValues[30])
				{
					this.ForceServerMovementStateIgnored += 1;
					this.RecoveryRoll();
					this.ForceServerMovementStateIgnored -= 1;
				}
				else if (!this.Rolling & stateValues[6])
				{
					this.ForceServerMovementStateIgnored += 1;
					this.Roll(false);
					this.ForceServerMovementStateIgnored -= 1;
				}
				if (!this.Diving & stateValues[7])
				{
					this.ForceServerMovementStateIgnored += 1;
					this.Dive();
					this.ForceServerMovementStateIgnored -= 1;
				}
				if (playerAction == PlayerAction.Idle && stateValues[14] && !this.TakingCover)
				{
					this.ForceServerMovementStateIgnored += 1;
					this.TakeCover();
					this.ForceServerMovementStateIgnored -= 1;
				}
				if (playerAction == PlayerAction.Block && stateValues[1] && this.CurrentAction == PlayerAction.Block && this.StandingOnGround)
				{
					this.ForceServerMovementStateIgnored += 1;
					this.StandingOnGround = false;
					this.ForceServerMovementStateIgnored -= 1;
				}
				if (playerAction == PlayerAction.Kick && !this.IsGrabbedByPlayer)
				{
					this.ForceServerMovementStateIgnored += 1;
					if (this.CanKick(100f))
					{
						this.GroundKick();
					}
					this.ForceServerMovementStateIgnored -= 1;
				}
				if (!this.FullLandingOnGround & stateValues[24] & stateValues[0])
				{
					this.ForceServerMovementStateIgnored += 1;
					this.PerformFullLand();
					this.ForceServerMovementStateIgnored -= 1;
				}
				if (!this.LayingOnGround & stateValues[8])
				{
					this.ForceServerMovementStateIgnored += 1;
					this.PerformFullLandKnockdown();
					this.ForceServerMovementStateIgnored -= 1;
				}
				if (!this.Falling & stateValues[4] & !this.IsGrabbedByPlayer)
				{
					flag2 = true;
					flag = true;
					if (this.Staggering)
					{
						zero = new Microsoft.Xna.Framework.Vector2(0f, 3f);
					}
				}
			}
			if (stateValues[1] & (this.Dazed | this.MeleeHit | this.Staggering) & !this.IsGrabbedByPlayer)
			{
				flag = true;
			}
			this.StandingOnGround = stateValues[0];
			this.InAir = stateValues[1];
			this.Running = stateValues[2];
			this.Rolling = stateValues[6];
			if (!this.RecoveryRolling && stateValues[30])
			{
				this.RecoveryRoll();
			}
			if (!stateValues[29])
			{
				this.CanRecoverFromFall = stateValues[29];
			}
			this.Sprinting = stateValues[3];
			this.Crouching = stateValues[5];
			this.Diving = stateValues[7];
			if (this.CloudsDisabled != stateValues[13])
			{
				this.CloudsDisabled = stateValues[13];
				if (this.CloudsDisabled)
				{
					this.TimeSequence.TimeDisableDownThroughCloud = 250f;
					this.TimeSequence.TimeTriggerDownThroughCloudsDelay = 0f;
					this.TimeSequence.TimeTriggerJump = 0f;
				}
			}
			this.TakingCover = stateValues[14];
			this.ForceKneel = stateValues[16];
			this.Climbing = stateValues[17];
			if (this.Climbing)
			{
				this.TimeSequence.TimeClimbingCooldown = 0f;
			}
			this.Walking = stateValues[22];
			this.LedgeGrabbingTurn = stateValues[23];
			this.ImportantUpdate = true;
			if (flag)
			{
				if (flag2)
				{
					this.ForceServerMovementStateIgnored += 1;
				}
				this.Fall(zero);
				if (flag2)
				{
					this.ForceServerMovementStateIgnored -= 1;
				}
			}
		}

		// Token: 0x06003CBA RID: 15546 RVA: 0x00107CB4 File Offset: 0x00105EB4
		internal void SetStatesClient(bool[] stateValues, PlayerAction playerAction, bool forceSync, int animFrameA, int animFrameB, out bool postFall)
		{
			if (stateValues.Length != this.m_states.Length)
			{
				throw new Exception("Error: Player.SetStates() received invalid data");
			}
			postFall = false;
			if (this.HasLocalControl)
			{
				if (!forceSync)
				{
					if (this.InAir & playerAction == PlayerAction.ManualAim)
					{
						playerAction = this.CurrentAction;
					}
					if (this.CurrentAction == PlayerAction.ManualAim && playerAction == PlayerAction.Idle && !stateValues[20] && this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.NONE)
					{
						playerAction = PlayerAction.ManualAim;
					}
					if (this.LedgeGrabbing & (playerAction == PlayerAction.JumpAttack | playerAction == PlayerAction.JumpKick))
					{
						playerAction = this.CurrentAction;
					}
					if (this.CurrentAction == PlayerAction.Block & playerAction == PlayerAction.Idle)
					{
						playerAction = PlayerAction.Block;
					}
				}
				if (this.InAir & (stateValues[10] | stateValues[9]))
				{
					postFall = true;
				}
				if (this.InAir & stateValues[12])
				{
					postFall = true;
				}
				if ((this.CurrentAction == PlayerAction.JumpKick | this.CurrentAction == PlayerAction.JumpAttack) & playerAction == PlayerAction.Idle & (stateValues[1] | this.InAir))
				{
					playerAction = this.CurrentAction;
				}
			}
			bool flag = false;
			if (!this.LedgeGrabbing)
			{
				forceSync = (forceSync || (this.CurrentAction != PlayerAction.Disabled && playerAction == PlayerAction.Disabled) || (this.CurrentAction == PlayerAction.Disabled && playerAction != PlayerAction.Disabled));
				flag = (forceSync && this.CurrentAction == PlayerAction.Disabled);
			}
			this.EnteringThrowingMode = stateValues[39];
			this.ExitingThrowingMode = stateValues[38];
			this.Reloading = stateValues[20];
			this.ReloadingToggle = stateValues[21];
			this.CurrentAction = playerAction;
			this.InThrowingMode = stateValues[31];
			this.EnteringThrowingMode = stateValues[39];
			this.ExitingThrowingMode = stateValues[38];
			if (forceSync)
			{
				this.StandingOnGround = stateValues[0];
			}
			if (forceSync)
			{
				this.InAir = stateValues[1];
			}
			if (forceSync)
			{
				this.Running = stateValues[2];
			}
			if (forceSync)
			{
				this.Sprinting = stateValues[3];
			}
			this.Falling = stateValues[4];
			if (forceSync || flag)
			{
				this.Crouching = stateValues[5];
			}
			if (forceSync)
			{
				this.Rolling = stateValues[6];
			}
			if (forceSync)
			{
				this.RecoveryRolling = stateValues[30];
			}
			if ((forceSync || flag) | !stateValues[29])
			{
				this.CanRecoverFromFall = stateValues[29];
			}
			if (forceSync || flag)
			{
				this.Diving = stateValues[7];
			}
			this.StrengthBoostPreparing = stateValues[41];
			this.StrengthBoostActive = stateValues[42];
			this.SpeedBoostPreparing = stateValues[43];
			this.SpeedBoostActive = stateValues[44];
			this.LayingOnGround = stateValues[8];
			this.MeleeHit = stateValues[9];
			this.Dazed = stateValues[10];
			this.Staggering = stateValues[12];
			if (forceSync)
			{
				this.CloudsDisabled = stateValues[13];
			}
			if (forceSync || flag)
			{
				this.TakingCover = stateValues[14];
			}
			if (this.TakingCover)
			{
				this.FireSequence.HipFireEndTimer = 300f;
			}
			this.IsRemoved = stateValues[15];
			this.IsDead = (stateValues[11] | this.IsRemoved);
			this.ForceKneel = stateValues[16];
			if (forceSync || flag)
			{
				this.Climbing = stateValues[17];
			}
			this.ThrowCharging = stateValues[18];
			this.ChatActive = stateValues[19];
			if (forceSync)
			{
				this.Walking = stateValues[22];
			}
			if (forceSync)
			{
				this.LedgeGrabbingTurn = stateValues[23];
			}
			if (stateValues[1] && (playerAction == PlayerAction.JumpKick || playerAction == PlayerAction.JumpAttack))
			{
				this.FullLanding = true;
			}
			else if ((forceSync || flag) | this.FullLanding)
			{
				this.FullLanding = stateValues[24];
			}
			this.Burned = stateValues[25];
			this.BurningInferno = stateValues[26];
			this.GrabTelegraphing = stateValues[32];
			this.GrabCharging = stateValues[33];
			this.GrabAttacking = stateValues[34];
			this.GrabKicking = stateValues[35];
			this.GrabThrowing = stateValues[36];
			this.GrabImmunity = stateValues[37];
			this.ExtraMeleeStateChainsawActive = stateValues[40];
			this.DeathKneeling = stateValues[28];
			this.SetInputEnabled(stateValues[27]);
			this.m_states[45] = stateValues[45];
			if (postFall)
			{
				this.Fall();
			}
			if (this.FreezeAnimationOnAction == playerAction && (playerAction != PlayerAction.MeleeAttack1 || this.m_meleeHit1Delay <= 0f))
			{
				this.UnfreezeAnimationOnAction();
			}
			if (!this.HasLocalControl && (this.CurrentAction == PlayerAction.MeleeAttack1 || this.CurrentAction == PlayerAction.MeleeAttack2 || this.CurrentAction == PlayerAction.MeleeAttack3 || this.CurrentAction == PlayerAction.JumpAttack || this.CurrentAction == PlayerAction.JumpKick))
			{
				this.UpdateAnimation();
				if (this.GetSubAnimations()[0].GetCurrentFrameIndex() < animFrameA)
				{
					this.GetSubAnimations()[0].SetFrame(animFrameA, true);
				}
				if (this.GetSubAnimations()[1].GetCurrentFrameIndex() < animFrameB)
				{
					this.GetSubAnimations()[1].SetFrame(animFrameB, true);
				}
			}
		}

		// Token: 0x17000A0B RID: 2571
		// (get) Token: 0x06003CBB RID: 15547 RVA: 0x000316AA File Offset: 0x0002F8AA
		internal bool Disabled
		{
			get
			{
				return this.CurrentAction == PlayerAction.Disabled;
			}
		}

		// Token: 0x17000A0C RID: 2572
		// (get) Token: 0x06003CBC RID: 15548 RVA: 0x000316B6 File Offset: 0x0002F8B6
		// (set) Token: 0x06003CBD RID: 15549 RVA: 0x000316BE File Offset: 0x0002F8BE
		internal int ClimbingDirection { get; set; }

		// Token: 0x17000A0D RID: 2573
		// (get) Token: 0x06003CBE RID: 15550 RVA: 0x000316C7 File Offset: 0x0002F8C7
		// (set) Token: 0x06003CBF RID: 15551 RVA: 0x000316CF File Offset: 0x0002F8CF
		internal float ClimbingSlideDownTimeStamp { get; set; }

		// Token: 0x17000A0E RID: 2574
		// (get) Token: 0x06003CC0 RID: 15552 RVA: 0x000316D8 File Offset: 0x0002F8D8
		// (set) Token: 0x06003CC1 RID: 15553 RVA: 0x000316E0 File Offset: 0x0002F8E0
		internal int WantedClimbingDirection { get; set; }

		// Token: 0x17000A0F RID: 2575
		// (get) Token: 0x06003CC2 RID: 15554 RVA: 0x000316E9 File Offset: 0x0002F8E9
		// (set) Token: 0x06003CC3 RID: 15555 RVA: 0x000316F6 File Offset: 0x0002F8F6
		internal int GrabbedByPlayerID
		{
			get
			{
				return this.m_grabbedByPlayerValue.PlayerID;
			}
			set
			{
				this.m_grabbedByPlayerValue.PlayerID = value;
			}
		}

		// Token: 0x17000A10 RID: 2576
		// (get) Token: 0x06003CC4 RID: 15556 RVA: 0x00031704 File Offset: 0x0002F904
		internal Player GrabbedByPlayer
		{
			get
			{
				return this.m_grabbedByPlayerValue.Player;
			}
		}

		// Token: 0x17000A11 RID: 2577
		// (get) Token: 0x06003CC5 RID: 15557 RVA: 0x00031711 File Offset: 0x0002F911
		internal bool IsGrabbedByPlayer
		{
			get
			{
				return this.GrabbedByPlayerID != 0;
			}
		}

		// Token: 0x17000A12 RID: 2578
		// (get) Token: 0x06003CC6 RID: 15558 RVA: 0x0003171F File Offset: 0x0002F91F
		// (set) Token: 0x06003CC7 RID: 15559 RVA: 0x0003172C File Offset: 0x0002F92C
		internal int CaughtByPlayerID
		{
			get
			{
				return this.m_caughtByPlayerValue.PlayerID;
			}
			set
			{
				this.m_caughtByPlayerValue.PlayerID = value;
			}
		}

		// Token: 0x17000A13 RID: 2579
		// (get) Token: 0x06003CC8 RID: 15560 RVA: 0x0003173A File Offset: 0x0002F93A
		internal Player CaughtByPlayer
		{
			get
			{
				return this.m_caughtByPlayerValue.Player;
			}
		}

		// Token: 0x17000A14 RID: 2580
		// (get) Token: 0x06003CC9 RID: 15561 RVA: 0x00031747 File Offset: 0x0002F947
		internal bool IsCaughtByPlayer
		{
			get
			{
				return this.CaughtByPlayerID != 0;
			}
		}

		// Token: 0x17000A15 RID: 2581
		// (get) Token: 0x06003CCA RID: 15562 RVA: 0x00031755 File Offset: 0x0002F955
		// (set) Token: 0x06003CCB RID: 15563 RVA: 0x0003175D File Offset: 0x0002F95D
		internal int LastCaughtPlayerID { get; set; }

		// Token: 0x17000A16 RID: 2582
		// (get) Token: 0x06003CCC RID: 15564 RVA: 0x00031766 File Offset: 0x0002F966
		// (set) Token: 0x06003CCD RID: 15565 RVA: 0x00031773 File Offset: 0x0002F973
		internal int HoldingPlayerInDiveID
		{
			get
			{
				return this.m_holdingPlayerInDiveValue.PlayerID;
			}
			set
			{
				this.m_holdingPlayerInDiveValue.PlayerID = value;
			}
		}

		// Token: 0x17000A17 RID: 2583
		// (get) Token: 0x06003CCE RID: 15566 RVA: 0x00031781 File Offset: 0x0002F981
		internal Player HoldingPlayerInDive
		{
			get
			{
				return this.m_holdingPlayerInDiveValue.Player;
			}
		}

		// Token: 0x17000A18 RID: 2584
		// (get) Token: 0x06003CCF RID: 15567 RVA: 0x0003178E File Offset: 0x0002F98E
		internal bool IsHoldingPlayerInDive
		{
			get
			{
				return this.HoldingPlayerInDiveID != 0;
			}
		}

		// Token: 0x17000A19 RID: 2585
		// (get) Token: 0x06003CD0 RID: 15568 RVA: 0x0003179C File Offset: 0x0002F99C
		// (set) Token: 0x06003CD1 RID: 15569 RVA: 0x000317A9 File Offset: 0x0002F9A9
		internal int HoldingPlayerInGrabID
		{
			get
			{
				return this.m_holdingPlayerInGrabValue.PlayerID;
			}
			set
			{
				this.m_holdingPlayerInGrabValue.PlayerID = value;
			}
		}

		// Token: 0x17000A1A RID: 2586
		// (get) Token: 0x06003CD2 RID: 15570 RVA: 0x000317B7 File Offset: 0x0002F9B7
		internal Player HoldingPlayerInGrab
		{
			get
			{
				return this.m_holdingPlayerInGrabValue.Player;
			}
		}

		// Token: 0x17000A1B RID: 2587
		// (get) Token: 0x06003CD3 RID: 15571 RVA: 0x000317C4 File Offset: 0x0002F9C4
		internal bool IsHoldingPlayerInGrab
		{
			get
			{
				return this.HoldingPlayerInGrabID != 0;
			}
		}

		// Token: 0x17000A1C RID: 2588
		// (get) Token: 0x06003CD4 RID: 15572 RVA: 0x000317D2 File Offset: 0x0002F9D2
		// (set) Token: 0x06003CD5 RID: 15573 RVA: 0x000317DA File Offset: 0x0002F9DA
		internal int LastHoldingPlayerInGrabID { get; set; }

		// Token: 0x17000A1D RID: 2589
		// (get) Token: 0x06003CD6 RID: 15574 RVA: 0x000317E3 File Offset: 0x0002F9E3
		// (set) Token: 0x06003CD7 RID: 15575 RVA: 0x000317EB File Offset: 0x0002F9EB
		internal int RocketRideProjectileWorldID { get; set; }

		// Token: 0x17000A1E RID: 2590
		// (get) Token: 0x06003CD8 RID: 15576 RVA: 0x001080F4 File Offset: 0x001062F4
		internal Projectile RocketRideProjectile
		{
			get
			{
				if (this.m_lastRocketRideProjectileWorldId == this.RocketRideProjectileWorldID)
				{
					return this.m_lastRocketRideProjectile;
				}
				this.m_lastRocketRideProjectile = this.GameWorld.GetProjectile(this.RocketRideProjectileWorldID);
				if (this.m_lastRocketRideProjectile != null)
				{
					this.m_lastRocketRideProjectileWorldId = this.RocketRideProjectileWorldID;
				}
				else
				{
					this.m_lastRocketRideProjectileWorldId = 0;
				}
				return this.m_lastRocketRideProjectile;
			}
		}

		// Token: 0x17000A1F RID: 2591
		// (get) Token: 0x06003CD9 RID: 15577 RVA: 0x000317F4 File Offset: 0x0002F9F4
		internal bool PerformingStunt
		{
			get
			{
				return this.Sprinting || this.Diving || this.Rolling;
			}
		}

		// Token: 0x17000A20 RID: 2592
		// (get) Token: 0x06003CDA RID: 15578 RVA: 0x0003180E File Offset: 0x0002FA0E
		internal bool PerformingMelee
		{
			get
			{
				return this.CurrentAction == PlayerAction.MeleeAttack1 || this.CurrentAction == PlayerAction.MeleeAttack2 || this.CurrentAction == PlayerAction.MeleeAttack3;
			}
		}

		// Token: 0x17000A21 RID: 2593
		// (get) Token: 0x06003CDB RID: 15579 RVA: 0x0003182D File Offset: 0x0002FA2D
		// (set) Token: 0x06003CDC RID: 15580 RVA: 0x00031835 File Offset: 0x0002FA35
		internal Player.FireSequenceValues FireSequence
		{
			get
			{
				return this.m_fireSequence;
			}
			set
			{
				this.m_fireSequence = value;
			}
		}

		// Token: 0x17000A22 RID: 2594
		// (get) Token: 0x06003CDD RID: 15581 RVA: 0x0003183E File Offset: 0x0002FA3E
		// (set) Token: 0x06003CDE RID: 15582 RVA: 0x0003185A File Offset: 0x0002FA5A
		internal SFD.Weapons.WeaponItemType AutoDropWeapon
		{
			get
			{
				if (this.GameOwner == GameOwnerEnum.Client)
				{
					throw new Exception("Error: Only the server / local is allowed to access Player.AutoDropWeapon");
				}
				return this.m_autoDropWeapon;
			}
			set
			{
				if (this.GameOwner == GameOwnerEnum.Client)
				{
					throw new Exception("Error: Only the server / local is allowed to access Player.AutoDropWeapon");
				}
				this.m_autoDropWeapon = value;
			}
		}

		// Token: 0x17000A23 RID: 2595
		// (get) Token: 0x06003CDF RID: 15583 RVA: 0x00031877 File Offset: 0x0002FA77
		// (set) Token: 0x06003CE0 RID: 15584 RVA: 0x0003187F File Offset: 0x0002FA7F
		internal bool AutoReloadWeapon
		{
			get
			{
				return this.m_autoReloadWeapon;
			}
			set
			{
				this.m_autoReloadWeapon = value;
			}
		}

		// Token: 0x17000A24 RID: 2596
		// (get) Token: 0x06003CE1 RID: 15585 RVA: 0x00031888 File Offset: 0x0002FA88
		internal bool HoldingManualAimItem
		{
			get
			{
				return this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Handgun || this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle || this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown;
			}
		}

		// Token: 0x17000A25 RID: 2597
		// (get) Token: 0x06003CE2 RID: 15586 RVA: 0x000318A7 File Offset: 0x0002FAA7
		internal bool TryingToAim
		{
			get
			{
				return this.HoldingManualAimItem && this.VirtualKeyboard.PressingKey(26, false) && !this.Reloading;
			}
		}

		// Token: 0x17000A26 RID: 2598
		// (get) Token: 0x06003CE3 RID: 15587 RVA: 0x000318CC File Offset: 0x0002FACC
		// (set) Token: 0x06003CE4 RID: 15588 RVA: 0x000318D4 File Offset: 0x0002FAD4
		internal Player.TimeSequenceValues TimeSequence
		{
			get
			{
				return this.m_timeSequence;
			}
			set
			{
				this.m_timeSequence = value;
			}
		}

		// Token: 0x17000A27 RID: 2599
		// (get) Token: 0x06003CE5 RID: 15589 RVA: 0x000318DD File Offset: 0x0002FADD
		// (set) Token: 0x06003CE6 RID: 15590 RVA: 0x000318E5 File Offset: 0x0002FAE5
		internal RWeapon CurrentHandgunWeapon
		{
			get
			{
				return this.m_currentHandgunWeapon;
			}
			set
			{
				this.m_currentHandgunWeapon = value;
				this.Equipment.HandgunWeapon = this.m_currentHandgunWeapon;
				if (this.m_currentHandgunWeapon == null && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Handgun)
				{
					this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.NONE;
				}
			}
		}

		// Token: 0x17000A28 RID: 2600
		// (get) Token: 0x06003CE7 RID: 15591 RVA: 0x00031917 File Offset: 0x0002FB17
		// (set) Token: 0x06003CE8 RID: 15592 RVA: 0x0003191F File Offset: 0x0002FB1F
		internal RWeapon CurrentRifleWeapon
		{
			get
			{
				return this.m_currentRifleWeapon;
			}
			set
			{
				this.m_currentRifleWeapon = value;
				this.Equipment.RifleWeapon = this.m_currentRifleWeapon;
				if (this.m_currentRifleWeapon == null && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle)
				{
					this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.NONE;
				}
			}
		}

		// Token: 0x17000A29 RID: 2601
		// (get) Token: 0x06003CE9 RID: 15593 RVA: 0x00031951 File Offset: 0x0002FB51
		// (set) Token: 0x06003CEA RID: 15594 RVA: 0x00031959 File Offset: 0x0002FB59
		internal TWeapon CurrentThrownWeapon
		{
			get
			{
				return this.m_currentThrownWeapon;
			}
			set
			{
				this.m_currentThrownWeapon = value;
				this.Equipment.ThrownWeapon = this.m_currentThrownWeapon;
				if (this.m_currentThrownWeapon == null && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown)
				{
					this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.NONE;
				}
			}
		}

		// Token: 0x17000A2A RID: 2602
		// (get) Token: 0x06003CEB RID: 15595 RVA: 0x0003198B File Offset: 0x0002FB8B
		// (set) Token: 0x06003CEC RID: 15596 RVA: 0x00031993 File Offset: 0x0002FB93
		internal MWeapon CurrentMeleeWeapon
		{
			get
			{
				return this.m_currentMeleeWeapon;
			}
			set
			{
				this.m_currentMeleeWeapon = value;
				this.Equipment.MeleeWeapon = this.m_currentMeleeWeapon;
				if (this.m_currentMeleeWeapon == null && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee)
				{
					this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.NONE;
				}
			}
		}

		// Token: 0x17000A2B RID: 2603
		// (get) Token: 0x06003CED RID: 15597 RVA: 0x000319C5 File Offset: 0x0002FBC5
		// (set) Token: 0x06003CEE RID: 15598 RVA: 0x000319CD File Offset: 0x0002FBCD
		internal PItem CurrentPowerupItem
		{
			get
			{
				return this.m_currentPowerupItem;
			}
			set
			{
				this.m_currentPowerupItem = value;
			}
		}

		// Token: 0x17000A2C RID: 2604
		// (get) Token: 0x06003CEF RID: 15599 RVA: 0x00108150 File Offset: 0x00106350
		internal WeaponBaseProperties CurrentDrawnWeaponProperties
		{
			get
			{
				switch (this.CurrentWeaponDrawn)
				{
				case SFD.Weapons.WeaponItemType.NONE:
					return null;
				case SFD.Weapons.WeaponItemType.Handgun:
					if (this.CurrentHandgunWeapon == null)
					{
						return null;
					}
					return this.CurrentHandgunWeapon.Properties;
				case SFD.Weapons.WeaponItemType.Rifle:
					if (this.CurrentRifleWeapon == null)
					{
						return null;
					}
					return this.CurrentRifleWeapon.Properties;
				case SFD.Weapons.WeaponItemType.Thrown:
					if (this.CurrentThrownWeapon == null)
					{
						return null;
					}
					return this.CurrentThrownWeapon.Properties;
				case SFD.Weapons.WeaponItemType.Melee:
					return this.GetCurrentMeleeWeaponInUse(false).Properties;
				case SFD.Weapons.WeaponItemType.Powerup:
					if (this.CurrentPowerupItem == null)
					{
						return null;
					}
					return this.CurrentPowerupItem.Properties;
				case SFD.Weapons.WeaponItemType.InstantPickup:
					return null;
				}
				return null;
			}
		}

		// Token: 0x17000A2D RID: 2605
		// (get) Token: 0x06003CF0 RID: 15600 RVA: 0x000319D6 File Offset: 0x0002FBD6
		internal MWeapon CurrentMeleeFists
		{
			get
			{
				return Player.m_meleeFists;
			}
		}

		// Token: 0x17000A2E RID: 2606
		// (get) Token: 0x06003CF1 RID: 15601 RVA: 0x000319DD File Offset: 0x0002FBDD
		// (set) Token: 0x06003CF2 RID: 15602 RVA: 0x000319E5 File Offset: 0x0002FBE5
		internal SFD.Weapons.WeaponItemType CurrentWeaponQueued { get; set; }

		// Token: 0x17000A2F RID: 2607
		// (get) Token: 0x06003CF3 RID: 15603 RVA: 0x000319EE File Offset: 0x0002FBEE
		// (set) Token: 0x06003CF4 RID: 15604 RVA: 0x000319F6 File Offset: 0x0002FBF6
		internal bool CurrentWeaponSheatheQueued { get; set; }

		// Token: 0x17000A30 RID: 2608
		// (get) Token: 0x06003CF5 RID: 15605 RVA: 0x000319FF File Offset: 0x0002FBFF
		// (set) Token: 0x06003CF6 RID: 15606 RVA: 0x00031A07 File Offset: 0x0002FC07
		internal bool ThrowingModeToggleQueued { get; set; }

		// Token: 0x17000A31 RID: 2609
		// (get) Token: 0x06003CF7 RID: 15607 RVA: 0x00031A10 File Offset: 0x0002FC10
		// (set) Token: 0x06003CF8 RID: 15608 RVA: 0x001081F8 File Offset: 0x001063F8
		internal SFD.Weapons.WeaponItemType CurrentWeaponDrawn
		{
			get
			{
				return this.m_currentWeaponDrawn;
			}
			set
			{
				bool flag = this.m_currentWeaponDrawn != value;
				this.m_currentWeaponDrawn = value;
				if (this.Equipment.WeaponDrawn != this.m_currentWeaponDrawn)
				{
					this.CancelReloading();
					if (!this.Rolling)
					{
						if (this.m_currentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE)
						{
							this.ForceHardAnimationReset(false);
						}
						else
						{
							this.ForceSoftAnimationReset();
						}
					}
					this.Equipment.WeaponDrawn = this.m_currentWeaponDrawn;
				}
				if (flag)
				{
					this.m_currentWeaponDrawnTimestamp = ((this.m_gameWorld == null) ? 0f : this.m_gameWorld.ElapsedTotalGameTime);
					if (this.m_currentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee || this.m_currentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE)
					{
						this.AimAngle = 0f;
						this.AimSpeed = 0f;
						if (this.CurrentAction == PlayerAction.ManualAim)
						{
							this.CurrentAction = PlayerAction.Idle;
						}
					}
				}
			}
		}

		// Token: 0x17000A32 RID: 2610
		// (get) Token: 0x06003CF9 RID: 15609 RVA: 0x00031A18 File Offset: 0x0002FC18
		internal MWeapon CurrentVisualMeleeWeapon
		{
			get
			{
				if (this.m_currentMeleeMakeshiftWeapon == null)
				{
					return this.m_currentMeleeWeapon;
				}
				return this.m_currentMeleeMakeshiftWeapon;
			}
		}

		// Token: 0x17000A33 RID: 2611
		// (get) Token: 0x06003CFA RID: 15610 RVA: 0x00031A2F File Offset: 0x0002FC2F
		// (set) Token: 0x06003CFB RID: 15611 RVA: 0x00031A37 File Offset: 0x0002FC37
		internal MWeapon CurrentMeleeMakeshiftWeapon
		{
			get
			{
				return this.m_currentMeleeMakeshiftWeapon;
			}
			set
			{
				if (this.m_currentMeleeMakeshiftWeapon != value)
				{
					this.m_currentMeleeMakeshiftWeapon = value;
					this.Equipment.MeleeMakeshiftWeapon = this.m_currentMeleeMakeshiftWeapon;
					if (this.m_currentMeleeMakeshiftWeapon == null && this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee)
					{
						this.CurrentWeaponDrawn = SFD.Weapons.WeaponItemType.NONE;
					}
				}
			}
		}

		// Token: 0x17000A34 RID: 2612
		// (get) Token: 0x06003CFC RID: 15612 RVA: 0x00031A72 File Offset: 0x0002FC72
		internal Microsoft.Xna.Framework.Vector2 CurrentVelocity
		{
			get
			{
				if (this.WorldBody != null)
				{
					return this.WorldBody.GetLinearVelocity();
				}
				return Microsoft.Xna.Framework.Vector2.Zero;
			}
		}

		// Token: 0x17000A35 RID: 2613
		// (get) Token: 0x06003CFD RID: 15613 RVA: 0x00031A8D File Offset: 0x0002FC8D
		internal bool CurrentWeaponDrawnIsMeleeType
		{
			get
			{
				return this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee || this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE;
			}
		}

		// Token: 0x06003CFE RID: 15614 RVA: 0x001082C0 File Offset: 0x001064C0
		internal MWeapon GetCurrentMeleeWeaponInUse(bool ignoreGrabbingState = false)
		{
			if (this.CurrentAction == PlayerAction.Grabbing && !ignoreGrabbingState)
			{
				return Player.m_meleeFists;
			}
			if (this.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee)
			{
				return Player.m_meleeFists;
			}
			if (this.CurrentMeleeMakeshiftWeapon != null)
			{
				return this.CurrentMeleeMakeshiftWeapon;
			}
			if (this.CurrentMeleeWeapon != null)
			{
				return this.CurrentMeleeWeapon;
			}
			return Player.m_meleeFists;
		}

		// Token: 0x17000A36 RID: 2614
		// (get) Token: 0x06003CFF RID: 15615 RVA: 0x00031AA3 File Offset: 0x0002FCA3
		internal MWeapon MeleeFeetWeapon
		{
			get
			{
				return Player.m_meleeFeet;
			}
		}

		// Token: 0x17000A37 RID: 2615
		// (get) Token: 0x06003D00 RID: 15616 RVA: 0x000319D6 File Offset: 0x0002FBD6
		internal MWeapon MeleeFistsWeapon
		{
			get
			{
				return Player.m_meleeFists;
			}
		}

		// Token: 0x06003D01 RID: 15617 RVA: 0x00031AAA File Offset: 0x0002FCAA
		internal RWeapon GetCurrentRangedWeaponInUse()
		{
			if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle)
			{
				return this.CurrentRifleWeapon;
			}
			if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Handgun)
			{
				return this.CurrentHandgunWeapon;
			}
			return null;
		}

		// Token: 0x06003D02 RID: 15618 RVA: 0x00031ACD File Offset: 0x0002FCCD
		internal TWeapon GetCurrentThrownWeaponInUse()
		{
			if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown)
			{
				return this.CurrentThrownWeapon;
			}
			return null;
		}

		// Token: 0x17000A38 RID: 2616
		// (get) Token: 0x06003D03 RID: 15619 RVA: 0x00031AE0 File Offset: 0x0002FCE0
		// (set) Token: 0x06003D04 RID: 15620 RVA: 0x00031AE8 File Offset: 0x0002FCE8
		internal float MinimumMeleeHitFrameTime
		{
			get
			{
				return this.m_minimumMleeHitFrameTime;
			}
			set
			{
				this.m_minimumMleeHitFrameTime = value;
			}
		}

		// Token: 0x17000A39 RID: 2617
		// (get) Token: 0x06003D05 RID: 15621 RVA: 0x00031AF1 File Offset: 0x0002FCF1
		internal BarMeter Health
		{
			get
			{
				return this.m_barHealth;
			}
		}

		// Token: 0x17000A3A RID: 2618
		// (get) Token: 0x06003D06 RID: 15622 RVA: 0x00031AF9 File Offset: 0x0002FCF9
		internal BarMeter OverHealth
		{
			get
			{
				return this.m_barOverHealth;
			}
		}

		// Token: 0x17000A3B RID: 2619
		// (get) Token: 0x06003D07 RID: 15623 RVA: 0x00031B01 File Offset: 0x0002FD01
		internal BarMeter OverkillDamage
		{
			get
			{
				return this.m_barOverkillDamage;
			}
		}

		// Token: 0x17000A3C RID: 2620
		// (get) Token: 0x06003D08 RID: 15624 RVA: 0x00031B09 File Offset: 0x0002FD09
		internal BarMeter Energy
		{
			get
			{
				return this.m_barEnergy;
			}
		}

		// Token: 0x06003D09 RID: 15625 RVA: 0x00031B11 File Offset: 0x0002FD11
		internal void SetEnergyFromClient(float value)
		{
			if (value < this.m_lastClientEnergy)
			{
				this.Energy.CurrentValue = value;
			}
			this.m_lastClientEnergy = value;
		}

		// Token: 0x06003D0A RID: 15626 RVA: 0x00031B2F File Offset: 0x0002FD2F
		internal Microsoft.Xna.Framework.Vector2 GetKickCenter()
		{
			return this.WorldBody.GetPosition() + new Microsoft.Xna.Framework.Vector2((float)this.LastDirectionX * Converter.WorldToBox2D(4.6f), Converter.WorldToBox2D(3f));
		}

		// Token: 0x17000A3D RID: 2621
		// (get) Token: 0x06003D0B RID: 15627 RVA: 0x00031B62 File Offset: 0x0002FD62
		internal int ObjectID
		{
			get
			{
				if (this.ObjectData == null)
				{
					return 0;
				}
				return this.ObjectData.ObjectID;
			}
		}

		// Token: 0x06003D0C RID: 15628 RVA: 0x00031B79 File Offset: 0x0002FD79
		internal float GetClimbSpeedUp()
		{
			if (this.SpeedBoostActive)
			{
				return 3.4f;
			}
			return 2f;
		}

		// Token: 0x06003D0D RID: 15629 RVA: 0x00031B8E File Offset: 0x0002FD8E
		public float GetClimbSpeedDownSlideMax()
		{
			if (this.SpeedBoostActive)
			{
				return -10.5f;
			}
			return -7.5f;
		}

		// Token: 0x06003D0E RID: 15630 RVA: 0x00108314 File Offset: 0x00106514
		internal float GetTopSpeed()
		{
			if (this.LedgeGrabbing)
			{
				return 0f;
			}
			if ((this.FullLanding & this.StandingOnGround) | this.LayingOnGround)
			{
				return 0f;
			}
			if (this.DeathKneeling)
			{
				return 0f;
			}
			float num = this.SlowmotionFactor;
			if (this.BurningInferno)
			{
				num *= 1.2f;
			}
			else if (this.Burning)
			{
				num *= 1.1f;
			}
			if (this.SpeedBoostActive)
			{
				num *= 1.5f;
			}
			if (this.GrabCharging)
			{
				return 3.5f * num;
			}
			if (this.Staggering)
			{
				float num2 = 1f;
				if (this.GameOwner == GameOwnerEnum.Client)
				{
					float x = this.CalcServerPositionDifference().X;
					if ((this.LastDirectionX == 1 && x > 0f) || (this.LastDirectionX == -1 && x < 0f))
					{
						float num3 = Math.Min(Converter.Box2DToWorld(Math.Abs(x)), 16f);
						num2 = num3 / 16f * 2f + 1f;
					}
				}
				return 1.7f * num * num2;
			}
			if (this.Rolling)
			{
				return 2.5f * num;
			}
			if (this.Diving)
			{
				return 3.5f * num;
			}
			if (this.Sprinting)
			{
				return 3.5f * num * this.m_modifiers.SprintSpeedModifier;
			}
			if (this.Climbing)
			{
				return 1.5f * num;
			}
			if (this.InAir)
			{
				if (this.Walking)
				{
					return 1.25f * num;
				}
				return 2.25f * num * this.m_modifiers.RunSpeedModifier;
			}
			else
			{
				if (this.TimeSequence.MeleeMovement)
				{
					return 1f * num;
				}
				if (this.Walking | this.IsGrabbing)
				{
					return 1.25f * num;
				}
				return 2.25f * num * this.m_modifiers.RunSpeedModifier;
			}
		}

		// Token: 0x06003D0F RID: 15631 RVA: 0x00031BA3 File Offset: 0x0002FDA3
		internal float GetSpeedPushing()
		{
			return 1.125f * this.SlowmotionFactor;
		}

		// Token: 0x17000A3E RID: 2622
		// (get) Token: 0x06003D10 RID: 15632 RVA: 0x001084D4 File Offset: 0x001066D4
		internal bool MustStandStill
		{
			get
			{
				return !this.InAir && (this.CurrentAction == PlayerAction.Block || this.CurrentAction == PlayerAction.ManualAim || this.CurrentAction == PlayerAction.MeleeAttack1 || this.CurrentAction == PlayerAction.MeleeAttack2 || this.CurrentAction == PlayerAction.MeleeAttack3 || this.CurrentAction == PlayerAction.Kick || (this.CurrentAction == PlayerAction.ThrowThrowing && this.m_throwMustStandStill) || this.TimeSequence.TimeForceLayOnGroundTimer > 0f || this.TimeSequence.TimeForceCrouchDuringRiseTimer > 0f);
			}
		}

		// Token: 0x06003D11 RID: 15633 RVA: 0x0010855C File Offset: 0x0010675C
		public Microsoft.Xna.Framework.Vector2 GetThrowLocation(bool isDrop)
		{
			Player.<>c__DisplayClass56 CS$<>8__locals1 = new Player.<>c__DisplayClass56();
			CS$<>8__locals1.<>4__this = this;
			Microsoft.Xna.Framework.Vector2 worldCoordinate = Player.THROW_DEFAULT_OFFSET;
			if (this.CurrentThrownWeapon != null && !this.InThrowingMode)
			{
				worldCoordinate = this.CurrentThrownWeapon.Properties.ThrowLocationOffset;
			}
			if (isDrop)
			{
				worldCoordinate = Player.THROW_DROP_OFFSET;
			}
			if (this.InThrowingMode)
			{
				worldCoordinate.Y -= 6f;
				if (this.Crouching || this.ForceKneel)
				{
					worldCoordinate.Y -= 3f;
					worldCoordinate.X -= 1f;
				}
			}
			else if (this.Crouching || this.ForceKneel)
			{
				worldCoordinate.Y -= 5f;
				worldCoordinate.X -= 1f;
			}
			float num = 1f;
			if (this.AimAngle <= 0f && !isDrop)
			{
				if (this.AimAngle > -0.7853982f)
				{
					num = (this.AimAngle + 0.7853982f) / 0.7853982f;
				}
				else
				{
					num = (this.AimAngle + 0.7853982f) / 0.7853982f;
				}
			}
			worldCoordinate.X *= (float)this.LastDirectionX * num;
			Microsoft.Xna.Framework.Vector2 position = this.WorldBody.GetPosition();
			Microsoft.Xna.Framework.Vector2 vector = position + Converter.ConvertWorldToBox2D(worldCoordinate);
			CS$<>8__locals1.midHit = false;
			CS$<>8__locals1.sideHit = false;
			CS$<>8__locals1.rciMid = default(Box2D.XNA.RayCastInput);
			CS$<>8__locals1.rciMid.maxFraction = 1f;
			CS$<>8__locals1.rciMid.p1 = new Microsoft.Xna.Framework.Vector2(position.X, position.Y);
			CS$<>8__locals1.rciMid.p2 = new Microsoft.Xna.Framework.Vector2(position.X, vector.Y);
			CS$<>8__locals1.rciSide = default(Box2D.XNA.RayCastInput);
			CS$<>8__locals1.rciSide.maxFraction = 1f;
			CS$<>8__locals1.rciSide.p1 = new Microsoft.Xna.Framework.Vector2(position.X, vector.Y);
			CS$<>8__locals1.rciSide.p2 = new Microsoft.Xna.Framework.Vector2(vector.X, vector.Y);
			Player.<>c__DisplayClass56 CS$<>8__locals2 = CS$<>8__locals1;
			CS$<>8__locals2.rciSide.p2 = CS$<>8__locals2.rciSide.p2 + Microsoft.Xna.Framework.Vector2.Normalize(CS$<>8__locals1.rciSide.p2 - CS$<>8__locals1.rciSide.p1) * Converter.WorldToBox2D(3f);
			CS$<>8__locals1.minFractionMid = CS$<>8__locals1.rciMid.maxFraction;
			CS$<>8__locals1.minFractionSide = CS$<>8__locals1.rciSide.maxFraction;
			AABB aabb;
			AABB.Create(out aabb, position, vector, 0.01f);
			this.GameWorld.GetActiveWorld.QueryAABB(delegate(Fixture fixture)
			{
				if (fixture != null && !fixture.IsSensor() && fixture.GetUserData() != null)
				{
					Filter filter;
					fixture.GetFilterData(out filter);
					if (Settings.b2ShouldCollide(ref CS$<>8__locals1.<>4__this.m_playerFilterCollision, ref filter))
					{
						ObjectData objectData = ObjectData.Read(fixture);
						if (!objectData.IsPlayer)
						{
							RayCastOutput rayCastOutput;
							if (fixture.RayCast(out rayCastOutput, ref CS$<>8__locals1.rciMid))
							{
								CS$<>8__locals1.midHit = true;
								if (CS$<>8__locals1.minFractionMid > rayCastOutput.fraction)
								{
									CS$<>8__locals1.minFractionMid = rayCastOutput.fraction;
								}
							}
							if (fixture.RayCast(out rayCastOutput, ref CS$<>8__locals1.rciSide))
							{
								CS$<>8__locals1.sideHit = true;
								if (CS$<>8__locals1.minFractionSide > rayCastOutput.fraction)
								{
									CS$<>8__locals1.minFractionSide = rayCastOutput.fraction;
								}
							}
						}
					}
				}
				return true;
			}, ref aabb);
			Box2D.XNA.RayCastInput rayCastInput = CS$<>8__locals1.midHit ? CS$<>8__locals1.rciMid : CS$<>8__locals1.rciSide;
			float val = CS$<>8__locals1.midHit ? CS$<>8__locals1.minFractionMid : CS$<>8__locals1.minFractionSide;
			Microsoft.Xna.Framework.Vector2 value = Microsoft.Xna.Framework.Vector2.Normalize(rayCastInput.p2 - rayCastInput.p1);
			vector = rayCastInput.GetHitPosition(Math.Min(val, 1f));
			if (CS$<>8__locals1.sideHit || CS$<>8__locals1.midHit)
			{
				vector -= value * Converter.WorldToBox2D(3f);
			}
			return Converter.ConvertBox2DToWorld(vector);
		}

		// Token: 0x06003D12 RID: 15634 RVA: 0x001088A4 File Offset: 0x00106AA4
		public Microsoft.Xna.Framework.Vector2 GetThrowVector()
		{
			float num = this.AimAngle;
			if (!this.m_throwMustStandStill)
			{
				num = 0f;
			}
			float num2 = Math.Abs(num) / 1.5707964f;
			Microsoft.Xna.Framework.Vector2 vector = Microsoft.Xna.Framework.Vector2.UnitX;
			SFDMath.RotatePosition(ref vector, -num, out vector);
			float scaleFactor = 9f * Constants.RANDOM.NextFloat(0.95f, 1.05f);
			float num3 = this.InThrowingMode ? 2.8f : 3.5f;
			if (this.CurrentThrownWeapon != null && !this.InThrowingMode)
			{
				scaleFactor = this.CurrentThrownWeapon.Properties.ThrowPower;
				num3 = this.CurrentThrownWeapon.Properties.ThrowExtraUp;
			}
			vector *= scaleFactor;
			vector.Y += num3;
			vector.X *= (float)this.LastDirectionX;
			return vector;
		}

		// Token: 0x06003D13 RID: 15635 RVA: 0x00031BB1 File Offset: 0x0002FDB1
		public void BeginThrow()
		{
			this.m_throwMustStandStill = (this.CurrentAction == PlayerAction.ManualAim);
			this.m_throwFullyPerformed = false;
			this.CurrentAction = PlayerAction.ThrowThrowing;
			this.ImportantUpdate = true;
		}

		// Token: 0x06003D14 RID: 15636 RVA: 0x00108974 File Offset: 0x00106B74
		public void ThrowDeadlineOver()
		{
			if (this.CurrentThrownWeapon != null)
			{
				TWeaponOnDeadlineArgs tweaponOnDeadlineArgs = new TWeaponOnDeadlineArgs(this, this.CurrentThrownWeapon);
				this.CurrentThrownWeapon.OnDeadline(tweaponOnDeadlineArgs);
				switch (tweaponOnDeadlineArgs.Action)
				{
				case TWeaponDeadlineAction.Drop:
					this.DropThrowable(Microsoft.Xna.Framework.Vector2.Zero);
					return;
				case TWeaponDeadlineAction.Nothing:
					break;
				default:
					ConsoleOutput.ShowMessage(ConsoleOutputType.Warning, "Player.ThrowDeadlineOver() does not implement case for action " + tweaponOnDeadlineArgs.Action.ToString());
					break;
				}
			}
		}

		// Token: 0x17000A3F RID: 2623
		// (get) Token: 0x06003D15 RID: 15637 RVA: 0x00031BD8 File Offset: 0x0002FDD8
		public bool ThrowableIsActivated
		{
			get
			{
				return this.ThrowCharging || this.CurrentAction == PlayerAction.ThrowThrowing;
			}
		}

		// Token: 0x06003D16 RID: 15638 RVA: 0x001089E8 File Offset: 0x00106BE8
		public ObjectData DropThrowable(Microsoft.Xna.Framework.Vector2 velocity)
		{
			if (this.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown && (this.CurrentAction == PlayerAction.ManualAim || this.FullLanding || (!this.m_throwFullyPerformed && this.ThrowableIsActivated)))
			{
				ObjectData result = this.ReleaseThrow(this.GetThrowLocation(true), velocity, Constants.RANDOM.NextFloat(-3f, 3f), false);
				this.ThrowCharging = false;
				this.CurrentAction = PlayerAction.Idle;
				return result;
			}
			return null;
		}

		// Token: 0x06003D17 RID: 15639 RVA: 0x00108A54 File Offset: 0x00106C54
		public void BeginChargeThrow()
		{
			if (!this.TimeSequence.ThrowOnCooldown)
			{
				if (this.CurrentThrownWeapon != null)
				{
					TWeaponBeforeBeginChargeArgs tweaponBeforeBeginChargeArgs = new TWeaponBeforeBeginChargeArgs(this, this.CurrentThrownWeapon);
					this.CurrentThrownWeapon.OnBeforeBeginCharge(tweaponBeforeBeginChargeArgs);
					if (tweaponBeforeBeginChargeArgs.CustomHandled)
					{
						if (this.GameOwner == GameOwnerEnum.Server)
						{
							this.SyncServerAction(ServerActionType.ThrowBeforeBeginChargeEvent);
						}
						this.m_throwFullyPerformed = false;
						return;
					}
				}
				PlayerAction currentAction = this.CurrentAction;
				if (currentAction != PlayerAction.Idle)
				{
					if (currentAction == PlayerAction.ManualAim)
					{
						if (!this.InAir)
						{
							this.Sprinting = false;
						}
					}
				}
				else
				{
					if (!this.InAir)
					{
						this.Sprinting = false;
					}
					this.CurrentAction = PlayerAction.HipFire;
				}
				this.ThrowCharging = true;
				if (this.InThrowingMode)
				{
					this.FireSequence.ThrowableDeadlineTimer = 0f;
				}
				else if (this.CurrentThrownWeapon != null)
				{
					this.FireSequence.ThrowableDeadlineTimer = this.CurrentThrownWeapon.Properties.ThrowDeadlineTimer;
				}
				else
				{
					ConsoleOutput.ShowMessage(ConsoleOutputType.Warning, "Player.BeginChargeThrow() with null ThrownWeapon");
				}
				this.m_throwFullyPerformed = false;
			}
		}

		// Token: 0x06003D18 RID: 15640 RVA: 0x00108B44 File Offset: 0x00106D44
		public void ReleaseThrow()
		{
			if (this.InThrowingMode && this.GameOwner != GameOwnerEnum.Server)
			{
				SoundHandler.PlaySound("Throw", this.Position, this.GameWorld);
			}
			if (this.GameOwner == GameOwnerEnum.Client)
			{
				if (this.InThrowingMode)
				{
					return;
				}
				if (this.CurrentThrownWeapon != null)
				{
					TWeaponOnThrowArgs e = new TWeaponOnThrowArgs(this, this.CurrentThrownWeapon, null, 0f, this.ThrowableIsActivated);
					this.CurrentThrownWeapon.OnThrow(e);
					return;
				}
			}
			else
			{
				float num = -(float)this.LastDirectionX * Constants.RANDOM.NextFloat(1.5f, 2f);
				if (this.InThrowingMode)
				{
					num *= 14f;
				}
				this.ReleaseThrow(this.GetThrowLocation(false), this.GetThrowVector(), num, true);
			}
		}

		// Token: 0x06003D19 RID: 15641 RVA: 0x00108BFC File Offset: 0x00106DFC
		private void AddMissileObjectAndIgnoreTeammates(ObjectData od, ObjectMissileStatus status, bool ignorePlayersOverlappingMissile)
		{
			if (this.GameOwner != GameOwnerEnum.Client && od.Tile.CanBeMissile)
			{
				od.GameWorld.AddMissileObject(od, status, this);
				if (od.MissileData != null)
				{
					if (ignorePlayersOverlappingMissile)
					{
						AABB aabb;
						od.Body.CreateAABB(out aabb);
						for (int i = 0; i < this.GameWorld.Players.Count; i++)
						{
							Player player = this.GameWorld.Players[i];
							if (player != this)
							{
								AABB aabb2;
								player.GetAABBWhole(out aabb2);
								if (aabb2.Overlap(ref aabb))
								{
									od.MissileData.IgnorePlayer(player);
								}
							}
						}
					}
					od.MissileData.ResetHitCooldown();
					for (int j = 0; j < this.GameWorld.Players.Count; j++)
					{
						Player player2 = this.GameWorld.Players[j];
						if (player2 != this && this.InSameTeam(player2) && this.CheckPlayerOverlapAABBWhole(player2))
						{
							od.MissileData.IgnorePlayer(player2);
						}
					}
				}
			}
		}

		// Token: 0x06003D1A RID: 15642 RVA: 0x00108D04 File Offset: 0x00106F04
		internal bool CheckPlayerOverlapAABBWhole(Player otherPlayer)
		{
			if (this == otherPlayer)
			{
				return false;
			}
			AABB aabb;
			this.GetAABBWhole(out aabb);
			AABB aabb2;
			otherPlayer.GetAABBWhole(out aabb2);
			return AABB.TestOverlap(ref aabb, ref aabb2);
		}

		// Token: 0x06003D1B RID: 15643 RVA: 0x00108D30 File Offset: 0x00106F30
		public ObjectData ReleaseThrow(Microsoft.Xna.Framework.Vector2 throwLocation, Microsoft.Xna.Framework.Vector2 throwLinearVelocity, float angularVelocity, bool isThrowTOrDropF)
		{
			ObjectData result = null;
			if (this.InThrowingMode)
			{
				float angle = (float)Math.Atan2((double)throwLinearVelocity.Y, (double)throwLinearVelocity.X) + ((this.LastDirectionX == 1) ? 0f : 3.1415927f);
				throwLinearVelocity *= this.ThrowForceModifier;
				ObjectWeaponItem objectWeaponItem = this.DropWeaponItem(this.CurrentWeaponDrawn, this.LastDirectionX, Microsoft.Xna.Framework.Vector2.Zero, true, Microsoft.Xna.Framework.Vector2.Zero, true, Player.DropWeaponItemSource.Other);
				if (objectWeaponItem != null)
				{
					this.Statisticts.m_TotalItemsThrown++;
					objectWeaponItem.Body.SetTransform(Converter.WorldToBox2D(throwLocation), angle);
					objectWeaponItem.Body.SetLinearVelocity(throwLinearVelocity + this.AirControlBaseVelocity);
					objectWeaponItem.Body.SetAngularVelocity(angularVelocity);
					this.TimeSequence.TimeThrowCooldown = 425f;
					this.AddMissileObjectAndIgnoreTeammates(objectWeaponItem, ObjectMissileStatus.Thrown, false);
					SFD.Weapons.WeaponItem weaponItem = objectWeaponItem.GetWeaponItem();
					switch (weaponItem.Type)
					{
					case SFD.Weapons.WeaponItemType.Handgun:
						weaponItem.RWeaponData.OnThrowWeaponItem(this, objectWeaponItem);
						break;
					case SFD.Weapons.WeaponItemType.Rifle:
						weaponItem.RWeaponData.OnThrowWeaponItem(this, objectWeaponItem);
						break;
					case SFD.Weapons.WeaponItemType.Thrown:
						weaponItem.TWeaponData.OnThrowWeaponItem(this, objectWeaponItem);
						break;
					case SFD.Weapons.WeaponItemType.Melee:
						weaponItem.MWeaponData.OnThrowWeaponItem(this, objectWeaponItem);
						break;
					case SFD.Weapons.WeaponItemType.Powerup:
						weaponItem.PItemData.OnThrowWeaponItem(this, objectWeaponItem);
						break;
					}
				}
				result = objectWeaponItem;
				this.InThrowingMode = false;
			}
			else if (this.CurrentThrownWeapon != null)
			{
				this.Statisticts.m_TotalItemsThrown++;
				bool flag = isThrowTOrDropF || this.ThrowableIsActivated;
				string mapObjectID = this.CurrentThrownWeapon.Properties.ThrowObjectID;
				if (!flag)
				{
					mapObjectID = this.CurrentThrownWeapon.Properties.ModelID;
				}
				SpawnObjectInformation spawnObjectInformation = new SpawnObjectInformation(this.GameWorld.IDCounter.NextObjectData(mapObjectID), throwLocation, 0f, (short)this.LastDirectionX, throwLinearVelocity * this.ThrowForceModifier, angularVelocity);
				if (this.CoverObject != null && this.CoverObject.Body != null && this.CoverObjectCanShootThrough)
				{
					spawnObjectInformation.IgnoreBodyID = this.CoverObject.Body.BodyID;
				}
				Body body;
				if (flag)
				{
					body = this.m_gameWorld.CreateTile(spawnObjectInformation);
				}
				else
				{
					body = this.m_gameWorld.CreateWeaponItem(spawnObjectInformation, false, true, true);
				}
				ObjectData objectData = ObjectData.Read(body);
				result = objectData;
				TWeaponOnThrowArgs tweaponOnThrowArgs = new TWeaponOnThrowArgs(this, this.CurrentThrownWeapon, objectData, this.FireSequence.ThrowableDeadlineTimer, flag);
				this.TimeSequence.TimeThrowCooldown = 425f;
				if (isThrowTOrDropF)
				{
					if (objectData.Tile.CanBeMissile)
					{
						this.AddMissileObjectAndIgnoreTeammates(objectData, ObjectMissileStatus.Thrown, false);
					}
				}
				else if (objectData.Tile.CanBeMissile)
				{
					this.AddMissileObjectAndIgnoreTeammates(objectData, ObjectMissileStatus.Dropped, false);
				}
				if (!flag)
				{
					TWeapon tweapon = this.CurrentThrownWeapon.Copy();
					tweapon.NumberOfThrowablesLeft = 1;
					objectData.InternalData = new SFD.Weapons.WeaponItem(SFD.Weapons.WeaponItemType.Thrown, tweapon);
				}
				this.SetCurrentThrownAmmo((int)(this.InfiniteAmmo ? this.CurrentThrownWeapon.NumberOfThrowablesLeft : (this.CurrentThrownWeapon.NumberOfThrowablesLeft - 1)), objectData);
				if (isThrowTOrDropF)
				{
					tweaponOnThrowArgs.ThrowableWeapon.OnThrow(tweaponOnThrowArgs);
				}
				else
				{
					tweaponOnThrowArgs.ThrowableWeapon.OnDrop(tweaponOnThrowArgs);
				}
			}
			this.FireSequence.ThrowableDeadlineTimer = 0f;
			this.m_throwFullyPerformed = true;
			return result;
		}

		// Token: 0x06003D1C RID: 15644 RVA: 0x00109080 File Offset: 0x00107280
		internal void SetCurrentThrownAmmo(int numberOfThrowablesLeft, ObjectData grenadeObject)
		{
			if (this.CurrentThrownWeapon == null)
			{
				return;
			}
			if (numberOfThrowablesLeft > (int)this.CurrentThrownWeapon.Properties.MaxCarriedTotalThrowables)
			{
				numberOfThrowablesLeft = (int)this.CurrentThrownWeapon.Properties.MaxCarriedTotalThrowables;
			}
			if (numberOfThrowablesLeft <= 0)
			{
				numberOfThrowablesLeft = 0;
			}
			short weaponID = this.CurrentThrownWeapon.Properties.WeaponID;
			int num = numberOfThrowablesLeft - (int)this.CurrentThrownWeapon.NumberOfThrowablesLeft;
			if (this.CurrentThrownWeapon.NumberOfThrowablesLeft != (ushort)numberOfThrowablesLeft)
			{
				this.CurrentThrownWeapon.NumberOfThrowablesLeft = (ushort)numberOfThrowablesLeft;
				if (this.GameOwner == GameOwnerEnum.Server)
				{
					if (this.CurrentThrownWeapon.NumberOfThrowablesLeft > 0)
					{
						NetMessage.PlayerReceiveItem.Data data = new NetMessage.PlayerReceiveItem.Data(this.ObjectID, this.CurrentThrownWeapon);
						this.m_game.Server.SendMessage(MessageType.PlayerReceiveItem, data);
					}
					else
					{
						this.RemoveWeaponItem(SFD.Weapons.WeaponItemType.Thrown, true, false);
					}
				}
				else if (this.CurrentThrownWeapon.NumberOfThrowablesLeft <= 0)
				{
					this.RemoveWeaponItem(SFD.Weapons.WeaponItemType.Thrown, true, false);
				}
			}
			if (this.GameOwner != GameOwnerEnum.Client)
			{
				if (numberOfThrowablesLeft == 0 || num < 0 || grenadeObject != null)
				{
					this.QueueRemovedWeaponCallback(SFD.Weapons.WeaponItemType.Thrown, weaponID, (grenadeObject != null) ? grenadeObject.ObjectID : 0, false, true);
					return;
				}
				this.QueueAddedWeaponCallback(SFD.Weapons.WeaponItemType.Thrown, weaponID, 0);
			}
		}

		// Token: 0x04001166 RID: 4454
		private const float BOTAINAV_MAXDROPDISTANCE = 80f;

		// Token: 0x04001167 RID: 4455
		internal const float DOT_75_DEGREES = 0.96f;

		// Token: 0x04001168 RID: 4456
		internal const float DOT_45_DEGREES = 0.74f;

		// Token: 0x04001169 RID: 4457
		internal const float DOT_25_DEGREES_SIN = 0.4226f;

		// Token: 0x0400116A RID: 4458
		private const float K_DROP_HOLD_TIME = 400f;

		// Token: 0x0400116B RID: 4459
		internal const float BODY_CIRCLE_RADIUS_WORLD = 4f;

		// Token: 0x0400116C RID: 4460
		internal const float BODY_CIRCLE_RADIUS_BOX2D = 0.16f;

		// Token: 0x0400116D RID: 4461
		internal const float VALID_FEET_CONTACT_TRESHOLD = 0.38f;

		// Token: 0x0400116E RID: 4462
		private const float MANUAL_AIM_SLOW_MODIFIER = 0.5f;

		// Token: 0x0400116F RID: 4463
		internal const float OVERKILL_DAMAGE_AMOUNT_BEFORE_GIB = 150f;

		// Token: 0x04001170 RID: 4464
		internal const float OVERHEALTH_AMOUNT = 100f;

		// Token: 0x04001171 RID: 4465
		private const float AUTO_SOLVE_STUCK_IN_GROUND_CONTACT_TIME = 0.5f;

		// Token: 0x04001172 RID: 4466
		internal const float FIRE_RANK1_TRESHOLD = 22f;

		// Token: 0x04001173 RID: 4467
		internal const float FIRE_RANK2_TRESHOLD = 46f;

		// Token: 0x04001174 RID: 4468
		internal const float JUMP_POWER = 7.55f;

		// Token: 0x04001175 RID: 4469
		internal const float DIVE_POWER = 5f;

		// Token: 0x04001176 RID: 4470
		internal const float WALK_SPEED = 1.25f;

		// Token: 0x04001177 RID: 4471
		internal const float RUN_SPEED = 2.25f;

		// Token: 0x04001178 RID: 4472
		internal const float ROLL_SPEED = 2.5f;

		// Token: 0x04001179 RID: 4473
		internal const float STAGGER_SPEED = 1.7f;

		// Token: 0x0400117A RID: 4474
		internal const float SPRINT_SPEED = 3.5f;

		// Token: 0x0400117B RID: 4475
		internal const float SPRINT_JUMP_DISTANCE = 52f;

		// Token: 0x0400117C RID: 4476
		internal const float SPRINT_PRECISE_JUMP_DISTANCE = 56.5f;

		// Token: 0x0400117D RID: 4477
		internal const float GRAB_CHARGE_SPEED = 3.5f;

		// Token: 0x0400117E RID: 4478
		internal const float MELEE_MOVEMENT_SPEED = 1f;

		// Token: 0x0400117F RID: 4479
		internal const float TRIGGER_FULL_LAND_VELOCITY = -11f;

		// Token: 0x04001180 RID: 4480
		internal const float TRIGGER_FULL_LAND_KNOCKDOWN_VELOCITY = -13.3f;

		// Token: 0x04001181 RID: 4481
		internal const float PLAYER_PLAYER_COLLISION_VELOCITY_X = 10f;

		// Token: 0x04001182 RID: 4482
		internal const float PLAYER_PLAYER_COLLISION_VELOCITY_Y = 15f;

		// Token: 0x04001183 RID: 4483
		internal const float PLAYER_PLAYER_COLLISION_DISABLED_VELOCITY = 10f;

		// Token: 0x04001184 RID: 4484
		internal const float PLAYER_PLAYER_COLLISION_THROWN_VELOCITY = 5f;

		// Token: 0x04001185 RID: 4485
		internal const float KICK_KNOCKDOWN_FORCE_X = 3.3f;

		// Token: 0x04001186 RID: 4486
		internal const float KICK_KNOCKDOWN_FORCE_Y = 3f;

		// Token: 0x04001187 RID: 4487
		internal const float MELEE_KNOCKDOWN_FORCE_X = 3f;

		// Token: 0x04001188 RID: 4488
		internal const float MELEE_KNOCKDOWN_FORCE_Y = 4f;

		// Token: 0x04001189 RID: 4489
		internal const float JUMP_ATTACK_KNOCKDOWN_FORCE_X = 0.5f;

		// Token: 0x0400118A RID: 4490
		internal const float JUMP_ATTACK_KNOCKDOWN_FORCE_Y = 1f;

		// Token: 0x0400118B RID: 4491
		internal const float PROJECTILE_CRIT_KNOCKBACK_X = 3f;

		// Token: 0x0400118C RID: 4492
		internal const float PROJECTILE_CRIT_KNOCKBACK_Y = 3f;

		// Token: 0x0400118D RID: 4493
		internal const float GRAB_PUNCH_KNOCKDOWN_FORCE_X = 2.3f;

		// Token: 0x0400118E RID: 4494
		internal const float GRAB_PUNCH_KNOCKDOWN_FORCE_Y = 1.4f;

		// Token: 0x0400118F RID: 4495
		internal const float GRAB_THROW_FORCE_X = 5f;

		// Token: 0x04001190 RID: 4496
		internal const float GRAB_THROW_FORCE_Y = 2.5f;

		// Token: 0x04001191 RID: 4497
		internal const float KICK_POWER = 1f;

		// Token: 0x04001192 RID: 4498
		private const float ACCELERATION_PER_MS = 0.02805f;

		// Token: 0x04001193 RID: 4499
		private const float JUMP_DAMPENING_Y_VELOCITY = 0.35f;

		// Token: 0x04001194 RID: 4500
		internal const float ENERGY_MELEE = 5f;

		// Token: 0x04001195 RID: 4501
		private const float ENERGY_BLOCK_AMOUNT = 12f;

		// Token: 0x04001196 RID: 4502
		private const float ENERGY_TOTAL_SPRINT_TIME = 3400f;

		// Token: 0x04001197 RID: 4503
		private const float ENERGY_RECHARGE_IDLE_TIME = 1700f;

		// Token: 0x04001198 RID: 4504
		private const float ENERGY_RECHARGE_RUN_TIME = 3570f;

		// Token: 0x04001199 RID: 4505
		private const float ENERGY_DIVE_AMOUNT = 10f;

		// Token: 0x0400119A RID: 4506
		private const float ENERGY_GRAB_CHARGE_AMOUNT = 10f;

		// Token: 0x0400119B RID: 4507
		private const float ENERGY_GRAB_ATTACK_AMOUNT = 5f;

		// Token: 0x0400119C RID: 4508
		private const float ENERGY_GRAB_THROW_AMOUNT = 10f;

		// Token: 0x0400119D RID: 4509
		private const float ENERGY_ROLL_AMOUNT = 8f;

		// Token: 0x0400119E RID: 4510
		private const float ENERGY_JUMP_AMOUNT = 5f;

		// Token: 0x0400119F RID: 4511
		private const float ENERGY_SPRINT_JUMP_AMOUNT = 10f;

		// Token: 0x040011A0 RID: 4512
		private const float ENERGY_REQUIRED_TO_ACTIVE_SPRINT = 0.1f;

		// Token: 0x040011A1 RID: 4513
		private const float ENERGY_RECHARGE_COOLDOWN = 100f;

		// Token: 0x040011A2 RID: 4514
		private const float CLIMB_JUMP_COOLDOWN = 800f;

		// Token: 0x040011A3 RID: 4515
		private const float CLIMB_SPEED_UP = 2f;

		// Token: 0x040011A4 RID: 4516
		private const float CLIMB_JUMP_SPEED_TOLERANCE = 2f;

		// Token: 0x040011A5 RID: 4517
		private const float CLIMB_SPEED_DOWN_SLIDE_START = -1.7f;

		// Token: 0x040011A6 RID: 4518
		private const float CLIMB_SPEED_DOWN_SLIDE_MAX = -7.5f;

		// Token: 0x040011A7 RID: 4519
		private const float CLIMB_SPEED_DOWN_SLIDE_GRAVITY = -0.02f;

		// Token: 0x040011A8 RID: 4520
		private const float CLIMB_SPEED_DOWN_SLIDE_BREAK = 0.1f;

		// Token: 0x040011A9 RID: 4521
		private const float CLIMB_SPEED_HORIZONTAL = 1.5f;

		// Token: 0x040011AA RID: 4522
		private const float HIP_FIRE_BODY_RECOIL_DISTANCE = 0.1f;

		// Token: 0x040011AB RID: 4523
		private const float DIVE_START_ROTATION = 0.35f;

		// Token: 0x040011AC RID: 4524
		private const float DIVE_ROTATION_SPEED = 0.00085000007f;

		// Token: 0x040011AD RID: 4525
		internal const float AIM_SPEED_INCREASE = 0.00034f;

		// Token: 0x040011AE RID: 4526
		internal const float AIM_SPEED_START = 0.0055f;

		// Token: 0x040011AF RID: 4527
		internal const float MAX_AIM_SPEED = 0.136f;

		// Token: 0x040011B0 RID: 4528
		internal const float MIN_AIM_ANGLE = -1.5707964f;

		// Token: 0x040011B1 RID: 4529
		internal const float MAX_AIM_ANGLE = 1.5707964f;

		// Token: 0x040011B2 RID: 4530
		internal const float AIM_ANGLE_EPSILON = 0.001f;

		// Token: 0x040011B3 RID: 4531
		internal const float AIM_STEP = 0.006f;

		// Token: 0x040011B4 RID: 4532
		internal const float THROW_DEFAULT_POWER = 9f;

		// Token: 0x040011B5 RID: 4533
		internal const float THROW_DEFAULT_EXTRA_UP_POWER = 3.5f;

		// Token: 0x040011B6 RID: 4534
		internal const float THROW_DEFAULT_EXTRA_UP_POWER_THROWING_MODE = 2.8f;

		// Token: 0x040011B7 RID: 4535
		internal const float KICK_PLAYER_DAMAGE = 3f;

		// Token: 0x040011B8 RID: 4536
		internal const float KICK_OBJECT_IMPACT_DAMAGE = 5f;

		// Token: 0x040011B9 RID: 4537
		internal const float DIVE_OBJECT_IMPACT_DAMAGE = 5f;

		// Token: 0x040011BA RID: 4538
		internal const float WALL_THRESHOLD = 0.65f;

		// Token: 0x040011BB RID: 4539
		internal const float PLAYER_OVERKILL_HEALTH_THRESHOLD = 1f;

		// Token: 0x040011BC RID: 4540
		private const float AUTO_RELOAD_COOLDOWN = 500f;

		// Token: 0x040011BD RID: 4541
		private const float POST_FIRE_RELOAD_COOLDOWN = 1000f;

		// Token: 0x040011BE RID: 4542
		private const float EXPLOSION_RESISTANCE_MODIFIER = 0.5f;

		// Token: 0x040011BF RID: 4543
		private const float MULTIPLE_ANTI_KICKING_TIME = 300f;

		// Token: 0x040011C0 RID: 4544
		public const int SUB_ANIMATIONS = 4;

		// Token: 0x040011C1 RID: 4545
		public const float OWN_SLOWMOTION_FACTOR = 0.75f;

		// Token: 0x040011C2 RID: 4546
		public const float OWN_SLOWMOTION_PROJECTILE_FACTOR = 0.5f;

		// Token: 0x040011C3 RID: 4547
		private const float MELEE_1_COOLDOWN = 450f;

		// Token: 0x040011C4 RID: 4548
		internal const byte WALL_DIVING_COUNT_MAX_VALUE = 7;

		// Token: 0x040011C5 RID: 4549
		internal const byte CLIMB_DROP_COUNT_MAX_VALUE = 3;

		// Token: 0x040011C6 RID: 4550
		private float m_botAIRocketRideFlightTime;

		// Token: 0x040011C7 RID: 4551
		private byte m_botAIRocketRideLastTurn;

		// Token: 0x040011C8 RID: 4552
		private float m_botAIRocketRideSameTurnTime;

		// Token: 0x040011C9 RID: 4553
		private Player.BotAIShootingValues m_botAIShooting;

		// Token: 0x040011CA RID: 4554
		private float m_botAIPrevAimDiff;

		// Token: 0x040011CB RID: 4555
		private float m_botAIPrevAimDiffFictiveDistExtra;

		// Token: 0x040011CC RID: 4556
		private float m_botAIAimChangeDelay;

		// Token: 0x040011CD RID: 4557
		private int m_botAIAimChangeLastDirection;

		// Token: 0x040011CE RID: 4558
		private static float m_botAICheckCoverTimeCheck = 0f;

		// Token: 0x040011CF RID: 4559
		internal ObjectData m_botAISeekCoverObject;

		// Token: 0x040011D0 RID: 4560
		internal Microsoft.Xna.Framework.Vector2 m_botAISeekCoverObjectInitialBox2DPos = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x040011D1 RID: 4561
		internal float m_botAISeekCoverObjectInitialRot;

		// Token: 0x040011D2 RID: 4562
		internal Microsoft.Xna.Framework.Vector2 m_botAISeekCoverPlayerTargetWorldPos = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x040011D3 RID: 4563
		internal float m_botAISeekCoverTotalTime;

		// Token: 0x040011D4 RID: 4564
		private bool m_botAICurrentActiveActionPhaseCanMove;

		// Token: 0x040011D5 RID: 4565
		private BotActionPhaseEnum m_botAIActionPhaseValues;

		// Token: 0x040011D6 RID: 4566
		private BotActionPhaseEnum m_botAICurrentActiveActionPhase;

		// Token: 0x040011D7 RID: 4567
		private Dictionary<BotActionPhaseEnum, BotActionPhase> m_botAIActionPhases;

		// Token: 0x040011D8 RID: 4568
		private HashSet<int> m_botAIDodgeProjectileHandledProjectiles;

		// Token: 0x040011D9 RID: 4569
		private HashSet<int> m_botAIDodgeProjectileCheckedDodge;

		// Token: 0x040011DA RID: 4570
		private byte m_botAIDodgeProjectileFrames;

		// Token: 0x040011DB RID: 4571
		private byte m_botAIDodgeProjectileAction;

		// Token: 0x040011DC RID: 4572
		private BotActionPhaseEnum m_botAIDodgeProjectileBeforeActionPhase;

		// Token: 0x040011DD RID: 4573
		private float m_botAIDodgeProjectileLastRandomValue;

		// Token: 0x040011DE RID: 4574
		private int m_botAIDodgeProjectileLastRandomProjectileID;

		// Token: 0x040011DF RID: 4575
		private float m_botAIDodgeProjectileLastRandomTimestamp;

		// Token: 0x040011E0 RID: 4576
		private float m_botAIBurnTime;

		// Token: 0x040011E1 RID: 4577
		private int m_botAIBurnTimeRandomRollIndex = -1;

		// Token: 0x040011E2 RID: 4578
		private float m_botAIBurnTimeRandomMaxDelay = 4000f;

		// Token: 0x040011E3 RID: 4579
		private int m_botAIRandomRollDirection;

		// Token: 0x040011E4 RID: 4580
		private Dictionary<Player, Player.TeamLineUpEntry> m_botAITeamCurrentLineUps;

		// Token: 0x040011E5 RID: 4581
		private Player.BotAITeamLineUpData m_botAITeamLineUpData;

		// Token: 0x040011E6 RID: 4582
		private float m_botAITotalQueueTime;

		// Token: 0x040011E7 RID: 4583
		private Player.AINavMeleeIgnoreCloseCheck m_botAINavMeleeIgnoreCloseCheck;

		// Token: 0x040011E8 RID: 4584
		private float m_botAIMeleeClimbRandomPauseTime;

		// Token: 0x040011E9 RID: 4585
		private bool m_botAIMeleeClimbRandomJump;

		// Token: 0x040011EA RID: 4586
		private int m_botAIMeleeClimbRandomJumpIndex;

		// Token: 0x040011EB RID: 4587
		private float m_botAIMeleeDelay;

		// Token: 0x040011EC RID: 4588
		private float m_botAIMeleeEnrageAccumulation;

		// Token: 0x040011ED RID: 4589
		private bool m_botAIMeleeRandomInitialDelayPerformed;

		// Token: 0x040011EE RID: 4590
		private float m_botAIMeleeWaitActionTime;

		// Token: 0x040011EF RID: 4591
		private float m_botAIMeleeWaitLimitTime;

		// Token: 0x040011F0 RID: 4592
		private int m_botAIMeleeWaitActionStats = -1;

		// Token: 0x040011F1 RID: 4593
		private Player.RandomCachedValue m_botAIMeleeJumpCounterRandom = new Player.RandomCachedValue();

		// Token: 0x040011F2 RID: 4594
		private float m_botAIMeleeDefaultCacheTime;

		// Token: 0x040011F3 RID: 4595
		private Player.MeleeDefaultAction m_botAIMeleeDefaultCacheAction = Player.MeleeDefaultAction.Attack;

		// Token: 0x040011F4 RID: 4596
		private Dictionary<int, Player.BotAIObstacleInfo> m_botAIObstacleInfo;

		// Token: 0x040011F5 RID: 4597
		private float m_botAIMeleeSheathToMeleeTimestamp;

		// Token: 0x040011F6 RID: 4598
		private Player.BotAINavigation m_botAINav;

		// Token: 0x040011F7 RID: 4599
		private float m_botAINavRandomPathFindingDelay;

		// Token: 0x040011F8 RID: 4600
		private float m_botAINavStuckXTimer;

		// Token: 0x040011F9 RID: 4601
		private float m_botAINavStuckXPosition;

		// Token: 0x040011FA RID: 4602
		private float m_botAINavDownFromLedgeFallTimer;

		// Token: 0x040011FB RID: 4603
		private float m_botAINavForceReachedNextTimer;

		// Token: 0x040011FC RID: 4604
		private float m_botAINavWaitElevatorTimer;

		// Token: 0x040011FD RID: 4605
		private float m_botAINavCrouchStuckTimer;

		// Token: 0x040011FE RID: 4606
		private float m_botAINavStuckTimer;

		// Token: 0x040011FF RID: 4607
		private bool m_botAINavStuckReset;

		// Token: 0x04001200 RID: 4608
		private float m_botAINavLedgeGrabDelayTimer;

		// Token: 0x04001201 RID: 4609
		private int m_botAINavLastNavNodeAInstanceIDJumped;

		// Token: 0x04001202 RID: 4610
		private bool m_botAINavSprintRequred;

		// Token: 0x04001203 RID: 4611
		private bool m_botAINavChargingEnergy;

		// Token: 0x04001204 RID: 4612
		private float m_botAINavPauseNextTime;

		// Token: 0x04001205 RID: 4613
		private float m_botAINavPauseTime;

		// Token: 0x04001206 RID: 4614
		private GameWorld.PlayerAIPackagePathFinding m_botAINavPathFinding;

		// Token: 0x04001207 RID: 4615
		private Player.AIMoveData m_botAINavMoveData;

		// Token: 0x04001208 RID: 4616
		private int m_botAILastTeleportCounter;

		// Token: 0x04001209 RID: 4617
		private int m_botAILastDiveCounter;

		// Token: 0x0400120A RID: 4618
		private bool m_botAILastClimbing;

		// Token: 0x0400120B RID: 4619
		private float m_requeuePathFindingTime;

		// Token: 0x0400120C RID: 4620
		private float m_requeuePathFindingNextUpdateTime;

		// Token: 0x0400120D RID: 4621
		private bool m_botAINavReachedNextNode;

		// Token: 0x0400120E RID: 4622
		private float m_botAINavBlindNavigationTime;

		// Token: 0x0400120F RID: 4623
		private int m_botAINavValidNavigationLastPathProcessedCount;

		// Token: 0x04001210 RID: 4624
		private float m_botAIOffensiveDiveRandomTime;

		// Token: 0x04001211 RID: 4625
		private bool m_botAIOffensiveDiveRandomResult;

		// Token: 0x04001212 RID: 4626
		private float m_botAIUnreachableActivateablesTime;

		// Token: 0x04001213 RID: 4627
		private int m_botAIUnreachableActivateablesObjectID;

		// Token: 0x04001214 RID: 4628
		private int m_botAILastGroundPathNodeInstanceID;

		// Token: 0x04001215 RID: 4629
		private PathNode m_botAILastGroundPathNode;

		// Token: 0x04001216 RID: 4630
		private Microsoft.Xna.Framework.Vector2 m_botAILastGroundPathNodePosition = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x04001217 RID: 4631
		private float m_botAILastGroundPathNodeCacheTime;

		// Token: 0x04001218 RID: 4632
		private float m_botAINavAirNodeBackupTargetTime;

		// Token: 0x04001219 RID: 4633
		private int m_botAINavAirNodeBackupTargetSourceNodeID;

		// Token: 0x0400121A RID: 4634
		private ObjectPathNode m_botAINavAirNodeBackupTarget;

		// Token: 0x0400121B RID: 4635
		private Body m_botAINavMoveAroundAndDownBody;

		// Token: 0x0400121C RID: 4636
		private int m_botAINavMoveAroundKickCount;

		// Token: 0x0400121D RID: 4637
		private byte m_botAINavMoveDownDelay;

		// Token: 0x0400121E RID: 4638
		private bool m_botAINavMoveAroundObstacles;

		// Token: 0x0400121F RID: 4639
		private float m_botAINavObstacleAboveCacheTime;

		// Token: 0x04001220 RID: 4640
		private Player.BotAIObstacleResult m_botAINavObstacleAboveCacheObject;

		// Token: 0x04001221 RID: 4641
		private float m_botAINavigationCheckTeammateClimbingBelowRandomDelay;

		// Token: 0x04001222 RID: 4642
		private HashSet<int> m_keyActionsNew;

		// Token: 0x04001223 RID: 4643
		private HashSet<int> m_keyActionsOld;

		// Token: 0x04001224 RID: 4644
		private List<Player.BotAIKeyPressAction> m_keyActionsQueued;

		// Token: 0x04001225 RID: 4645
		private Dictionary<int, Player.BotAIKeyPressAction> m_keyActionsQueuedLookup;

		// Token: 0x04001226 RID: 4646
		private float m_botAIKeyActionTapTimer;

		// Token: 0x04001227 RID: 4647
		private float m_botAIKeyActionLeftRightTimer;

		// Token: 0x04001228 RID: 4648
		private int m_botAIKeyActionLeftRightLastKey;

		// Token: 0x04001229 RID: 4649
		private bool m_botAIKeyActionLeftRight;

		// Token: 0x0400122A RID: 4650
		private bool m_bot_commandsUsed;

		// Token: 0x0400122B RID: 4651
		private Player.PlayerActionCommandItem m_currentCommandAction;

		// Token: 0x0400122C RID: 4652
		private Queue<Player.PlayerActionCommandItem> m_commandActionQueue;

		// Token: 0x0400122D RID: 4653
		private bool ModifiersUpdated;

		// Token: 0x0400122E RID: 4654
		private PlayerModifiers m_modifiers;

		// Token: 0x0400122F RID: 4655
		private Player m_grabbedPlayerForceHit;

		// Token: 0x04001230 RID: 4656
		private int m_grabMouseJointTarget;

		// Token: 0x04001231 RID: 4657
		private MouseJoint m_grabMouseJoint;

		// Token: 0x04001232 RID: 4658
		private World m_grabMouseWorld;

		// Token: 0x04001233 RID: 4659
		private float FALL_DAMAGE_TRESHOLD_RADIUS = 0.32f;

		// Token: 0x04001234 RID: 4660
		private List<Player.ObjectImpactData> m_registeredObjectImpacts = new List<Player.ObjectImpactData>();

		// Token: 0x04001235 RID: 4661
		private bool m_isBot;

		// Token: 0x04001236 RID: 4662
		private BotBehaviorSet m_botBehaviorSet;

		// Token: 0x04001237 RID: 4663
		private BotBehavior m_botBehavior;

		// Token: 0x04001238 RID: 4664
		internal Player.BotAINavCodePath m_botAINavigationCodePath;

		// Token: 0x04001239 RID: 4665
		private Dictionary<Type, GameWorld.PlayerAIPackage> m_botAIPackages;

		// Token: 0x0400123A RID: 4666
		private bool m_botAIKeysHandled;

		// Token: 0x0400123B RID: 4667
		private Player.BotAITargetData m_botAITargetDataDestination;

		// Token: 0x0400123C RID: 4668
		private Player.BotAITargetData m_botAITargetDataOpponent;

		// Token: 0x0400123D RID: 4669
		internal Dictionary<int, HashSet<int>> m_botAIUnavailableTargetsAtNode;

		// Token: 0x0400123E RID: 4670
		internal HashSet<int> m_botAIUnavailableTargets;

		// Token: 0x0400123F RID: 4671
		internal HashSet<int> m_botAIUnavailableActivateablePathConnections;

		// Token: 0x04001240 RID: 4672
		private short m_dropLedgeGrabFrames;

		// Token: 0x04001241 RID: 4673
		private HashSet<Fixture> m_disabledFixturesForLedgeGrab;

		// Token: 0x04001242 RID: 4674
		private List<Fixture> m_ledgeGrabaabbFixtures = new List<Fixture>(8);

		// Token: 0x04001243 RID: 4675
		private ObjectData m_coverObject;

		// Token: 0x04001244 RID: 4676
		private bool m_coverObjectCanShootThrough;

		// Token: 0x04001245 RID: 4677
		private ObjectData m_lastCoverObjectStaticNeighbour;

		// Token: 0x04001246 RID: 4678
		private static HashSet<string> m_invalidCovers = new HashSet<string>(new string[]
		{
			"ArmyTruck00Back1".ToUpperInvariant(),
			"ArmyTruck00Back2".ToUpperInvariant(),
			"ArmyTruck00Front".ToUpperInvariant(),
			"RoofDuct00".ToUpperInvariant(),
			"Elevator00".ToUpperInvariant()
		});

		// Token: 0x04001247 RID: 4679
		private static HashSet<string> m_validCanShootThroughCovers = new HashSet<string>(new string[]
		{
			"Pallet00".ToUpperInvariant(),
			"Crate01".ToUpperInvariant()
		});

		// Token: 0x04001248 RID: 4680
		private double m_pressTimeKeyInput_K_DROP;

		// Token: 0x04001249 RID: 4681
		private bool m_trackTimeKeyInput_K_DROP;

		// Token: 0x0400124A RID: 4682
		private PlayerMovement m_virtualKeyboardLastMovement;

		// Token: 0x0400124B RID: 4683
		internal List<VirtualKeyInfo> PlayerKeyInputEvents;

		// Token: 0x0400124C RID: 4684
		internal static Microsoft.Xna.Framework.Vector2 THROW_DEFAULT_OFFSET = new Microsoft.Xna.Framework.Vector2(4f, 14.5f);

		// Token: 0x0400124D RID: 4685
		internal static Microsoft.Xna.Framework.Vector2 THROW_DROP_OFFSET = new Microsoft.Xna.Framework.Vector2(-3f, 5f);

		// Token: 0x0400124E RID: 4686
		private CameraFocusMode m_cameraSecondaryFocusMode = CameraFocusMode.Focus;

		// Token: 0x0400124F RID: 4687
		internal int IgnoreExplosionCountDamage;

		// Token: 0x04001250 RID: 4688
		private bool m_reloadPrepared;

		// Token: 0x04001251 RID: 4689
		private float m_reloadCooldown;

		// Token: 0x04001252 RID: 4690
		private BaseEffect m_fireBigEffect;

		// Token: 0x04001253 RID: 4691
		internal Microsoft.Xna.Framework.Vector2 CurrentSpeed;

		// Token: 0x04001254 RID: 4692
		internal Microsoft.Xna.Framework.Vector2 CurrentTargetSpeed;

		// Token: 0x04001255 RID: 4693
		internal Microsoft.Xna.Framework.Vector2 AirControlBaseVelocity;

		// Token: 0x04001256 RID: 4694
		private Team m_currentTeam;

		// Token: 0x04001257 RID: 4695
		private Microsoft.Xna.Framework.Color m_currentTeamColor = Microsoft.Xna.Framework.Color.White;

		// Token: 0x04001258 RID: 4696
		private bool MetaDataUpdated;

		// Token: 0x04001259 RID: 4697
		internal bool DisableJumpWhileHoldingUpKey;

		// Token: 0x0400125A RID: 4698
		internal bool DisableFireWhileHoldingAttackKey;

		// Token: 0x0400125B RID: 4699
		private int m_userIdentifier;

		// Token: 0x0400125C RID: 4700
		private GameSFD m_game;

		// Token: 0x0400125D RID: 4701
		private GameWorld m_gameWorld;

		// Token: 0x0400125E RID: 4702
		private Fixture m_playerFixturePolygon;

		// Token: 0x0400125F RID: 4703
		private Fixture m_playerFixtureCircle;

		// Token: 0x04001260 RID: 4704
		private Filter m_playerFilterCollision;

		// Token: 0x04001261 RID: 4705
		private Filter m_playerFilterNoCollision;

		// Token: 0x04001262 RID: 4706
		private bool m_polygonFixtureEnabled = true;

		// Token: 0x04001263 RID: 4707
		private bool m_polygonFixtureDisabledDuringRocketRiding;

		// Token: 0x04001264 RID: 4708
		private static Texture2D m_textureCrosshair = null;

		// Token: 0x04001265 RID: 4709
		private SpriteFont m_font;

		// Token: 0x04001266 RID: 4710
		private Microsoft.Xna.Framework.Vector2 m_nameTextSize = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x04001267 RID: 4711
		private Microsoft.Xna.Framework.Color m_teamColor = Microsoft.Xna.Framework.Color.White;

		// Token: 0x04001268 RID: 4712
		internal static Item HurtLevel1;

		// Token: 0x04001269 RID: 4713
		internal static Item HurtLevel2;

		// Token: 0x0400126A RID: 4714
		private static Filter m_playerCollisionFilter;

		// Token: 0x0400126B RID: 4715
		private GameUser m_gameUserCache;

		// Token: 0x0400126C RID: 4716
		private bool m_isDisposed;

		// Token: 0x0400126D RID: 4717
		private Dictionary<Player, float> m_currentCollisionPlayerPlayerOverlappings;

		// Token: 0x0400126E RID: 4718
		private bool m_removalRunning;

		// Token: 0x0400126F RID: 4719
		private float m_ignoreStandingOnBodyVelocityTimer;

		// Token: 0x04001270 RID: 4720
		private Microsoft.Xna.Framework.Vector2 m_preBox2DLinearVelocity = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x04001271 RID: 4721
		private Microsoft.Xna.Framework.Vector2 m_preBox2DPosition = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x04001272 RID: 4722
		private Microsoft.Xna.Framework.Vector2 m_lastBox2DPositionOnGround = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x04001273 RID: 4723
		private bool m_canLedgeGrabBeforeBox2DStep;

		// Token: 0x04001274 RID: 4724
		private List<Player.LedgeGrabFixtureCheck> m_checkLedgeGrabFixtures = new List<Player.LedgeGrabFixtureCheck>();

		// Token: 0x04001275 RID: 4725
		private float m_currentActionTimeBeforeBox2DAction;

		// Token: 0x04001276 RID: 4726
		private Microsoft.Xna.Framework.Vector2 m_setLinearVelocity = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x04001277 RID: 4727
		private Microsoft.Xna.Framework.Vector2 m_standingOnBodyRelativePosition = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x04001278 RID: 4728
		private Microsoft.Xna.Framework.Vector2 m_standingOnBodyVelocity = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x04001279 RID: 4729
		private bool m_disableRectTemporarily;

		// Token: 0x0400127A RID: 4730
		private List<Projectile> m_projectileMissed;

		// Token: 0x0400127B RID: 4731
		private bool m_abortReloading;

		// Token: 0x0400127C RID: 4732
		private GenericClassPool<NetMessage.ProjectileUpdate.Data> m_writeProjUpdateDataPool;

		// Token: 0x0400127D RID: 4733
		private RWeapon.BeforeCreateProjectileArgs m_BeforeCreateProjectileArgs;

		// Token: 0x0400127E RID: 4734
		private bool m_checkDeathLedgeAfterBounce;

		// Token: 0x0400127F RID: 4735
		private Microsoft.Xna.Framework.Vector2 m_checkDeathLedgeLastBox2DVelocity = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x04001280 RID: 4736
		private float m_checkDeathLedgeLastTimestamp;

		// Token: 0x04001281 RID: 4737
		internal ushort ForceClientMovementStateIgnored;

		// Token: 0x04001282 RID: 4738
		internal bool CorrectSpawnPosition;

		// Token: 0x04001283 RID: 4739
		internal ushort ForceServerMovementStateIgnored;

		// Token: 0x04001284 RID: 4740
		private bool m_prevStateFullLandingOnGround;

		// Token: 0x04001285 RID: 4741
		private bool[] m_prevStatesOnUpdate;

		// Token: 0x04001286 RID: 4742
		private Microsoft.Xna.Framework.Vector2 m_lastStuckInFallingPos = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x04001287 RID: 4743
		private float m_lastStuckInFallingTime;

		// Token: 0x04001288 RID: 4744
		private float m_nextMolotovSpawnTime;

		// Token: 0x04001289 RID: 4745
		private int m_dropAllWeaponsUpdateDelay = 2;

		// Token: 0x0400128A RID: 4746
		private Player.DiveCollisionCheckResult m_diveCollisionCheckResult;

		// Token: 0x0400128B RID: 4747
		private int m_repositionToCloudCounterOldCounter;

		// Token: 0x0400128C RID: 4748
		private int m_repositionToCloudCounter;

		// Token: 0x0400128D RID: 4749
		private Fixture m_climbLastLadderCloud;

		// Token: 0x0400128E RID: 4750
		private Fixture m_climbLastLadderTop;

		// Token: 0x0400128F RID: 4751
		private Fixture m_climbLastLadderBot;

		// Token: 0x04001290 RID: 4752
		private Microsoft.Xna.Framework.Vector2 m_climbTopNormal = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x04001291 RID: 4753
		private WorldContactListener m_worldContactListener;

		// Token: 0x04001292 RID: 4754
		private Box2D.XNA.RayCastInput[] m_rayCastInputs;

		// Token: 0x04001293 RID: 4755
		private bool m_checkThrowableDisarmIsQueued;

		// Token: 0x04001294 RID: 4756
		private bool m_checkThrowableDisarmThrowableIsActivated;

		// Token: 0x04001295 RID: 4757
		private static Microsoft.Xna.Framework.Vector2 DISARM_POWER = new Microsoft.Xna.Framework.Vector2(1.75f);

		// Token: 0x04001296 RID: 4758
		private Material m_playerHitMetalMaterial;

		// Token: 0x04001297 RID: 4759
		private float m_lastLowerFireRankGameTime;

		// Token: 0x04001298 RID: 4760
		internal bool MustSendVirtualKeyboard;

		// Token: 0x04001299 RID: 4761
		internal bool SkipSendNonCriticalVirtualKeyboard;

		// Token: 0x0400129A RID: 4762
		private Dictionary<int, float> m_ignoredBodyIDs = new Dictionary<int, float>();

		// Token: 0x0400129B RID: 4763
		private float m_closestActivateableObjectCacheTime;

		// Token: 0x0400129C RID: 4764
		private ObjectData m_closestActivateableObjectCacheObject;

		// Token: 0x0400129D RID: 4765
		private List<Pair<ObjectData, float>> m_tempIgnoreObjectImpacts = new List<Pair<ObjectData, float>>();

		// Token: 0x0400129E RID: 4766
		private Dictionary<int, float> m_recentlyHitObjectsInKick = new Dictionary<int, float>();

		// Token: 0x0400129F RID: 4767
		private List<Tuple<bool, PlayerWeaponRemovedArg, PlayerWeaponAddedArg>> m_removedAddedWeaponCallbacks;

		// Token: 0x040012A0 RID: 4768
		private bool m_dropGrabbedPlayersNextUpdate;

		// Token: 0x040012A1 RID: 4769
		private float m_timeSinceLastJump;

		// Token: 0x040012A2 RID: 4770
		private float m_currentFlashTime;

		// Token: 0x040012A3 RID: 4771
		private float FLASH_TIME_LIGHT = 80f;

		// Token: 0x040012A4 RID: 4772
		private float FLASH_TIME_CHARGE = 150f;

		// Token: 0x040012A5 RID: 4773
		private float m_flashTimer;

		// Token: 0x040012A7 RID: 4775
		private int m_lastDirectionX;

		// Token: 0x040012A8 RID: 4776
		private SubAnimationPlayer m_tailSubAnimation;

		// Token: 0x040012A9 RID: 4777
		private SubAnimationPlayer[] m_subAnimations;

		// Token: 0x040012AA RID: 4778
		private short m_subAnimationsLength;

		// Token: 0x040012AB RID: 4779
		private Animation m_currentAnimation;

		// Token: 0x040012AC RID: 4780
		private PlayerAction m_currentAnimationPlayerAction;

		// Token: 0x040012AD RID: 4781
		private Profile m_currentProfile = new Profile();

		// Token: 0x040012AE RID: 4782
		private Microsoft.Xna.Framework.Vector2 m_speedBoostDelayedPos = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x040012AF RID: 4783
		private float m_currentDrawScale = 1f;

		// Token: 0x040012B0 RID: 4784
		private int m_chatIconFrame;

		// Token: 0x040012B1 RID: 4785
		private float m_chatIconTimer;

		// Token: 0x040012B2 RID: 4786
		private int m_meleeHitAnim = 1;

		// Token: 0x040012B3 RID: 4787
		private string m_meleeAnimUpperLast = "";

		// Token: 0x040012B4 RID: 4788
		private bool m_forceHardAubAnimationReset;

		// Token: 0x040012B5 RID: 4789
		private bool m_softUpdate;

		// Token: 0x040012B6 RID: 4790
		private int m_softUpdatePart = -1;

		// Token: 0x040012B7 RID: 4791
		private int m_animationUpperOverrideLastWaitFrame = -1;

		// Token: 0x040012B8 RID: 4792
		private IPlayerUpperAnimationOverride m_animationUpperOverride;

		// Token: 0x040012B9 RID: 4793
		private IPlayerUpperAnimationOverride m_animationUpperOverrideLastValue;

		// Token: 0x040012BA RID: 4794
		private PlayerMovement m_movement;

		// Token: 0x040012BB RID: 4795
		private bool m_clientMustInitiateMovement;

		// Token: 0x040012BC RID: 4796
		private float m_meleeHit1Delay;

		// Token: 0x040012BD RID: 4797
		private float m_meleeHit1Cooldown;

		// Token: 0x040012BE RID: 4798
		internal float PreparingHipFire;

		// Token: 0x040012BF RID: 4799
		private bool m_isBackToHipFire;

		// Token: 0x040012C0 RID: 4800
		private PlayerAction m_LastMeleeAction;

		// Token: 0x040012C1 RID: 4801
		private PlayerAction m_currentAction;

		// Token: 0x040012C2 RID: 4802
		private bool StandingOnGroundBox2DStep;

		// Token: 0x040012C3 RID: 4803
		internal Microsoft.Xna.Framework.Vector2 LastOnGroundPosition = Microsoft.Xna.Framework.Vector2.Zero;

		// Token: 0x040012C4 RID: 4804
		private bool m_haveTouchedGroundSinceLastInAir;

		// Token: 0x040012C5 RID: 4805
		internal bool m_havePerformedJumpAttack;

		// Token: 0x040012C6 RID: 4806
		private int m_strengthBoostPreparingIndex;

		// Token: 0x040012C7 RID: 4807
		private int m_strengthBoostPreparingAnimIndex;

		// Token: 0x040012C8 RID: 4808
		private int m_speedBoostPreparingIndex;

		// Token: 0x040012C9 RID: 4809
		private int m_speedBoostPreparingAnimIndex;

		// Token: 0x040012CA RID: 4810
		private byte m_wallDivingCount;

		// Token: 0x040012CB RID: 4811
		private byte m_climbDropCount;

		// Token: 0x040012CC RID: 4812
		private float m_rollTime;

		// Token: 0x040012CD RID: 4813
		private Player.PlayerSpawnAnimation m_spawnAnimation;

		// Token: 0x040012CE RID: 4814
		private bool m_staggeringExtendedCheckPerformed;

		// Token: 0x040012CF RID: 4815
		private bool m_climbingClient;

		// Token: 0x040012D0 RID: 4816
		private LedgeGrabbingData m_ledgeGrabbingData = new LedgeGrabbingData();

		// Token: 0x040012D1 RID: 4817
		private float m_chatActiveTime;

		// Token: 0x040012D2 RID: 4818
		private bool m_meleeWeaponBroken;

		// Token: 0x040012D3 RID: 4819
		private bool[] m_states;

		// Token: 0x040012D4 RID: 4820
		internal Microsoft.Xna.Framework.Vector2? LastCaughtInDiveVelocity = null;

		// Token: 0x040012D5 RID: 4821
		private CachedPlayerKey m_caughtByPlayerValue;

		// Token: 0x040012D6 RID: 4822
		private CachedPlayerKey m_holdingPlayerInDiveValue;

		// Token: 0x040012D7 RID: 4823
		private CachedPlayerKey m_grabbedByPlayerValue;

		// Token: 0x040012D8 RID: 4824
		private CachedPlayerKey m_holdingPlayerInGrabValue;

		// Token: 0x040012D9 RID: 4825
		private int m_lastRocketRideProjectileWorldId;

		// Token: 0x040012DA RID: 4826
		private Projectile m_lastRocketRideProjectile;

		// Token: 0x040012DB RID: 4827
		private Player.FireSequenceValues m_fireSequence;

		// Token: 0x040012DC RID: 4828
		private SFD.Weapons.WeaponItemType m_autoDropWeapon = SFD.Weapons.WeaponItemType.NONE;

		// Token: 0x040012DD RID: 4829
		private bool m_autoReloadWeapon;

		// Token: 0x040012DE RID: 4830
		private Player.TimeSequenceValues m_timeSequence;

		// Token: 0x040012DF RID: 4831
		private RWeapon m_currentHandgunWeapon;

		// Token: 0x040012E0 RID: 4832
		private RWeapon m_currentRifleWeapon;

		// Token: 0x040012E1 RID: 4833
		private TWeapon m_currentThrownWeapon;

		// Token: 0x040012E2 RID: 4834
		private MWeapon m_currentMeleeWeapon;

		// Token: 0x040012E3 RID: 4835
		private PItem m_currentPowerupItem;

		// Token: 0x040012E4 RID: 4836
		private SFD.Weapons.WeaponItemType m_currentWeaponDrawn;

		// Token: 0x040012E5 RID: 4837
		private float m_currentWeaponDrawnTimestamp;

		// Token: 0x040012E6 RID: 4838
		private MWeapon m_currentMeleeMakeshiftWeapon;

		// Token: 0x040012E7 RID: 4839
		private static MWeapon m_meleeFists = null;

		// Token: 0x040012E8 RID: 4840
		private static MWeapon m_meleeFeet = null;

		// Token: 0x040012E9 RID: 4841
		private float m_minimumMleeHitFrameTime;

		// Token: 0x040012EA RID: 4842
		private BarMeter m_barHealth;

		// Token: 0x040012EB RID: 4843
		private BarMeter m_barOverHealth;

		// Token: 0x040012EC RID: 4844
		private BarMeter m_barOverkillDamage;

		// Token: 0x040012ED RID: 4845
		private BarMeter m_barEnergy;

		// Token: 0x040012EE RID: 4846
		private float m_lastClientEnergy = 100f;

		// Token: 0x040012EF RID: 4847
		private bool m_throwFullyPerformed;

		// Token: 0x040012F0 RID: 4848
		private bool m_throwMustStandStill;

		// Token: 0x02000340 RID: 832
		private class BotAIShootingValues
		{
			// Token: 0x04001347 RID: 4935
			public float ForcedCoverTime;

			// Token: 0x04001348 RID: 4936
			public float ForcedShootTime;

			// Token: 0x04001349 RID: 4937
			public float AimShootBurstDelayTime;

			// Token: 0x0400134A RID: 4938
			public float AimShootDelayTime;

			// Token: 0x0400134B RID: 4939
			public float AimShootDelayTimeTargetManualAim;

			// Token: 0x0400134C RID: 4940
			public float AimShootDelayTimeTargetHipFire;

			// Token: 0x0400134D RID: 4941
			public float FromManualAimToHipFireDelayTime;

			// Token: 0x0400134E RID: 4942
			public float CurrentAccuracyDeflection;

			// Token: 0x0400134F RID: 4943
			public float NextAccuracyDeflectionTime;

			// Token: 0x04001350 RID: 4944
			public float ForceRangedTime;

			// Token: 0x04001351 RID: 4945
			public float PrecisionInterpolateTime;

			// Token: 0x04001352 RID: 4946
			public Player.BotAIShootingValues.CurrentShootStateType CurrentShootState;

			// Token: 0x04001353 RID: 4947
			public bool InitialAimingInSight;

			// Token: 0x04001354 RID: 4948
			public int CheckForCoverIndex;

			// Token: 0x04001355 RID: 4949
			public int CanCheckForCoverIndexA;

			// Token: 0x04001356 RID: 4950
			public int CanCheckForCoverIndexB;

			// Token: 0x04001357 RID: 4951
			public float LastCheckForCoverTime;

			// Token: 0x04001358 RID: 4952
			public float FirstShootDelayTime;

			// Token: 0x04001359 RID: 4953
			public bool FriendlyLOS;

			// Token: 0x0400135A RID: 4954
			public float FriendlyLOSAccumulatedTime;

			// Token: 0x0400135B RID: 4955
			public bool FriendlyLOSLastResultBeforeAttack;

			// Token: 0x0400135C RID: 4956
			public Player.BotAIShootingValues.AimMode CurrentAimMode;

			// Token: 0x0400135D RID: 4957
			public float LastShootingStateTimeStamp;

			// Token: 0x0400135E RID: 4958
			public bool LastUpdatePreferRanged;

			// Token: 0x02000341 RID: 833
			public enum CurrentShootStateType
			{
				// Token: 0x04001360 RID: 4960
				InitialAimShootDelay,
				// Token: 0x04001361 RID: 4961
				Burst,
				// Token: 0x04001362 RID: 4962
				BurstPause
			}

			// Token: 0x02000342 RID: 834
			public enum AimMode
			{
				// Token: 0x04001364 RID: 4964
				ManualAim,
				// Token: 0x04001365 RID: 4965
				HipFire
			}
		}

		// Token: 0x02000343 RID: 835
		private class TeamLineUpEntry
		{
			// Token: 0x17000A40 RID: 2624
			// (get) Token: 0x06003D23 RID: 15651 RVA: 0x00031C1D File Offset: 0x0002FE1D
			// (set) Token: 0x06003D24 RID: 15652 RVA: 0x00031C25 File Offset: 0x0002FE25
			public Player TeamPlayer { get; set; }

			// Token: 0x17000A41 RID: 2625
			// (get) Token: 0x06003D25 RID: 15653 RVA: 0x00031C2E File Offset: 0x0002FE2E
			// (set) Token: 0x06003D26 RID: 15654 RVA: 0x00031C36 File Offset: 0x0002FE36
			public float Timestamp { get; set; }

			// Token: 0x17000A42 RID: 2626
			// (get) Token: 0x06003D27 RID: 15655 RVA: 0x00031C3F File Offset: 0x0002FE3F
			// (set) Token: 0x06003D28 RID: 15656 RVA: 0x00031C47 File Offset: 0x0002FE47
			public Player.TeamLineUpEntry.LineUpType Type { get; set; }

			// Token: 0x06003D29 RID: 15657 RVA: 0x00002B4A File Offset: 0x00000D4A
			private TeamLineUpEntry()
			{
			}

			// Token: 0x06003D2A RID: 15658 RVA: 0x00109278 File Offset: 0x00107478
			public static Player.TeamLineUpEntry GetFreeEntry(Player teamPlayer, float timestamp, Player.TeamLineUpEntry.LineUpType type)
			{
				Player.TeamLineUpEntry freeItem = Player.TeamLineUpEntry.Pool.GetFreeItem();
				freeItem.TeamPlayer = teamPlayer;
				freeItem.Timestamp = timestamp;
				freeItem.Type = type;
				return freeItem;
			}

			// Token: 0x06003D2B RID: 15659 RVA: 0x00031C50 File Offset: 0x0002FE50
			public void FlagAsFree()
			{
				this.TeamPlayer = null;
				this.Timestamp = 0f;
				this.Type = Player.TeamLineUpEntry.LineUpType.TeamLineUp;
			}

			// Token: 0x06003D2C RID: 15660 RVA: 0x00031C6B File Offset: 0x0002FE6B
			public float GetTeamLineUpDistance()
			{
				return Player.TeamLineUpEntry.GetTeamLineUpDistance(this.Type);
			}

			// Token: 0x06003D2D RID: 15661 RVA: 0x00031C78 File Offset: 0x0002FE78
			public static float GetTeamLineUpDistance(Player.TeamLineUpEntry.LineUpType type)
			{
				if (type != Player.TeamLineUpEntry.LineUpType.TeamLineUp)
				{
					return 6f;
				}
				return 14f;
			}

			// Token: 0x04001366 RID: 4966
			private static GenericClassPool<Player.TeamLineUpEntry> Pool = new GenericClassPool<Player.TeamLineUpEntry>(() => new Player.TeamLineUpEntry(), 1, 8);

			// Token: 0x02000344 RID: 836
			public enum LineUpType
			{
				// Token: 0x0400136C RID: 4972
				TeamLineUp,
				// Token: 0x0400136D RID: 4973
				OverlapResolve
			}
		}

		// Token: 0x02000345 RID: 837
		private class BotAITeamLineUpData
		{
			// Token: 0x17000A43 RID: 2627
			// (get) Token: 0x06003D30 RID: 15664 RVA: 0x00031CBA File Offset: 0x0002FEBA
			public bool HasTarget
			{
				get
				{
					return this.LeftTeammate != null | this.RightTeammate != null;
				}
			}

			// Token: 0x06003D31 RID: 15665 RVA: 0x00031CD5 File Offset: 0x0002FED5
			public void Reset()
			{
				this.LeftTeammate = null;
				this.RightTeammate = null;
				this.LeftTeammateType = Player.TeamLineUpEntry.LineUpType.OverlapResolve;
				this.RightTeammateType = Player.TeamLineUpEntry.LineUpType.OverlapResolve;
			}

			// Token: 0x0400136E RID: 4974
			public float CheckTimer;

			// Token: 0x0400136F RID: 4975
			public Player.TeamLineUpEntry.LineUpType LeftTeammateType = Player.TeamLineUpEntry.LineUpType.OverlapResolve;

			// Token: 0x04001370 RID: 4976
			public Player LeftTeammate;

			// Token: 0x04001371 RID: 4977
			public Player.TeamLineUpEntry.LineUpType RightTeammateType = Player.TeamLineUpEntry.LineUpType.OverlapResolve;

			// Token: 0x04001372 RID: 4978
			public Player RightTeammate;

			// Token: 0x04001373 RID: 4979
			public float WaitTime;

			// Token: 0x04001374 RID: 4980
			public float WaitTimeRemaining;
		}

		// Token: 0x02000346 RID: 838
		private class RandomCachedValue
		{
			// Token: 0x06003D33 RID: 15667 RVA: 0x00031D09 File Offset: 0x0002FF09
			public float GetValue(float cacheTime = 100f)
			{
				if (GameSFD.LastUpdateNetTimeMS - this.m_lastRandomTime > cacheTime)
				{
					this.m_lastRandomValue = Constants.RANDOM.NextFloat();
					this.m_lastRandomTime = GameSFD.LastUpdateNetTimeMS;
				}
				return this.m_lastRandomValue;
			}

			// Token: 0x04001375 RID: 4981
			private float m_lastRandomTime;

			// Token: 0x04001376 RID: 4982
			private float m_lastRandomValue;
		}

		// Token: 0x02000347 RID: 839
		internal class BotAIMeleeStatus
		{
			// Token: 0x06003D35 RID: 15669 RVA: 0x00031D3B File Offset: 0x0002FF3B
			public BotAIMeleeStatus()
			{
				this.m_outOfRangeAttacks = new Dictionary<long, Player.BotAIMeleeStatus.OutOfRangeAttackResult>();
				this.Reset();
			}

			// Token: 0x06003D36 RID: 15670 RVA: 0x001092A8 File Offset: 0x001074A8
			public void Reset()
			{
				this.OverlapStartTimestamp = 0f;
				this.StandingHitboxOverlap = false;
				this.CrouchHitboxOverlap = false;
				this.InMeleeRange = false;
				this.MustMoveCloser = true;
				this.OpponentMovingAway = false;
				this.MovementXAdjust = 0f;
				this.CurrentMeleeRange = 0f;
			}

			// Token: 0x06003D37 RID: 15671 RVA: 0x001092FC File Offset: 0x001074FC
			public bool CheckShouldCounterOutOfRangeAttack(Player owner, Player opponent, Player.BotAIMeleeStatus.OutOfRangeAttack attack)
			{
				Player.BotAIMeleeStatus.OutOfRangeKey outOfRangeKey = default(Player.BotAIMeleeStatus.OutOfRangeKey);
				outOfRangeKey.PlayerID = opponent.ObjectID;
				outOfRangeKey.OutOfRangeAttack = (int)attack;
				Player.BotAIMeleeStatus.OutOfRangeAttackResult value;
				if (!this.m_outOfRangeAttacks.TryGetValue(outOfRangeKey.Value, out value))
				{
					value = default(Player.BotAIMeleeStatus.OutOfRangeAttackResult);
				}
				int num = opponent.Statisticts.m_TotalMeleeAttackSwings + opponent.Statisticts.m_TotalGrabCharges + opponent.Statisticts.m_TotalDives + ((attack == Player.BotAIMeleeStatus.OutOfRangeAttack.JumpAttack) ? opponent.Statisticts.m_TotalJumps : 0);
				if (value.Sequence != num)
				{
					value.Sequence = num;
					BotMeleeActions botMeleeActions;
					BotMeleeActions botMeleeActions2;
					owner.BotAIGetMeleeActions(out botMeleeActions, out botMeleeActions2);
					value.Result = (Constants.RANDOM.NextFloat() <= owner.m_botBehaviorSet.CounterOutOfRangeMeleeAttacksLevel);
					this.m_outOfRangeAttacks[outOfRangeKey.Value] = value;
				}
				return value.Result;
			}

			// Token: 0x04001377 RID: 4983
			public float OverlapStartTimestamp;

			// Token: 0x04001378 RID: 4984
			public bool StandingHitboxOverlap;

			// Token: 0x04001379 RID: 4985
			public bool CrouchHitboxOverlap;

			// Token: 0x0400137A RID: 4986
			public bool InMeleeRange;

			// Token: 0x0400137B RID: 4987
			public float CurrentMeleeRange;

			// Token: 0x0400137C RID: 4988
			public bool MustMoveCloser;

			// Token: 0x0400137D RID: 4989
			public bool OpponentMovingAway;

			// Token: 0x0400137E RID: 4990
			public float MovementXAdjust;

			// Token: 0x0400137F RID: 4991
			private Dictionary<long, Player.BotAIMeleeStatus.OutOfRangeAttackResult> m_outOfRangeAttacks;

			// Token: 0x02000348 RID: 840
			[StructLayout(LayoutKind.Explicit)]
			private struct OutOfRangeKey
			{
				// Token: 0x04001380 RID: 4992
				[FieldOffset(0)]
				public long Value;

				// Token: 0x04001381 RID: 4993
				[FieldOffset(0)]
				public int PlayerID;

				// Token: 0x04001382 RID: 4994
				[FieldOffset(4)]
				public int OutOfRangeAttack;
			}

			// Token: 0x02000349 RID: 841
			[StructLayout(LayoutKind.Explicit)]
			private struct OutOfRangeAttackResult
			{
				// Token: 0x04001383 RID: 4995
				[FieldOffset(0)]
				public long Value;

				// Token: 0x04001384 RID: 4996
				[FieldOffset(0)]
				public int Sequence;

				// Token: 0x04001385 RID: 4997
				[FieldOffset(4)]
				public bool Result;
			}

			// Token: 0x0200034A RID: 842
			public enum OutOfRangeAttack
			{
				// Token: 0x04001387 RID: 4999
				Dive = 1,
				// Token: 0x04001388 RID: 5000
				Grab,
				// Token: 0x04001389 RID: 5001
				Attack,
				// Token: 0x0400138A RID: 5002
				JumpAttack
			}
		}

		// Token: 0x0200034B RID: 843
		private class AINavMeleeIgnoreCloseCheck
		{
			// Token: 0x17000A44 RID: 2628
			// (get) Token: 0x06003D38 RID: 15672 RVA: 0x00031D54 File Offset: 0x0002FF54
			// (set) Token: 0x06003D39 RID: 15673 RVA: 0x00031D5C File Offset: 0x0002FF5C
			public int PlayerTargetID { get; private set; }

			// Token: 0x17000A45 RID: 2629
			// (get) Token: 0x06003D3A RID: 15674 RVA: 0x00031D65 File Offset: 0x0002FF65
			// (set) Token: 0x06003D3B RID: 15675 RVA: 0x00031D6D File Offset: 0x0002FF6D
			public int PlayerMeleeIndex { get; private set; }

			// Token: 0x17000A46 RID: 2630
			// (get) Token: 0x06003D3C RID: 15676 RVA: 0x00031D76 File Offset: 0x0002FF76
			// (set) Token: 0x06003D3D RID: 15677 RVA: 0x00031D7E File Offset: 0x0002FF7E
			public float PlayerMeleeIgnoreTime { get; private set; }

			// Token: 0x17000A47 RID: 2631
			// (get) Token: 0x06003D3E RID: 15678 RVA: 0x00031D87 File Offset: 0x0002FF87
			// (set) Token: 0x06003D3F RID: 15679 RVA: 0x00031D8F File Offset: 0x0002FF8F
			public Microsoft.Xna.Framework.Vector2 PlayerMeleeIgnoreOffset { get; private set; }

			// Token: 0x17000A48 RID: 2632
			// (get) Token: 0x06003D40 RID: 15680 RVA: 0x00031D98 File Offset: 0x0002FF98
			// (set) Token: 0x06003D41 RID: 15681 RVA: 0x00031DA0 File Offset: 0x0002FFA0
			public int ObjectTargetID { get; private set; }

			// Token: 0x17000A49 RID: 2633
			// (get) Token: 0x06003D42 RID: 15682 RVA: 0x00031DA9 File Offset: 0x0002FFA9
			// (set) Token: 0x06003D43 RID: 15683 RVA: 0x00031DB1 File Offset: 0x0002FFB1
			public int ObjectMeleeIndex { get; private set; }

			// Token: 0x17000A4A RID: 2634
			// (get) Token: 0x06003D44 RID: 15684 RVA: 0x00031DBA File Offset: 0x0002FFBA
			// (set) Token: 0x06003D45 RID: 15685 RVA: 0x00031DC2 File Offset: 0x0002FFC2
			public float ObjectMeleeIgnoreTime { get; private set; }

			// Token: 0x17000A4B RID: 2635
			// (get) Token: 0x06003D46 RID: 15686 RVA: 0x00031DCB File Offset: 0x0002FFCB
			// (set) Token: 0x06003D47 RID: 15687 RVA: 0x00031DD3 File Offset: 0x0002FFD3
			public Microsoft.Xna.Framework.Vector2 ObjectMeleeIgnoreOffset { get; private set; }

			// Token: 0x06003D48 RID: 15688 RVA: 0x00031DDC File Offset: 0x0002FFDC
			public bool CheckIgnoreMeleeTimeIsActive(float elapsedTotalTime)
			{
				return this.PlayerMeleeIgnoreTime < elapsedTotalTime;
			}

			// Token: 0x06003D49 RID: 15689 RVA: 0x00031DE7 File Offset: 0x0002FFE7
			public void Reset()
			{
				this.PlayerMeleeIgnoreTime = 0f;
				this.ObjectMeleeIgnoreTime = 0f;
			}

			// Token: 0x06003D4A RID: 15690 RVA: 0x001093D4 File Offset: 0x001075D4
			public bool CheckRecentMeleeTargetValid(Player me, Player opponent)
			{
				if (me.LastMeleeHitPlayerID == opponent.ObjectID)
				{
					return true;
				}
				if (this.PlayerTargetID != opponent.ObjectID || me.LastMeleeHitDirection != me.LastDirectionX)
				{
					this.PlayerTargetID = opponent.ObjectID;
					this.PlayerMeleeIndex = me.Statisticts.TotalMeleeAttackSwings;
					this.PlayerMeleeIgnoreTime = 0f;
				}
				Microsoft.Xna.Framework.Vector2 vector = me.PreBox2DPosition - opponent.PreBox2DPosition;
				if (this.PlayerMeleeIndex != me.Statisticts.TotalMeleeAttackSwings)
				{
					this.PlayerMeleeIndex = me.Statisticts.TotalMeleeAttackSwings;
					this.PlayerMeleeIgnoreOffset = me.LastMeleeHitBox2DPosition - opponent.PreBox2DPosition;
					if (me.LastMeleeHitPlayerID == opponent.ObjectID)
					{
						return true;
					}
					this.PlayerMeleeIgnoreTime = me.GameWorld.ElapsedTotalGameTime + 1000f;
				}
				return this.PlayerMeleeIgnoreTime <= me.GameWorld.ElapsedTotalGameTime || Math.Abs(this.PlayerMeleeIgnoreOffset.X - vector.X) > 0.32f || Math.Abs(this.PlayerMeleeIgnoreOffset.Y - vector.Y) > 0.16f;
			}

			// Token: 0x06003D4B RID: 15691 RVA: 0x00109500 File Offset: 0x00107700
			public void CheckRecentMeleeTargetOffset(Player me, Player opponent)
			{
				if (this.PlayerTargetID == opponent.ObjectID)
				{
					Microsoft.Xna.Framework.Vector2 vector = me.PreBox2DPosition - opponent.PreBox2DPosition;
					if (Math.Abs(this.PlayerMeleeIgnoreOffset.X - vector.X) > 0.32f || Math.Abs(this.PlayerMeleeIgnoreOffset.Y - vector.Y) > 0.16f)
					{
						this.PlayerMeleeIgnoreTime = me.GameWorld.ElapsedTotalGameTime;
						this.PlayerTargetID = 0;
					}
				}
			}

			// Token: 0x06003D4C RID: 15692 RVA: 0x00109584 File Offset: 0x00107784
			public bool CheckRecentMeleeTargetValid(Player me, ObjectData target)
			{
				if (me.LastObjectsHitInMelee.Contains(target))
				{
					return true;
				}
				if (this.ObjectTargetID != target.ObjectID || me.LastMeleeHitDirection != me.LastDirectionX)
				{
					this.ObjectTargetID = target.ObjectID;
					this.ObjectMeleeIndex = me.Statisticts.TotalMeleeAttackSwings;
					this.ObjectMeleeIgnoreTime = 0f;
				}
				Microsoft.Xna.Framework.Vector2 vector = me.PreBox2DPosition - target.GetBox2DPosition();
				if (this.ObjectMeleeIndex != me.Statisticts.TotalMeleeAttackSwings)
				{
					this.ObjectMeleeIndex = me.Statisticts.TotalMeleeAttackSwings;
					this.ObjectMeleeIgnoreOffset = me.LastMeleeHitBox2DPosition - target.GetBox2DPosition();
					if (me.LastObjectsHitInMelee.Contains(target))
					{
						return true;
					}
					this.ObjectMeleeIgnoreTime = me.GameWorld.ElapsedTotalGameTime + 1000f;
				}
				return this.ObjectMeleeIgnoreTime < me.GameWorld.ElapsedTotalGameTime || Math.Abs(this.ObjectMeleeIgnoreOffset.X - vector.X) > 0.32f || Math.Abs(this.ObjectMeleeIgnoreOffset.Y - vector.Y) > 0.16f;
			}
		}

		// Token: 0x0200034C RID: 844
		private class BotAIObstacleInfo
		{
			// Token: 0x04001393 RID: 5011
			public float ObstructionTime;

			// Token: 0x04001394 RID: 5012
			public float CooldownTime;

			// Token: 0x04001395 RID: 5013
			public byte ActionType;

			// Token: 0x04001396 RID: 5014
			public float ActionTime;
		}

		// Token: 0x0200034D RID: 845
		private enum MeleeDefaultAction
		{
			// Token: 0x04001398 RID: 5016
			Wait,
			// Token: 0x04001399 RID: 5017
			Attack,
			// Token: 0x0400139A RID: 5018
			Kick,
			// Token: 0x0400139B RID: 5019
			Grab,
			// Token: 0x0400139C RID: 5020
			Block,
			// Token: 0x0400139D RID: 5021
			Jump
		}

		// Token: 0x0200034E RID: 846
		internal class BotAINavigation
		{
			// Token: 0x17000A4C RID: 2636
			// (get) Token: 0x06003D4F RID: 15695 RVA: 0x00031DFF File Offset: 0x0002FFFF
			// (set) Token: 0x06003D50 RID: 15696 RVA: 0x00031E07 File Offset: 0x00030007
			public int BasedOnPathFindingType { get; set; }

			// Token: 0x17000A4D RID: 2637
			// (get) Token: 0x06003D51 RID: 15697 RVA: 0x00031E10 File Offset: 0x00030010
			// (set) Token: 0x06003D52 RID: 15698 RVA: 0x00031E18 File Offset: 0x00030018
			public int BasedOnPathFindingResultID { get; set; }

			// Token: 0x17000A4E RID: 2638
			// (get) Token: 0x06003D53 RID: 15699 RVA: 0x00031E21 File Offset: 0x00030021
			// (set) Token: 0x06003D54 RID: 15700 RVA: 0x00031E29 File Offset: 0x00030029
			public int TotalNodeSteps { get; set; }

			// Token: 0x17000A4F RID: 2639
			// (get) Token: 0x06003D55 RID: 15701 RVA: 0x00031E32 File Offset: 0x00030032
			public PathNode NodeA
			{
				get
				{
					if (this.m_nodeA != null)
					{
						if (this.m_nodeA.InstanceID == this.m_nodeAInstanceID)
						{
							return this.m_nodeA;
						}
					}
					return null;
				}
			}

			// Token: 0x17000A50 RID: 2640
			// (get) Token: 0x06003D56 RID: 15702 RVA: 0x00031E59 File Offset: 0x00030059
			public int NodeAInstanceID
			{
				get
				{
					return this.m_nodeAInstanceID;
				}
			}

			// Token: 0x17000A51 RID: 2641
			// (get) Token: 0x06003D57 RID: 15703 RVA: 0x00031E61 File Offset: 0x00030061
			public PathNode NodeB
			{
				get
				{
					if (this.m_nodeB != null)
					{
						if (this.m_nodeB.InstanceID == this.m_nodeBInstanceID)
						{
							return this.m_nodeB;
						}
					}
					return null;
				}
			}

			// Token: 0x17000A52 RID: 2642
			// (get) Token: 0x06003D58 RID: 15704 RVA: 0x00031E88 File Offset: 0x00030088
			public int NodeBInstanceID
			{
				get
				{
					return this.m_nodeBInstanceID;
				}
			}

			// Token: 0x17000A53 RID: 2643
			// (get) Token: 0x06003D59 RID: 15705 RVA: 0x00031E90 File Offset: 0x00030090
			public PathNode NodeC
			{
				get
				{
					if (this.m_nodeC != null)
					{
						if (this.m_nodeC.InstanceID == this.m_nodeCInstanceID)
						{
							return this.m_nodeC;
						}
					}
					return null;
				}
			}

			// Token: 0x17000A54 RID: 2644
			// (get) Token: 0x06003D5A RID: 15706 RVA: 0x00031EB7 File Offset: 0x000300B7
			public int NodeCInstanceID
			{
				get
				{
					return this.m_nodeCInstanceID;
				}
			}

			// Token: 0x17000A55 RID: 2645
			// (get) Token: 0x06003D5B RID: 15707 RVA: 0x00031EBF File Offset: 0x000300BF
			public PathNodeConnection CurrentConnection
			{
				get
				{
					if (this.m_currentConnection != null)
					{
						if (this.m_currentConnection.InstanceID == this.m_currentConnectionInstanceID)
						{
							return this.m_currentConnection;
						}
					}
					return null;
				}
			}

			// Token: 0x17000A56 RID: 2646
			// (get) Token: 0x06003D5C RID: 15708 RVA: 0x00031EE6 File Offset: 0x000300E6
			public int CurrentConnectionInstanceID
			{
				get
				{
					return this.m_currentConnectionInstanceID;
				}
			}

			// Token: 0x17000A57 RID: 2647
			// (get) Token: 0x06003D5D RID: 15709 RVA: 0x00031EEE File Offset: 0x000300EE
			public PathNodeConnection NextConnection
			{
				get
				{
					if (this.m_nextConnection != null)
					{
						if (this.m_nextConnection.InstanceID == this.m_nextConnectionInstanceID)
						{
							return this.m_nextConnection;
						}
					}
					return null;
				}
			}

			// Token: 0x17000A58 RID: 2648
			// (get) Token: 0x06003D5E RID: 15710 RVA: 0x00031F15 File Offset: 0x00030115
			public int NextConnectionInstanceID
			{
				get
				{
					return this.m_nextConnectionInstanceID;
				}
			}

			// Token: 0x06003D5F RID: 15711 RVA: 0x001096B0 File Offset: 0x001078B0
			public PathNode GetNode(int nodeIndex)
			{
				switch (nodeIndex)
				{
				case 0:
					return this.NodeA;
				case 1:
					return this.NodeB;
				case 2:
					return this.NodeC;
				default:
					return null;
				}
			}

			// Token: 0x06003D60 RID: 15712 RVA: 0x001096E8 File Offset: 0x001078E8
			public PathNodeConnection GetConnection(int connectionIndex)
			{
				switch (connectionIndex)
				{
				case 0:
					return this.CurrentConnection;
				case 1:
					return this.NextConnection;
				default:
					return null;
				}
			}

			// Token: 0x06003D61 RID: 15713 RVA: 0x00109714 File Offset: 0x00107914
			public Microsoft.Xna.Framework.Vector2 GetNodeDistance(int connectionIndex)
			{
				PathNode pathNode;
				PathNode pathNode2;
				switch (connectionIndex)
				{
				case 0:
					pathNode = this.NodeA;
					pathNode2 = this.NodeB;
					break;
				case 1:
					pathNode = this.NodeB;
					pathNode2 = this.NodeC;
					break;
				default:
					return Microsoft.Xna.Framework.Vector2.Zero;
				}
				if (pathNode == null | pathNode2 == null)
				{
					return Microsoft.Xna.Framework.Vector2.Zero;
				}
				return pathNode2.Box2DPosition - pathNode.Box2DPosition;
			}

			// Token: 0x06003D62 RID: 15714 RVA: 0x00109778 File Offset: 0x00107978
			public void GetCurrentConnectionConsideredElevator(out bool nodeAIsElevator, out bool nodeBIsElevator)
			{
				nodeAIsElevator = (this.NodeA != null && (this.NodeA.IsElevatorNode & this.NodeA.FollowObjectID != 0));
				nodeBIsElevator = (this.NodeB != null && (this.NodeB.IsElevatorNode & this.NodeB.FollowObjectID != 0));
				if ((nodeAIsElevator & nodeBIsElevator) && this.NodeA.FollowObjectID == this.NodeB.FollowObjectID)
				{
					nodeAIsElevator = false;
					nodeBIsElevator = false;
				}
			}

			// Token: 0x17000A59 RID: 2649
			// (get) Token: 0x06003D63 RID: 15715 RVA: 0x00031F1D File Offset: 0x0003011D
			public bool CurrentConnectionNodesSetup
			{
				get
				{
					return this.NodeA != null && this.NodeB != null;
				}
			}

			// Token: 0x17000A5A RID: 2650
			// (get) Token: 0x06003D64 RID: 15716 RVA: 0x00031F35 File Offset: 0x00030135
			public bool NextConnectionNodesValid
			{
				get
				{
					return this.NodeB != null && this.NodeC != null;
				}
			}

			// Token: 0x06003D65 RID: 15717 RVA: 0x00109800 File Offset: 0x00107A00
			public bool AnyConnectionNodeIsOfType(int connectionIndex, PathNodeType nodeType)
			{
				switch (connectionIndex)
				{
				case 0:
					return this.NodeAIsOfType(nodeType) || this.NodeBIsOfType(nodeType);
				case 1:
					return this.NodeBIsOfType(nodeType) || this.NodeCIsOfType(nodeType);
				default:
					return false;
				}
			}

			// Token: 0x06003D66 RID: 15718 RVA: 0x00109844 File Offset: 0x00107A44
			public bool AnyConnectionNodeIsOfType(int connectionIndex, params PathNodeType[] nodeTypes)
			{
				switch (connectionIndex)
				{
				case 0:
					return this.NodeAIsOfType(nodeTypes) || this.NodeBIsOfType(nodeTypes);
				case 1:
					return this.NodeBIsOfType(nodeTypes) || this.NodeCIsOfType(nodeTypes);
				default:
					return false;
				}
			}

			// Token: 0x06003D67 RID: 15719 RVA: 0x00031F4D File Offset: 0x0003014D
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			public bool NodeAIsOfType(PathNodeType nodeType)
			{
				return this.NodeA != null && this.m_nodeA.NodeType == nodeType;
			}

			// Token: 0x06003D68 RID: 15720 RVA: 0x00031F67 File Offset: 0x00030167
			public bool NodeAIsOfType(params PathNodeType[] nodeTypes)
			{
				return this.NodeA != null && nodeTypes.Any((PathNodeType x) => x == this.m_nodeA.NodeType);
			}

			// Token: 0x06003D69 RID: 15721 RVA: 0x00031F85 File Offset: 0x00030185
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			public bool NodeBIsOfType(PathNodeType nodeType)
			{
				return this.NodeB != null && this.m_nodeB.NodeType == nodeType;
			}

			// Token: 0x06003D6A RID: 15722 RVA: 0x00031F9F File Offset: 0x0003019F
			public bool NodeBIsOfType(params PathNodeType[] nodeTypes)
			{
				return this.NodeB != null && nodeTypes.Any((PathNodeType x) => x == this.m_nodeB.NodeType);
			}

			// Token: 0x06003D6B RID: 15723 RVA: 0x00031FBD File Offset: 0x000301BD
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			public bool NodeCIsOfType(PathNodeType nodeType)
			{
				return this.NodeC != null && this.m_nodeC.NodeType == nodeType;
			}

			// Token: 0x06003D6C RID: 15724 RVA: 0x00031FD7 File Offset: 0x000301D7
			public bool NodeCIsOfType(params PathNodeType[] nodeTypes)
			{
				return this.NodeC != null && nodeTypes.Any((PathNodeType x) => x == this.m_nodeC.NodeType);
			}

			// Token: 0x06003D6D RID: 15725 RVA: 0x00031FF5 File Offset: 0x000301F5
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			public bool CurrentConnectionIsDynamic()
			{
				return this.CurrentConnection != null && this.m_currentConnection.IsDynamicConnection;
			}

			// Token: 0x06003D6E RID: 15726 RVA: 0x0003200C File Offset: 0x0003020C
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			public bool CurrentConnectionIsOfType(PathNodeConnectionType connectionType)
			{
				return this.CurrentConnection != null && this.m_currentConnection.ConnectionType == connectionType;
			}

			// Token: 0x06003D6F RID: 15727 RVA: 0x00032026 File Offset: 0x00030226
			public bool CurrentConnectionIsOfType(params PathNodeConnectionType[] connectionTypes)
			{
				return this.CurrentConnection != null && connectionTypes.Any((PathNodeConnectionType x) => x == this.m_currentConnection.ConnectionType);
			}

			// Token: 0x06003D70 RID: 15728 RVA: 0x00032044 File Offset: 0x00030244
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			public bool NextConnectionIsOfType(PathNodeConnectionType connectionType)
			{
				return this.NextConnection != null && this.m_nextConnection.ConnectionType == connectionType;
			}

			// Token: 0x06003D71 RID: 15729 RVA: 0x0003205E File Offset: 0x0003025E
			public bool NextConnectionIsOfType(params PathNodeConnectionType[] connectionTypes)
			{
				return this.NextConnection != null && connectionTypes.Any((PathNodeConnectionType x) => x == this.m_nextConnection.ConnectionType);
			}

			// Token: 0x06003D72 RID: 15730 RVA: 0x0003207C File Offset: 0x0003027C
			public bool NodeAOrBFollowsObject(int objectID)
			{
				if (this.NodeA != null)
				{
					if (this.NodeA.FollowObjectID == objectID)
					{
						return true;
					}
				}
				return this.NodeB != null && this.NodeB.FollowObjectID == objectID;
			}

			// Token: 0x06003D73 RID: 15731 RVA: 0x000320B0 File Offset: 0x000302B0
			public bool CurrentIsSafeGround()
			{
				return this.NodeAIsOfType(PathNodeType.Ground) && this.NodeBIsOfType(PathNodeType.Ground) && this.CurrentConnectionIsOfType(PathNodeConnectionType.Default);
			}

			// Token: 0x06003D74 RID: 15732 RVA: 0x000320CD File Offset: 0x000302CD
			public bool NextIsSafeGround()
			{
				return this.NodeBIsOfType(PathNodeType.Ground) && this.CurrentConnectionIsOfType(PathNodeConnectionType.Default);
			}

			// Token: 0x06003D75 RID: 15733 RVA: 0x00109888 File Offset: 0x00107A88
			public void ClearData()
			{
				this.m_nodeA = null;
				this.m_nodeAInstanceID = 0;
				this.m_nodeB = null;
				this.m_nodeBInstanceID = 0;
				this.m_nodeC = null;
				this.m_nodeCInstanceID = 0;
				this.m_currentConnection = null;
				this.m_nextConnectionInstanceID = 0;
				this.m_nextConnection = null;
				this.m_nextConnectionInstanceID = 0;
				this.TotalNodeSteps = 0;
			}

			// Token: 0x06003D76 RID: 15734 RVA: 0x001098E4 File Offset: 0x00107AE4
			public void SetPath(SimpleLinkedList<ListPathPointNode> path)
			{
				Player.BotAINavigation.UpcomingPathData data = Player.BotAINavigation.UpcomingPathData.GetData(path);
				this.SetNodeA(data.NodeA);
				this.SetNodeB(data.NodeB);
				this.SetCurrentConnection(data.ConnectionAB);
				this.SetNodeC(data.NodeC);
				this.SetNextConnection(data.ConnectionBC);
			}

			// Token: 0x06003D77 RID: 15735 RVA: 0x00109934 File Offset: 0x00107B34
			public void UpdatePath(SimpleLinkedList<ListPathPointNode> path, Player player)
			{
				Player.BotAINavigation.UpcomingPathData data = Player.BotAINavigation.UpcomingPathData.GetData(path);
				if (this.NodeA == null)
				{
					this.SetNodeA(data.NodeA);
					this.SetNodeB(data.NodeB);
					this.SetCurrentConnection(data.ConnectionAB);
					this.SetNodeC(data.NodeC);
					this.SetNextConnection(data.ConnectionBC);
					return;
				}
				if (data.NodeA == null || data.NodeA != this.NodeA)
				{
					if (data.NodeA != null)
					{
						if (data.NodeA == this.NodeB && this.NodeB != null)
						{
							this.SetNodeC(data.NodeB);
							this.SetNextConnection(data.ConnectionAB);
							return;
						}
						if (data.NodeB == this.NodeA && this.NodeB != null && (player.PreBox2DPosition - this.NodeB.Box2DPosition).CalcSafeLength() < (player.PreBox2DPosition - this.NodeA.Box2DPosition).CalcSafeLength())
						{
							Player.BotAINavigation.UpcomingPathData data2 = Player.BotAINavigation.UpcomingPathData.GetData(path.Next);
							if (data2.NodeB == this.NodeB)
							{
								this.SetNodeC(data2.NodeC);
								this.SetNextConnection(data2.ConnectionBC);
								return;
							}
							if (data2.NodeB != null)
							{
								this.SetNodeB(data2.NodeB);
								this.SetCurrentConnection(data2.ConnectionAB);
								this.SetNodeC(data2.NodeC);
								this.SetNextConnection(data2.ConnectionBC);
								return;
							}
						}
						else
						{
							bool flag = true;
							if (this.NodeA != null && this.NodeB != null && player.m_botAINavStuckXTimer < 2000f)
							{
								int pathPointAIndex = -1;
								int pathPointBIndex = -1;
								PathNode startNodeA = null;
								PathNode startNodeB = null;
								path.IterateItemNodes(delegate(ListPathPointNode n)
								{
									if (startNodeA == null)
									{
										pathPointAIndex++;
										pathPointBIndex++;
										if (n.Node.InstanceID == this.m_nodeAInstanceID)
										{
											startNodeA = n.Node;
										}
									}
									else if (startNodeB == null)
									{
										pathPointBIndex++;
										if (n.Node.InstanceID == this.m_nodeBInstanceID)
										{
											startNodeB = n.Node;
											return false;
										}
									}
									return true;
								});
								if (startNodeA != null && pathPointAIndex + 1 == pathPointBIndex)
								{
									Microsoft.Xna.Framework.Vector2 closestPointOnLineSegment = SFDMath.GetClosestPointOnLineSegment(this.NodeA.Box2DPosition, this.NodeB.Box2DPosition, player.PreBox2DPosition, false);
									Microsoft.Xna.Framework.Vector2 vector = (player.PreBox2DPosition - closestPointOnLineSegment).Sanitize();
									if (Math.Abs(vector.X) < 0.64f && vector.Y > -0.16f)
									{
										flag = false;
									}
								}
							}
							if (flag)
							{
								this.SetNodeA(data.NodeA);
								this.SetNodeB(data.NodeB);
								this.SetCurrentConnection(data.ConnectionAB);
								this.SetNodeC(data.NodeC);
								this.SetNextConnection(data.ConnectionBC);
								return;
							}
						}
					}
					else
					{
						this.ClearData();
					}
					return;
				}
				if (data.NodeB != null && data.NodeB == this.NodeB)
				{
					this.SetNodeC(data.NodeC);
					this.SetNextConnection(data.ConnectionBC);
					return;
				}
				if (data.NodeB != null)
				{
					this.SetNodeB(data.NodeB);
					this.SetCurrentConnection(data.ConnectionAB);
					this.SetNodeC(data.NodeC);
					this.SetNextConnection(data.ConnectionBC);
					return;
				}
				this.SetNodeB(null);
				this.SetCurrentConnection(null);
				this.SetNodeC(null);
				this.SetNextConnection(null);
			}

			// Token: 0x06003D78 RID: 15736 RVA: 0x000320E1 File Offset: 0x000302E1
			public void SetNodeA(PathNode node)
			{
				if (node == null)
				{
					this.m_nodeA = null;
					this.m_nodeAInstanceID = 0;
					return;
				}
				this.m_nodeA = node;
				this.m_nodeAInstanceID = node.InstanceID;
			}

			// Token: 0x06003D79 RID: 15737 RVA: 0x00032108 File Offset: 0x00030308
			public void SetNodeB(PathNode node)
			{
				if (node == null)
				{
					this.m_nodeB = null;
					this.m_nodeBInstanceID = 0;
					return;
				}
				this.m_nodeB = node;
				this.m_nodeBInstanceID = node.InstanceID;
			}

			// Token: 0x06003D7A RID: 15738 RVA: 0x0003212F File Offset: 0x0003032F
			public void SetNodeC(PathNode node)
			{
				if (node == null)
				{
					this.m_nodeC = null;
					this.m_nodeCInstanceID = 0;
					return;
				}
				this.m_nodeC = node;
				this.m_nodeCInstanceID = node.InstanceID;
			}

			// Token: 0x06003D7B RID: 15739 RVA: 0x00032156 File Offset: 0x00030356
			public void SetCurrentConnection(PathNodeConnection connection)
			{
				if (connection == null)
				{
					this.m_currentConnection = null;
					this.m_currentConnectionInstanceID = 0;
					this.m_nodeB = null;
					this.m_nodeBInstanceID = 0;
					return;
				}
				this.m_currentConnection = connection;
				this.m_currentConnectionInstanceID = connection.InstanceID;
			}

			// Token: 0x06003D7C RID: 15740 RVA: 0x0003218B File Offset: 0x0003038B
			public void SetNextConnection(PathNodeConnection connection)
			{
				if (connection == null)
				{
					this.m_nextConnection = null;
					this.m_nextConnectionInstanceID = 0;
					this.m_nodeC = null;
					this.m_nodeCInstanceID = 0;
					return;
				}
				this.m_nextConnection = connection;
				this.m_nextConnectionInstanceID = connection.InstanceID;
			}

			// Token: 0x06003D7D RID: 15741 RVA: 0x000321C0 File Offset: 0x000303C0
			public void Dispose()
			{
				this.ClearData();
			}

			// Token: 0x0400139E RID: 5022
			private PathNode m_nodeA;

			// Token: 0x0400139F RID: 5023
			private int m_nodeAInstanceID;

			// Token: 0x040013A0 RID: 5024
			private PathNode m_nodeB;

			// Token: 0x040013A1 RID: 5025
			private int m_nodeBInstanceID;

			// Token: 0x040013A2 RID: 5026
			private PathNode m_nodeC;

			// Token: 0x040013A3 RID: 5027
			private int m_nodeCInstanceID;

			// Token: 0x040013A4 RID: 5028
			private PathNodeConnection m_currentConnection;

			// Token: 0x040013A5 RID: 5029
			private int m_currentConnectionInstanceID;

			// Token: 0x040013A6 RID: 5030
			private PathNodeConnection m_nextConnection;

			// Token: 0x040013A7 RID: 5031
			private int m_nextConnectionInstanceID;

			// Token: 0x0200034F RID: 847
			private class UpcomingPathData
			{
				// Token: 0x06003D84 RID: 15748 RVA: 0x00002B4A File Offset: 0x00000D4A
				private UpcomingPathData()
				{
				}

				// Token: 0x06003D85 RID: 15749 RVA: 0x00109C50 File Offset: 0x00107E50
				public static Player.BotAINavigation.UpcomingPathData GetData(SimpleLinkedList<ListPathPointNode> path)
				{
					Player.BotAINavigation.UpcomingPathData upcomingPathData = new Player.BotAINavigation.UpcomingPathData();
					if (path.Item != null)
					{
						upcomingPathData.NodeA = path.Item.Node;
						upcomingPathData.ConnectionAB = path.Item.ConnectionToNext;
						if (upcomingPathData.ConnectionAB != null)
						{
							upcomingPathData.NodeB = path.Next.Item.Node;
							upcomingPathData.ConnectionBC = path.Next.Item.ConnectionToNext;
							if (upcomingPathData.ConnectionBC != null)
							{
								upcomingPathData.NodeC = path.Next.Next.Item.Node;
							}
						}
					}
					if (upcomingPathData.NodeA != null && upcomingPathData.NodeA.IsOwnerDisposed)
					{
						upcomingPathData.NodeA = null;
						upcomingPathData.NodeB = null;
						upcomingPathData.ConnectionAB = null;
						upcomingPathData.NodeC = null;
						upcomingPathData.ConnectionBC = null;
					}
					else if ((upcomingPathData.NodeB != null && upcomingPathData.NodeB.IsOwnerDisposed) || (upcomingPathData.ConnectionAB != null && upcomingPathData.ConnectionAB.IsOwnerDisposed))
					{
						upcomingPathData.NodeB = null;
						upcomingPathData.ConnectionAB = null;
						upcomingPathData.NodeC = null;
						upcomingPathData.ConnectionBC = null;
					}
					else if ((upcomingPathData.NodeC != null && upcomingPathData.NodeC.IsOwnerDisposed) || (upcomingPathData.ConnectionBC != null && upcomingPathData.ConnectionBC.IsOwnerDisposed))
					{
						upcomingPathData.NodeC = null;
						upcomingPathData.ConnectionBC = null;
					}
					return upcomingPathData;
				}

				// Token: 0x040013AB RID: 5035
				public PathNode NodeA;

				// Token: 0x040013AC RID: 5036
				public PathNode NodeB;

				// Token: 0x040013AD RID: 5037
				public PathNode NodeC;

				// Token: 0x040013AE RID: 5038
				public PathNodeConnection ConnectionAB;

				// Token: 0x040013AF RID: 5039
				public PathNodeConnection ConnectionBC;
			}
		}

		// Token: 0x02000351 RID: 849
		private class AINavigationHelpers
		{
			// Token: 0x06003D88 RID: 15752 RVA: 0x00109E38 File Offset: 0x00108038
			public static bool PassedDestination(Microsoft.Xna.Framework.Vector2 source, Microsoft.Xna.Framework.Vector2 destination, ref Microsoft.Xna.Framework.Vector2 direction, bool checkOnPath, float tunnelingDist = 0f)
			{
				if (!checkOnPath)
				{
					Microsoft.Xna.Framework.Vector2 value = (source - (destination - direction * tunnelingDist)).Sanitize();
					value.Normalize();
					return Microsoft.Xna.Framework.Vector2.Dot(value, direction) > 0.1f;
				}
				Microsoft.Xna.Framework.Vector2 value2 = SFDMath.LineLineIntersection(destination, destination - direction, source, source + Microsoft.Xna.Framework.Vector2.UnitY) + direction * tunnelingDist;
				Microsoft.Xna.Framework.Vector2 value3 = (destination - value2).Sanitize();
				value3.Normalize();
				return Microsoft.Xna.Framework.Vector2.Dot(value3, direction) < -0.1f;
			}
		}

		// Token: 0x02000352 RID: 850
		private class BotAIObstacleResult
		{
			// Token: 0x040013B5 RID: 5045
			public ObjectData Object;

			// Token: 0x040013B6 RID: 5046
			public Microsoft.Xna.Framework.Vector2 LastHitBox2DPosition;
		}

		// Token: 0x02000353 RID: 851
		private class AIMoveData
		{
			// Token: 0x06003D8B RID: 15755 RVA: 0x00109EDC File Offset: 0x001080DC
			internal static Player.AIMoveData NewMoveData(ObjectData target, Player reference)
			{
				Player.AIMoveData freeItem = Player.AIMoveData.Pool.GetFreeItem();
				freeItem.SetTarget(target, reference);
				return freeItem;
			}

			// Token: 0x06003D8C RID: 15756 RVA: 0x00032218 File Offset: 0x00030418
			public void ReturnToPool()
			{
				this.SetTarget(null, null);
				Player.AIMoveData.Pool.FlagFreeItem(this);
			}

			// Token: 0x06003D8D RID: 15757 RVA: 0x00002B4A File Offset: 0x00000D4A
			private AIMoveData()
			{
			}

			// Token: 0x17000A5B RID: 2651
			// (get) Token: 0x06003D8E RID: 15758 RVA: 0x0003222D File Offset: 0x0003042D
			// (set) Token: 0x06003D8F RID: 15759 RVA: 0x00032235 File Offset: 0x00030435
			public ObjectData Target { get; private set; }

			// Token: 0x17000A5C RID: 2652
			// (get) Token: 0x06003D90 RID: 15760 RVA: 0x0003223E File Offset: 0x0003043E
			// (set) Token: 0x06003D91 RID: 15761 RVA: 0x00032246 File Offset: 0x00030446
			public Microsoft.Xna.Framework.Vector2 PlayerTargetDiff { get; private set; }

			// Token: 0x17000A5D RID: 2653
			// (get) Token: 0x06003D92 RID: 15762 RVA: 0x0003224F File Offset: 0x0003044F
			// (set) Token: 0x06003D93 RID: 15763 RVA: 0x00032257 File Offset: 0x00030457
			public Microsoft.Xna.Framework.Vector2 NodeDifference { get; private set; }

			// Token: 0x17000A5E RID: 2654
			// (get) Token: 0x06003D94 RID: 15764 RVA: 0x00032260 File Offset: 0x00030460
			// (set) Token: 0x06003D95 RID: 15765 RVA: 0x00032268 File Offset: 0x00030468
			public Microsoft.Xna.Framework.Vector2 NodeDirection { get; private set; }

			// Token: 0x06003D96 RID: 15766 RVA: 0x00109F00 File Offset: 0x00108100
			public void SetTarget(ObjectData target, Player reference)
			{
				if (target == null)
				{
					this.Target = null;
					return;
				}
				this.Target = target;
				this.PlayerTargetDiff = (target.GetBox2DPosition() - reference.PreBox2DPosition).Sanitize();
				if (reference.BotAINav.NodeA != null)
				{
					this.NodeDifference = (target.GetBox2DPosition() - reference.BotAINav.NodeA.Box2DPosition).Sanitize();
					this.NodeDirection = Microsoft.Xna.Framework.Vector2.Normalize(this.NodeDifference).Sanitize();
					return;
				}
				this.NodeDifference = Microsoft.Xna.Framework.Vector2.Zero;
				this.NodeDirection = Microsoft.Xna.Framework.Vector2.UnitY;
			}

			// Token: 0x040013B7 RID: 5047
			internal static GenericClassPool<Player.AIMoveData> Pool = new GenericClassPool<Player.AIMoveData>(() => new Player.AIMoveData(), 1, 0);
		}

		// Token: 0x02000354 RID: 852
		[Flags]
		private enum NodeAction
		{
			// Token: 0x040013BE RID: 5054
			None = 0,
			// Token: 0x040013BF RID: 5055
			Sprint = 1,
			// Token: 0x040013C0 RID: 5056
			Jump = 2,
			// Token: 0x040013C1 RID: 5057
			Dive = 4
		}

		// Token: 0x02000355 RID: 853
		private enum ElevatorStatus
		{
			// Token: 0x040013C3 RID: 5059
			Still,
			// Token: 0x040013C4 RID: 5060
			ComingCloser,
			// Token: 0x040013C5 RID: 5061
			GoingAway
		}

		// Token: 0x02000356 RID: 854
		private enum ElevatorDirection
		{
			// Token: 0x040013C7 RID: 5063
			Other,
			// Token: 0x040013C8 RID: 5064
			Vertical,
			// Token: 0x040013C9 RID: 5065
			Horizontal
		}

		// Token: 0x02000357 RID: 855
		private class BotAIKeyPressAction
		{
			// Token: 0x17000A5F RID: 2655
			// (get) Token: 0x06003D99 RID: 15769 RVA: 0x000322A3 File Offset: 0x000304A3
			// (set) Token: 0x06003D9A RID: 15770 RVA: 0x000322AB File Offset: 0x000304AB
			public int VirtualKey { get; private set; }

			// Token: 0x17000A60 RID: 2656
			// (get) Token: 0x06003D9B RID: 15771 RVA: 0x000322B4 File Offset: 0x000304B4
			// (set) Token: 0x06003D9C RID: 15772 RVA: 0x000322BC File Offset: 0x000304BC
			public Player.PressKeyType KeyType { get; set; }

			// Token: 0x06003D9D RID: 15773 RVA: 0x00002B4A File Offset: 0x00000D4A
			private BotAIKeyPressAction()
			{
			}

			// Token: 0x06003D9E RID: 15774 RVA: 0x00109F9C File Offset: 0x0010819C
			public static Player.BotAIKeyPressAction GetNew(int virtualKey, Player.PressKeyType keyType)
			{
				Player.BotAIKeyPressAction freeItem = Player.BotAIKeyPressAction.Pool.GetFreeItem();
				freeItem.VirtualKey = virtualKey;
				freeItem.KeyType = keyType;
				return freeItem;
			}

			// Token: 0x06003D9F RID: 15775 RVA: 0x000322C5 File Offset: 0x000304C5
			public void FlagFree()
			{
				Player.BotAIKeyPressAction.Pool.FlagFreeItem(this);
			}

			// Token: 0x040013CA RID: 5066
			public static GenericClassPool<Player.BotAIKeyPressAction> Pool = new GenericClassPool<Player.BotAIKeyPressAction>(() => new Player.BotAIKeyPressAction(), 5, 0);
		}

		// Token: 0x02000358 RID: 856
		private enum PressKeyType
		{
			// Token: 0x040013CF RID: 5071
			Hold,
			// Token: 0x040013D0 RID: 5072
			Tap,
			// Token: 0x040013D1 RID: 5073
			Release
		}

		// Token: 0x02000359 RID: 857
		internal abstract class PlayerActionCommandItem
		{
			// Token: 0x17000A61 RID: 2657
			// (get) Token: 0x06003DA2 RID: 15778 RVA: 0x00032304 File Offset: 0x00030504
			// (set) Token: 0x06003DA3 RID: 15779 RVA: 0x0003230C File Offset: 0x0003050C
			public PlayerCommandType Command { get; private set; }

			// Token: 0x17000A62 RID: 2658
			// (get) Token: 0x06003DA4 RID: 15780 RVA: 0x00032315 File Offset: 0x00030515
			// (set) Token: 0x06003DA5 RID: 15781 RVA: 0x0003231D File Offset: 0x0003051D
			public float DelayTime { get; set; }

			// Token: 0x17000A63 RID: 2659
			// (get) Token: 0x06003DA6 RID: 15782 RVA: 0x00032326 File Offset: 0x00030526
			// (set) Token: 0x06003DA7 RID: 15783 RVA: 0x0003232E File Offset: 0x0003052E
			public Microsoft.Xna.Framework.Vector2 WorldPosition { get; private set; }

			// Token: 0x17000A64 RID: 2660
			// (get) Token: 0x06003DA8 RID: 15784 RVA: 0x00032337 File Offset: 0x00030537
			// (set) Token: 0x06003DA9 RID: 15785 RVA: 0x0003233F File Offset: 0x0003053F
			public int TargetObjectID { get; private set; }

			// Token: 0x17000A65 RID: 2661
			// (get) Token: 0x06003DAA RID: 15786 RVA: 0x00032348 File Offset: 0x00030548
			// (set) Token: 0x06003DAB RID: 15787 RVA: 0x00032350 File Offset: 0x00030550
			public int FaceDirection { get; private set; }

			// Token: 0x17000A66 RID: 2662
			// (get) Token: 0x06003DAC RID: 15788 RVA: 0x00032359 File Offset: 0x00030559
			// (set) Token: 0x06003DAD RID: 15789 RVA: 0x00032361 File Offset: 0x00030561
			public bool Performed { get; protected set; }

			// Token: 0x17000A67 RID: 2663
			// (get) Token: 0x06003DAE RID: 15790 RVA: 0x0003236A File Offset: 0x0003056A
			// (set) Token: 0x06003DAF RID: 15791 RVA: 0x00032372 File Offset: 0x00030572
			public int CommandSequenceNr { get; private set; }

			// Token: 0x17000A68 RID: 2664
			// (get) Token: 0x06003DB0 RID: 15792 RVA: 0x0003237B File Offset: 0x0003057B
			public bool IsCompleted
			{
				get
				{
					return this.Performed && this.DelayTime <= 0f;
				}
			}

			// Token: 0x06003DB1 RID: 15793 RVA: 0x00109FC4 File Offset: 0x001081C4
			public PlayerActionCommandItem(ref PlayerCommand cmd, int cmdCount)
			{
				this.Command = cmd.Command;
				this.TargetObjectID = cmd.TargetObjectID;
				this.WorldPosition = cmd.WorldPosition.ToXNAVector2();
				this.DelayTime = (float)cmd.DelayTime;
				this.FaceDirection = (int)cmd.FaceDirection;
				this.Performed = false;
				this.CommandSequenceNr = cmdCount;
			}

			// Token: 0x06003DB2 RID: 15794 RVA: 0x0010A028 File Offset: 0x00108228
			public static Player.PlayerActionCommandItem CreateFromCommand(ref PlayerCommand cmd, int cmdCount)
			{
				switch (cmd.Command)
				{
				case PlayerCommandType.None:
					return new Player.PlayerActionCommandNone(ref cmd, cmdCount);
				case PlayerCommandType.StartMoveToPosition:
					return new Player.PlayerActionCommandStartMoveToPosition(ref cmd, cmdCount);
				case PlayerCommandType.WaitDestinationReached:
					return new Player.PlayerActionCommandWaitDestinationReached(ref cmd, cmdCount);
				case PlayerCommandType.Walk:
					return new Player.PlayerActionCommandWalk(ref cmd, cmdCount);
				case PlayerCommandType.Run:
					return new Player.PlayerActionCommandRun(ref cmd, cmdCount);
				case PlayerCommandType.Sprint:
					return new Player.PlayerActionCommandSprint(ref cmd, cmdCount);
				case PlayerCommandType.Jump:
					return new Player.PlayerActionCommandJump(ref cmd, cmdCount);
				case PlayerCommandType.WaitLand:
					return new Player.PlayerActionCommandWaitLand(ref cmd, cmdCount);
				case PlayerCommandType.Roll:
					return new Player.PlayerActionCommandRoll(ref cmd, cmdCount);
				case PlayerCommandType.Dive:
					return new Player.PlayerActionCommandDive(ref cmd, cmdCount);
				case PlayerCommandType.StopMove:
					return new Player.PlayerActionCommandStopMove(ref cmd, cmdCount);
				case PlayerCommandType.StartCrouch:
					return new Player.PlayerActionCommandStartCrouch(ref cmd, cmdCount);
				case PlayerCommandType.StopCrouch:
					return new Player.PlayerActionCommandStopCrouch(ref cmd, cmdCount);
				case PlayerCommandType.FaceAt:
					return new Player.PlayerActionCommandFaceAt(ref cmd, cmdCount);
				case PlayerCommandType.Grab:
					return new Player.PlayerActionCommandGrab(ref cmd, cmdCount, false);
				case PlayerCommandType.DrawHandgun:
					return new Player.PlayerActionCommandDrawHandgun(ref cmd, cmdCount);
				case PlayerCommandType.DrawRifle:
					return new Player.PlayerActionCommandDrawRifle(ref cmd, cmdCount);
				case PlayerCommandType.DrawMelee:
					return new Player.PlayerActionCommandDrawMelee(ref cmd, cmdCount);
				case PlayerCommandType.DrawThrowable:
					return new Player.PlayerActionCommandDrawThrowable(ref cmd, cmdCount);
				case PlayerCommandType.DrawPowerup:
					return new Player.PlayerActionCommandDrawPowerup(ref cmd, cmdCount);
				case PlayerCommandType.Sheath:
					return new Player.PlayerActionCommandSheath(ref cmd, cmdCount);
				case PlayerCommandType.Activate:
					return new Player.PlayerActionCommandActivate(ref cmd, cmdCount);
				case PlayerCommandType.Drop:
					return new Player.PlayerActionCommandDrop(ref cmd, cmdCount);
				case PlayerCommandType.EnterThrowingMode:
					return new Player.PlayerActionCommandEnterThrowingMode(ref cmd, cmdCount);
				case PlayerCommandType.ExitThrowingMode:
					return new Player.PlayerActionCommandExitThrowingMode(ref cmd, cmdCount);
				case PlayerCommandType.PrepareThrow:
					return new Player.PlayerActionCommandPrepareThrow(ref cmd, cmdCount);
				case PlayerCommandType.Throw:
					return new Player.PlayerActionCommandThrow(ref cmd, cmdCount);
				case PlayerCommandType.Reload:
					return new Player.PlayerActionCommandReload(ref cmd, cmdCount);
				case PlayerCommandType.Kick:
					return new Player.PlayerActionCommandKick(ref cmd, cmdCount);
				case PlayerCommandType.StartAimAt:
					return new Player.PlayerActionCommandStartAimAt(ref cmd, cmdCount, false);
				case PlayerCommandType.StopAim:
					return new Player.PlayerActionCommandStopAim(ref cmd, cmdCount);
				case PlayerCommandType.AttackOnce:
					return new Player.PlayerActionCommandAttackOnce(ref cmd, cmdCount);
				case PlayerCommandType.StartAttackRepeat:
					return new Player.PlayerActionCommandStartAttackRepeat(ref cmd, cmdCount);
				case PlayerCommandType.StopAttackRepeat:
					return new Player.PlayerActionCommandStopAttackRepeat(ref cmd, cmdCount);
				case PlayerCommandType.Block:
					return new Player.PlayerActionCommandBlock(ref cmd, cmdCount);
				case PlayerCommandType.StartTakeCover:
					return new Player.PlayerActionCommandStartTakeCover(ref cmd, cmdCount);
				case PlayerCommandType.DropPlatform:
					return new Player.PlayerActionCommandDropPlatform(ref cmd, cmdCount);
				case PlayerCommandType.GrabInfinite:
					return new Player.PlayerActionCommandGrab(ref cmd, cmdCount, true);
				case PlayerCommandType.StartAimAtPrecise:
					return new Player.PlayerActionCommandStartAimAt(ref cmd, cmdCount, true);
				case PlayerCommandType.DeathKneel:
					return new Player.PlayerActionCommandDeathKneel(ref cmd, cmdCount);
				case PlayerCommandType.DeathKneelInfinite:
					return new Player.PlayerActionCommandDeathKneelInfinite(ref cmd, cmdCount);
				case PlayerCommandType.StopDeathKneel:
					return new Player.PlayerActionCommandStopDeathKneel(ref cmd, cmdCount);
				case PlayerCommandType.Fall:
					return new Player.PlayerActionCommandFall(ref cmd, cmdCount);
				case PlayerCommandType.Stagger:
					return new Player.PlayerActionCommandStagger(ref cmd, cmdCount);
				case PlayerCommandType.StaggerInfinite:
					return new Player.PlayerActionCommandStaggerInfinite(ref cmd, cmdCount);
				case PlayerCommandType.StopStagger:
					return new Player.PlayerActionCommandStopStagger(ref cmd, cmdCount);
				case PlayerCommandType.StopAll:
					return new Player.PlayerActionCommandStopAll(ref cmd, cmdCount);
				case PlayerCommandType.StartClimbUp:
					return new Player.PlayerActionCommandStartClimbUp(ref cmd, cmdCount);
				case PlayerCommandType.StartClimbDown:
					return new Player.PlayerActionCommandStartClimbDown(ref cmd, cmdCount);
				case PlayerCommandType.WaitClimbReachedEnd:
					return new Player.PlayerActionCommandWaitClimbReachedEnd(ref cmd, cmdCount);
				case PlayerCommandType.StopClimb:
					return new Player.PlayerActionCommandStopClimb(ref cmd, cmdCount);
				case PlayerCommandType.ClimbRelease:
					return new Player.PlayerActionCommandClimbRelease(ref cmd, cmdCount);
				case PlayerCommandType.WaitEmptyAmmo:
					return new Player.PlayerActionCommandWaitEmptyAmmo(ref cmd, cmdCount);
				default:
					throw new NotImplementedException("CreateFromCommand unhandled for " + cmd.Command.ToString());
				}
			}

			// Token: 0x06003DB3 RID: 15795
			public abstract void Init(Player player);

			// Token: 0x06003DB4 RID: 15796
			public abstract void Update(Player player, float ms);

			// Token: 0x06003DB5 RID: 15797 RVA: 0x00032397 File Offset: 0x00030597
			public virtual void Dispose()
			{
				this.m_isDisposed = true;
			}

			// Token: 0x17000A69 RID: 2665
			// (get) Token: 0x06003DB6 RID: 15798 RVA: 0x000323A0 File Offset: 0x000305A0
			public bool IsDisposed
			{
				get
				{
					return this.m_isDisposed;
				}
			}

			// Token: 0x06003DB7 RID: 15799 RVA: 0x0010A2E4 File Offset: 0x001084E4
			public int GetTargetDirection(Player player)
			{
				if (this.TargetObjectID != 0 && player.GameWorld != null)
				{
					ObjectData objectDataByID = player.GameWorld.GetObjectDataByID(this.TargetObjectID);
					if (objectDataByID is IObjectTranslucencePointer)
					{
						ObjectData translucenceObject = ((IObjectTranslucencePointer)objectDataByID).GetTranslucenceObject();
						if (translucenceObject != null)
						{
							return player.DirectionFaceAt(translucenceObject);
						}
					}
					return player.DirectionFaceAt(objectDataByID);
				}
				if (this.FaceDirection == 1)
				{
					return 1;
				}
				if (this.FaceDirection == -1)
				{
					return -1;
				}
				return player.LastDirectionX;
			}

			// Token: 0x040013D2 RID: 5074
			private bool m_isDisposed;
		}

		// Token: 0x0200035A RID: 858
		internal class PlayerActionCommandNone : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DB8 RID: 15800 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandNone(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DB9 RID: 15801 RVA: 0x000323B2 File Offset: 0x000305B2
			public override void Init(Player player)
			{
				base.Performed = true;
			}

			// Token: 0x06003DBA RID: 15802 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x0200035B RID: 859
		internal class PlayerActionCommandStartMoveToPosition : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DBB RID: 15803 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStartMoveToPosition(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DBC RID: 15804 RVA: 0x000323BB File Offset: 0x000305BB
			public override void Init(Player player)
			{
				player.CommandData.RunToPositionData.TeleportCounter = player.TeleportCounter;
			}

			// Token: 0x06003DBD RID: 15805 RVA: 0x0010A358 File Offset: 0x00108558
			public override void Update(Player player, float ms)
			{
				ObjectData objectDataByID = player.GameWorld.GetObjectDataByID(base.TargetObjectID);
				player.CommandData.RunToPosition((objectDataByID != null) ? objectDataByID.GetWorldCenterPosition() : base.WorldPosition, base.FaceDirection);
				base.Performed = true;
			}
		}

		// Token: 0x0200035C RID: 860
		internal class PlayerActionCommandWaitDestinationReached : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DBE RID: 15806 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandWaitDestinationReached(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DBF RID: 15807 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DC0 RID: 15808 RVA: 0x000323D3 File Offset: 0x000305D3
			public override void Update(Player player, float ms)
			{
				if (!player.CommandData.IsRunningToPosition)
				{
					base.Performed = true;
				}
			}
		}

		// Token: 0x0200035D RID: 861
		internal class PlayerActionCommandWalk : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DC1 RID: 15809 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandWalk(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DC2 RID: 15810 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DC3 RID: 15811 RVA: 0x000323E9 File Offset: 0x000305E9
			public override void Update(Player player, float ms)
			{
				player.CommandData.RunToPositionData.Movement = Player.CommandDataContainer.MoveMode.Walk;
				base.Performed = true;
			}
		}

		// Token: 0x0200035E RID: 862
		internal class PlayerActionCommandRun : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DC4 RID: 15812 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandRun(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DC5 RID: 15813 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DC6 RID: 15814 RVA: 0x00032403 File Offset: 0x00030603
			public override void Update(Player player, float ms)
			{
				player.CommandData.RunToPositionData.Movement = Player.CommandDataContainer.MoveMode.Run;
				base.Performed = true;
			}
		}

		// Token: 0x0200035F RID: 863
		internal class PlayerActionCommandSprint : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DC7 RID: 15815 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandSprint(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DC8 RID: 15816 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DC9 RID: 15817 RVA: 0x0003241D File Offset: 0x0003061D
			public override void Update(Player player, float ms)
			{
				player.CommandData.RunToPositionData.Movement = Player.CommandDataContainer.MoveMode.Sprint;
				base.Performed = true;
			}
		}

		// Token: 0x02000360 RID: 864
		internal class PlayerActionCommandJump : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DCA RID: 15818 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandJump(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DCB RID: 15819 RVA: 0x00032437 File Offset: 0x00030637
			public override void Init(Player player)
			{
				this.m_originalJumps = player.Statisticts.TotalJumps;
				if (player.Climbing)
				{
					this.m_commandState = 1;
				}
			}

			// Token: 0x06003DCC RID: 15820 RVA: 0x0010A3A0 File Offset: 0x001085A0
			public override void Update(Player player, float ms)
			{
				if (this.m_commandState == 1)
				{
					if (!player.Climbing)
					{
						this.m_originalJumps = -1;
					}
					else
					{
						player.KeyAction(4, Player.PressKeyType.Tap);
					}
				}
				else
				{
					player.KeyAction(19, Player.PressKeyType.Tap);
				}
				if (this.m_originalJumps < player.Statisticts.TotalJumps)
				{
					base.Performed = true;
				}
			}

			// Token: 0x040013DA RID: 5082
			private int m_commandState;

			// Token: 0x040013DB RID: 5083
			private int m_originalJumps;
		}

		// Token: 0x02000361 RID: 865
		internal class PlayerActionCommandWaitLand : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DCD RID: 15821 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandWaitLand(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DCE RID: 15822 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DCF RID: 15823 RVA: 0x00032459 File Offset: 0x00030659
			public override void Update(Player player, float ms)
			{
				if (player.StandingOnGround)
				{
					base.Performed = true;
				}
			}
		}

		// Token: 0x02000362 RID: 866
		internal class PlayerActionCommandRoll : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DD0 RID: 15824 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandRoll(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DD1 RID: 15825 RVA: 0x0003246A File Offset: 0x0003066A
			public override void Init(Player player)
			{
				this.m_currRollCount = player.Statisticts.TotalRolls;
			}

			// Token: 0x06003DD2 RID: 15826 RVA: 0x0010A3F4 File Offset: 0x001085F4
			public override void Update(Player player, float ms)
			{
				if (player.CanRoll())
				{
					int targetDirection = base.GetTargetDirection(player);
					player.KeyAction(20, Player.PressKeyType.Hold);
					player.KeyActionDirection(targetDirection, Player.PressKeyType.Hold);
				}
				if (this.m_currRollCount < player.Statisticts.TotalRolls)
				{
					base.Performed = true;
				}
			}

			// Token: 0x040013DC RID: 5084
			private int m_currRollCount;
		}

		// Token: 0x02000363 RID: 867
		internal class PlayerActionCommandDive : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DD3 RID: 15827 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandDive(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DD4 RID: 15828 RVA: 0x0003247D File Offset: 0x0003067D
			public override void Init(Player player)
			{
				this.m_currDiveCount = player.Statisticts.TotalDives;
			}

			// Token: 0x06003DD5 RID: 15829 RVA: 0x0010A43C File Offset: 0x0010863C
			public override void Update(Player player, float ms)
			{
				if (!player.TimeSequence.StuntOnCooldown)
				{
					int targetDirection = base.GetTargetDirection(player);
					player.KeyActionDirection(targetDirection, Player.PressKeyType.Hold);
					if (player.CanActivateSprint() | player.Sprinting)
					{
						player.KeyAction(18, Player.PressKeyType.Hold);
					}
					if (player.CanDive())
					{
						player.KeyActionRollDive();
					}
				}
				if (this.m_currDiveCount < player.Statisticts.TotalDives)
				{
					base.Performed = true;
				}
			}

			// Token: 0x040013DD RID: 5085
			private int m_currDiveCount;
		}

		// Token: 0x02000364 RID: 868
		internal class PlayerActionCommandStopMove : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DD6 RID: 15830 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStopMove(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DD7 RID: 15831 RVA: 0x00032490 File Offset: 0x00030690
			public override void Init(Player player)
			{
				player.CommandData.RunToPositionData.Enabled = false;
				player.KeyAction(2, Player.PressKeyType.Release);
				player.KeyAction(3, Player.PressKeyType.Release);
				player.KeyAction(21, Player.PressKeyType.Release);
				player.KeyAction(18, Player.PressKeyType.Release);
				base.Performed = true;
			}

			// Token: 0x06003DD8 RID: 15832 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x02000365 RID: 869
		internal class PlayerActionCommandStartCrouch : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DD9 RID: 15833 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStartCrouch(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DDA RID: 15834 RVA: 0x000324CC File Offset: 0x000306CC
			public override void Init(Player player)
			{
				player.CommandData.ContinousCrouch = true;
				player.KeyAction(20, Player.PressKeyType.Hold);
				base.Performed = true;
			}

			// Token: 0x06003DDB RID: 15835 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x02000366 RID: 870
		internal class PlayerActionCommandStopCrouch : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DDC RID: 15836 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStopCrouch(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DDD RID: 15837 RVA: 0x000324EA File Offset: 0x000306EA
			public override void Init(Player player)
			{
				player.CommandData.ContinousCrouch = false;
				player.KeyAction(20, Player.PressKeyType.Release);
				base.Performed = true;
			}

			// Token: 0x06003DDE RID: 15838 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x02000367 RID: 871
		internal class PlayerActionCommandFaceAt : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DDF RID: 15839 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandFaceAt(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DE0 RID: 15840 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DE1 RID: 15841 RVA: 0x0010A4A8 File Offset: 0x001086A8
			public override void Update(Player player, float ms)
			{
				int targetDirection = base.GetTargetDirection(player);
				if (player.LastDirectionX == targetDirection)
				{
					base.Performed = true;
					return;
				}
				player.CommandData.ContinousFaceDirection = targetDirection;
			}
		}

		// Token: 0x02000368 RID: 872
		internal class PlayerActionCommandGrab : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DE2 RID: 15842 RVA: 0x00032508 File Offset: 0x00030708
			public PlayerActionCommandGrab(ref PlayerCommand cmd, int cmdCount, bool isInfinite) : base(ref cmd, cmdCount)
			{
				this.m_isInfiniteGrab = isInfinite;
			}

			// Token: 0x06003DE3 RID: 15843 RVA: 0x00032519 File Offset: 0x00030719
			public override void Init(Player player)
			{
				this.m_currentGrabChargesCount = player.Statisticts.TotalGrabCharges;
			}

			// Token: 0x06003DE4 RID: 15844 RVA: 0x0010A4DC File Offset: 0x001086DC
			public override void Update(Player player, float ms)
			{
				if (this.m_currentCommandState == 0)
				{
					int targetDirection = base.GetTargetDirection(player);
					if (player.LastDirectionX == targetDirection)
					{
						this.m_currentCommandState = 1;
					}
					else
					{
						player.CommandData.ContinousFaceDirection = targetDirection;
					}
				}
				if (this.m_currentCommandState == 1)
				{
					if (player.CanStartGrab())
					{
						player.KeyAction(22, Player.PressKeyType.Tap);
					}
					if (player.IsPerformingGrabAction)
					{
						this.m_currentCommandState = 2;
						player.KeyAction(22, Player.PressKeyType.Release);
					}
				}
				if (this.m_currentCommandState == 2 && this.m_currentGrabChargesCount < player.Statisticts.TotalGrabCharges && !player.GrabCharging && !player.GrabTelegraphing)
				{
					if (player.IsHoldingPlayerInGrab && this.m_isInfiniteGrab)
					{
						player.CommandData.ContinousGrab = true;
					}
					base.Performed = true;
				}
			}

			// Token: 0x040013DE RID: 5086
			private int m_currentGrabChargesCount;

			// Token: 0x040013DF RID: 5087
			private int m_currentCommandState;

			// Token: 0x040013E0 RID: 5088
			private bool m_isInfiniteGrab;
		}

		// Token: 0x02000369 RID: 873
		internal class PlayerActionCommandDrawHandgun : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DE5 RID: 15845 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandDrawHandgun(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DE6 RID: 15846 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DE7 RID: 15847 RVA: 0x0010A598 File Offset: 0x00108798
			public override void Update(Player player, float ms)
			{
				if (player.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Handgun && player.CurrentAction != PlayerAction.DrawWeapon)
				{
					base.Performed = true;
				}
				else if (player.CurrentHandgunWeapon == null)
				{
					base.Performed = true;
				}
				else
				{
					player.KeyAction(9, Player.PressKeyType.Tap);
				}
				if (base.Performed)
				{
					player.KeyAction(9, Player.PressKeyType.Release);
				}
			}
		}

		// Token: 0x0200036A RID: 874
		internal class PlayerActionCommandDrawRifle : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DE8 RID: 15848 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandDrawRifle(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DE9 RID: 15849 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DEA RID: 15850 RVA: 0x0010A5EC File Offset: 0x001087EC
			public override void Update(Player player, float ms)
			{
				if (player.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Rifle && player.CurrentAction != PlayerAction.DrawWeapon)
				{
					base.Performed = true;
				}
				else if (player.CurrentRifleWeapon == null)
				{
					base.Performed = true;
				}
				else
				{
					player.KeyAction(10, Player.PressKeyType.Tap);
				}
				if (base.Performed)
				{
					player.KeyAction(10, Player.PressKeyType.Release);
				}
			}
		}

		// Token: 0x0200036B RID: 875
		internal class PlayerActionCommandDrawMelee : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DEB RID: 15851 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandDrawMelee(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DEC RID: 15852 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DED RID: 15853 RVA: 0x0010A640 File Offset: 0x00108840
			public override void Update(Player player, float ms)
			{
				if (player.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Melee && player.CurrentAction != PlayerAction.DrawWeapon)
				{
					base.Performed = true;
				}
				else if (player.CurrentMeleeWeapon == null)
				{
					base.Performed = true;
				}
				else
				{
					player.KeyAction(8, Player.PressKeyType.Tap);
				}
				if (base.Performed)
				{
					player.KeyAction(8, Player.PressKeyType.Release);
				}
			}
		}

		// Token: 0x0200036C RID: 876
		internal class PlayerActionCommandDrawThrowable : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DEE RID: 15854 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandDrawThrowable(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DEF RID: 15855 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DF0 RID: 15856 RVA: 0x0010A694 File Offset: 0x00108894
			public override void Update(Player player, float ms)
			{
				if (player.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown && player.CurrentAction != PlayerAction.DrawWeapon)
				{
					base.Performed = true;
				}
				else if (player.CurrentThrownWeapon == null)
				{
					base.Performed = true;
				}
				else
				{
					player.KeyAction(11, Player.PressKeyType.Tap);
				}
				if (base.Performed)
				{
					player.KeyAction(11, Player.PressKeyType.Release);
				}
			}
		}

		// Token: 0x0200036D RID: 877
		internal class PlayerActionCommandDrawPowerup : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DF1 RID: 15857 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandDrawPowerup(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DF2 RID: 15858 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DF3 RID: 15859 RVA: 0x0010A6E8 File Offset: 0x001088E8
			public override void Update(Player player, float ms)
			{
				if (player.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Powerup && player.CurrentAction != PlayerAction.DrawWeapon)
				{
					base.Performed = true;
				}
				else if (player.CurrentPowerupItem == null)
				{
					base.Performed = true;
				}
				else
				{
					player.KeyAction(12, Player.PressKeyType.Tap);
				}
				if (base.Performed)
				{
					player.KeyAction(12, Player.PressKeyType.Release);
				}
			}
		}

		// Token: 0x0200036E RID: 878
		internal class PlayerActionCommandSheath : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DF4 RID: 15860 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandSheath(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DF5 RID: 15861 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DF6 RID: 15862 RVA: 0x0003252C File Offset: 0x0003072C
			public override void Update(Player player, float ms)
			{
				if (player.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.NONE)
				{
					player.KeyAction(13, Player.PressKeyType.Tap);
				}
				if (player.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE)
				{
					player.KeyAction(13, Player.PressKeyType.Release);
					base.Performed = true;
				}
			}
		}

		// Token: 0x0200036F RID: 879
		internal class PlayerActionCommandActivate : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DF7 RID: 15863 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandActivate(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DF8 RID: 15864 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DF9 RID: 15865 RVA: 0x0010A73C File Offset: 0x0010893C
			public override void Update(Player player, float ms)
			{
				if (player.Disabled)
				{
					this.m_currentState = 0;
					return;
				}
				if (this.m_currentState == 0)
				{
					player.KeyAction(16, Player.PressKeyType.Release);
					this.m_currentState++;
					return;
				}
				if (this.m_currentState == 1)
				{
					player.KeyAction(16, Player.PressKeyType.Hold);
					this.m_currentState++;
					return;
				}
				player.KeyAction(16, Player.PressKeyType.Release);
				this.m_currentState++;
				base.Performed = true;
			}

			// Token: 0x040013E1 RID: 5089
			private int m_currentState;
		}

		// Token: 0x02000370 RID: 880
		internal class PlayerActionCommandDrop : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DFA RID: 15866 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandDrop(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DFB RID: 15867 RVA: 0x00032559 File Offset: 0x00030759
			public override void Init(Player player)
			{
				if (player.IsHoldingPlayerInGrab)
				{
					this.m_commandState = 1;
				}
			}

			// Token: 0x06003DFC RID: 15868 RVA: 0x0010A7B8 File Offset: 0x001089B8
			public override void Update(Player player, float ms)
			{
				if (this.m_commandState != 0)
				{
					if (this.m_commandState == 1)
					{
						if (player.IsHoldingPlayerInGrab)
						{
							player.KeyAction(17, Player.PressKeyType.Tap);
							return;
						}
						player.KeyAction(17, Player.PressKeyType.Release);
						base.Performed = true;
					}
					return;
				}
				if (player.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.NONE)
				{
					player.KeyAction(17, Player.PressKeyType.Hold);
					return;
				}
				player.KeyAction(17, Player.PressKeyType.Release);
				base.Performed = true;
			}

			// Token: 0x040013E2 RID: 5090
			private int m_commandState;
		}

		// Token: 0x02000371 RID: 881
		internal class PlayerActionCommandEnterThrowingMode : Player.PlayerActionCommandItem
		{
			// Token: 0x06003DFD RID: 15869 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandEnterThrowingMode(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003DFE RID: 15870 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003DFF RID: 15871 RVA: 0x0010A81C File Offset: 0x00108A1C
			public override void Update(Player player, float ms)
			{
				if (player.InThrowingMode && !player.ThrowingModeToggleQueued)
				{
					player.KeyAction(17, Player.PressKeyType.Release);
					base.Performed = true;
					return;
				}
				if (player.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.NONE)
				{
					player.KeyAction(17, Player.PressKeyType.Release);
					base.Performed = true;
					return;
				}
				if (!player.ThrowingModeToggleQueued)
				{
					player.KeyAction(17, Player.PressKeyType.Tap);
					return;
				}
				player.KeyAction(17, Player.PressKeyType.Release);
			}
		}

		// Token: 0x02000372 RID: 882
		internal class PlayerActionCommandExitThrowingMode : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E00 RID: 15872 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandExitThrowingMode(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E01 RID: 15873 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003E02 RID: 15874 RVA: 0x0010A880 File Offset: 0x00108A80
			public override void Update(Player player, float ms)
			{
				if (!player.InThrowingMode && !player.ThrowingModeToggleQueued)
				{
					player.KeyAction(17, Player.PressKeyType.Release);
					base.Performed = true;
					return;
				}
				if (player.InThrowingMode && !player.ThrowingModeToggleQueued && !player.ExitingThrowingMode)
				{
					player.KeyAction(17, Player.PressKeyType.Tap);
					return;
				}
				player.KeyAction(17, Player.PressKeyType.Release);
			}
		}

		// Token: 0x02000373 RID: 883
		internal class PlayerActionCommandPrepareThrow : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E03 RID: 15875 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandPrepareThrow(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E04 RID: 15876 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003E05 RID: 15877 RVA: 0x0010A8DC File Offset: 0x00108ADC
			public override void Update(Player player, float ms)
			{
				if (!player.Disabled)
				{
					if (player.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown || player.InThrowingMode)
					{
						player.CommandData.ContinousPrepareThrow = true;
						player.KeyAction(4, Player.PressKeyType.Hold);
						base.Performed = true;
						return;
					}
					if (!player.ThrowingModeToggleQueued)
					{
						base.Performed = true;
					}
				}
			}
		}

		// Token: 0x02000374 RID: 884
		internal class PlayerActionCommandThrow : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E06 RID: 15878 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandThrow(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E07 RID: 15879 RVA: 0x0003256A File Offset: 0x0003076A
			public override void Init(Player player)
			{
				if (player.IsGrabbing)
				{
					this.m_commandState = 2;
				}
			}

			// Token: 0x06003E08 RID: 15880 RVA: 0x0010A930 File Offset: 0x00108B30
			public override void Update(Player player, float ms)
			{
				if (player.ThrowCharging && player.VirtualKeyboard.PressingKey(4, false))
				{
					player.CommandData.ContinousPrepareThrow = false;
					player.KeyAction(4, Player.PressKeyType.Release);
					base.Performed = true;
					return;
				}
				if (this.m_commandState == 0)
				{
					if (!player.Disabled)
					{
						if (player.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown || player.InThrowingMode)
						{
							player.CommandData.ContinousPrepareThrow = true;
							player.KeyAction(4, Player.PressKeyType.Hold);
							this.m_commandState++;
							return;
						}
						if (!player.ThrowingModeToggleQueued)
						{
							player.CommandData.ContinousPrepareThrow = false;
							player.KeyAction(4, Player.PressKeyType.Release);
							base.Performed = true;
							return;
						}
					}
				}
				else if (this.m_commandState == 1)
				{
					if (player.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Thrown && !player.InThrowingMode)
					{
						player.CommandData.ContinousPrepareThrow = false;
						player.KeyAction(4, Player.PressKeyType.Release);
						base.Performed = true;
						return;
					}
				}
				else if (this.m_commandState == 2)
				{
					if (!player.IsGrabbing)
					{
						player.CommandData.ContinousPrepareThrow = false;
						player.KeyAction(5, Player.PressKeyType.Release);
						base.Performed = true;
						return;
					}
					player.KeyAction(5, Player.PressKeyType.Tap);
				}
			}

			// Token: 0x040013E3 RID: 5091
			private int m_commandState;
		}

		// Token: 0x02000375 RID: 885
		internal class PlayerActionCommandReload : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E09 RID: 15881 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandReload(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E0A RID: 15882 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003E0B RID: 15883 RVA: 0x0010AA4C File Offset: 0x00108C4C
			public override void Update(Player player, float ms)
			{
				if (!player.Disabled)
				{
					RWeapon currentRangedWeaponInUse = player.GetCurrentRangedWeaponInUse();
					if (currentRangedWeaponInUse != null && currentRangedWeaponInUse.CanBeReloaded(player))
					{
						player.KeyAction(14, Player.PressKeyType.Tap);
						return;
					}
					if (!player.Reloading)
					{
						player.KeyAction(14, Player.PressKeyType.Release);
						base.Performed = true;
					}
				}
			}
		}

		// Token: 0x02000376 RID: 886
		internal class PlayerActionCommandKick : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E0C RID: 15884 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandKick(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E0D RID: 15885 RVA: 0x0003257B File Offset: 0x0003077B
			public override void Init(Player player)
			{
				this.m_originalKickCount = player.Statisticts.TotalKickSwings;
			}

			// Token: 0x06003E0E RID: 15886 RVA: 0x0010AA98 File Offset: 0x00108C98
			public override void Update(Player player, float ms)
			{
				if (this.m_commandState == 0)
				{
					player.KeyAction(15, Player.PressKeyType.Tap);
					if (this.m_originalKickCount < player.Statisticts.TotalKickSwings)
					{
						player.KeyAction(15, Player.PressKeyType.Release);
						this.m_commandState = 1;
						return;
					}
				}
				else if (this.m_commandState == 1 && player.CurrentAction != PlayerAction.Kick)
				{
					player.KeyAction(15, Player.PressKeyType.Release);
					base.Performed = true;
				}
			}

			// Token: 0x040013E4 RID: 5092
			private int m_commandState;

			// Token: 0x040013E5 RID: 5093
			private int m_originalKickCount;
		}

		// Token: 0x02000377 RID: 887
		internal class PlayerActionCommandStartAimAt : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E0F RID: 15887 RVA: 0x0003258E File Offset: 0x0003078E
			public PlayerActionCommandStartAimAt(ref PlayerCommand cmd, int cmdCount, bool isPrecise) : base(ref cmd, cmdCount)
			{
				this.m_isPrecise = isPrecise;
			}

			// Token: 0x06003E10 RID: 15888 RVA: 0x0010AB00 File Offset: 0x00108D00
			public override void Init(Player player)
			{
				player.CommandData.AimAtData.Enabled = true;
				player.CommandData.AimAtData.TargetID = base.TargetObjectID;
				player.CommandData.AimAtData.TargetWorldPosition = base.WorldPosition;
				player.CommandData.AimAtData.AccuracyCone = (this.m_isPrecise ? 0f : 0.25132743f);
				base.Performed = true;
			}

			// Token: 0x06003E11 RID: 15889 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}

			// Token: 0x040013E6 RID: 5094
			private bool m_isPrecise;
		}

		// Token: 0x02000378 RID: 888
		internal class PlayerActionCommandStopAim : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E12 RID: 15890 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStopAim(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E13 RID: 15891 RVA: 0x0010AB78 File Offset: 0x00108D78
			public override void Init(Player player)
			{
				if (player.CommandData.AimAtData.Enabled)
				{
					player.CommandData.AimAtData.Enabled = false;
					player.KeyAction(5, Player.PressKeyType.Release);
					player.KeyAction(26, Player.PressKeyType.Release);
					player.KeyAction(0, Player.PressKeyType.Release);
					player.KeyAction(1, Player.PressKeyType.Release);
					player.KeyAction(2, Player.PressKeyType.Release);
					player.KeyAction(3, Player.PressKeyType.Release);
					player.KeyAction(21, Player.PressKeyType.Release);
				}
				base.Performed = true;
			}

			// Token: 0x06003E14 RID: 15892 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x02000379 RID: 889
		internal class PlayerActionCommandAttackOnce : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E15 RID: 15893 RVA: 0x0003259F File Offset: 0x0003079F
			public PlayerActionCommandAttackOnce(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E16 RID: 15894 RVA: 0x0010ABEC File Offset: 0x00108DEC
			public override void Init(Player player)
			{
				if (player.InThrowingMode)
				{
					this.m_commandState = Player.PlayerActionCommandAttackOnce.CommandState.ThrowingMode;
					return;
				}
				if (player.CurrentWeaponDrawn == SFD.Weapons.WeaponItemType.Thrown)
				{
					this.m_commandState = Player.PlayerActionCommandAttackOnce.CommandState.Thrown;
					this.m_originalCount = player.Statisticts.TotalItemsThrown;
					return;
				}
				if (player.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee)
				{
					if (player.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.NONE)
					{
						if (player.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Handgun)
						{
							if (player.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Rifle)
							{
								this.m_commandState = Player.PlayerActionCommandAttackOnce.CommandState.Other;
								return;
							}
						}
						this.m_commandState = Player.PlayerActionCommandAttackOnce.CommandState.Ranged;
						this.m_originalCount = player.Statisticts.TotalShotsFired;
						this.m_originalEmptyGunsFireAttemts = player.Statisticts.TotalEmptyGunsFireAttemts;
						return;
					}
				}
				this.m_commandState = Player.PlayerActionCommandAttackOnce.CommandState.Melee;
				this.m_originalCount = player.Statisticts.TotalMeleeAttackSwings;
			}

			// Token: 0x06003E17 RID: 15895 RVA: 0x0010ACA0 File Offset: 0x00108EA0
			public override void Update(Player player, float ms)
			{
				if (player.VirtualKeyboard.PressingKey(4, false))
				{
					player.KeyAction(4, Player.PressKeyType.Release);
					if (this.m_commandState == Player.PlayerActionCommandAttackOnce.CommandState.OtherTapDone)
					{
						base.Performed = true;
					}
				}
				else
				{
					player.KeyAction(4, Player.PressKeyType.Hold);
					if (this.m_commandState == Player.PlayerActionCommandAttackOnce.CommandState.Other)
					{
						this.m_commandState = Player.PlayerActionCommandAttackOnce.CommandState.OtherTapDone;
					}
				}
				if (this.m_commandState == Player.PlayerActionCommandAttackOnce.CommandState.ThrowingMode)
				{
					if (!player.InThrowingMode)
					{
						base.Performed = true;
					}
				}
				else if (this.m_commandState == Player.PlayerActionCommandAttackOnce.CommandState.Thrown)
				{
					TWeapon currentThrownWeapon = player.CurrentThrownWeapon;
					if (currentThrownWeapon == null || player.Statisticts.TotalItemsThrown > this.m_originalCount)
					{
						base.Performed = true;
					}
				}
				else if (this.m_commandState == Player.PlayerActionCommandAttackOnce.CommandState.Melee)
				{
					if (player.Statisticts.TotalMeleeAttackSwings > this.m_originalCount)
					{
						base.Performed = true;
					}
				}
				else if (this.m_commandState == Player.PlayerActionCommandAttackOnce.CommandState.Ranged)
				{
					RWeapon currentRangedWeaponInUse = player.GetCurrentRangedWeaponInUse();
					if (currentRangedWeaponInUse == null || player.Statisticts.TotalShotsFired > this.m_originalCount || player.Statisticts.TotalEmptyGunsFireAttemts > this.m_originalEmptyGunsFireAttemts)
					{
						base.Performed = true;
					}
				}
				if (base.Performed)
				{
					player.KeyAction(4, Player.PressKeyType.Release);
				}
			}

			// Token: 0x040013E7 RID: 5095
			private Player.PlayerActionCommandAttackOnce.CommandState m_commandState = Player.PlayerActionCommandAttackOnce.CommandState.Other;

			// Token: 0x040013E8 RID: 5096
			private int m_originalCount;

			// Token: 0x040013E9 RID: 5097
			private int m_originalEmptyGunsFireAttemts;

			// Token: 0x0200037A RID: 890
			private enum CommandState
			{
				// Token: 0x040013EB RID: 5099
				ThrowingMode,
				// Token: 0x040013EC RID: 5100
				Thrown,
				// Token: 0x040013ED RID: 5101
				Melee,
				// Token: 0x040013EE RID: 5102
				Ranged,
				// Token: 0x040013EF RID: 5103
				Other,
				// Token: 0x040013F0 RID: 5104
				OtherTapDone
			}
		}

		// Token: 0x0200037B RID: 891
		internal class PlayerActionCommandStartAttackRepeat : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E18 RID: 15896 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStartAttackRepeat(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E19 RID: 15897 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003E1A RID: 15898 RVA: 0x000325B0 File Offset: 0x000307B0
			public override void Update(Player player, float ms)
			{
				player.CommandData.ContinousAttack = true;
				base.Performed = true;
			}
		}

		// Token: 0x0200037C RID: 892
		internal class PlayerActionCommandStopAttackRepeat : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E1B RID: 15899 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStopAttackRepeat(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E1C RID: 15900 RVA: 0x000325C5 File Offset: 0x000307C5
			public override void Init(Player player)
			{
				player.CommandData.ContinousAttack = false;
				player.KeyAction(4, Player.PressKeyType.Release);
				player.KeyAction(14, Player.PressKeyType.Release);
				base.Performed = true;
			}

			// Token: 0x06003E1D RID: 15901 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x0200037D RID: 893
		internal class PlayerActionCommandBlock : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E1E RID: 15902 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandBlock(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E1F RID: 15903 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003E20 RID: 15904 RVA: 0x0010ADB4 File Offset: 0x00108FB4
			public override void Update(Player player, float ms)
			{
				if (this.m_commandState == 0)
				{
					if (player.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.NONE)
					{
						if (player.CurrentWeaponDrawn != SFD.Weapons.WeaponItemType.Melee)
						{
							base.Performed = true;
							player.KeyAction(5, Player.PressKeyType.Release);
							return;
						}
					}
					player.KeyAction(5, Player.PressKeyType.Tap);
					if (player.CurrentAction == PlayerAction.Block)
					{
						this.m_commandState = 1;
						player.KeyAction(5, Player.PressKeyType.Release);
						return;
					}
				}
				else if (this.m_commandState == 1 && player.CurrentAction != PlayerAction.Block)
				{
					base.Performed = true;
					player.KeyAction(5, Player.PressKeyType.Release);
				}
			}

			// Token: 0x040013F1 RID: 5105
			private int m_commandState;
		}

		// Token: 0x0200037E RID: 894
		internal class PlayerActionCommandStartTakeCover : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E21 RID: 15905 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStartTakeCover(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E22 RID: 15906 RVA: 0x000325EB File Offset: 0x000307EB
			public override void Init(Player player)
			{
				this.m_prevPos = player.Position;
				if (base.TargetObjectID != 0)
				{
					this.m_coverObject = player.GameWorld.GetObjectDataByID(base.TargetObjectID);
				}
				if (this.m_coverObject == null)
				{
					base.Performed = true;
				}
			}

			// Token: 0x06003E23 RID: 15907 RVA: 0x0010AE34 File Offset: 0x00109034
			public override void Update(Player player, float ms)
			{
				if (this.m_coverObject != null && !this.m_coverObject.IsDisposed)
				{
					if (!player.TakingCover || player.CoverObject != this.m_coverObject)
					{
						Microsoft.Xna.Framework.Vector2 vector = this.m_coverObject.GetWorldPosition() - player.Position;
						if (vector.X < -1f)
						{
							if (player.Movement == PlayerMovement.Idle)
							{
								if (this.m_tapState == 0)
								{
									player.KeyActionDirection(0, Player.PressKeyType.Hold);
									this.m_tapState = 1;
								}
								else if (this.m_tapState == 1)
								{
									player.KeyActionDirection(-1, Player.PressKeyType.Hold);
									this.m_tapState = 0;
								}
							}
							else
							{
								player.KeyActionDirection(-1, Player.PressKeyType.Hold);
								this.m_tapState = 0;
							}
						}
						else if (vector.X > 1f)
						{
							if (player.Movement == PlayerMovement.Idle)
							{
								if (this.m_tapState == 0)
								{
									player.KeyActionDirection(0, Player.PressKeyType.Hold);
									this.m_tapState = 1;
								}
								else if (this.m_tapState == 1)
								{
									player.KeyActionDirection(1, Player.PressKeyType.Hold);
									this.m_tapState = 0;
								}
							}
							else
							{
								player.KeyActionDirection(1, Player.PressKeyType.Hold);
								this.m_tapState = 0;
							}
						}
						else
						{
							player.KeyActionDirection(0, Player.PressKeyType.Hold);
							this.m_coverObject = null;
						}
						if (Math.Abs(this.m_prevPos.X - player.Position.X) < 1f)
						{
							this.m_samePosTime += ms;
							if (this.m_samePosTime > 1000f)
							{
								this.m_coverObject = null;
								return;
							}
						}
						else
						{
							this.m_prevPos = player.Position;
							this.m_samePosTime -= ms;
							if (this.m_samePosTime < 0f)
							{
								this.m_samePosTime = 0f;
							}
						}
						return;
					}
				}
				this.m_coverObject = null;
				base.Performed = true;
				player.KeyAction(2, Player.PressKeyType.Release);
				player.KeyAction(3, Player.PressKeyType.Release);
			}

			// Token: 0x06003E24 RID: 15908 RVA: 0x00032627 File Offset: 0x00030827
			public override void Dispose()
			{
				this.m_coverObject = null;
				base.Dispose();
			}

			// Token: 0x040013F2 RID: 5106
			private float m_samePosTime;

			// Token: 0x040013F3 RID: 5107
			private Microsoft.Xna.Framework.Vector2 m_prevPos;

			// Token: 0x040013F4 RID: 5108
			private int m_tapState;

			// Token: 0x040013F5 RID: 5109
			private ObjectData m_coverObject;
		}

		// Token: 0x0200037F RID: 895
		internal class PlayerActionCommandDropPlatform : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E25 RID: 15909 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandDropPlatform(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E26 RID: 15910 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003E27 RID: 15911 RVA: 0x00032636 File Offset: 0x00030836
			public override void Update(Player player, float ms)
			{
				if (!player.Disabled)
				{
					player.KeyAction(20, Player.PressKeyType.Tap);
					if (player.CloudsDisabled)
					{
						player.KeyAction(20, Player.PressKeyType.Release);
						base.Performed = true;
					}
				}
			}
		}

		// Token: 0x02000380 RID: 896
		internal class PlayerActionCommandDeathKneel : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E28 RID: 15912 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandDeathKneel(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E29 RID: 15913 RVA: 0x00032661 File Offset: 0x00030861
			public override void Init(Player player)
			{
				if (!player.InAir)
				{
					player.StartDeathKneel();
				}
				base.Performed = true;
			}

			// Token: 0x06003E2A RID: 15914 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x02000381 RID: 897
		internal class PlayerActionCommandDeathKneelInfinite : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E2B RID: 15915 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandDeathKneelInfinite(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E2C RID: 15916 RVA: 0x00032678 File Offset: 0x00030878
			public override void Init(Player player)
			{
				if (!player.InAir)
				{
					player.StartDeathKneel();
					player.CommandData.ContinousDeathKneel = true;
				}
				base.Performed = true;
			}

			// Token: 0x06003E2D RID: 15917 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x02000382 RID: 898
		internal class PlayerActionCommandStopDeathKneel : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E2E RID: 15918 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStopDeathKneel(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E2F RID: 15919 RVA: 0x0003269B File Offset: 0x0003089B
			public override void Init(Player player)
			{
				if (player.DeathKneeling)
				{
					player.CancelDeathKneel();
				}
				player.CommandData.ContinousDeathKneel = false;
				base.Performed = true;
			}

			// Token: 0x06003E30 RID: 15920 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x02000383 RID: 899
		internal class PlayerActionCommandFall : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E31 RID: 15921 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandFall(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E32 RID: 15922 RVA: 0x000326BE File Offset: 0x000308BE
			public override void Init(Player player)
			{
				if (player.DeathKneeling)
				{
					player.OnDeathKneelOver();
				}
				else
				{
					player.Fall();
				}
				base.Performed = true;
			}

			// Token: 0x06003E33 RID: 15923 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x02000384 RID: 900
		internal class PlayerActionCommandStagger : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E34 RID: 15924 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStagger(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E35 RID: 15925 RVA: 0x000326DD File Offset: 0x000308DD
			public override void Init(Player player)
			{
				player.StartStaggering(1000f);
			}

			// Token: 0x06003E36 RID: 15926 RVA: 0x000326EA File Offset: 0x000308EA
			public override void Update(Player player, float ms)
			{
				if (!player.Staggering)
				{
					base.Performed = true;
				}
			}
		}

		// Token: 0x02000385 RID: 901
		internal class PlayerActionCommandStaggerInfinite : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E37 RID: 15927 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStaggerInfinite(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E38 RID: 15928 RVA: 0x000326FB File Offset: 0x000308FB
			public override void Init(Player player)
			{
				player.StartStaggering(5000f);
				player.CommandData.ContinousStagger = true;
				base.Performed = true;
			}

			// Token: 0x06003E39 RID: 15929 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x02000386 RID: 902
		internal class PlayerActionCommandStopStagger : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E3A RID: 15930 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStopStagger(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E3B RID: 15931 RVA: 0x0003271B File Offset: 0x0003091B
			public override void Init(Player player)
			{
				player.CommandData.ContinousStagger = false;
				player.TimeSequence.TimeStagger = 0f;
				base.Performed = true;
			}

			// Token: 0x06003E3C RID: 15932 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x02000387 RID: 903
		internal class PlayerActionCommandStopAll : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E3D RID: 15933 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStopAll(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E3E RID: 15934 RVA: 0x0010AFF0 File Offset: 0x001091F0
			public override void Init(Player player)
			{
				PlayerCommand playerCommand = default(PlayerCommand);
				if (player.CommandData.AimAtData.Enabled)
				{
					this.RunStopCommandInner(new Player.PlayerActionCommandStopAim(ref playerCommand, 0), player);
				}
				if (player.CommandData.ContinousAttack)
				{
					this.RunStopCommandInner(new Player.PlayerActionCommandStopAttackRepeat(ref playerCommand, 0), player);
				}
				if (player.CommandData.ContinousCrouch)
				{
					this.RunStopCommandInner(new Player.PlayerActionCommandStopCrouch(ref playerCommand, 0), player);
				}
				if (player.CommandData.ContinousDeathKneel || player.DeathKneeling)
				{
					this.RunStopCommandInner(new Player.PlayerActionCommandStopDeathKneel(ref playerCommand, 0), player);
				}
				if (player.CommandData.RunToPositionData.Enabled)
				{
					this.RunStopCommandInner(new Player.PlayerActionCommandStopMove(ref playerCommand, 0), player);
				}
				if (player.CommandData.ContinousStagger || player.Staggering)
				{
					this.RunStopCommandInner(new Player.PlayerActionCommandStopStagger(ref playerCommand, 0), player);
				}
				if (player.CommandData.ContinousClimb != 0 || player.Climbing)
				{
					this.RunStopCommandInner(new Player.PlayerActionCommandStopClimb(ref playerCommand, 0), player);
				}
				base.Performed = true;
			}

			// Token: 0x06003E3F RID: 15935 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}

			// Token: 0x06003E40 RID: 15936 RVA: 0x00032740 File Offset: 0x00030940
			private void RunStopCommandInner(Player.PlayerActionCommandItem item, Player player)
			{
				item.Init(player);
				item.Update(player, 0f);
				item.Dispose();
			}
		}

		// Token: 0x02000388 RID: 904
		internal class PlayerActionCommandStartClimbUp : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E41 RID: 15937 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStartClimbUp(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E42 RID: 15938 RVA: 0x0003275B File Offset: 0x0003095B
			public override void Init(Player player)
			{
				player.CommandData.ContinousClimb = 1;
				this.m_checkClimbingTime = 400f;
			}

			// Token: 0x06003E43 RID: 15939 RVA: 0x00032774 File Offset: 0x00030974
			public override void Update(Player player, float ms)
			{
				if (player.GameWorld.StartupSequenceOver)
				{
					this.m_checkClimbingTime -= ms;
				}
				if (player.Climbing || this.m_checkClimbingTime <= 0f)
				{
					base.Performed = true;
				}
			}

			// Token: 0x040013F6 RID: 5110
			private float m_checkClimbingTime;
		}

		// Token: 0x02000389 RID: 905
		internal class PlayerActionCommandStartClimbDown : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E44 RID: 15940 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStartClimbDown(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E45 RID: 15941 RVA: 0x000327AD File Offset: 0x000309AD
			public override void Init(Player player)
			{
				player.CommandData.ContinousClimb = -1;
				this.m_checkClimbingTime = 400f;
			}

			// Token: 0x06003E46 RID: 15942 RVA: 0x000327C6 File Offset: 0x000309C6
			public override void Update(Player player, float ms)
			{
				if (player.GameWorld.StartupSequenceOver)
				{
					this.m_checkClimbingTime -= ms;
				}
				if (player.Climbing || this.m_checkClimbingTime <= 0f)
				{
					base.Performed = true;
				}
			}

			// Token: 0x040013F7 RID: 5111
			private float m_checkClimbingTime;
		}

		// Token: 0x0200038A RID: 906
		internal class PlayerActionCommandWaitClimbReachedEnd : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E47 RID: 15943 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandWaitClimbReachedEnd(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E48 RID: 15944 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003E49 RID: 15945 RVA: 0x000327FF File Offset: 0x000309FF
			public override void Update(Player player, float ms)
			{
				if (!player.Climbing || player.ClimbingDirection == 0)
				{
					base.Performed = true;
				}
				if (base.Performed)
				{
					player.CommandData.ContinousClimb = 0;
					player.KeyAction(0, Player.PressKeyType.Release);
					player.KeyAction(1, Player.PressKeyType.Release);
				}
			}
		}

		// Token: 0x0200038B RID: 907
		internal class PlayerActionCommandStopClimb : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E4A RID: 15946 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandStopClimb(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E4B RID: 15947 RVA: 0x0003283C File Offset: 0x00030A3C
			public override void Init(Player player)
			{
				player.CommandData.ContinousClimb = 0;
				player.KeyAction(0, Player.PressKeyType.Release);
				player.KeyAction(1, Player.PressKeyType.Release);
				base.Performed = true;
			}

			// Token: 0x06003E4C RID: 15948 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Update(Player player, float ms)
			{
			}
		}

		// Token: 0x0200038C RID: 908
		internal class PlayerActionCommandClimbRelease : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E4D RID: 15949 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandClimbRelease(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E4E RID: 15950 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003E4F RID: 15951 RVA: 0x00032861 File Offset: 0x00030A61
			public override void Update(Player player, float ms)
			{
				if (player.Climbing)
				{
					player.KeyAction(5, Player.PressKeyType.Tap);
					return;
				}
				player.CommandData.ContinousClimb = 0;
				player.KeyAction(0, Player.PressKeyType.Release);
				player.KeyAction(1, Player.PressKeyType.Release);
				player.KeyAction(5, Player.PressKeyType.Release);
				base.Performed = true;
			}
		}

		// Token: 0x0200038D RID: 909
		internal class PlayerActionCommandWaitEmptyAmmo : Player.PlayerActionCommandItem
		{
			// Token: 0x06003E50 RID: 15952 RVA: 0x000323A8 File Offset: 0x000305A8
			public PlayerActionCommandWaitEmptyAmmo(ref PlayerCommand cmd, int cmdCount) : base(ref cmd, cmdCount)
			{
			}

			// Token: 0x06003E51 RID: 15953 RVA: 0x00002B52 File Offset: 0x00000D52
			public override void Init(Player player)
			{
			}

			// Token: 0x06003E52 RID: 15954 RVA: 0x0010B0F4 File Offset: 0x001092F4
			public override void Update(Player player, float ms)
			{
				RWeapon currentRangedWeaponInUse = player.GetCurrentRangedWeaponInUse();
				if (currentRangedWeaponInUse == null || currentRangedWeaponInUse.CurrentRoundsInWeapon == 0)
				{
					player.CommandData.ContinousAttack = false;
					player.KeyAction(4, Player.PressKeyType.Release);
					player.KeyAction(14, Player.PressKeyType.Release);
					base.Performed = true;
				}
			}
		}

		// Token: 0x0200038E RID: 910
		internal class CommandDataContainer
		{
			// Token: 0x06003E53 RID: 15955 RVA: 0x0003289F File Offset: 0x00030A9F
			public CommandDataContainer()
			{
				this.Clear();
			}

			// Token: 0x06003E54 RID: 15956 RVA: 0x0010B138 File Offset: 0x00109338
			public void Clear()
			{
				this.RunToPositionData.Movement = Player.CommandDataContainer.MoveMode.Run;
				this.RunToPositionData.Enabled = false;
				this.AimAtData.AccuracyCone = 0f;
				this.AimAtData.TargetID = 0;
				this.AimAtData.NextAccuracyDeflectionTime = 0f;
				this.AimAtData.CurrentAccuracyDeflection = 0f;
				this.AimAtData.Enabled = false;
				this.AimAtData.TargetObject = null;
				this.ContinousClimb = 0;
				this.ContinousCrouch = false;
				this.ContinousFaceDirection = 0;
				this.ContinousPrepareThrow = false;
				this.ContinousGrab = false;
				this.ContinousAttack = false;
				this.ContinousDeathKneel = false;
				this.ContinousStagger = false;
			}

			// Token: 0x06003E55 RID: 15957 RVA: 0x0010B1EC File Offset: 0x001093EC
			public void EndContinousCommandActions()
			{
				this.RunToPositionData.Enabled = false;
				this.ContinousClimb = 0;
				this.ContinousCrouch = false;
				this.ContinousGrab = false;
				this.ContinousPrepareThrow = false;
				this.ContinousDeathKneel = false;
				this.ContinousStagger = false;
				this.AimAtData.Enabled = false;
				this.AimAtData.TargetObject = null;
			}

			// Token: 0x06003E56 RID: 15958 RVA: 0x000328AD File Offset: 0x00030AAD
			public void RunToPosition(Microsoft.Xna.Framework.Vector2 worldPosition, int faceDirection)
			{
				this.RunToPositionData.WorldLocation = worldPosition;
				this.RunToPositionData.FacingDirection = faceDirection;
				this.RunToPositionData.Enabled = true;
			}

			// Token: 0x17000A6A RID: 2666
			// (get) Token: 0x06003E57 RID: 15959 RVA: 0x000328D3 File Offset: 0x00030AD3
			public bool IsRunningToPosition
			{
				get
				{
					return this.RunToPositionData.Enabled;
				}
			}

			// Token: 0x040013F8 RID: 5112
			public int ContinousClimb;

			// Token: 0x040013F9 RID: 5113
			public bool ContinousStagger;

			// Token: 0x040013FA RID: 5114
			public bool ContinousDeathKneel;

			// Token: 0x040013FB RID: 5115
			public bool ContinousAttack;

			// Token: 0x040013FC RID: 5116
			public bool ContinousGrab;

			// Token: 0x040013FD RID: 5117
			public bool ContinousPrepareThrow;

			// Token: 0x040013FE RID: 5118
			public int ContinousFaceDirection;

			// Token: 0x040013FF RID: 5119
			public bool ContinousCrouch;

			// Token: 0x04001400 RID: 5120
			public Player.CommandDataContainer.PlayerRunToPositionData RunToPositionData;

			// Token: 0x04001401 RID: 5121
			public Player.CommandDataContainer.PlayerAimAtData AimAtData;

			// Token: 0x0200038F RID: 911
			public struct PlayerRunToPositionData
			{
				// Token: 0x04001402 RID: 5122
				public bool Enabled;

				// Token: 0x04001403 RID: 5123
				public Microsoft.Xna.Framework.Vector2 WorldLocation;

				// Token: 0x04001404 RID: 5124
				public int FacingDirection;

				// Token: 0x04001405 RID: 5125
				public Player.CommandDataContainer.MoveMode Movement;

				// Token: 0x04001406 RID: 5126
				public int TeleportCounter;
			}

			// Token: 0x02000390 RID: 912
			public struct PlayerAimAtData
			{
				// Token: 0x04001407 RID: 5127
				public bool Enabled;

				// Token: 0x04001408 RID: 5128
				public int TargetID;

				// Token: 0x04001409 RID: 5129
				public float AccuracyCone;

				// Token: 0x0400140A RID: 5130
				public float CurrentAccuracyDeflection;

				// Token: 0x0400140B RID: 5131
				public float NextAccuracyDeflectionTime;

				// Token: 0x0400140C RID: 5132
				public Microsoft.Xna.Framework.Vector2 TargetWorldPosition;

				// Token: 0x0400140D RID: 5133
				public ObjectData TargetObject;
			}

			// Token: 0x02000391 RID: 913
			public enum MoveMode
			{
				// Token: 0x0400140F RID: 5135
				Walk,
				// Token: 0x04001410 RID: 5136
				Run,
				// Token: 0x04001411 RID: 5137
				Sprint
			}
		}

		// Token: 0x02000392 RID: 914
		public enum ItemDropModeEnum
		{
			// Token: 0x04001413 RID: 5139
			Default,
			// Token: 0x04001414 RID: 5140
			Break,
			// Token: 0x04001415 RID: 5141
			RemoveOnDeath
		}

		// Token: 0x02000393 RID: 915
		public class ObjectImpactData
		{
			// Token: 0x04001416 RID: 5142
			public bool Broken;

			// Token: 0x04001417 RID: 5143
			public int ObjectID;

			// Token: 0x04001418 RID: 5144
			public ObjectData ObjectData;

			// Token: 0x04001419 RID: 5145
			public float ObjectHealthBefore;

			// Token: 0x0400141A RID: 5146
			public float ObjectHealthAfter;

			// Token: 0x0400141B RID: 5147
			public float ObjectDamage;

			// Token: 0x0400141C RID: 5148
			public float PlayerDamage;

			// Token: 0x0400141D RID: 5149
			public int PlayerID;

			// Token: 0x0400141E RID: 5150
			public Microsoft.Xna.Framework.Vector2 PlayerVelocityAfter = Microsoft.Xna.Framework.Vector2.Zero;

			// Token: 0x0400141F RID: 5151
			public Microsoft.Xna.Framework.Vector2 PlayerBox2DPosition = Microsoft.Xna.Framework.Vector2.Zero;

			// Token: 0x04001420 RID: 5152
			public float LifeTimeLeft;

			// Token: 0x04001421 RID: 5153
			public bool IsNew = true;
		}

		// Token: 0x02000394 RID: 916
		internal enum BotAINavCodePath
		{
			// Token: 0x04001423 RID: 5155
			None,
			// Token: 0x04001424 RID: 5156
			NA,
			// Token: 0x04001425 RID: 5157
			Disabled,
			// Token: 0x04001426 RID: 5158
			Teleportation_Reset,
			// Token: 0x04001427 RID: 5159
			Nav_Reset,
			// Token: 0x04001428 RID: 5160
			Nav_A_Move,
			// Token: 0x04001429 RID: 5161
			Nav_B_Move,
			// Token: 0x0400142A RID: 5162
			Nav_C_Move,
			// Token: 0x0400142B RID: 5163
			Nav_D_Move,
			// Token: 0x0400142C RID: 5164
			Nav_E1_Move,
			// Token: 0x0400142D RID: 5165
			Nav_E2_Move,
			// Token: 0x0400142E RID: 5166
			Nav_E3_Move,
			// Token: 0x0400142F RID: 5167
			Nav_F_Move
		}

		// Token: 0x02000395 RID: 917
		internal class BotAITargetData
		{
			// Token: 0x06003E59 RID: 15961 RVA: 0x0010B248 File Offset: 0x00109448
			internal static Player.BotAITargetData NewTargetData(ObjectData finalTarget, Player reference)
			{
				Player.BotAITargetData freeItem = Player.BotAITargetData.Pool.GetFreeItem();
				freeItem.SetTarget(finalTarget, reference);
				return freeItem;
			}

			// Token: 0x06003E5A RID: 15962 RVA: 0x0010B26C File Offset: 0x0010946C
			internal static Player.BotAITargetData NewTargetData(ObjectData finalTarget, ObjectData currentTarget, Player reference)
			{
				Player.BotAITargetData freeItem = Player.BotAITargetData.Pool.GetFreeItem();
				freeItem.SetTarget(finalTarget, currentTarget, reference);
				return freeItem;
			}

			// Token: 0x06003E5B RID: 15963 RVA: 0x00032905 File Offset: 0x00030B05
			public void ReturnToPool()
			{
				this.SetTarget(null, null, null);
				Player.BotAITargetData.Pool.FlagFreeItem(this);
			}

			// Token: 0x06003E5C RID: 15964 RVA: 0x00002B4A File Offset: 0x00000D4A
			private BotAITargetData()
			{
			}

			// Token: 0x17000A6B RID: 2667
			// (get) Token: 0x06003E5D RID: 15965 RVA: 0x0003291B File Offset: 0x00030B1B
			// (set) Token: 0x06003E5E RID: 15966 RVA: 0x00032923 File Offset: 0x00030B23
			public ObjectData CurrentTarget { get; private set; }

			// Token: 0x17000A6C RID: 2668
			// (get) Token: 0x06003E5F RID: 15967 RVA: 0x0003292C File Offset: 0x00030B2C
			// (set) Token: 0x06003E60 RID: 15968 RVA: 0x00032934 File Offset: 0x00030B34
			public ObjectData FinalTarget { get; private set; }

			// Token: 0x17000A6D RID: 2669
			// (get) Token: 0x06003E61 RID: 15969 RVA: 0x0003293D File Offset: 0x00030B3D
			// (set) Token: 0x06003E62 RID: 15970 RVA: 0x00032945 File Offset: 0x00030B45
			public bool HasTarget { get; private set; }

			// Token: 0x17000A6E RID: 2670
			// (get) Token: 0x06003E63 RID: 15971 RVA: 0x0003294E File Offset: 0x00030B4E
			// (set) Token: 0x06003E64 RID: 15972 RVA: 0x00032956 File Offset: 0x00030B56
			public bool IsGuardTarget { get; private set; }

			// Token: 0x17000A6F RID: 2671
			// (get) Token: 0x06003E65 RID: 15973 RVA: 0x0003295F File Offset: 0x00030B5F
			// (set) Token: 0x06003E66 RID: 15974 RVA: 0x00032967 File Offset: 0x00030B67
			public bool IsPlayer { get; private set; }

			// Token: 0x17000A70 RID: 2672
			// (get) Token: 0x06003E67 RID: 15975 RVA: 0x00032970 File Offset: 0x00030B70
			// (set) Token: 0x06003E68 RID: 15976 RVA: 0x00032978 File Offset: 0x00030B78
			public Player Player { get; private set; }

			// Token: 0x17000A71 RID: 2673
			// (get) Token: 0x06003E69 RID: 15977 RVA: 0x00032981 File Offset: 0x00030B81
			// (set) Token: 0x06003E6A RID: 15978 RVA: 0x00032989 File Offset: 0x00030B89
			public bool IsActivateable { get; private set; }

			// Token: 0x17000A72 RID: 2674
			// (get) Token: 0x06003E6B RID: 15979 RVA: 0x00032992 File Offset: 0x00030B92
			// (set) Token: 0x06003E6C RID: 15980 RVA: 0x0003299A File Offset: 0x00030B9A
			public Microsoft.Xna.Framework.Vector2 Difference { get; private set; }

			// Token: 0x17000A73 RID: 2675
			// (get) Token: 0x06003E6D RID: 15981 RVA: 0x000329A3 File Offset: 0x00030BA3
			// (set) Token: 0x06003E6E RID: 15982 RVA: 0x000329AB File Offset: 0x00030BAB
			public float DistanceLength { get; private set; }

			// Token: 0x17000A74 RID: 2676
			// (get) Token: 0x06003E6F RID: 15983 RVA: 0x000329B4 File Offset: 0x00030BB4
			// (set) Token: 0x06003E70 RID: 15984 RVA: 0x000329BC File Offset: 0x00030BBC
			public Microsoft.Xna.Framework.Vector2 Direction { get; private set; }

			// Token: 0x17000A75 RID: 2677
			// (get) Token: 0x06003E71 RID: 15985 RVA: 0x000329C5 File Offset: 0x00030BC5
			// (set) Token: 0x06003E72 RID: 15986 RVA: 0x000329CD File Offset: 0x00030BCD
			public bool IsFarAway { get; private set; }

			// Token: 0x17000A76 RID: 2678
			// (get) Token: 0x06003E73 RID: 15987 RVA: 0x000329D6 File Offset: 0x00030BD6
			public bool TargetIsHostile
			{
				get
				{
					return this.IsPlayer & !this.IsGuardTarget;
				}
			}

			// Token: 0x06003E74 RID: 15988 RVA: 0x000329E8 File Offset: 0x00030BE8
			public void SetTarget(ObjectData finalTarget, Player reference)
			{
				this.SetTarget(finalTarget, finalTarget, reference);
			}

			// Token: 0x06003E75 RID: 15989 RVA: 0x0010B290 File Offset: 0x00109490
			public void SetTarget(ObjectData finalTarget, ObjectData currentTarget, Player reference)
			{
				if (finalTarget == null)
				{
					finalTarget = currentTarget;
				}
				else if (currentTarget == null)
				{
					currentTarget = finalTarget;
				}
				this.FinalTarget = finalTarget;
				this.CurrentTarget = currentTarget;
				if (currentTarget != null && !currentTarget.IsDisposed)
				{
					this.IsPlayer = currentTarget.IsPlayer;
					this.Player = (currentTarget.IsPlayer ? ((Player)currentTarget.InternalData) : null);
					this.IsActivateable = currentTarget.Activateable;
					this.Difference = Converter.Box2DToWorld(((this.Player != null) ? this.Player.PreBox2DPosition : currentTarget.GetBox2DCenterPosition()) - reference.PreBox2DPosition);
					if (this.Difference.IsValid())
					{
						this.DistanceLength = this.Difference.Length();
						this.Direction = Microsoft.Xna.Framework.Vector2.Normalize(this.Difference);
					}
					else
					{
						this.DistanceLength = 0f;
						this.Direction = Microsoft.Xna.Framework.Vector2.UnitY;
						this.Difference = Microsoft.Xna.Framework.Vector2.Zero;
					}
					this.HasTarget = true;
					this.IsGuardTarget = (currentTarget == reference.GetSourceGuardTarget());
				}
				else
				{
					this.HasTarget = false;
					this.IsGuardTarget = false;
					this.CurrentTarget = null;
					this.IsPlayer = false;
					this.IsActivateable = false;
					this.Difference = Microsoft.Xna.Framework.Vector2.Zero;
					this.DistanceLength = 0f;
					this.Direction = Microsoft.Xna.Framework.Vector2.UnitY;
				}
				this.IsFarAway = (this.DistanceLength > 50f);
			}

			// Token: 0x04001430 RID: 5168
			internal static GenericClassPool<Player.BotAITargetData> Pool = new GenericClassPool<Player.BotAITargetData>(() => new Player.BotAITargetData(), 1, 0);
		}

		// Token: 0x02000396 RID: 918
		[Flags]
		public enum MeleeOverlapStatus
		{
			// Token: 0x0400143E RID: 5182
			None = 0,
			// Token: 0x0400143F RID: 5183
			Standing = 1,
			// Token: 0x04001440 RID: 5184
			Crouching = 2
		}

		// Token: 0x02000397 RID: 919
		public enum PlayerInputType
		{
			// Token: 0x04001442 RID: 5186
			ByRules,
			// Token: 0x04001443 RID: 5187
			Forced
		}

		// Token: 0x02000398 RID: 920
		public enum GenderType
		{
			// Token: 0x04001445 RID: 5189
			Female = 1,
			// Token: 0x04001446 RID: 5190
			Male
		}

		// Token: 0x02000399 RID: 921
		public enum RunNextUpdate
		{
			// Token: 0x04001448 RID: 5192
			None,
			// Token: 0x04001449 RID: 5193
			Kill,
			// Token: 0x0400144A RID: 5194
			Gib,
			// Token: 0x0400144B RID: 5195
			Explode,
			// Token: 0x0400144C RID: 5196
			Remove
		}

		// Token: 0x0200039A RID: 922
		internal enum HealthMode
		{
			// Token: 0x0400144E RID: 5198
			OverkillDamage,
			// Token: 0x0400144F RID: 5199
			StrengthBoostOverHealth,
			// Token: 0x04001450 RID: 5200
			RocketRideOverHealth,
			// Token: 0x04001451 RID: 5201
			OrdinaryHealth
		}

		// Token: 0x0200039B RID: 923
		internal class ManualAimTargetPosition
		{
			// Token: 0x17000A77 RID: 2679
			// (get) Token: 0x06003E78 RID: 15992 RVA: 0x00032A25 File Offset: 0x00030C25
			// (set) Token: 0x06003E79 RID: 15993 RVA: 0x00032A2D File Offset: 0x00030C2D
			internal bool PositionEnabled { get; set; }

			// Token: 0x17000A78 RID: 2680
			// (get) Token: 0x06003E7A RID: 15994 RVA: 0x00032A36 File Offset: 0x00030C36
			// (set) Token: 0x06003E7B RID: 15995 RVA: 0x00032A3E File Offset: 0x00030C3E
			internal Microsoft.Xna.Framework.Vector2 TargetPosition { get; set; }

			// Token: 0x17000A79 RID: 2681
			// (get) Token: 0x06003E7C RID: 15996 RVA: 0x00032A47 File Offset: 0x00030C47
			// (set) Token: 0x06003E7D RID: 15997 RVA: 0x00032A4F File Offset: 0x00030C4F
			internal Microsoft.Xna.Framework.Vector2 MovementDirection { get; set; }
		}

		// Token: 0x0200039C RID: 924
		internal enum DeleteAndKickReason
		{
			// Token: 0x04001456 RID: 5206
			ByUser,
			// Token: 0x04001457 RID: 5207
			AutoHighPing,
			// Token: 0x04001458 RID: 5208
			AutoAFKTime
		}

		// Token: 0x0200039D RID: 925
		private enum OnDeathScream
		{
			// Token: 0x0400145A RID: 5210
			Ignore,
			// Token: 0x0400145B RID: 5211
			Standard
		}

		// Token: 0x0200039E RID: 926
		private class LedgeGrabFixtureCheck
		{
			// Token: 0x06003E7F RID: 15999 RVA: 0x00032A58 File Offset: 0x00030C58
			internal LedgeGrabFixtureCheck(Fixture fixture, int verticeIndex, Microsoft.Xna.Framework.Vector2 verticeWorldPoint)
			{
				this.Fixture = fixture;
				this.VerticeIndex = verticeIndex;
				this.VerticeWorldPoint = verticeWorldPoint;
			}

			// Token: 0x0400145C RID: 5212
			internal Fixture Fixture;

			// Token: 0x0400145D RID: 5213
			internal int VerticeIndex;

			// Token: 0x0400145E RID: 5214
			internal Microsoft.Xna.Framework.Vector2 VerticeWorldPoint;
		}

		// Token: 0x0200039F RID: 927
		internal enum WeaponInformationType
		{
			// Token: 0x04001460 RID: 5216
			MuzzlePosition,
			// Token: 0x04001461 RID: 5217
			LazerPosition
		}

		// Token: 0x020003A0 RID: 928
		private class DiveCollisionCheckResult
		{
			// Token: 0x17000A7A RID: 2682
			// (get) Token: 0x06003E80 RID: 16000 RVA: 0x00032A75 File Offset: 0x00030C75
			// (set) Token: 0x06003E81 RID: 16001 RVA: 0x00032A7D File Offset: 0x00030C7D
			internal bool HasCollision { get; set; }

			// Token: 0x17000A7B RID: 2683
			// (get) Token: 0x06003E82 RID: 16002 RVA: 0x00032A86 File Offset: 0x00030C86
			// (set) Token: 0x06003E83 RID: 16003 RVA: 0x00032A8E File Offset: 0x00030C8E
			internal Microsoft.Xna.Framework.Vector2 OriginPosition { get; set; }

			// Token: 0x17000A7C RID: 2684
			// (get) Token: 0x06003E84 RID: 16004 RVA: 0x00032A97 File Offset: 0x00030C97
			// (set) Token: 0x06003E85 RID: 16005 RVA: 0x00032A9F File Offset: 0x00030C9F
			internal Microsoft.Xna.Framework.Vector2 Direction { get; set; }

			// Token: 0x17000A7D RID: 2685
			// (get) Token: 0x06003E86 RID: 16006 RVA: 0x00032AA8 File Offset: 0x00030CA8
			// (set) Token: 0x06003E87 RID: 16007 RVA: 0x00032AB0 File Offset: 0x00030CB0
			internal float ScanDistance { get; set; }

			// Token: 0x17000A7E RID: 2686
			// (get) Token: 0x06003E88 RID: 16008 RVA: 0x00032AB9 File Offset: 0x00030CB9
			// (set) Token: 0x06003E89 RID: 16009 RVA: 0x00032AC1 File Offset: 0x00030CC1
			internal float MainFraction { get; set; }

			// Token: 0x06003E8A RID: 16010 RVA: 0x0010B3F4 File Offset: 0x001095F4
			internal Microsoft.Xna.Framework.Vector2 GetPlayerProgressPosition()
			{
				float num = Converter.WorldToBox2D(0.2f);
				float num2 = this.ScanDistance * this.MainFraction - Converter.WorldToBox2D(5.2f);
				if (num2 < -num)
				{
					num2 = -num;
				}
				return this.OriginPosition + this.Direction * num2;
			}

			// Token: 0x17000A7F RID: 2687
			// (get) Token: 0x06003E8B RID: 16011 RVA: 0x00032ACA File Offset: 0x00030CCA
			// (set) Token: 0x06003E8C RID: 16012 RVA: 0x00032AD2 File Offset: 0x00030CD2
			internal Microsoft.Xna.Framework.Vector2 DiveCaughtOffset { get; set; }

			// Token: 0x17000A80 RID: 2688
			// (get) Token: 0x06003E8D RID: 16013 RVA: 0x00032ADB File Offset: 0x00030CDB
			// (set) Token: 0x06003E8E RID: 16014 RVA: 0x00032AE3 File Offset: 0x00030CE3
			internal float MidFraction { get; set; }

			// Token: 0x17000A81 RID: 2689
			// (get) Token: 0x06003E8F RID: 16015 RVA: 0x00032AEC File Offset: 0x00030CEC
			// (set) Token: 0x06003E90 RID: 16016 RVA: 0x00032AF4 File Offset: 0x00030CF4
			internal ObjectData MidCollision { get; set; }

			// Token: 0x17000A82 RID: 2690
			// (get) Token: 0x06003E91 RID: 16017 RVA: 0x00032AFD File Offset: 0x00030CFD
			// (set) Token: 0x06003E92 RID: 16018 RVA: 0x00032B05 File Offset: 0x00030D05
			internal float LeftFraction { get; set; }

			// Token: 0x17000A83 RID: 2691
			// (get) Token: 0x06003E93 RID: 16019 RVA: 0x00032B0E File Offset: 0x00030D0E
			// (set) Token: 0x06003E94 RID: 16020 RVA: 0x00032B16 File Offset: 0x00030D16
			internal ObjectData LeftCollision { get; set; }

			// Token: 0x17000A84 RID: 2692
			// (get) Token: 0x06003E95 RID: 16021 RVA: 0x00032B1F File Offset: 0x00030D1F
			// (set) Token: 0x06003E96 RID: 16022 RVA: 0x00032B27 File Offset: 0x00030D27
			internal float RightFraction { get; set; }

			// Token: 0x17000A85 RID: 2693
			// (get) Token: 0x06003E97 RID: 16023 RVA: 0x00032B30 File Offset: 0x00030D30
			// (set) Token: 0x06003E98 RID: 16024 RVA: 0x00032B38 File Offset: 0x00030D38
			internal ObjectData RightCollision { get; set; }

			// Token: 0x06003E99 RID: 16025 RVA: 0x00002B4A File Offset: 0x00000D4A
			internal DiveCollisionCheckResult()
			{
			}

			// Token: 0x06003E9A RID: 16026 RVA: 0x0010B444 File Offset: 0x00109644
			internal void Prepare(Microsoft.Xna.Framework.Vector2 direction, Microsoft.Xna.Framework.Vector2 origin, float scanDistance)
			{
				this.Direction = direction;
				this.OriginPosition = origin;
				this.ScanDistance = scanDistance;
				this.MainFraction = 1f;
				this.MidFraction = 1f;
				this.MidCollision = null;
				this.LeftFraction = 1f;
				this.LeftCollision = null;
				this.RightFraction = 1f;
				this.RightCollision = null;
			}

			// Token: 0x06003E9B RID: 16027 RVA: 0x00032B41 File Offset: 0x00030D41
			internal void Dispose()
			{
				this.MidCollision = null;
				this.LeftCollision = null;
				this.RightCollision = null;
			}
		}

		// Token: 0x020003A1 RID: 929
		public enum MissileHitType
		{
			// Token: 0x0400146F RID: 5231
			Stun,
			// Token: 0x04001470 RID: 5232
			Knockdown
		}

		// Token: 0x020003A2 RID: 930
		internal enum DeathTypeOrder
		{
			// Token: 0x04001472 RID: 5234
			Random,
			// Token: 0x04001473 RID: 5235
			Prioritized
		}

		// Token: 0x020003A3 RID: 931
		[Flags]
		internal enum DeathType
		{
			// Token: 0x04001475 RID: 5237
			NONE = 0,
			// Token: 0x04001476 RID: 5238
			DeathKneel = 1,
			// Token: 0x04001477 RID: 5239
			Stagger = 2,
			// Token: 0x04001478 RID: 5240
			Fall = 4
		}

		// Token: 0x020003A4 RID: 932
		public struct RelativeBodyData
		{
			// Token: 0x06003E9C RID: 16028 RVA: 0x00032B58 File Offset: 0x00030D58
			public void Clear()
			{
				this.Down.Clear();
				this.Up.Clear();
				this.Left.Clear();
				this.Right.Clear();
			}

			// Token: 0x04001479 RID: 5241
			public Player.RelativeBodyData.RelativeBodyPosition Down;

			// Token: 0x0400147A RID: 5242
			public Player.RelativeBodyData.RelativeBodyPosition Up;

			// Token: 0x0400147B RID: 5243
			public Player.RelativeBodyData.RelativeBodyPosition Left;

			// Token: 0x0400147C RID: 5244
			public Player.RelativeBodyData.RelativeBodyPosition Right;

			// Token: 0x020003A5 RID: 933
			public struct RelativeBodyPosition
			{
				// Token: 0x06003E9D RID: 16029 RVA: 0x00032B86 File Offset: 0x00030D86
				public void Clear()
				{
					this.Body = null;
					this.Fixture = null;
					this.Fraction = 1f;
				}

				// Token: 0x0400147D RID: 5245
				public Body Body;

				// Token: 0x0400147E RID: 5246
				public Fixture Fixture;

				// Token: 0x0400147F RID: 5247
				public float Fraction;
			}
		}

		// Token: 0x020003A6 RID: 934
		private class HitObjectInMelee
		{
			// Token: 0x06003E9E RID: 16030 RVA: 0x00032BA1 File Offset: 0x00030DA1
			internal HitObjectInMelee()
			{
				this.Fraction = 1f;
				this.HitPos = Microsoft.Xna.Framework.Vector2.Zero;
				this.Fixture = null;
				this.ObjectData = null;
			}

			// Token: 0x06003E9F RID: 16031 RVA: 0x00032BCD File Offset: 0x00030DCD
			internal HitObjectInMelee(float fraction, Microsoft.Xna.Framework.Vector2 hitPos, Fixture fixture, ObjectData od)
			{
				this.Fraction = fraction;
				this.HitPos = hitPos;
				this.Fixture = fixture;
				this.ObjectData = od;
			}

			// Token: 0x04001480 RID: 5248
			internal float Fraction;

			// Token: 0x04001481 RID: 5249
			internal Microsoft.Xna.Framework.Vector2 HitPos;

			// Token: 0x04001482 RID: 5250
			internal Fixture Fixture;

			// Token: 0x04001483 RID: 5251
			internal ObjectData ObjectData;
		}

		// Token: 0x020003A7 RID: 935
		public enum DropWeaponItemSource
		{
			// Token: 0x04001485 RID: 5253
			Other,
			// Token: 0x04001486 RID: 5254
			ManuallyDropped
		}

		// Token: 0x020003A8 RID: 936
		public class FireSequenceValues
		{
			// Token: 0x17000A86 RID: 2694
			// (get) Token: 0x06003EA0 RID: 16032 RVA: 0x00032BF2 File Offset: 0x00030DF2
			// (set) Token: 0x06003EA1 RID: 16033 RVA: 0x00032BFA File Offset: 0x00030DFA
			public float HipFireEndTimer { get; set; }

			// Token: 0x17000A87 RID: 2695
			// (get) Token: 0x06003EA2 RID: 16034 RVA: 0x00032C03 File Offset: 0x00030E03
			// (set) Token: 0x06003EA3 RID: 16035 RVA: 0x00032C0B File Offset: 0x00030E0B
			public float MinimumManualAimTime { get; set; }

			// Token: 0x17000A88 RID: 2696
			// (get) Token: 0x06003EA4 RID: 16036 RVA: 0x00032C14 File Offset: 0x00030E14
			// (set) Token: 0x06003EA5 RID: 16037 RVA: 0x00032C1C File Offset: 0x00030E1C
			public float HipFireAimTime { get; set; }

			// Token: 0x17000A89 RID: 2697
			// (get) Token: 0x06003EA6 RID: 16038 RVA: 0x00032C25 File Offset: 0x00030E25
			// (set) Token: 0x06003EA7 RID: 16039 RVA: 0x00032C2D File Offset: 0x00030E2D
			public float MinAutoFireTimer { get; set; }

			// Token: 0x17000A8A RID: 2698
			// (get) Token: 0x06003EA8 RID: 16040 RVA: 0x00032C36 File Offset: 0x00030E36
			// (set) Token: 0x06003EA9 RID: 16041 RVA: 0x00032C3E File Offset: 0x00030E3E
			public float HipFireActivateTimer { get; set; }

			// Token: 0x17000A8B RID: 2699
			// (get) Token: 0x06003EAA RID: 16042 RVA: 0x00032C47 File Offset: 0x00030E47
			// (set) Token: 0x06003EAB RID: 16043 RVA: 0x00032C4F File Offset: 0x00030E4F
			public bool CanShootInHipFire { get; set; }

			// Token: 0x17000A8C RID: 2700
			// (get) Token: 0x06003EAC RID: 16044 RVA: 0x00032C58 File Offset: 0x00030E58
			// (set) Token: 0x06003EAD RID: 16045 RVA: 0x00032C60 File Offset: 0x00030E60
			public float KickCooldownTimer { get; set; }

			// Token: 0x17000A8D RID: 2701
			// (get) Token: 0x06003EAE RID: 16046 RVA: 0x00032C69 File Offset: 0x00030E69
			// (set) Token: 0x06003EAF RID: 16047 RVA: 0x00032C71 File Offset: 0x00030E71
			public float LastGameElapsedTimeFired { get; set; }

			// Token: 0x17000A8E RID: 2702
			// (get) Token: 0x06003EB0 RID: 16048 RVA: 0x00032C7A File Offset: 0x00030E7A
			// (set) Token: 0x06003EB1 RID: 16049 RVA: 0x00032C82 File Offset: 0x00030E82
			public bool PerformPostFireAction { get; set; }

			// Token: 0x17000A8F RID: 2703
			// (get) Token: 0x06003EB2 RID: 16050 RVA: 0x00032C8B File Offset: 0x00030E8B
			public bool PerformingPostFire
			{
				get
				{
					return this.WeaponBeforePostFireCooldown > 0f || (this.m_player.AnimationUpperOverride != null && this.m_player.AnimationUpperOverride.OverrideUpperAnimationSource() == IPlayerUpperAnimationSourceEnum.PostFire);
				}
			}

			// Token: 0x17000A90 RID: 2704
			// (get) Token: 0x06003EB3 RID: 16051 RVA: 0x00032CBF File Offset: 0x00030EBF
			// (set) Token: 0x06003EB4 RID: 16052 RVA: 0x00032CC7 File Offset: 0x00030EC7
			public float WeaponBeforePostFireCooldown { get; set; }

			// Token: 0x17000A91 RID: 2705
			// (get) Token: 0x06003EB5 RID: 16053 RVA: 0x00032CD0 File Offset: 0x00030ED0
			// (set) Token: 0x06003EB6 RID: 16054 RVA: 0x00032CD8 File Offset: 0x00030ED8
			public short WeaponBeforePostFireCooldownID { get; set; }

			// Token: 0x17000A92 RID: 2706
			// (get) Token: 0x06003EB7 RID: 16055 RVA: 0x00032CE1 File Offset: 0x00030EE1
			// (set) Token: 0x06003EB8 RID: 16056 RVA: 0x00032CE9 File Offset: 0x00030EE9
			public float WeaponAfterPostFireCooldown { get; set; }

			// Token: 0x17000A93 RID: 2707
			// (get) Token: 0x06003EB9 RID: 16057 RVA: 0x00032CF2 File Offset: 0x00030EF2
			// (set) Token: 0x06003EBA RID: 16058 RVA: 0x00032CFA File Offset: 0x00030EFA
			public float WeaponReloadCooldown { get; set; }

			// Token: 0x17000A94 RID: 2708
			// (get) Token: 0x06003EBB RID: 16059 RVA: 0x00032D03 File Offset: 0x00030F03
			// (set) Token: 0x06003EBC RID: 16060 RVA: 0x00032D0B File Offset: 0x00030F0B
			public float ThrowableDeadlineTimer { get; set; }

			// Token: 0x17000A95 RID: 2709
			// (get) Token: 0x06003EBD RID: 16061 RVA: 0x00032D14 File Offset: 0x00030F14
			// (set) Token: 0x06003EBE RID: 16062 RVA: 0x00032D1C File Offset: 0x00030F1C
			public float WeaponBurstCooldown { get; set; }

			// Token: 0x17000A96 RID: 2710
			// (get) Token: 0x06003EBF RID: 16063 RVA: 0x00032D25 File Offset: 0x00030F25
			// (set) Token: 0x06003EC0 RID: 16064 RVA: 0x00032D2D File Offset: 0x00030F2D
			public bool WeaponBurstMode { get; set; }

			// Token: 0x17000A97 RID: 2711
			// (get) Token: 0x06003EC1 RID: 16065 RVA: 0x00032D36 File Offset: 0x00030F36
			// (set) Token: 0x06003EC2 RID: 16066 RVA: 0x00032D3E File Offset: 0x00030F3E
			public int WeaponBurstRoundsToFireLeft { get; set; }

			// Token: 0x17000A98 RID: 2712
			// (get) Token: 0x06003EC3 RID: 16067 RVA: 0x00032D47 File Offset: 0x00030F47
			public bool WeaponOnCooldown
			{
				get
				{
					return this.WeaponBeforePostFireCooldown > 0f || this.WeaponAfterPostFireCooldown > 0f;
				}
			}

			// Token: 0x06003EC4 RID: 16068 RVA: 0x0010B4A8 File Offset: 0x001096A8
			public FireSequenceValues(Player player)
			{
				this.m_player = player;
				this.HipFireActivateTimer = 0f;
				this.MinAutoFireTimer = 0f;
				this.HipFireEndTimer = 0f;
				this.CanShootInHipFire = false;
				this.WeaponBeforePostFireCooldown = 0f;
				this.WeaponAfterPostFireCooldown = 0f;
				this.WeaponReloadCooldown = 0f;
				this.MinimumManualAimTime = 0f;
				this.ThrowableDeadlineTimer = 0f;
				this.PerformPostFireAction = false;
				this.HipFireAimTime = 0f;
				this.KickCooldownTimer = 0f;
			}

			// Token: 0x06003EC5 RID: 16069 RVA: 0x00032D65 File Offset: 0x00030F65
			public void Dispose()
			{
				this.m_player = null;
			}

			// Token: 0x06003EC6 RID: 16070 RVA: 0x00032D6E File Offset: 0x00030F6E
			public void Reset()
			{
				this.MinimumManualAimTime = 250f;
				this.HipFireActivateTimer = 0f;
				this.MinAutoFireTimer = 0f;
				this.HipFireEndTimer = 0f;
				this.HipFireAimTime = 0f;
				this.CanShootInHipFire = false;
			}

			// Token: 0x06003EC7 RID: 16071 RVA: 0x0010B540 File Offset: 0x00109740
			public void Update(float ms, float realMs)
			{
				if (this.WeaponBeforePostFireCooldown <= 0f && !this.PerformPostFireAction)
				{
					if (this.WeaponAfterPostFireCooldown > 0f)
					{
						this.WeaponAfterPostFireCooldown -= ms;
					}
					else
					{
						this.MinAutoFireTimer -= ms;
					}
				}
				else
				{
					this.WeaponBeforePostFireCooldown -= ms;
					if (this.WeaponBeforePostFireCooldown <= 0f)
					{
						if (this.m_player.AnimationUpperOverride == null && !this.m_player.InThrowingMode)
						{
							RWeapon currentRangedWeaponInUse = this.m_player.GetCurrentRangedWeaponInUse();
							if (currentRangedWeaponInUse != null && this.WeaponBeforePostFireCooldownID == currentRangedWeaponInUse.Properties.WeaponID)
							{
								currentRangedWeaponInUse.OnSetPostFireAction(this.m_player);
							}
						}
						this.PerformPostFireAction = false;
						this.WeaponAfterPostFireCooldown += this.WeaponBeforePostFireCooldown;
					}
				}
				this.WeaponBurstCooldown -= ms;
				if (this.WeaponReloadCooldown > 0f)
				{
					this.WeaponReloadCooldown -= ms;
					if (this.WeaponReloadCooldown < 0f)
					{
						this.WeaponReloadCooldown = 0f;
					}
				}
				if (this.KickCooldownTimer > 0f && this.m_player.CurrentAction != PlayerAction.Kick && this.m_player.CurrentAction != PlayerAction.JumpKick)
				{
					this.KickCooldownTimer -= ms;
					if (this.KickCooldownTimer < 0f)
					{
						this.KickCooldownTimer = 0f;
					}
				}
				if (this.m_player.GameOwner != GameOwnerEnum.Client || this.m_player.HasLocalControl)
				{
					if (this.ThrowableDeadlineTimer > 0f)
					{
						this.ThrowableDeadlineTimer -= ms;
						if (this.ThrowableDeadlineTimer <= 0f && this.m_player.GameOwner != GameOwnerEnum.Client)
						{
							this.m_player.ThrowDeadlineOver();
						}
					}
					if ((this.m_player.CurrentAction == PlayerAction.HipFire || this.m_player.CurrentAction == PlayerAction.ManualAim) && !this.CanShootInHipFire)
					{
						this.HipFireActivateTimer += ms;
						if (this.HipFireActivateTimer >= 150f)
						{
							this.CanShootInHipFire = true;
							if (this.m_player.CurrentAction != PlayerAction.ManualAim && this.m_player.CanFireWeapon() && this.m_player.GameOwner != GameOwnerEnum.Client)
							{
								this.m_player.FireWeapon();
							}
						}
					}
					if (!this.WeaponOnCooldown)
					{
						this.HipFireEndTimer += ms;
						if (this.HipFireEndTimer >= 300f && this.m_player.CurrentAction == PlayerAction.HipFire && !this.m_player.VirtualKeyboard.PressingKey(4, false) && this.m_player.GameOwner != GameOwnerEnum.Client)
						{
							this.m_player.CurrentAction = PlayerAction.Idle;
						}
					}
					if (this.MinimumManualAimTime > 0f)
					{
						this.MinimumManualAimTime -= ms;
						if (this.MinimumManualAimTime <= 0f)
						{
							this.MinimumManualAimTime = 0f;
						}
					}
					if (this.HipFireAimTime > 0f)
					{
						this.HipFireAimTime -= ms;
						if (this.HipFireAimTime <= 0f && this.m_player.TakingCover && this.m_player.GameOwner != GameOwnerEnum.Client)
						{
							this.m_player.AllowInstantCoverFromHipFire();
						}
					}
				}
			}

			// Token: 0x04001487 RID: 5255
			public const float HIP_FIRE_END_DELAY = 300f;

			// Token: 0x04001488 RID: 5256
			public const float MANUAL_AIM_END_DELAY = 250f;

			// Token: 0x04001489 RID: 5257
			public const float MIN_AUTO_FIRE_DELAY = 200f;

			// Token: 0x0400148A RID: 5258
			public const float HIP_FIRE_ACTIVATE_DELAY = 150f;

			// Token: 0x0400148B RID: 5259
			public const float KICK_COOLDOWN = 550f;

			// Token: 0x0400148C RID: 5260
			public const float JUMP_KICK_COOLDOWN = 700f;

			// Token: 0x0400148D RID: 5261
			public const float KICK_COOLDOWN_BORDER = 800f;

			// Token: 0x0400148E RID: 5262
			private Player m_player;
		}

		// Token: 0x020003A9 RID: 937
		internal struct MeleeTimes
		{
			// Token: 0x06003EC8 RID: 16072 RVA: 0x0010B85C File Offset: 0x00109A5C
			public static float GetTimeMeleeHit(Player hitBy)
			{
				switch (hitBy.GetCurrentMeleeWeaponInUse(false).Properties.MeleeWeaponType)
				{
				case MeleeWeaponTypeEnum.Fists:
					if (hitBy.CurrentAction == PlayerAction.MeleeAttack1)
					{
						return 270f;
					}
					if (hitBy.CurrentAction == PlayerAction.MeleeAttack2)
					{
						return 320f;
					}
					return 320f;
				case MeleeWeaponTypeEnum.OneHanded:
					if (hitBy.CurrentAction == PlayerAction.MeleeAttack1)
					{
						return 320f;
					}
					if (hitBy.CurrentAction == PlayerAction.MeleeAttack2)
					{
						return 370f;
					}
					return 370f;
				case MeleeWeaponTypeEnum.TwoHanded:
					if (hitBy.CurrentAction == PlayerAction.MeleeAttack1)
					{
						return 270f;
					}
					if (hitBy.CurrentAction == PlayerAction.MeleeAttack2)
					{
						return 370f;
					}
					return 370f;
				}
				return 250f;
			}

			// Token: 0x040014A0 RID: 5280
			public const float StaggerKickHitTime = 250f;

			// Token: 0x040014A1 RID: 5281
			public const float StaggerBlockBreakTime = 520f;

			// Token: 0x040014A2 RID: 5282
			public const float StaggerJumpAttackBlockBreakTime = 250f;

			// Token: 0x040014A3 RID: 5283
			public const float StaggerJumpKickHitBlockBreakTimer = 250f;

			// Token: 0x040014A4 RID: 5284
			public const float DazeTime = 110f;

			// Token: 0x040014A5 RID: 5285
			public const float TimeMeleeMovement = 1f;

			// Token: 0x040014A6 RID: 5286
			public const float TimeMeleeThirdMovement = 135f;
		}

		// Token: 0x020003AA RID: 938
		[Flags]
		public enum DrawStatusInfoFlags
		{
			// Token: 0x040014A8 RID: 5288
			None = 0,
			// Token: 0x040014A9 RID: 5289
			Name = 1,
			// Token: 0x040014AA RID: 5290
			StatusBars = 2,
			// Token: 0x040014AB RID: 5291
			All = 3
		}

		// Token: 0x020003AB RID: 939
		public class ShakeValues
		{
			// Token: 0x17000A99 RID: 2713
			// (get) Token: 0x06003EC9 RID: 16073 RVA: 0x00032DAE File Offset: 0x00030FAE
			// (set) Token: 0x06003ECA RID: 16074 RVA: 0x00032DB6 File Offset: 0x00030FB6
			public float Timer { get; set; }

			// Token: 0x17000A9A RID: 2714
			// (get) Token: 0x06003ECB RID: 16075 RVA: 0x00032DBF File Offset: 0x00030FBF
			// (set) Token: 0x06003ECC RID: 16076 RVA: 0x00032DC7 File Offset: 0x00030FC7
			public float Direction { get; set; }

			// Token: 0x17000A9B RID: 2715
			// (get) Token: 0x06003ECD RID: 16077 RVA: 0x00032DD0 File Offset: 0x00030FD0
			// (set) Token: 0x06003ECE RID: 16078 RVA: 0x00032DD8 File Offset: 0x00030FD8
			public float TimerTotal { get; set; }

			// Token: 0x06003ECF RID: 16079 RVA: 0x00032DE1 File Offset: 0x00030FE1
			public ShakeValues()
			{
				this.Direction = 1f;
				this.TimerTotal = 0f;
				this.Timer = 0f;
			}

			// Token: 0x06003ED0 RID: 16080 RVA: 0x00032E0A File Offset: 0x0003100A
			public void UpdateTotalTime(float ms)
			{
				if (this.TimerTotal > 0f)
				{
					this.TimerTotal -= ms;
					if (this.TimerTotal <= 0f)
					{
						this.TimerTotal = 0f;
						this.Timer = 25f;
					}
				}
			}

			// Token: 0x06003ED1 RID: 16081 RVA: 0x0010B904 File Offset: 0x00109B04
			public void UpdateShake(float ms)
			{
				if (this.TimerTotal > 0f)
				{
					this.Timer -= ms;
					if (this.Timer <= 0f)
					{
						this.Direction *= -1f;
						this.Timer += (Math.Abs(this.Timer) / 25f + 1f) * 25f;
					}
				}
			}

			// Token: 0x06003ED2 RID: 16082 RVA: 0x00032E4A File Offset: 0x0003104A
			public Microsoft.Xna.Framework.Vector2 ApplyShake(Microsoft.Xna.Framework.Vector2 drawPos)
			{
				if (this.TimerTotal > 0f)
				{
					drawPos += new Microsoft.Xna.Framework.Vector2(0.5f * this.Direction, 0f);
				}
				return drawPos;
			}

			// Token: 0x06003ED3 RID: 16083 RVA: 0x00032E78 File Offset: 0x00031078
			public void Start(float time = 150f)
			{
				this.TimerTotal = time;
			}

			// Token: 0x040014AC RID: 5292
			public const float SHAKE_INTERVAL = 25f;

			// Token: 0x040014AD RID: 5293
			public const float SHAKE_INTENSITY = 0.5f;
		}

		// Token: 0x020003AC RID: 940
		public enum DrawAimMode
		{
			// Token: 0x040014B2 RID: 5298
			Lazer,
			// Token: 0x040014B3 RID: 5299
			ManualAimBox
		}

		// Token: 0x020003AD RID: 941
		public enum PlayerSpawnAnimation
		{
			// Token: 0x040014B5 RID: 5301
			None,
			// Token: 0x040014B6 RID: 5302
			Zombie
		}

		// Token: 0x020003AE RID: 942
		internal struct State
		{
			// Token: 0x040014B7 RID: 5303
			internal const int STANDING_ON_GROUND = 0;

			// Token: 0x040014B8 RID: 5304
			internal const int IN_AIR = 1;

			// Token: 0x040014B9 RID: 5305
			internal const int RUNNING = 2;

			// Token: 0x040014BA RID: 5306
			internal const int SPRINTING = 3;

			// Token: 0x040014BB RID: 5307
			internal const int FALLING = 4;

			// Token: 0x040014BC RID: 5308
			internal const int CROUCHING = 5;

			// Token: 0x040014BD RID: 5309
			internal const int ROLLING = 6;

			// Token: 0x040014BE RID: 5310
			internal const int DIVING = 7;

			// Token: 0x040014BF RID: 5311
			internal const int LAYING_ON_GROUND = 8;

			// Token: 0x040014C0 RID: 5312
			internal const int MELEE_HIT = 9;

			// Token: 0x040014C1 RID: 5313
			internal const int DAZED = 10;

			// Token: 0x040014C2 RID: 5314
			internal const int IS_DEAD = 11;

			// Token: 0x040014C3 RID: 5315
			internal const int STAGGERING = 12;

			// Token: 0x040014C4 RID: 5316
			internal const int CLOUDS_DISABLED = 13;

			// Token: 0x040014C5 RID: 5317
			internal const int TAKING_COVER = 14;

			// Token: 0x040014C6 RID: 5318
			internal const int IS_REMOVED = 15;

			// Token: 0x040014C7 RID: 5319
			internal const int FORCE_KNEEL = 16;

			// Token: 0x040014C8 RID: 5320
			internal const int CLIMBING = 17;

			// Token: 0x040014C9 RID: 5321
			internal const int THROW_CHARGING = 18;

			// Token: 0x040014CA RID: 5322
			internal const int CHAT_ACTIVE = 19;

			// Token: 0x040014CB RID: 5323
			internal const int RELOADING = 20;

			// Token: 0x040014CC RID: 5324
			internal const int RELOADING_TOGGLE = 21;

			// Token: 0x040014CD RID: 5325
			internal const int WALKING = 22;

			// Token: 0x040014CE RID: 5326
			internal const int LEDGE_GRAB_TURN = 23;

			// Token: 0x040014CF RID: 5327
			internal const int FULL_LANDING = 24;

			// Token: 0x040014D0 RID: 5328
			internal const int BURNED = 25;

			// Token: 0x040014D1 RID: 5329
			internal const int BURNING_INFERNO = 26;

			// Token: 0x040014D2 RID: 5330
			internal const int INPUT_ENABLED = 27;

			// Token: 0x040014D3 RID: 5331
			internal const int DEATH_KNEEL = 28;

			// Token: 0x040014D4 RID: 5332
			internal const int CAN_RECOVER_FROM_FALL = 29;

			// Token: 0x040014D5 RID: 5333
			internal const int RECOVERY_ROLLING = 30;

			// Token: 0x040014D6 RID: 5334
			internal const int IN_THROWING_MODE = 31;

			// Token: 0x040014D7 RID: 5335
			internal const int GRAB_TELEGRAPHING = 32;

			// Token: 0x040014D8 RID: 5336
			internal const int GRAB_CHARGING = 33;

			// Token: 0x040014D9 RID: 5337
			internal const int GRAB_ATTACKING = 34;

			// Token: 0x040014DA RID: 5338
			internal const int GRAB_KICKING = 35;

			// Token: 0x040014DB RID: 5339
			internal const int GRAB_THROWING = 36;

			// Token: 0x040014DC RID: 5340
			internal const int GRAB_IMMUNITY = 37;

			// Token: 0x040014DD RID: 5341
			internal const int EXITING_THROWING_MODE = 38;

			// Token: 0x040014DE RID: 5342
			internal const int ENTERING_THROWING_MODE = 39;

			// Token: 0x040014DF RID: 5343
			internal const int EXTRA_MELEE_STATE_CHAINSAW_ACTIVE = 40;

			// Token: 0x040014E0 RID: 5344
			internal const int STRENGTH_BOOST_PREPARING = 41;

			// Token: 0x040014E1 RID: 5345
			internal const int STRENGTH_BOOST_ACTIVE = 42;

			// Token: 0x040014E2 RID: 5346
			internal const int SPEED_BOOST_PREPARING = 43;

			// Token: 0x040014E3 RID: 5347
			internal const int SPEED_BOOST_ACTIVE = 44;

			// Token: 0x040014E4 RID: 5348
			internal const int INPUT_READONLY = 45;

			// Token: 0x040014E5 RID: 5349
			internal const int TOTAL_STATES = 46;
		}

		// Token: 0x020003AF RID: 943
		internal class TimeSequenceValues
		{
			// Token: 0x06003ED4 RID: 16084 RVA: 0x0010B978 File Offset: 0x00109B78
			public static float GetMaxGrabHoldTime(int currentSequencialGrabCount)
			{
				switch (currentSequencialGrabCount)
				{
				case 0:
				case 1:
					return 1700f;
				case 2:
					return 1020f;
				case 3:
					return 340f;
				default:
					return 170f;
				}
			}

			// Token: 0x17000A9C RID: 2716
			// (get) Token: 0x06003ED5 RID: 16085 RVA: 0x00032E81 File Offset: 0x00031081
			// (set) Token: 0x06003ED6 RID: 16086 RVA: 0x00032E89 File Offset: 0x00031089
			public float[] QueuedKeyTimes { get; set; }

			// Token: 0x06003ED7 RID: 16087 RVA: 0x00032E92 File Offset: 0x00031092
			public void QueueKeyTime(int virtualKey, float ms)
			{
				this.QueuedKeyTimes[virtualKey] = (float)NetTime.Now + ms * 0.001f;
			}

			// Token: 0x06003ED8 RID: 16088 RVA: 0x00032EAA File Offset: 0x000310AA
			public void DisableQueuedKey(int virtualKey)
			{
				this.QueuedKeyTimes[virtualKey] = 0f;
			}

			// Token: 0x06003ED9 RID: 16089 RVA: 0x0010B9B4 File Offset: 0x00109BB4
			public void DisableQueuedKey(params int[] virtualKeys)
			{
				if (virtualKeys != null)
				{
					for (int i = 0; i < virtualKeys.Length; i++)
					{
						this.QueuedKeyTimes[virtualKeys[i]] = 0f;
					}
				}
			}

			// Token: 0x06003EDA RID: 16090 RVA: 0x00032EB9 File Offset: 0x000310B9
			public bool IsKeyQueued(int virtualKey)
			{
				return this.QueuedKeyTimes[virtualKey] >= GameSFD.LastUpdateNetTime;
			}

			// Token: 0x06003EDB RID: 16091 RVA: 0x0010B9E4 File Offset: 0x00109BE4
			public string GetQueuedActionsInfo()
			{
				string text = "";
				for (int i = 0; i < this.QueuedKeyTimes.Length; i++)
				{
					if (this.IsKeyQueued(i) || (i == 22 && this.GrabCheckInitiateTimer > 0f))
					{
						SFD.GameKeyboard.VirtualKey virtualKey = SFD.GameKeyboard.VirtualKeyboard.GetKeyCollection(1).GetVirtualKey(i);
						text = ((virtualKey != null) ? virtualKey.KeyName : i.ToString()) + "\n";
					}
				}
				if (this.m_player.ThrowingModeToggleQueued)
				{
					text += "THROWING MODE\n";
				}
				return text;
			}

			// Token: 0x06003EDC RID: 16092 RVA: 0x0010BA6C File Offset: 0x00109C6C
			public void DisableActionsAfterMelee(PlayerAction currentMeleeAction)
			{
				switch (currentMeleeAction)
				{
				case PlayerAction.MeleeAttack1:
					this.TimeDisableRoll = 80f;
					this.TimeDisableDrawWeapon = 80f;
					return;
				case PlayerAction.MeleeAttack2:
					this.TimeDisableRoll = 145f;
					this.TimeDisableDrawWeapon = 145f;
					return;
				case PlayerAction.MeleeAttack3:
				case PlayerAction.JumpAttack:
					this.TimeDisableRoll = 210f;
					this.TimeDisableDrawWeapon = 210f;
					return;
				}
				this.TimeDisableRoll = 80f;
				this.TimeDisableDrawWeapon = 80f;
			}

			// Token: 0x17000A9D RID: 2717
			// (get) Token: 0x06003EDD RID: 16093 RVA: 0x00032ECD File Offset: 0x000310CD
			// (set) Token: 0x06003EDE RID: 16094 RVA: 0x00032ED5 File Offset: 0x000310D5
			public float TimeManualAimAirDelay { get; set; }

			// Token: 0x17000A9E RID: 2718
			// (get) Token: 0x06003EDF RID: 16095 RVA: 0x00032EDE File Offset: 0x000310DE
			// (set) Token: 0x06003EE0 RID: 16096 RVA: 0x00032EE6 File Offset: 0x000310E6
			public float TimeTriggerSprint { get; set; }

			// Token: 0x17000A9F RID: 2719
			// (get) Token: 0x06003EE1 RID: 16097 RVA: 0x00032EEF File Offset: 0x000310EF
			// (set) Token: 0x06003EE2 RID: 16098 RVA: 0x00032EF7 File Offset: 0x000310F7
			public float TimeTriggerStopSprint { get; set; }

			// Token: 0x17000AA0 RID: 2720
			// (get) Token: 0x06003EE3 RID: 16099 RVA: 0x00032F00 File Offset: 0x00031100
			// (set) Token: 0x06003EE4 RID: 16100 RVA: 0x00032F08 File Offset: 0x00031108
			public float TimeTriggerJump { get; set; }

			// Token: 0x17000AA1 RID: 2721
			// (get) Token: 0x06003EE5 RID: 16101 RVA: 0x00032F11 File Offset: 0x00031111
			// (set) Token: 0x06003EE6 RID: 16102 RVA: 0x00032F19 File Offset: 0x00031119
			public float TimeJumpTimeout { get; set; }

			// Token: 0x17000AA2 RID: 2722
			// (get) Token: 0x06003EE7 RID: 16103 RVA: 0x00032F22 File Offset: 0x00031122
			// (set) Token: 0x06003EE8 RID: 16104 RVA: 0x00032F2A File Offset: 0x0003112A
			public float TimeForceCrouchDuringRiseTimer { get; set; }

			// Token: 0x17000AA3 RID: 2723
			// (get) Token: 0x06003EE9 RID: 16105 RVA: 0x00032F33 File Offset: 0x00031133
			// (set) Token: 0x06003EEA RID: 16106 RVA: 0x00032F3B File Offset: 0x0003113B
			public float TimeForceLayOnGroundTimer { get; set; }

			// Token: 0x17000AA4 RID: 2724
			// (get) Token: 0x06003EEB RID: 16107 RVA: 0x00032F44 File Offset: 0x00031144
			// (set) Token: 0x06003EEC RID: 16108 RVA: 0x00032F4C File Offset: 0x0003114C
			public float TimeMeleeHit { get; set; }

			// Token: 0x17000AA5 RID: 2725
			// (get) Token: 0x06003EED RID: 16109 RVA: 0x00032F55 File Offset: 0x00031155
			// (set) Token: 0x06003EEE RID: 16110 RVA: 0x00032F5D File Offset: 0x0003115D
			public float TimeMeleeMovement { get; set; }

			// Token: 0x17000AA6 RID: 2726
			// (get) Token: 0x06003EEF RID: 16111 RVA: 0x00032F66 File Offset: 0x00031166
			// (set) Token: 0x06003EF0 RID: 16112 RVA: 0x00032F6E File Offset: 0x0003116E
			public float TimeDisableDrawWeapon { get; set; }

			// Token: 0x17000AA7 RID: 2727
			// (get) Token: 0x06003EF1 RID: 16113 RVA: 0x00032F77 File Offset: 0x00031177
			// (set) Token: 0x06003EF2 RID: 16114 RVA: 0x00032F7F File Offset: 0x0003117F
			public float TimeDisableSheatheWeapon { get; set; }

			// Token: 0x17000AA8 RID: 2728
			// (get) Token: 0x06003EF3 RID: 16115 RVA: 0x00032F88 File Offset: 0x00031188
			// (set) Token: 0x06003EF4 RID: 16116 RVA: 0x00032F90 File Offset: 0x00031190
			public float TimeDisableRoll { get; set; }

			// Token: 0x17000AA9 RID: 2729
			// (get) Token: 0x06003EF5 RID: 16117 RVA: 0x00032F99 File Offset: 0x00031199
			// (set) Token: 0x06003EF6 RID: 16118 RVA: 0x00032FA1 File Offset: 0x000311A1
			public float TimeBlock { get; set; }

			// Token: 0x17000AAA RID: 2730
			// (get) Token: 0x06003EF7 RID: 16119 RVA: 0x00032FAA File Offset: 0x000311AA
			// (set) Token: 0x06003EF8 RID: 16120 RVA: 0x00032FB2 File Offset: 0x000311B2
			public float TimeDazed { get; set; }

			// Token: 0x17000AAB RID: 2731
			// (get) Token: 0x06003EF9 RID: 16121 RVA: 0x00032FBB File Offset: 0x000311BB
			// (set) Token: 0x06003EFA RID: 16122 RVA: 0x00032FC3 File Offset: 0x000311C3
			public float TimeStagger { get; set; }

			// Token: 0x17000AAC RID: 2732
			// (get) Token: 0x06003EFB RID: 16123 RVA: 0x00032FCC File Offset: 0x000311CC
			// (set) Token: 0x06003EFC RID: 16124 RVA: 0x00032FD4 File Offset: 0x000311D4
			public float TimeGrabTelegraphing { get; set; }

			// Token: 0x17000AAD RID: 2733
			// (get) Token: 0x06003EFD RID: 16125 RVA: 0x00032FDD File Offset: 0x000311DD
			// (set) Token: 0x06003EFE RID: 16126 RVA: 0x00032FE5 File Offset: 0x000311E5
			public float TimeGrabCharging { get; set; }

			// Token: 0x17000AAE RID: 2734
			// (get) Token: 0x06003EFF RID: 16127 RVA: 0x00032FEE File Offset: 0x000311EE
			// (set) Token: 0x06003F00 RID: 16128 RVA: 0x00032FF6 File Offset: 0x000311F6
			public float TimeGrabTurnCooldown { get; set; }

			// Token: 0x17000AAF RID: 2735
			// (get) Token: 0x06003F01 RID: 16129 RVA: 0x00032FFF File Offset: 0x000311FF
			// (set) Token: 0x06003F02 RID: 16130 RVA: 0x00033007 File Offset: 0x00031207
			public float TimeGrabCooldown { get; set; }

			// Token: 0x17000AB0 RID: 2736
			// (get) Token: 0x06003F03 RID: 16131 RVA: 0x00033010 File Offset: 0x00031210
			// (set) Token: 0x06003F04 RID: 16132 RVA: 0x00033018 File Offset: 0x00031218
			public float TimeGrabHold { get; set; }

			// Token: 0x17000AB1 RID: 2737
			// (get) Token: 0x06003F05 RID: 16133 RVA: 0x00033021 File Offset: 0x00031221
			// (set) Token: 0x06003F06 RID: 16134 RVA: 0x00033029 File Offset: 0x00031229
			public float TimeGrabActionPauseCooldown { get; set; }

			// Token: 0x17000AB2 RID: 2738
			// (get) Token: 0x06003F07 RID: 16135 RVA: 0x00033032 File Offset: 0x00031232
			// (set) Token: 0x06003F08 RID: 16136 RVA: 0x0003303A File Offset: 0x0003123A
			public float TimeGrabImmunityPostTime { get; set; }

			// Token: 0x17000AB3 RID: 2739
			// (get) Token: 0x06003F09 RID: 16137 RVA: 0x00033043 File Offset: 0x00031243
			// (set) Token: 0x06003F0A RID: 16138 RVA: 0x0003304B File Offset: 0x0003124B
			public float TimeTriggerDownThroughCloudsDelay { get; set; }

			// Token: 0x17000AB4 RID: 2740
			// (get) Token: 0x06003F0B RID: 16139 RVA: 0x00033054 File Offset: 0x00031254
			// (set) Token: 0x06003F0C RID: 16140 RVA: 0x0003305C File Offset: 0x0003125C
			public float TimeDisableDownThroughCloud { get; set; }

			// Token: 0x17000AB5 RID: 2741
			// (get) Token: 0x06003F0D RID: 16141 RVA: 0x00033065 File Offset: 0x00031265
			// (set) Token: 0x06003F0E RID: 16142 RVA: 0x0003306D File Offset: 0x0003126D
			public float TimeDisableDownThroughCloudWhileClimbing { get; set; }

			// Token: 0x17000AB6 RID: 2742
			// (get) Token: 0x06003F0F RID: 16143 RVA: 0x00033076 File Offset: 0x00031276
			// (set) Token: 0x06003F10 RID: 16144 RVA: 0x0003307E File Offset: 0x0003127E
			public float TimeTriggerCoverCheck { get; set; }

			// Token: 0x17000AB7 RID: 2743
			// (get) Token: 0x06003F11 RID: 16145 RVA: 0x00033087 File Offset: 0x00031287
			// (set) Token: 0x06003F12 RID: 16146 RVA: 0x0003308F File Offset: 0x0003128F
			public float TimeAutomaticGrabItemDelay { get; set; }

			// Token: 0x17000AB8 RID: 2744
			// (get) Token: 0x06003F13 RID: 16147 RVA: 0x00033098 File Offset: 0x00031298
			// (set) Token: 0x06003F14 RID: 16148 RVA: 0x000330A0 File Offset: 0x000312A0
			public float TimeClimbJumpCooldown { get; set; }

			// Token: 0x17000AB9 RID: 2745
			// (get) Token: 0x06003F15 RID: 16149 RVA: 0x000330A9 File Offset: 0x000312A9
			// (set) Token: 0x06003F16 RID: 16150 RVA: 0x000330B1 File Offset: 0x000312B1
			public float TimeClimbingCooldown { get; set; }

			// Token: 0x17000ABA RID: 2746
			// (get) Token: 0x06003F17 RID: 16151 RVA: 0x000330BA File Offset: 0x000312BA
			// (set) Token: 0x06003F18 RID: 16152 RVA: 0x000330C2 File Offset: 0x000312C2
			public float TimeThrowCooldown { get; set; }

			// Token: 0x17000ABB RID: 2747
			// (get) Token: 0x06003F19 RID: 16153 RVA: 0x000330CB File Offset: 0x000312CB
			// (set) Token: 0x06003F1A RID: 16154 RVA: 0x000330D3 File Offset: 0x000312D3
			public float TimeStuntCooldown { get; set; }

			// Token: 0x17000ABC RID: 2748
			// (get) Token: 0x06003F1B RID: 16155 RVA: 0x000330DC File Offset: 0x000312DC
			// (set) Token: 0x06003F1C RID: 16156 RVA: 0x000330E4 File Offset: 0x000312E4
			public float TimeWallDiveCooldown { get; set; }

			// Token: 0x17000ABD RID: 2749
			// (get) Token: 0x06003F1D RID: 16157 RVA: 0x000330ED File Offset: 0x000312ED
			// (set) Token: 0x06003F1E RID: 16158 RVA: 0x000330F5 File Offset: 0x000312F5
			public float TimeBlockCooldown { get; set; }

			// Token: 0x17000ABE RID: 2750
			// (get) Token: 0x06003F1F RID: 16159 RVA: 0x000330FE File Offset: 0x000312FE
			// (set) Token: 0x06003F20 RID: 16160 RVA: 0x00033106 File Offset: 0x00031306
			public float TimePostDropClimbAttackCooldown { get; set; }

			// Token: 0x17000ABF RID: 2751
			// (get) Token: 0x06003F21 RID: 16161 RVA: 0x0003310F File Offset: 0x0003130F
			// (set) Token: 0x06003F22 RID: 16162 RVA: 0x00033117 File Offset: 0x00031317
			public float TimeEnergyRechargeCooldown { get; set; }

			// Token: 0x17000AC0 RID: 2752
			// (get) Token: 0x06003F23 RID: 16163 RVA: 0x00033120 File Offset: 0x00031320
			// (set) Token: 0x06003F24 RID: 16164 RVA: 0x00033128 File Offset: 0x00031328
			public float TimeEnergyRechargeCooldownAfterLanding { get; set; }

			// Token: 0x17000AC1 RID: 2753
			// (get) Token: 0x06003F25 RID: 16165 RVA: 0x00033131 File Offset: 0x00031331
			// (set) Token: 0x06003F26 RID: 16166 RVA: 0x00033139 File Offset: 0x00031339
			public float TimeFullLanding { get; set; }

			// Token: 0x17000AC2 RID: 2754
			// (get) Token: 0x06003F27 RID: 16167 RVA: 0x00033142 File Offset: 0x00031342
			// (set) Token: 0x06003F28 RID: 16168 RVA: 0x0003314A File Offset: 0x0003134A
			public float TimeToggleThrowingModeCooldown { get; set; }

			// Token: 0x17000AC3 RID: 2755
			// (get) Token: 0x06003F29 RID: 16169 RVA: 0x00033153 File Offset: 0x00031353
			// (set) Token: 0x06003F2A RID: 16170 RVA: 0x0003315B File Offset: 0x0003135B
			public float StunResistanceValue { get; set; }

			// Token: 0x17000AC4 RID: 2756
			// (get) Token: 0x06003F2B RID: 16171 RVA: 0x00033164 File Offset: 0x00031364
			// (set) Token: 0x06003F2C RID: 16172 RVA: 0x0003316C File Offset: 0x0003136C
			public float StunResistanceActiveTime { get; set; }

			// Token: 0x17000AC5 RID: 2757
			// (get) Token: 0x06003F2D RID: 16173 RVA: 0x00033175 File Offset: 0x00031375
			// (set) Token: 0x06003F2E RID: 16174 RVA: 0x0003317D File Offset: 0x0003137D
			public float TimeStrengthBoostActive { get; set; }

			// Token: 0x17000AC6 RID: 2758
			// (get) Token: 0x06003F2F RID: 16175 RVA: 0x00033186 File Offset: 0x00031386
			// (set) Token: 0x06003F30 RID: 16176 RVA: 0x0003318E File Offset: 0x0003138E
			public float TimeSpeedBoostActive { get; set; }

			// Token: 0x17000AC7 RID: 2759
			// (get) Token: 0x06003F31 RID: 16177 RVA: 0x00033197 File Offset: 0x00031397
			// (set) Token: 0x06003F32 RID: 16178 RVA: 0x0003319F File Offset: 0x0003139F
			public float SequencialGrabDecreaseTime { get; set; }

			// Token: 0x17000AC8 RID: 2760
			// (get) Token: 0x06003F33 RID: 16179 RVA: 0x000331A8 File Offset: 0x000313A8
			// (set) Token: 0x06003F34 RID: 16180 RVA: 0x000331B0 File Offset: 0x000313B0
			public int SequencialGrabCount { get; set; }

			// Token: 0x17000AC9 RID: 2761
			// (get) Token: 0x06003F35 RID: 16181 RVA: 0x000331B9 File Offset: 0x000313B9
			// (set) Token: 0x06003F36 RID: 16182 RVA: 0x000331C1 File Offset: 0x000313C1
			public float GrabCheckInitiateTimer { get; set; }

			// Token: 0x17000ACA RID: 2762
			// (get) Token: 0x06003F37 RID: 16183 RVA: 0x000331CA File Offset: 0x000313CA
			// (set) Token: 0x06003F38 RID: 16184 RVA: 0x000331D2 File Offset: 0x000313D2
			public int GrabCheckDirection { get; set; }

			// Token: 0x17000ACB RID: 2763
			// (get) Token: 0x06003F39 RID: 16185 RVA: 0x000331DB File Offset: 0x000313DB
			// (set) Token: 0x06003F3A RID: 16186 RVA: 0x000331E3 File Offset: 0x000313E3
			public float TimeInAir { get; set; }

			// Token: 0x17000ACC RID: 2764
			// (get) Token: 0x06003F3B RID: 16187 RVA: 0x000331EC File Offset: 0x000313EC
			// (set) Token: 0x06003F3C RID: 16188 RVA: 0x000331F4 File Offset: 0x000313F4
			public float CurrentKnockbackForce { get; set; }

			// Token: 0x17000ACD RID: 2765
			// (get) Token: 0x06003F3D RID: 16189 RVA: 0x000331FD File Offset: 0x000313FD
			public bool StunResistanceReached
			{
				get
				{
					return !this.m_player.IsDead && this.StunResistanceValue > 1100f && this.StunResistanceActiveTime > 0f;
				}
			}

			// Token: 0x06003F3E RID: 16190 RVA: 0x00033228 File Offset: 0x00031428
			public void IncreaseStunResistance()
			{
				this.StunResistanceValue += 500f;
			}

			// Token: 0x06003F3F RID: 16191 RVA: 0x0003323C File Offset: 0x0003143C
			public void ActivateStunResistanceAfterHit()
			{
				this.StunResistanceActiveTime = 800f;
			}

			// Token: 0x17000ACE RID: 2766
			// (get) Token: 0x06003F40 RID: 16192 RVA: 0x00033249 File Offset: 0x00031449
			public bool EnergyRechargeOnCooldown
			{
				get
				{
					return this.TimeEnergyRechargeCooldown > 0f || this.TimeEnergyRechargeCooldownAfterLanding > 0f;
				}
			}

			// Token: 0x17000ACF RID: 2767
			// (get) Token: 0x06003F41 RID: 16193 RVA: 0x00033267 File Offset: 0x00031467
			public bool BlockOnCooldown
			{
				get
				{
					return this.TimeBlockCooldown > 0f;
				}
			}

			// Token: 0x17000AD0 RID: 2768
			// (get) Token: 0x06003F42 RID: 16194 RVA: 0x00033276 File Offset: 0x00031476
			public bool StuntOnCooldown
			{
				get
				{
					return this.TimeStuntCooldown > 0f;
				}
			}

			// Token: 0x17000AD1 RID: 2769
			// (get) Token: 0x06003F43 RID: 16195 RVA: 0x00033285 File Offset: 0x00031485
			public bool WallDivingOnCooldown
			{
				get
				{
					return this.TimeWallDiveCooldown > 0f;
				}
			}

			// Token: 0x17000AD2 RID: 2770
			// (get) Token: 0x06003F44 RID: 16196 RVA: 0x00033294 File Offset: 0x00031494
			public bool ThrowOnCooldown
			{
				get
				{
					return this.TimeThrowCooldown > 0f;
				}
			}

			// Token: 0x17000AD3 RID: 2771
			// (get) Token: 0x06003F45 RID: 16197 RVA: 0x000332A3 File Offset: 0x000314A3
			public bool ClimbJumpOnCooldown
			{
				get
				{
					return this.TimeClimbJumpCooldown > 0f;
				}
			}

			// Token: 0x17000AD4 RID: 2772
			// (get) Token: 0x06003F46 RID: 16198 RVA: 0x000332B2 File Offset: 0x000314B2
			public bool ClimbingOnCooldown
			{
				get
				{
					return this.TimeClimbingCooldown > 0f;
				}
			}

			// Token: 0x17000AD5 RID: 2773
			// (get) Token: 0x06003F47 RID: 16199 RVA: 0x000332C1 File Offset: 0x000314C1
			public bool DisableCloudCollision
			{
				get
				{
					return this.TimeDisableDownThroughCloud > 0f || this.TimeDisableDownThroughCloudWhileClimbing > 0f;
				}
			}

			// Token: 0x17000AD6 RID: 2774
			// (get) Token: 0x06003F48 RID: 16200 RVA: 0x000332DF File Offset: 0x000314DF
			public bool Dazed
			{
				get
				{
					return this.TimeDazed > 0f;
				}
			}

			// Token: 0x17000AD7 RID: 2775
			// (get) Token: 0x06003F49 RID: 16201 RVA: 0x000332EE File Offset: 0x000314EE
			public bool Staggering
			{
				get
				{
					return this.TimeStagger > 0f;
				}
			}

			// Token: 0x17000AD8 RID: 2776
			// (get) Token: 0x06003F4A RID: 16202 RVA: 0x000332FD File Offset: 0x000314FD
			public bool MeleeHit
			{
				get
				{
					return this.TimeMeleeHit > 0f;
				}
			}

			// Token: 0x17000AD9 RID: 2777
			// (get) Token: 0x06003F4B RID: 16203 RVA: 0x0003330C File Offset: 0x0003150C
			public bool MeleeMovement
			{
				get
				{
					return this.TimeMeleeMovement > 0f;
				}
			}

			// Token: 0x17000ADA RID: 2778
			// (get) Token: 0x06003F4C RID: 16204 RVA: 0x0003331B File Offset: 0x0003151B
			public bool RollDisabled
			{
				get
				{
					return this.TimeDisableRoll > 0f;
				}
			}

			// Token: 0x17000ADB RID: 2779
			// (get) Token: 0x06003F4D RID: 16205 RVA: 0x0003332A File Offset: 0x0003152A
			public bool DrawWeaponDisabled
			{
				get
				{
					return this.TimeDisableDrawWeapon > 0f;
				}
			}

			// Token: 0x17000ADC RID: 2780
			// (get) Token: 0x06003F4E RID: 16206 RVA: 0x00033339 File Offset: 0x00031539
			public bool SheatheWeaponDisabled
			{
				get
				{
					return this.TimeDisableSheatheWeapon > 0f;
				}
			}

			// Token: 0x17000ADD RID: 2781
			// (get) Token: 0x06003F4F RID: 16207 RVA: 0x00033348 File Offset: 0x00031548
			public bool ForceCrouchDuringRise
			{
				get
				{
					return this.TimeForceCrouchDuringRiseTimer > 0f;
				}
			}

			// Token: 0x17000ADE RID: 2782
			// (get) Token: 0x06003F50 RID: 16208 RVA: 0x00033357 File Offset: 0x00031557
			public bool ForceLayOnGround
			{
				get
				{
					return this.TimeForceLayOnGroundTimer > 0f;
				}
			}

			// Token: 0x17000ADF RID: 2783
			// (get) Token: 0x06003F51 RID: 16209 RVA: 0x00033366 File Offset: 0x00031566
			public bool ToggleThrowingModeCooldown
			{
				get
				{
					return this.TimeToggleThrowingModeCooldown > 0f;
				}
			}

			// Token: 0x17000AE0 RID: 2784
			// (get) Token: 0x06003F52 RID: 16210 RVA: 0x00033375 File Offset: 0x00031575
			public bool PostDropClimbAttackCooldown
			{
				get
				{
					return this.TimePostDropClimbAttackCooldown > 0f;
				}
			}

			// Token: 0x17000AE1 RID: 2785
			// (get) Token: 0x06003F53 RID: 16211 RVA: 0x00033384 File Offset: 0x00031584
			public bool GrabActionPauseCooldown
			{
				get
				{
					return this.TimeGrabActionPauseCooldown > 0f;
				}
			}

			// Token: 0x06003F54 RID: 16212 RVA: 0x0010BAF4 File Offset: 0x00109CF4
			public TimeSequenceValues(Player player)
			{
				this.TimeAutomaticGrabItemDelay = Constants.RANDOM.NextFloat(0f, 50f);
				this.m_player = player;
				this.QueuedKeyTimes = new float[30];
				for (int i = 0; i < this.QueuedKeyTimes.Length; i++)
				{
					this.QueuedKeyTimes[i] = 0f;
				}
			}

			// Token: 0x06003F55 RID: 16213 RVA: 0x00033393 File Offset: 0x00031593
			public void Dispose()
			{
				this.m_player = null;
			}

			// Token: 0x06003F56 RID: 16214 RVA: 0x0010BB58 File Offset: 0x00109D58
			public void Update(float ms, float realMs)
			{
				this.TimeTriggerSprint -= realMs;
				this.TimeTriggerJump -= realMs;
				this.TimeTriggerCoverCheck -= realMs;
				this.TimeForceCrouchDuringRiseTimer -= ms;
				this.TimeForceLayOnGroundTimer -= ms;
				this.TimeMeleeHit -= ms;
				this.TimeBlockCooldown -= ms;
				this.TimeBlock -= ms;
				this.TimeDazed -= ms;
				this.TimeJumpTimeout -= ms;
				this.TimeStagger -= ms;
				this.TimeTriggerDownThroughCloudsDelay -= ms;
				this.TimeDisableDownThroughCloud -= ms;
				this.TimeDisableDownThroughCloudWhileClimbing -= ms;
				this.TimeAutomaticGrabItemDelay -= ms;
				this.TimeMeleeMovement -= ms;
				this.TimeClimbJumpCooldown -= ms;
				this.TimeClimbingCooldown -= ms;
				this.TimeDisableRoll -= ms;
				this.TimeThrowCooldown -= ms;
				this.TimeToggleThrowingModeCooldown -= ms;
				this.TimePostDropClimbAttackCooldown -= ms;
				this.StunResistanceActiveTime -= ms;
				if (this.StunResistanceValue > 0f)
				{
					this.StunResistanceValue = Math.Min(2200f, Math.Max(0f, this.StunResistanceValue - ms));
				}
				if (this.m_player.InAir && !this.m_player.Climbing && !this.m_player.LedgeGrabbing)
				{
					this.TimeEnergyRechargeCooldownAfterLanding = 50f;
				}
				else
				{
					this.TimeEnergyRechargeCooldownAfterLanding -= ms;
				}
				if (this.TimeStrengthBoostActive > 0f)
				{
					this.TimeStrengthBoostActive -= ms;
					if (this.TimeStrengthBoostActive <= 0f || this.m_player.IsDead)
					{
						this.m_player.StrengthBoostDeactivate();
					}
				}
				if (this.TimeSpeedBoostActive > 0f)
				{
					this.TimeSpeedBoostActive -= ms;
					if (this.TimeSpeedBoostActive <= 0f || this.m_player.IsDead)
					{
						this.m_player.SpeedBoostDeactivate();
					}
				}
				if (this.m_player.CurrentAction != PlayerAction.Block)
				{
					if (!this.m_player.Diving & !this.m_player.Rolling)
					{
						this.TimeStuntCooldown -= ms;
						if (this.TimeStuntCooldown < 0f)
						{
							this.TimeWallDiveCooldown -= ms;
						}
					}
					this.TimeEnergyRechargeCooldown -= ms;
				}
				this.TimeDisableDrawWeapon -= ms;
				this.TimeDisableSheatheWeapon -= ms;
				if (this.m_player.Diving | this.m_player.Rolling)
				{
					this.TimeStuntCooldown = 500f;
				}
				if (this.m_player.InAir)
				{
					this.TimeInAir += ms;
				}
				else
				{
					this.TimeInAir = 0f;
				}
				if (this.m_player.GameOwner != GameOwnerEnum.Client && this.m_player.RocketRideProjectileWorldID == 0)
				{
					if (this.m_player.FullLanding && this.m_player.StandingOnGround && this.m_player.HaveTouchedGroundSinceLastInAir)
					{
						if (this.TimeFullLanding <= 0f)
						{
							this.m_player.FullLanding = false;
						}
						else
						{
							this.TimeFullLanding -= ms;
							if (this.TimeFullLanding <= 0f)
							{
								this.m_player.FullLanding = false;
								this.m_player.CurrentAction = PlayerAction.Idle;
								this.m_player.ImportantUpdate = true;
							}
						}
					}
					if (this.GrabCheckInitiateTimer > 0f)
					{
						this.GrabCheckInitiateTimer -= realMs;
						if (this.m_player.CanStartGrab())
						{
							this.m_player.StartGrabTelegraphing();
						}
					}
					else if (this.m_player.GrabTelegraphing && this.TimeGrabTelegraphing > 0f)
					{
						this.TimeGrabTelegraphing -= ms;
						if (this.TimeGrabTelegraphing <= 0f)
						{
							this.m_player.StartGrabCharging();
						}
					}
					else
					{
						this.TimeGrabTelegraphing = 0f;
					}
					if (this.m_player.GrabCharging)
					{
						this.TimeGrabCharging += ms;
						if (this.TimeGrabCharging >= 340f)
						{
							this.m_player.StopGrabbingChargeSequence(true);
						}
					}
					else
					{
						this.TimeGrabCharging = 0f;
					}
					this.TimeGrabActionPauseCooldown -= ms;
					this.TimeGrabTurnCooldown -= ms;
					this.TimeGrabCooldown -= ms;
					if (this.m_player.IsHoldingPlayerInGrab)
					{
						this.TimeGrabHold += ms;
					}
					if (this.SequencialGrabCount > 0 && !this.m_player.IsGrabbedByPlayer)
					{
						this.SequencialGrabDecreaseTime -= ms;
						if (this.SequencialGrabDecreaseTime <= 0f)
						{
							this.SequencialGrabCount--;
							if (this.SequencialGrabCount > 0)
							{
								this.SequencialGrabDecreaseTime = 425f;
							}
						}
					}
					if (this.TimeGrabImmunityPostTime > 0f)
					{
						if (this.m_player.StandingOnGround)
						{
							this.TimeGrabImmunityPostTime -= ms;
							if (this.TimeGrabImmunityPostTime <= 0f)
							{
								this.m_player.GrabImmunity = false;
							}
						}
					}
					else if (this.m_player.GrabImmunity)
					{
						this.TimeGrabImmunityPostTime = 650f;
					}
				}
				if (this.CurrentKnockbackForce > 0f)
				{
					this.CurrentKnockbackForce -= ms * 0.025f;
					if (this.CurrentKnockbackForce < 0f)
					{
						this.CurrentKnockbackForce = 0f;
					}
				}
				if (this.TimeManualAimAirDelay > 0f)
				{
					this.TimeManualAimAirDelay -= realMs;
					if (this.m_player.InAir && this.TimeManualAimAirDelay <= 0f && this.m_player.CurrentAction == PlayerAction.ManualAim)
					{
						this.m_player.CurrentAction = PlayerAction.Idle;
					}
				}
				if ((this.m_player.GameOwner != GameOwnerEnum.Client || this.m_player.HasLocalControl) && this.TimeTriggerStopSprint > 0f)
				{
					this.TimeTriggerStopSprint -= ms;
					if (this.TimeTriggerStopSprint <= 0f)
					{
						this.TimeTriggerStopSprint = 0f;
						this.m_player.Sprinting = false;
					}
				}
			}

			// Token: 0x040014E6 RID: 5350
			public const float TIMEC_TRIGGER_SPRINT_DELAY = 180f;

			// Token: 0x040014E7 RID: 5351
			public const float TIMEC_TRIGGER_STOP_SPRINT_DELAY = 100f;

			// Token: 0x040014E8 RID: 5352
			public const float TIMEC_TRIGGER_JUMP_DELAY = 65f;

			// Token: 0x040014E9 RID: 5353
			public const float TIMEC_JUMP_TIMEOUT = 100f;

			// Token: 0x040014EA RID: 5354
			public const float TIMEC_LAY_ON_GROUND = 250f;

			// Token: 0x040014EB RID: 5355
			public const float TIMEC_RAISE = 100f;

			// Token: 0x040014EC RID: 5356
			public const float TIMEC_TRIGGER_DOWN_THROUGH_CLOUDS_DELAY = 200f;

			// Token: 0x040014ED RID: 5357
			public const float TIMEC_DISABLE_DOWN_THROUGH_CLOUD = 250f;

			// Token: 0x040014EE RID: 5358
			public const float TIMEC_TRIGGER_COVER_CHECK_DELAY = 100f;

			// Token: 0x040014EF RID: 5359
			public const float TIMEC_AUTOMATIC_GRAB_ITEM_DELAY = 60f;

			// Token: 0x040014F0 RID: 5360
			public const float TIMEC_SWAP_WEAPON_DELAY = 150f;

			// Token: 0x040014F1 RID: 5361
			public const float TIMEC_FULL_LANDING = 350f;

			// Token: 0x040014F2 RID: 5362
			public const float TIMEC_FULL_LANDING_JUMPING = 600f;

			// Token: 0x040014F3 RID: 5363
			public const float TIMEC_CLIMBING_DROP = 300f;

			// Token: 0x040014F4 RID: 5364
			public const float TIMEC_GRAB_COOLDOWN = 1105f;

			// Token: 0x040014F5 RID: 5365
			public const float TIMEC_GRAB_ACTION_TIME_COOLDOWN = 170f;

			// Token: 0x040014F6 RID: 5366
			public const float TIMEC_GRAB_TELEGRAPHING = 300f;

			// Token: 0x040014F7 RID: 5367
			public const float TIMEC_GRAB_CHARGING = 340f;

			// Token: 0x040014F8 RID: 5368
			public const float TIMEC_GRAB_MIN_CHARGING_TIME = 100f;

			// Token: 0x040014F9 RID: 5369
			public const float TIMEC_GRAB_IMMUNITY_POST_TIME = 650f;

			// Token: 0x040014FA RID: 5370
			public const float TIMEC_SEQUENCIAL_GRAB_DECREASE_TIME = 425f;

			// Token: 0x040014FB RID: 5371
			public const float TIMEC_TOGGLE_THROWING_MODE = 400f;

			// Token: 0x040014FC RID: 5372
			public const float TIMEC_MANUAL_AIM_AIR_DELAY = 500f;

			// Token: 0x040014FD RID: 5373
			public const float TIMEC_DISABLE_ACTIONS_AFTER_MELEE_HIT_1 = 80f;

			// Token: 0x040014FE RID: 5374
			public const float TIMEC_DISABLE_ACTIONS_AFTER_MELEE_HIT_2 = 145f;

			// Token: 0x040014FF RID: 5375
			public const float TIMEC_DISABLE_ACTIONS_AFTER_MELEE_HIT_3 = 210f;

			// Token: 0x04001500 RID: 5376
			public const float TIMEC_THROW_COOLDOWN = 425f;

			// Token: 0x04001501 RID: 5377
			public const float TIMEC_STUNT_COOLDOWN = 500f;

			// Token: 0x04001502 RID: 5378
			public const float TIMEC_STUNT_COOLDOWN_EXTRA_WALL_DIVING_PENALTY = 500f;

			// Token: 0x04001503 RID: 5379
			public const float TIMEC_STUNT_JUMP_COOLDOWN = 1000f;

			// Token: 0x04001504 RID: 5380
			internal bool SyncServerTimeBlockCooldown;

			// Token: 0x04001505 RID: 5381
			private Player m_player;
		}
	}
}
